#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut
)]
#![feature(c_variadic, core_intrinsics, extern_types)]
extern crate libgeling;
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type LGL;
    static mut stdin: *mut FILE;
    static mut stdout: *mut FILE;
    fn fclose(__stream: *mut FILE) -> libc::c_int;
    fn fflush(__stream: *mut FILE) -> libc::c_int;
    fn fopen(_: *const libc::c_char, _: *const libc::c_char) -> *mut FILE;
    fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;
    fn sprintf(_: *mut libc::c_char, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn vfprintf(_: *mut FILE, _: *const libc::c_char, _: ::core::ffi::VaList) -> libc::c_int;
    fn fscanf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn getc(__stream: *mut FILE) -> libc::c_int;
    fn fputc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
    fn fputs(__s: *const libc::c_char, __stream: *mut FILE) -> libc::c_int;
    fn pclose(__stream: *mut FILE) -> libc::c_int;
    fn popen(__command: *const libc::c_char, __modes: *const libc::c_char) -> *mut FILE;
    fn lglsetime(_: *mut LGL, time: Option<unsafe extern "C" fn() -> libc::c_double>);
    fn lglsetmsglock(
        _: *mut LGL,
        lock_0: Option<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
        unlock: Option<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
        _: *mut libc::c_void,
    );
    fn lglsetconsumecls(
        _: *mut LGL,
        consume: Option<
            unsafe extern "C" fn(*mut libc::c_void, *mut *mut libc::c_int, *mut libc::c_int) -> (),
        >,
        _: *mut libc::c_void,
    );
    fn lglsetconsumeunits(
        _: *mut LGL,
        consume: Option<
            unsafe extern "C" fn(
                *mut libc::c_void,
                *mut *mut libc::c_int,
                *mut *mut libc::c_int,
            ) -> (),
        >,
        _: *mut libc::c_void,
    );
    fn lglsetproduceunit(
        _: *mut LGL,
        produce: Option<unsafe extern "C" fn(*mut libc::c_void, libc::c_int) -> ()>,
        _: *mut libc::c_void,
    );
    fn lglseterm(
        _: *mut LGL,
        term_0: Option<unsafe extern "C" fn(*mut libc::c_void) -> libc::c_int>,
        _: *mut libc::c_void,
    );
    fn lglprocesstime() -> libc::c_double;
    fn lglnvars(_: *mut LGL) -> libc::c_int;
    fn lglbytes(_: *mut LGL) -> size_t;
    fn lglgetprops(_: *mut LGL) -> int64_t;
    fn lglgetdecs(_: *mut LGL) -> int64_t;
    fn lglgetconfs(_: *mut LGL) -> int64_t;
    fn lglstats(_: *mut LGL);
    fn lglookahead(_: *mut LGL) -> libc::c_int;
    fn lglreducecache(_: *mut LGL);
    fn lglinconsistent(_: *mut LGL) -> libc::c_int;
    fn lglderef(_: *mut LGL, lit: libc::c_int) -> libc::c_int;
    fn lglsimp(_: *mut LGL, iterations: libc::c_int) -> libc::c_int;
    fn lglsat(_: *mut LGL) -> libc::c_int;
    fn lgladd(_: *mut LGL, lit: libc::c_int);
    fn lgldefopt(_: *mut LGL, _: *const libc::c_char) -> libc::c_int;
    fn lglgetopt(_: *mut LGL, _: *const libc::c_char) -> libc::c_int;
    fn lglsetopt(_: *mut LGL, _: *const libc::c_char, _: libc::c_int);
    fn lglsetprefix(_: *mut LGL, _: *const libc::c_char);
    fn lglbnr(name: *const libc::c_char, prefix: *const libc::c_char, file_0: *mut FILE);
    fn lglversion() -> *const libc::c_char;
    fn lgljoin(parent: *mut LGL, child: *mut LGL) -> libc::c_int;
    fn lglfork(parent: *mut LGL) -> *mut LGL;
    fn lglclone(_: *mut LGL) -> *mut LGL;
    fn lglminit(mem: *mut libc::c_void, _: lglalloc, _: lglrealloc, _: lgldealloc) -> *mut LGL;
    fn lglrelease(_: *mut LGL);
    fn strtol(_: *const libc::c_char, _: *mut *mut libc::c_char, _: libc::c_int) -> libc::c_long;
    fn strtoll(
        _: *const libc::c_char,
        _: *mut *mut libc::c_char,
        _: libc::c_int,
    ) -> libc::c_longlong;
    fn exit(_: libc::c_int) -> !;
    fn abort() -> !;
    fn free(_: *mut libc::c_void);
    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn system(__command: *const libc::c_char) -> libc::c_int;
    fn qsort(__base: *mut libc::c_void, __nmemb: size_t, __size: size_t, __compar: __compar_fn_t);
    fn __ctype_b_loc() -> *mut *const libc::c_ushort;
    fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: Option<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>,
        __arg: *mut libc::c_void,
    ) -> libc::c_int;
    fn pthread_join(__th: pthread_t, __thread_return: *mut *mut libc::c_void) -> libc::c_int;
    fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> libc::c_int;
    fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
    fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
    fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> libc::c_int;
    fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> libc::c_int;
    fn pthread_cond_wait(__cond: *mut pthread_cond_t, __mutex: *mut pthread_mutex_t)
        -> libc::c_int;
    fn signal(__sig: libc::c_int, __handler: __sighandler_t) -> __sighandler_t;
    fn raise(__sig: libc::c_int) -> libc::c_int;
    fn memset(_: *mut libc::c_void, _: libc::c_int, _: libc::c_ulong) -> *mut libc::c_void;
    fn strcpy(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn stat(__file: *const libc::c_char, __buf: *mut stat) -> libc::c_int;
    fn gettimeofday(__tv: *mut timeval, __tz: *mut libc::c_void) -> libc::c_int;
    fn sysconf(__name: libc::c_int) -> libc::c_long;
}
pub type __builtin_va_list = [__va_list_tag; 1];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __va_list_tag<'h0,'h1> {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: &'h0 (libc::c_void),
    // 141: overflow_arg_area: typeof(overflow_arg_area) = *mut {g356} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 141: overflow_arg_area:   g356 = UNIQUE | NON_NULL, (empty)
    pub reg_save_area: &'h1 (libc::c_void),
    // 142: reg_save_area: typeof(reg_save_area) = *mut {g357} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 142: reg_save_area:   g357 = UNIQUE | NON_NULL, (empty)
}
pub type size_t = libc::c_ulong;
pub type __gnuc_va_list = __builtin_va_list;
pub type __int64_t = libc::c_long;
pub type __dev_t = libc::c_ulong;
pub type __uid_t = libc::c_uint;
pub type __gid_t = libc::c_uint;
pub type __ino_t = libc::c_ulong;
pub type __mode_t = libc::c_uint;
pub type __nlink_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __suseconds_t = libc::c_long;
pub type __blksize_t = libc::c_long;
pub type __blkcnt_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    // 164: _IO_read_ptr: typeof(_IO_read_ptr) = *mut {g358} i8
    // 164: _IO_read_ptr:   g358 = UNIQUE | NON_NULL, FIXED
    pub _IO_read_end: *mut libc::c_char,
    // 165: _IO_read_end: typeof(_IO_read_end) = *mut {g359} i8
    // 165: _IO_read_end:   g359 = UNIQUE | NON_NULL, FIXED
    pub _IO_read_base: *mut libc::c_char,
    // 166: _IO_read_base: typeof(_IO_read_base) = *mut {g360} i8
    // 166: _IO_read_base:   g360 = UNIQUE | NON_NULL, FIXED
    pub _IO_write_base: *mut libc::c_char,
    // 167: _IO_write_base: typeof(_IO_write_base) = *mut {g361} i8
    // 167: _IO_write_base:   g361 = UNIQUE | NON_NULL, FIXED
    pub _IO_write_ptr: *mut libc::c_char,
    // 168: _IO_write_ptr: typeof(_IO_write_ptr) = *mut {g362} i8
    // 168: _IO_write_ptr:   g362 = UNIQUE | NON_NULL, FIXED
    pub _IO_write_end: *mut libc::c_char,
    // 169: _IO_write_end: typeof(_IO_write_end) = *mut {g363} i8
    // 169: _IO_write_end:   g363 = UNIQUE | NON_NULL, FIXED
    pub _IO_buf_base: *mut libc::c_char,
    // 170: _IO_buf_base: typeof(_IO_buf_base) = *mut {g364} i8
    // 170: _IO_buf_base:   g364 = UNIQUE | NON_NULL, FIXED
    pub _IO_buf_end: *mut libc::c_char,
    // 171: _IO_buf_end: typeof(_IO_buf_end) = *mut {g365} i8
    // 171: _IO_buf_end:   g365 = UNIQUE | NON_NULL, FIXED
    pub _IO_save_base: *mut libc::c_char,
    // 172: _IO_save_base: typeof(_IO_save_base) = *mut {g366} i8
    // 172: _IO_save_base:   g366 = UNIQUE | NON_NULL, FIXED
    pub _IO_backup_base: *mut libc::c_char,
    // 173: _IO_backup_base: typeof(_IO_backup_base) = *mut {g367} i8
    // 173: _IO_backup_base:   g367 = UNIQUE | NON_NULL, FIXED
    pub _IO_save_end: *mut libc::c_char,
    // 174: _IO_save_end: typeof(_IO_save_end) = *mut {g368} i8
    // 174: _IO_save_end:   g368 = UNIQUE | NON_NULL, FIXED
    pub _markers: *mut _IO_marker,
    // 175: _markers: typeof(_markers) = *mut {g369} _IO_marker
    // 175: _markers:   g369 = UNIQUE | NON_NULL, FIXED
    pub _chain: *mut _IO_FILE,
    // 176: _chain: typeof(_chain) = *mut {g370} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 176: _chain:   g370 = UNIQUE | NON_NULL, FIXED
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    // 183: _lock: typeof(_lock) = *mut {g371} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 183: _lock:   g371 = UNIQUE | NON_NULL, FIXED
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    // 185: _codecvt: typeof(_codecvt) = *mut {g372} _IO_codecvt
    // 185: _codecvt:   g372 = UNIQUE | NON_NULL, FIXED
    pub _wide_data: *mut _IO_wide_data,
    // 186: _wide_data: typeof(_wide_data) = *mut {g373} _IO_wide_data
    // 186: _wide_data:   g373 = UNIQUE | NON_NULL, FIXED
    pub _freeres_list: *mut _IO_FILE,
    // 187: _freeres_list: typeof(_freeres_list) = *mut {g374} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 187: _freeres_list:   g374 = UNIQUE | NON_NULL, FIXED
    pub _freeres_buf: *mut libc::c_void,
    // 188: _freeres_buf: typeof(_freeres_buf) = *mut {g375} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 188: _freeres_buf:   g375 = UNIQUE | NON_NULL, FIXED
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type va_list = __gnuc_va_list;
pub type int64_t = __int64_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union __atomic_wide_counter {
    pub __value64: libc::c_ulonglong,
    pub __value32: C2RustUnnamed,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed {
    pub __low: libc::c_uint,
    pub __high: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    // 224: __prev: typeof(__prev) = *mut {g376} DefId(0:684 ~ treengeling[2d04]::__pthread_internal_list)
    // 224: __prev:   g376 = UNIQUE | NON_NULL, FIXED
    pub __next: *mut __pthread_internal_list,
    // 225: __next: typeof(__next) = *mut {g377} DefId(0:684 ~ treengeling[2d04]::__pthread_internal_list)
    // 225: __next:   g377 = UNIQUE | NON_NULL, FIXED
}
pub type __pthread_list_t = __pthread_internal_list;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_mutex_s {
    pub __lock: libc::c_int,
    pub __count: libc::c_uint,
    pub __owner: libc::c_int,
    pub __nusers: libc::c_uint,
    pub __kind: libc::c_int,
    pub __spins: libc::c_short,
    pub __elision: libc::c_short,
    pub __list: __pthread_list_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [libc::c_uint; 2],
    pub __g_size: [libc::c_uint; 2],
    pub __g1_orig_size: libc::c_uint,
    pub __wrefs: libc::c_uint,
    pub __g_signals: [libc::c_uint; 2],
}
pub type pthread_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_mutexattr_t {
    pub __size: [libc::c_char; 4],
    pub __align: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_condattr_t {
    pub __size: [libc::c_char; 4],
    pub __align: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_attr_t {
    pub __size: [libc::c_char; 56],
    pub __align: libc::c_long,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [libc::c_char; 40],
    pub __align: libc::c_long,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [libc::c_char; 48],
    pub __align: libc::c_longlong,
}
pub type __compar_fn_t =
    Option<unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> libc::c_int>;
pub type lglalloc = Option<unsafe extern "C" fn(*mut libc::c_void, size_t) -> *mut libc::c_void>;
pub type lgldealloc =
    Option<unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void, size_t) -> ()>;
pub type lglrealloc = Option<
    unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void, size_t, size_t) -> *mut libc::c_void,
>;
pub type C2RustUnnamed_0 = libc::c_uint;
pub const _ISalnum: C2RustUnnamed_0 = 8;
pub const _ISpunct: C2RustUnnamed_0 = 4;
pub const _IScntrl: C2RustUnnamed_0 = 2;
pub const _ISblank: C2RustUnnamed_0 = 1;
pub const _ISgraph: C2RustUnnamed_0 = 32768;
pub const _ISprint: C2RustUnnamed_0 = 16384;
pub const _ISspace: C2RustUnnamed_0 = 8192;
pub const _ISxdigit: C2RustUnnamed_0 = 4096;
pub const _ISdigit: C2RustUnnamed_0 = 2048;
pub const _ISalpha: C2RustUnnamed_0 = 1024;
pub const _ISlower: C2RustUnnamed_0 = 512;
pub const _ISupper: C2RustUnnamed_0 = 256;
pub type __sighandler_t = Option<unsafe extern "C" fn(libc::c_int) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: libc::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3],
}
pub type C2RustUnnamed_1 = libc::c_uint;
pub const _SC_SIGSTKSZ: C2RustUnnamed_1 = 250;
pub const _SC_MINSIGSTKSZ: C2RustUnnamed_1 = 249;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: C2RustUnnamed_1 = 248;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: C2RustUnnamed_1 = 247;
pub const _SC_XOPEN_STREAMS: C2RustUnnamed_1 = 246;
pub const _SC_TRACE_USER_EVENT_MAX: C2RustUnnamed_1 = 245;
pub const _SC_TRACE_SYS_MAX: C2RustUnnamed_1 = 244;
pub const _SC_TRACE_NAME_MAX: C2RustUnnamed_1 = 243;
pub const _SC_TRACE_EVENT_NAME_MAX: C2RustUnnamed_1 = 242;
pub const _SC_SS_REPL_MAX: C2RustUnnamed_1 = 241;
pub const _SC_V7_LPBIG_OFFBIG: C2RustUnnamed_1 = 240;
pub const _SC_V7_LP64_OFF64: C2RustUnnamed_1 = 239;
pub const _SC_V7_ILP32_OFFBIG: C2RustUnnamed_1 = 238;
pub const _SC_V7_ILP32_OFF32: C2RustUnnamed_1 = 237;
pub const _SC_RAW_SOCKETS: C2RustUnnamed_1 = 236;
pub const _SC_IPV6: C2RustUnnamed_1 = 235;
pub const _SC_LEVEL4_CACHE_LINESIZE: C2RustUnnamed_1 = 199;
pub const _SC_LEVEL4_CACHE_ASSOC: C2RustUnnamed_1 = 198;
pub const _SC_LEVEL4_CACHE_SIZE: C2RustUnnamed_1 = 197;
pub const _SC_LEVEL3_CACHE_LINESIZE: C2RustUnnamed_1 = 196;
pub const _SC_LEVEL3_CACHE_ASSOC: C2RustUnnamed_1 = 195;
pub const _SC_LEVEL3_CACHE_SIZE: C2RustUnnamed_1 = 194;
pub const _SC_LEVEL2_CACHE_LINESIZE: C2RustUnnamed_1 = 193;
pub const _SC_LEVEL2_CACHE_ASSOC: C2RustUnnamed_1 = 192;
pub const _SC_LEVEL2_CACHE_SIZE: C2RustUnnamed_1 = 191;
pub const _SC_LEVEL1_DCACHE_LINESIZE: C2RustUnnamed_1 = 190;
pub const _SC_LEVEL1_DCACHE_ASSOC: C2RustUnnamed_1 = 189;
pub const _SC_LEVEL1_DCACHE_SIZE: C2RustUnnamed_1 = 188;
pub const _SC_LEVEL1_ICACHE_LINESIZE: C2RustUnnamed_1 = 187;
pub const _SC_LEVEL1_ICACHE_ASSOC: C2RustUnnamed_1 = 186;
pub const _SC_LEVEL1_ICACHE_SIZE: C2RustUnnamed_1 = 185;
pub const _SC_TRACE_LOG: C2RustUnnamed_1 = 184;
pub const _SC_TRACE_INHERIT: C2RustUnnamed_1 = 183;
pub const _SC_TRACE_EVENT_FILTER: C2RustUnnamed_1 = 182;
pub const _SC_TRACE: C2RustUnnamed_1 = 181;
pub const _SC_HOST_NAME_MAX: C2RustUnnamed_1 = 180;
pub const _SC_V6_LPBIG_OFFBIG: C2RustUnnamed_1 = 179;
pub const _SC_V6_LP64_OFF64: C2RustUnnamed_1 = 178;
pub const _SC_V6_ILP32_OFFBIG: C2RustUnnamed_1 = 177;
pub const _SC_V6_ILP32_OFF32: C2RustUnnamed_1 = 176;
pub const _SC_2_PBS_CHECKPOINT: C2RustUnnamed_1 = 175;
pub const _SC_STREAMS: C2RustUnnamed_1 = 174;
pub const _SC_SYMLOOP_MAX: C2RustUnnamed_1 = 173;
pub const _SC_2_PBS_TRACK: C2RustUnnamed_1 = 172;
pub const _SC_2_PBS_MESSAGE: C2RustUnnamed_1 = 171;
pub const _SC_2_PBS_LOCATE: C2RustUnnamed_1 = 170;
pub const _SC_2_PBS_ACCOUNTING: C2RustUnnamed_1 = 169;
pub const _SC_2_PBS: C2RustUnnamed_1 = 168;
pub const _SC_USER_GROUPS_R: C2RustUnnamed_1 = 167;
pub const _SC_USER_GROUPS: C2RustUnnamed_1 = 166;
pub const _SC_TYPED_MEMORY_OBJECTS: C2RustUnnamed_1 = 165;
pub const _SC_TIMEOUTS: C2RustUnnamed_1 = 164;
pub const _SC_SYSTEM_DATABASE_R: C2RustUnnamed_1 = 163;
pub const _SC_SYSTEM_DATABASE: C2RustUnnamed_1 = 162;
pub const _SC_THREAD_SPORADIC_SERVER: C2RustUnnamed_1 = 161;
pub const _SC_SPORADIC_SERVER: C2RustUnnamed_1 = 160;
pub const _SC_SPAWN: C2RustUnnamed_1 = 159;
pub const _SC_SIGNALS: C2RustUnnamed_1 = 158;
pub const _SC_SHELL: C2RustUnnamed_1 = 157;
pub const _SC_REGEX_VERSION: C2RustUnnamed_1 = 156;
pub const _SC_REGEXP: C2RustUnnamed_1 = 155;
pub const _SC_SPIN_LOCKS: C2RustUnnamed_1 = 154;
pub const _SC_READER_WRITER_LOCKS: C2RustUnnamed_1 = 153;
pub const _SC_NETWORKING: C2RustUnnamed_1 = 152;
pub const _SC_SINGLE_PROCESS: C2RustUnnamed_1 = 151;
pub const _SC_MULTI_PROCESS: C2RustUnnamed_1 = 150;
pub const _SC_MONOTONIC_CLOCK: C2RustUnnamed_1 = 149;
pub const _SC_FILE_SYSTEM: C2RustUnnamed_1 = 148;
pub const _SC_FILE_LOCKING: C2RustUnnamed_1 = 147;
pub const _SC_FILE_ATTRIBUTES: C2RustUnnamed_1 = 146;
pub const _SC_PIPE: C2RustUnnamed_1 = 145;
pub const _SC_FIFO: C2RustUnnamed_1 = 144;
pub const _SC_FD_MGMT: C2RustUnnamed_1 = 143;
pub const _SC_DEVICE_SPECIFIC_R: C2RustUnnamed_1 = 142;
pub const _SC_DEVICE_SPECIFIC: C2RustUnnamed_1 = 141;
pub const _SC_DEVICE_IO: C2RustUnnamed_1 = 140;
pub const _SC_THREAD_CPUTIME: C2RustUnnamed_1 = 139;
pub const _SC_CPUTIME: C2RustUnnamed_1 = 138;
pub const _SC_CLOCK_SELECTION: C2RustUnnamed_1 = 137;
pub const _SC_C_LANG_SUPPORT_R: C2RustUnnamed_1 = 136;
pub const _SC_C_LANG_SUPPORT: C2RustUnnamed_1 = 135;
pub const _SC_BASE: C2RustUnnamed_1 = 134;
pub const _SC_BARRIERS: C2RustUnnamed_1 = 133;
pub const _SC_ADVISORY_INFO: C2RustUnnamed_1 = 132;
pub const _SC_XOPEN_REALTIME_THREADS: C2RustUnnamed_1 = 131;
pub const _SC_XOPEN_REALTIME: C2RustUnnamed_1 = 130;
pub const _SC_XOPEN_LEGACY: C2RustUnnamed_1 = 129;
pub const _SC_XBS5_LPBIG_OFFBIG: C2RustUnnamed_1 = 128;
pub const _SC_XBS5_LP64_OFF64: C2RustUnnamed_1 = 127;
pub const _SC_XBS5_ILP32_OFFBIG: C2RustUnnamed_1 = 126;
pub const _SC_XBS5_ILP32_OFF32: C2RustUnnamed_1 = 125;
pub const _SC_NL_TEXTMAX: C2RustUnnamed_1 = 124;
pub const _SC_NL_SETMAX: C2RustUnnamed_1 = 123;
pub const _SC_NL_NMAX: C2RustUnnamed_1 = 122;
pub const _SC_NL_MSGMAX: C2RustUnnamed_1 = 121;
pub const _SC_NL_LANGMAX: C2RustUnnamed_1 = 120;
pub const _SC_NL_ARGMAX: C2RustUnnamed_1 = 119;
pub const _SC_USHRT_MAX: C2RustUnnamed_1 = 118;
pub const _SC_ULONG_MAX: C2RustUnnamed_1 = 117;
pub const _SC_UINT_MAX: C2RustUnnamed_1 = 116;
pub const _SC_UCHAR_MAX: C2RustUnnamed_1 = 115;
pub const _SC_SHRT_MIN: C2RustUnnamed_1 = 114;
pub const _SC_SHRT_MAX: C2RustUnnamed_1 = 113;
pub const _SC_SCHAR_MIN: C2RustUnnamed_1 = 112;
pub const _SC_SCHAR_MAX: C2RustUnnamed_1 = 111;
pub const _SC_SSIZE_MAX: C2RustUnnamed_1 = 110;
pub const _SC_NZERO: C2RustUnnamed_1 = 109;
pub const _SC_MB_LEN_MAX: C2RustUnnamed_1 = 108;
pub const _SC_WORD_BIT: C2RustUnnamed_1 = 107;
pub const _SC_LONG_BIT: C2RustUnnamed_1 = 106;
pub const _SC_INT_MIN: C2RustUnnamed_1 = 105;
pub const _SC_INT_MAX: C2RustUnnamed_1 = 104;
pub const _SC_CHAR_MIN: C2RustUnnamed_1 = 103;
pub const _SC_CHAR_MAX: C2RustUnnamed_1 = 102;
pub const _SC_CHAR_BIT: C2RustUnnamed_1 = 101;
pub const _SC_XOPEN_XPG4: C2RustUnnamed_1 = 100;
pub const _SC_XOPEN_XPG3: C2RustUnnamed_1 = 99;
pub const _SC_XOPEN_XPG2: C2RustUnnamed_1 = 98;
pub const _SC_2_UPE: C2RustUnnamed_1 = 97;
pub const _SC_2_C_VERSION: C2RustUnnamed_1 = 96;
pub const _SC_2_CHAR_TERM: C2RustUnnamed_1 = 95;
pub const _SC_XOPEN_SHM: C2RustUnnamed_1 = 94;
pub const _SC_XOPEN_ENH_I18N: C2RustUnnamed_1 = 93;
pub const _SC_XOPEN_CRYPT: C2RustUnnamed_1 = 92;
pub const _SC_XOPEN_UNIX: C2RustUnnamed_1 = 91;
pub const _SC_XOPEN_XCU_VERSION: C2RustUnnamed_1 = 90;
pub const _SC_XOPEN_VERSION: C2RustUnnamed_1 = 89;
pub const _SC_PASS_MAX: C2RustUnnamed_1 = 88;
pub const _SC_ATEXIT_MAX: C2RustUnnamed_1 = 87;
pub const _SC_AVPHYS_PAGES: C2RustUnnamed_1 = 86;
pub const _SC_PHYS_PAGES: C2RustUnnamed_1 = 85;
pub const _SC_NPROCESSORS_ONLN: C2RustUnnamed_1 = 84;
pub const _SC_NPROCESSORS_CONF: C2RustUnnamed_1 = 83;
pub const _SC_THREAD_PROCESS_SHARED: C2RustUnnamed_1 = 82;
pub const _SC_THREAD_PRIO_PROTECT: C2RustUnnamed_1 = 81;
pub const _SC_THREAD_PRIO_INHERIT: C2RustUnnamed_1 = 80;
pub const _SC_THREAD_PRIORITY_SCHEDULING: C2RustUnnamed_1 = 79;
pub const _SC_THREAD_ATTR_STACKSIZE: C2RustUnnamed_1 = 78;
pub const _SC_THREAD_ATTR_STACKADDR: C2RustUnnamed_1 = 77;
pub const _SC_THREAD_THREADS_MAX: C2RustUnnamed_1 = 76;
pub const _SC_THREAD_STACK_MIN: C2RustUnnamed_1 = 75;
pub const _SC_THREAD_KEYS_MAX: C2RustUnnamed_1 = 74;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: C2RustUnnamed_1 = 73;
pub const _SC_TTY_NAME_MAX: C2RustUnnamed_1 = 72;
pub const _SC_LOGIN_NAME_MAX: C2RustUnnamed_1 = 71;
pub const _SC_GETPW_R_SIZE_MAX: C2RustUnnamed_1 = 70;
pub const _SC_GETGR_R_SIZE_MAX: C2RustUnnamed_1 = 69;
pub const _SC_THREAD_SAFE_FUNCTIONS: C2RustUnnamed_1 = 68;
pub const _SC_THREADS: C2RustUnnamed_1 = 67;
pub const _SC_T_IOV_MAX: C2RustUnnamed_1 = 66;
pub const _SC_PII_OSI_M: C2RustUnnamed_1 = 65;
pub const _SC_PII_OSI_CLTS: C2RustUnnamed_1 = 64;
pub const _SC_PII_OSI_COTS: C2RustUnnamed_1 = 63;
pub const _SC_PII_INTERNET_DGRAM: C2RustUnnamed_1 = 62;
pub const _SC_PII_INTERNET_STREAM: C2RustUnnamed_1 = 61;
pub const _SC_IOV_MAX: C2RustUnnamed_1 = 60;
pub const _SC_UIO_MAXIOV: C2RustUnnamed_1 = 60;
pub const _SC_SELECT: C2RustUnnamed_1 = 59;
pub const _SC_POLL: C2RustUnnamed_1 = 58;
pub const _SC_PII_OSI: C2RustUnnamed_1 = 57;
pub const _SC_PII_INTERNET: C2RustUnnamed_1 = 56;
pub const _SC_PII_SOCKET: C2RustUnnamed_1 = 55;
pub const _SC_PII_XTI: C2RustUnnamed_1 = 54;
pub const _SC_PII: C2RustUnnamed_1 = 53;
pub const _SC_2_LOCALEDEF: C2RustUnnamed_1 = 52;
pub const _SC_2_SW_DEV: C2RustUnnamed_1 = 51;
pub const _SC_2_FORT_RUN: C2RustUnnamed_1 = 50;
pub const _SC_2_FORT_DEV: C2RustUnnamed_1 = 49;
pub const _SC_2_C_DEV: C2RustUnnamed_1 = 48;
pub const _SC_2_C_BIND: C2RustUnnamed_1 = 47;
pub const _SC_2_VERSION: C2RustUnnamed_1 = 46;
pub const _SC_CHARCLASS_NAME_MAX: C2RustUnnamed_1 = 45;
pub const _SC_RE_DUP_MAX: C2RustUnnamed_1 = 44;
pub const _SC_LINE_MAX: C2RustUnnamed_1 = 43;
pub const _SC_EXPR_NEST_MAX: C2RustUnnamed_1 = 42;
pub const _SC_EQUIV_CLASS_MAX: C2RustUnnamed_1 = 41;
pub const _SC_COLL_WEIGHTS_MAX: C2RustUnnamed_1 = 40;
pub const _SC_BC_STRING_MAX: C2RustUnnamed_1 = 39;
pub const _SC_BC_SCALE_MAX: C2RustUnnamed_1 = 38;
pub const _SC_BC_DIM_MAX: C2RustUnnamed_1 = 37;
pub const _SC_BC_BASE_MAX: C2RustUnnamed_1 = 36;
pub const _SC_TIMER_MAX: C2RustUnnamed_1 = 35;
pub const _SC_SIGQUEUE_MAX: C2RustUnnamed_1 = 34;
pub const _SC_SEM_VALUE_MAX: C2RustUnnamed_1 = 33;
pub const _SC_SEM_NSEMS_MAX: C2RustUnnamed_1 = 32;
pub const _SC_RTSIG_MAX: C2RustUnnamed_1 = 31;
pub const _SC_PAGESIZE: C2RustUnnamed_1 = 30;
pub const _SC_VERSION: C2RustUnnamed_1 = 29;
pub const _SC_MQ_PRIO_MAX: C2RustUnnamed_1 = 28;
pub const _SC_MQ_OPEN_MAX: C2RustUnnamed_1 = 27;
pub const _SC_DELAYTIMER_MAX: C2RustUnnamed_1 = 26;
pub const _SC_AIO_PRIO_DELTA_MAX: C2RustUnnamed_1 = 25;
pub const _SC_AIO_MAX: C2RustUnnamed_1 = 24;
pub const _SC_AIO_LISTIO_MAX: C2RustUnnamed_1 = 23;
pub const _SC_SHARED_MEMORY_OBJECTS: C2RustUnnamed_1 = 22;
pub const _SC_SEMAPHORES: C2RustUnnamed_1 = 21;
pub const _SC_MESSAGE_PASSING: C2RustUnnamed_1 = 20;
pub const _SC_MEMORY_PROTECTION: C2RustUnnamed_1 = 19;
pub const _SC_MEMLOCK_RANGE: C2RustUnnamed_1 = 18;
pub const _SC_MEMLOCK: C2RustUnnamed_1 = 17;
pub const _SC_MAPPED_FILES: C2RustUnnamed_1 = 16;
pub const _SC_FSYNC: C2RustUnnamed_1 = 15;
pub const _SC_SYNCHRONIZED_IO: C2RustUnnamed_1 = 14;
pub const _SC_PRIORITIZED_IO: C2RustUnnamed_1 = 13;
pub const _SC_ASYNCHRONOUS_IO: C2RustUnnamed_1 = 12;
pub const _SC_TIMERS: C2RustUnnamed_1 = 11;
pub const _SC_PRIORITY_SCHEDULING: C2RustUnnamed_1 = 10;
pub const _SC_REALTIME_SIGNALS: C2RustUnnamed_1 = 9;
pub const _SC_SAVED_IDS: C2RustUnnamed_1 = 8;
pub const _SC_JOB_CONTROL: C2RustUnnamed_1 = 7;
pub const _SC_TZNAME_MAX: C2RustUnnamed_1 = 6;
pub const _SC_STREAM_MAX: C2RustUnnamed_1 = 5;
pub const _SC_OPEN_MAX: C2RustUnnamed_1 = 4;
pub const _SC_NGROUPS_MAX: C2RustUnnamed_1 = 3;
pub const _SC_CLK_TCK: C2RustUnnamed_1 = 2;
pub const _SC_CHILD_MAX: C2RustUnnamed_1 = 1;
pub const _SC_ARG_MAX: C2RustUnnamed_1 = 0;
pub type State = libc::c_uint;
pub const SEARCH: State = 5;
pub const SPLIT: State = 4;
pub const LKHD: State = 3;
pub const SIMP: State = 2;
pub const READY: State = 1;
pub const FREE: State = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Node<'h2,'h3> {
    pub state: State,
    pub pos: libc::c_int,
    pub lookahead: libc::c_int,
    pub depth: libc::c_int,
    pub res: libc::c_int,
    pub simplified: libc::c_int,
    pub consumed: libc::c_int,
    pub id: int64_t,
    pub decisions: int64_t,
    pub conflicts: int64_t,
    pub propagations: int64_t,
    pub cube: *mut libc::c_int,
    // 564: cube: typeof(cube) = *mut {g378} i32
    // 564: cube:   g378 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, FIXED
    pub lgl: *mut LGL,
    // 565: lgl: typeof(lgl) = *mut {g379} LGL
    // 565: lgl:   g379 = UNIQUE | NON_NULL, FIXED
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Leaf<'h4,'h5,'h6> {
    pub id: int64_t,
    pub next: *mut Leaf<'h4,'h5,'h6>,
    // 571: next: typeof(next) = *mut {g380} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 571: next:   g380 = READ | WRITE | UNIQUE | FREE, FIXED
    pub prev: *mut Leaf<'h4,'h5,'h6>,
    // 572: prev: typeof(prev) = *mut {g381} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 572: prev:   g381 = UNIQUE, FIXED
    pub lits: *mut libc::c_int,
    // 573: lits: typeof(lits) = *mut {g382} i32
    // 573: lits:   g382 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE, FIXED
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Parallel<'h7,'h8> {
    pub decisions: int64_t,
    pub conflicts: int64_t,
    pub propagations: int64_t,
    pub consumed: C2RustUnnamed_2,
    pub produced: C2RustUnnamed_2,
    pub res: libc::c_int,
    pub nunits: libc::c_int,
    pub units: *mut libc::c_int,
    // 585: units: typeof(units) = *mut {g383} i32
    // 585: units:   g383 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, FIXED
    pub thread: pthread_t,
    pub lgl: *mut LGL,
    // 587: lgl: typeof(lgl) = *mut {g384} LGL
    // 587: lgl:   g384 = UNIQUE | NON_NULL, FIXED
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub leafs: int64_t,
    pub units: int64_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Job<'h2,'h3,'h9,'h10,'h11,'h12> {
    pub pos: libc::c_int,
    pub state: State,
    pub node: *mut Node<'h2,'h3>,
    // 600: node: typeof(node) = *mut {g385} DefId(0:777 ~ treengeling[2d04]::Node)
    // 600: node:   g385 = READ | UNIQUE | NON_NULL, FIXED
    pub fun: Option<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>,
    // 601: fun: typeof(fun) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {g66} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {g67} DefId(2:5583 ~ core[480a]::ffi::c_void)>
    // 601: fun:   g66 = UNIQUE | NON_NULL, FIXED
    // 601: fun:   g67 = UNIQUE | NON_NULL, FIXED
    pub thread: pthread_t,
    pub name: *const libc::c_char,
    // 603: name: typeof(name) = *const {g386} i8
    // 603: name:   g386 = UNIQUE | NON_NULL, FIXED
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lock {
    pub mutex: pthread_mutex_t,
    pub locked: libc::c_int,
    pub waited: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_3 {
    pub cnt: int64_t,
    pub lkhd: int64_t,
    pub split: int64_t,
    pub simp: int64_t,
    pub search: int64_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub epoch: libc::c_double,
    pub simp: libc::c_double,
    pub lkhd: libc::c_double,
    pub split: libc::c_double,
    pub search: libc::c_double,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub set: int64_t,
    pub def: int64_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_6<'h4,'h5,'h6,'h13,'h14> {
    pub num: libc::c_int,
    pub max: libc::c_int,
    pub count: int64_t,
    pub first: *mut Leaf<'h4,'h5,'h6>,
    // 642: first: typeof(first) = *mut {g387} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 642: first:   g387 = READ | WRITE | FREE, CELL | FIXED
    pub last: *mut Leaf<'h4,'h5,'h6>,
    // 643: last: typeof(last) = *mut {g388} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 643: last:   g388 = READ | WRITE | UNIQUE, FIXED
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub z: libc::c_uint,
    pub w: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub confs: Lock,
    pub done: Lock,
    pub leafs: Lock,
    pub mem: Lock,
    pub msg: Lock,
    pub nodes: Lock,
    pub opts: Lock,
    pub parleafs: Lock,
    pub parstats: Lock,
    pub parunits: Lock,
    pub simplified: Lock,
    pub stats: Lock,
    pub workers: Lock,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Opt<'h15> {
    pub name: *const libc::c_char,
    // 671: name: typeof(name) = *const {g389} i8
    // 671: name:   g389 = UNIQUE | NON_NULL, FIXED
    pub val: libc::c_int,
}
#[inline]
unsafe extern "C" fn vprintf(
    mut __fmt: *const libc::c_char,
    // 676: mut __fmt: typeof(_1) = *const {g0} i8
    // 676: mut __fmt:   g0 = UNIQUE | NON_NULL, FIXED
    mut __arg: ::core::ffi::VaList,
) -> libc::c_int {
    return vfprintf(stdout, __fmt, __arg.as_va_list());
    // 679: stdout: typeof(_4) = *mut {l4} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 679: stdout:   l4 = UNIQUE | NON_NULL, (empty)
    // 679: stdout: typeof(_5) = *mut {l6} *mut {l7} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 679: stdout:   l6 = UNIQUE | NON_NULL, (empty)
    // 679: stdout:   l7 = UNIQUE | NON_NULL, (empty)
    // 679: __fmt: typeof(_6) = *const {l9} i8
    // 679: __fmt:   l9 = UNIQUE | NON_NULL, (empty)
    // 679: __arg.as_va_list(): typeof(_8) = &mut {l12} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 679: __arg.as_va_list():   l12 = UNIQUE | NON_NULL, (empty)
    // 679: __arg.as_va_list(): typeof(_9) = &mut {l14} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 679: __arg.as_va_list():   l14 = UNIQUE | NON_NULL, FIXED
    // 679: __arg.as_va_list(): typeof(_10) = &mut {l16} DefId(2:46558 ~ core[480a]::ffi::VaList)
    // 679: __arg.as_va_list():   l16 = UNIQUE | NON_NULL, (empty)
    // 679: __arg.as_va_list(): typeof(_10 = &mut _2) = &mut {l18} DefId(2:46558 ~ core[480a]::ffi::VaList)
    // 679: __arg.as_va_list():   l18 = UNIQUE | NON_NULL, (empty)
    // 679: __arg.as_va_list(): typeof(_8 = &mut (*_9)) = &mut {l19} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 679: __arg.as_va_list():   l19 = UNIQUE | NON_NULL, (empty)
}
#[inline]
unsafe extern "C" fn atoi(mut __nptr: *const libc::c_char) -> libc::c_int {
// 682: mut __nptr: typeof(_1) = *const {g1} i8
// 682: mut __nptr:   g1 = READ | OFFSET_ADD, FIXED
    return strtol(
        __nptr,
        // 684: __nptr: typeof(_4) = *const {l4} i8
        // 684: __nptr:   l4 = READ | OFFSET_ADD, (empty)
        0 as *mut libc::c_void as *mut *mut libc::c_char,
        // 685: 0 as *mut libc: ... _char: typeof(_5) = *mut {l6} *mut {g200} i8
        // 685: 0 as *mut libc: ... _char:   l6 = WRITE | UNIQUE, (empty)
        // 685: 0 as *mut libc: ... _char:   g200 = WRITE | OFFSET_ADD, CELL | FIXED
        // 685: 0 as *mut libc: ... _void: typeof(_6) = *mut {l8} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 685: 0 as *mut libc: ... _void:   l8 = WRITE | UNIQUE, (empty)
        // 685: 0 as *mut libc: ... _char: typeof(_5 = move _6 as *mut *mut i8 (Misc)) = *mut {l12} *mut {g200} i8
        // 685: 0 as *mut libc: ... _char:   l12 = WRITE | UNIQUE, (empty)
        // 685: 0 as *mut libc: ... _char:   g200 = WRITE | OFFSET_ADD, CELL | FIXED
        // 685: 0 as *mut libc: ... _void: typeof(_6 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l11} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 685: 0 as *mut libc: ... _void:   l11 = WRITE | UNIQUE, (empty)
        10 as libc::c_int,
    ) as libc::c_int;
}
#[inline]
unsafe extern "C" fn atoll(mut __nptr: *const libc::c_char) -> libc::c_longlong {
// 690: mut __nptr: typeof(_1) = *const {g2} i8
// 690: mut __nptr:   g2 = READ | UNIQUE | OFFSET_ADD | NON_NULL, FIXED
    return strtoll(
        __nptr,
        // 692: __nptr: typeof(_3) = *const {l3} i8
        // 692: __nptr:   l3 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        0 as *mut libc::c_void as *mut *mut libc::c_char,
        // 693: 0 as *mut libc: ... _char: typeof(_4) = *mut {l5} *mut {g203} i8
        // 693: 0 as *mut libc: ... _char:   l5 = WRITE | UNIQUE, (empty)
        // 693: 0 as *mut libc: ... _char:   g203 = WRITE | OFFSET_ADD, CELL | FIXED
        // 693: 0 as *mut libc: ... _void: typeof(_5) = *mut {l7} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 693: 0 as *mut libc: ... _void:   l7 = WRITE | UNIQUE, (empty)
        // 693: 0 as *mut libc: ... _void: typeof(_5 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l10} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 693: 0 as *mut libc: ... _void:   l10 = WRITE | UNIQUE, (empty)
        // 693: 0 as *mut libc: ... _char: typeof(_4 = move _5 as *mut *mut i8 (Misc)) = *mut {l11} *mut {g203} i8
        // 693: 0 as *mut libc: ... _char:   l11 = WRITE | UNIQUE, (empty)
        // 693: 0 as *mut libc: ... _char:   g203 = WRITE | OFFSET_ADD, CELL | FIXED
        10 as libc::c_int,
    );
}
static verbose: libc::c_int = 0;
static balance: libc::c_int = 0;
static showstats: libc::c_int = 0;
static nowitness: libc::c_int = 0;
static ncores: libc::c_int = 0;
static randswap: libc::c_int = 0;
static treelookdepth: libc::c_int = 0;
static treelookdepthset: libc::c_int = 0;
static locslkhd: libc::c_int = 0;
static relevancelkhd: libc::c_int = 1 as libc::c_int;
static reducecache: libc::c_int = 0;
static nosimp: libc::c_int = 0;
static forcesimp: libc::c_int = 0;
static nosearch: libc::c_int = 0;
static noparallel: libc::c_int = 0;
static fullint: libc::c_int = 10 as libc::c_int;
static asymmetric: libc::c_int = 1 as libc::c_int;
static eager: libc::c_int = 1 as libc::c_int;
static splitsuccessful: libc::c_int = 1 as libc::c_int;
static branches: libc::c_int = -(1 as libc::c_int);
static portfolio: libc::c_int = 0 as libc::c_int;
static optimize: libc::c_int = -(1 as libc::c_int);
static mut clim: libc::c_int = 0;
static mut newclim: libc::c_int = 0;
static mut forcedclim: libc::c_int = 0;
static thisclim: libc::c_int = 0;
static initclim: libc::c_int = 0;
static maxclim: libc::c_int = 0;
static minclim: libc::c_int = 0;
static nvars: libc::c_int = 0;
static nclauses: libc::c_int = 0;
static root: *mut LGL = 0 as *const LGL as *mut LGL;
static nodes: *mut *mut Node = 0 as *const *mut Node as *mut *mut Node;
static numnodes: libc::c_int = 0;
static maxnumnodes: libc::c_int = 0;
static sizenodes: libc::c_int = 0;
static rootconsumed: libc::c_int = 0;
static mut parallel: Parallel = Parallel {
    decisions: 0,
    conflicts: 0,
    propagations: 0,
    consumed: C2RustUnnamed_2 { leafs: 0, units: 0 },
    produced: C2RustUnnamed_2 { leafs: 0, units: 0 },
    res: 0,
    nunits: 0,
    units: 0 as *const libc::c_int as *mut libc::c_int,
    thread: 0,
    lgl: 0 as *const LGL as *mut LGL,
};
static nparallel: libc::c_int = 0;
static maxactive: libc::c_int = 0;
static firstosplit: libc::c_int = 0;
static numtosplit: libc::c_int = 0;
static lastosplit: libc::c_int = 0;
static maxworkers: libc::c_int = 0;
static maxworkers2: libc::c_int = 0;
static mut numworkers: libc::c_int = 0;
static maxnumworkers: libc::c_int = 0;
static mut jobs: *mut *mut Job = 0 as *const *mut Job as *mut *mut Job;
static mut numjobs: libc::c_int = 0;
static mut sizejobs: libc::c_int = 0;
static mut js: C2RustUnnamed_3 = C2RustUnnamed_3 {
    cnt: 0,
    lkhd: 0,
    split: 0,
    simp: 0,
    search: 0,
};
static totalkhd: int64_t = 0;
static treelkhd: int64_t = 0;
static confstack: *mut int64_t = 0 as *const int64_t as *mut int64_t;
static numconfstack: libc::c_int = 0;
static sizeconfstack: libc::c_int = 0;
static fname: *const libc::c_char = 0 as *const libc::c_char;
static file: *mut FILE = 0 as *const FILE as *mut FILE;
static lineno: libc::c_int = 0;
#[no_mangle]
pub static mut maxbytes: size_t = 0;
#[no_mangle]
static hardlimbytes: size_t = 0;
#[no_mangle]
static softlimbytes: size_t = 0;
#[no_mangle]
static splitlimbytes: size_t = 0;
#[no_mangle]
pub static mut currentbytes: size_t = 0;
static ids: int64_t = 0;
static threads: int64_t = 0;
static conflicts: int64_t = 0;
static decisions: int64_t = 0;
static propagations: int64_t = 0;
static mut sumclims: int64_t = 0;
static mut inclims: int64_t = 0;
static mut declims: int64_t = 0;
static mut forcedclims: int64_t = 0;
static sumsimplified: int64_t = 0;
static wct: C2RustUnnamed_4 = C2RustUnnamed_4 {
    epoch: 0.,
    simp: 0.,
    lkhd: 0.,
    split: 0.,
    search: 0.,
};
static mut round: libc::c_int = 0;
static mut started: libc::c_int = 0;
static mut deleted: libc::c_int = 0;
static mut simplified: libc::c_int = 0;
static mut added: libc::c_int = 0;
static mut startimeptr: *mut libc::c_double = 0 as *const libc::c_double as *mut libc::c_double;
static mut startime: libc::c_double = 0.;
static opts: C2RustUnnamed_5 = C2RustUnnamed_5 { set: 0, def: 0 };
#[no_mangle]
pub static mut leafs: C2RustUnnamed_6 = C2RustUnnamed_6 {
    num: 0,
    max: 0,
    count: 0,
    first: 0 as *const Leaf as *mut Leaf,
    last: 0 as *const Leaf as *mut Leaf,
};
static done: libc::c_int = 0;
static stop: libc::c_int = 0;
static mut rng: C2RustUnnamed_7 = C2RustUnnamed_7 { z: 0, w: 0 };
static lock: C2RustUnnamed_8 = C2RustUnnamed_8 {
    confs: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    done: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    leafs: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    mem: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    msg: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    nodes: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    opts: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    parleafs: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    parstats: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    parunits: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    simplified: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    stats: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
    workers: Lock {
        mutex: pthread_mutex_t {
            __data: __pthread_mutex_s {
                __lock: 0,
                __count: 0,
                __owner: 0,
                __nusers: 0,
                __kind: 0,
                __spins: 0,
                __elision: 0,
                __list: __pthread_internal_list {
                    __prev: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                    __next: 0 as *const __pthread_internal_list as *mut __pthread_internal_list,
                },
            },
        },
        locked: 0,
        waited: 0,
    },
};
static workerscond: pthread_cond_t = pthread_cond_t {
    __data: __pthread_cond_s {
        __wseq: __atomic_wide_counter { __value64: 0 },
        __g1_start: __atomic_wide_counter { __value64: 0 },
        __g_refs: [0; 2],
        __g_size: [0; 2],
        __g1_orig_size: 0,
        __wrefs: 0,
        __g_signals: [0; 2],
    },
};
unsafe extern "C" fn currentime() -> libc::c_double {
    let mut res: libc::c_double = 0 as libc::c_int as libc::c_double;
    let mut tv: timeval = timeval {
        tv_sec: 0,
        tv_usec: 0,
    };
    if gettimeofday(&mut tv, 0 as *mut libc::c_void) == 0 {
    // 1085: &mut tv: typeof(_8) = *mut {l8} DefId(0:660 ~ treengeling[2d04]::timeval)
    // 1085: &mut tv:   l8 = UNIQUE | NON_NULL, (empty)
    // 1085: &mut tv: typeof(_9) = &mut {l10} DefId(0:660 ~ treengeling[2d04]::timeval)
    // 1085: &mut tv:   l10 = UNIQUE | NON_NULL, (empty)
    // 1085: 0 as *mut libc: ... _void: typeof(_10) = *mut {l12} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1085: 0 as *mut libc: ... _void:   l12 = UNIQUE | NON_NULL, (empty)
    // 1085: &mut tv: typeof(_8 = &raw mut (*_9)) = *mut {l19} DefId(0:660 ~ treengeling[2d04]::timeval)
    // 1085: &mut tv:   l19 = UNIQUE | NON_NULL, (empty)
    // 1085: 0 as *mut libc: ... _void: typeof(_10 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l20} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1085: 0 as *mut libc: ... _void:   l20 = UNIQUE | NON_NULL, (empty)
    // 1085: &mut tv: typeof(_9 = &mut _4) = &mut {l18} DefId(0:660 ~ treengeling[2d04]::timeval)
    // 1085: &mut tv:   l18 = UNIQUE | NON_NULL, (empty)
        res = 1e-6f64 * tv.tv_usec as libc::c_double;
        res += tv.tv_sec as libc::c_double;
    }
    return res;
}
unsafe extern "C" fn getime() -> libc::c_double {
    return currentime() - wct.epoch;
    // 1092: wct: typeof(_4) = *mut {l4} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
    // 1092: wct:   l4 = READ | UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn warn(mut fmt: *const libc::c_char, mut args: ...) {
// 1094: mut fmt: typeof(_1) = *const {g3} i8
// 1094: mut fmt:   g3 = UNIQUE | NON_NULL, FIXED
    let mut ap: ::core::ffi::VaListImpl;
    fputs(
        b"c *** warning *** \0" as *const u8 as *const libc::c_char,
        // 1097: b"c *** warning ... _char: typeof(_5) = *const {l5} i8
        // 1097: b"c *** warning ... _char:   l5 = UNIQUE | NON_NULL, (empty)
        // 1097: b"c *** warning ... st u8: typeof(_6) = *const {l7} u8
        // 1097: b"c *** warning ... st u8:   l7 = UNIQUE | NON_NULL, (empty)
        // 1097: b"c *** warning ... * \0": typeof(_7) = *const {l9} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
        // 1097: b"c *** warning ... * \0":   l9 = UNIQUE | NON_NULL, (empty)
        // 1097: b"c *** warning ... * \0": typeof(_8) = & {l11} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
        // 1097: b"c *** warning ... * \0":   l11 = UNIQUE | NON_NULL, FIXED
        // 1097: b"c *** warning ... * \0": typeof(_8 = const b"c *** warning *** \x00") = & {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
        // 1097: b"c *** warning ... * \0":   l40 = UNIQUE | NON_NULL, (empty)
        // 1097: b"c *** warning ... * \0": typeof(_7 = &raw const (*_8)) = *const {l41} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
        // 1097: b"c *** warning ... * \0":   l41 = UNIQUE | NON_NULL, (empty)
        // 1097: b"c *** warning ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l42} u8
        // 1097: b"c *** warning ... st u8:   l42 = UNIQUE | NON_NULL, (empty)
        // 1097: b"c *** warning ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l43} i8
        // 1097: b"c *** warning ... _char:   l43 = UNIQUE | NON_NULL, (empty)
        stdout,
        // 1098: stdout: typeof(_9) = *mut {l13} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 1098: stdout:   l13 = UNIQUE | NON_NULL, (empty)
        // 1098: stdout: typeof(_10) = *mut {l15} *mut {l16} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 1098: stdout:   l15 = UNIQUE | NON_NULL, (empty)
        // 1098: stdout:   l16 = UNIQUE | NON_NULL, (empty)
    );
    ap = args.clone();
    // 1100: args.clone(): typeof(_12) = & {l19} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1100: args.clone():   l19 = UNIQUE | NON_NULL, (empty)
    // 1100: args.clone(): typeof(_12 = &_2) = & {l44} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1100: args.clone():   l44 = UNIQUE | NON_NULL, (empty)
    vprintf(fmt, ap.as_va_list());
    // 1101: fmt: typeof(_14) = *const {l22} i8
    // 1101: fmt:   l22 = UNIQUE | NON_NULL, (empty)
    // 1101: ap.as_va_list(): typeof(_16) = &mut {l25} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1101: ap.as_va_list():   l25 = UNIQUE | NON_NULL, (empty)
    // 1101: ap.as_va_list(): typeof(_16 = &mut _3) = &mut {l45} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1101: ap.as_va_list():   l45 = UNIQUE | NON_NULL, (empty)
    fputc('\n' as i32, stdout);
    // 1102: stdout: typeof(_19) = *mut {l29} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1102: stdout:   l29 = UNIQUE | NON_NULL, (empty)
    // 1102: stdout: typeof(_20) = *mut {l31} *mut {l32} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1102: stdout:   l31 = UNIQUE | NON_NULL, (empty)
    // 1102: stdout:   l32 = UNIQUE | NON_NULL, (empty)
    fflush(stdout);
    // 1103: stdout: typeof(_22) = *mut {l35} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1103: stdout:   l35 = UNIQUE | NON_NULL, (empty)
    // 1103: stdout: typeof(_23) = *mut {l37} *mut {l38} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1103: stdout:   l37 = UNIQUE | NON_NULL, (empty)
    // 1103: stdout:   l38 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn startimer<'h0>(mut timptr: &'h0 mut (libc::c_double)) {
// 1105: mut timptr: typeof(_1) = *mut {g4} f64
// 1105: mut timptr:   g4 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    startimeptr = std::option::Option::Some(std::cell::Cell::from_mut((timptr)));
    // 1106: timptr: typeof(_2) = *mut {l2} f64
    // 1106: timptr:   l2 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    // 1106: startimeptr: typeof(_3) = *mut {l4} *mut {g330} f64
    // 1106: startimeptr:   l4 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    // 1106: startimeptr:   g330 = READ | WRITE, CELL
    startime = currentime();
    // 1107: startime: typeof(_5) = *mut {l7} f64
    // 1107: startime:   l7 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    started = 1 as libc::c_int;
    // 1108: started: typeof(_7) = *mut {l10} i32
    // 1108: started:   l10 = READ | WRITE | UNIQUE | NON_NULL, (empty)
}
unsafe fn startimer_shim(arg0: *mut libc::c_double) {
    {
    let safe_arg0 = &mut *arg0;
    let safe_result = startimer(safe_arg0);
    let result = safe_result;
    result
}
}

unsafe extern "C" fn deltatime(mut start: libc::c_double) -> libc::c_double {
    let mut res: libc::c_double = currentime() - start;
    if res < 0 as libc::c_int as libc::c_double {
        res = -res;
    }
    return res;
}
unsafe extern "C" fn stoptimer() -> libc::c_double {
    let mut ptr: *mut libc::c_double = 0 as *mut libc::c_double;
    // 1118: mut ptr: typeof(_2) = *mut {l2} f64
    // 1118: mut ptr:   l2 = READ | WRITE, CELL
    // 1118: 0 as *mut libc: ... ouble: typeof(_2 = const 0_usize as *mut f64 (PointerFromExposedAddress)) = *mut {l23} f64
    // 1118: 0 as *mut libc: ... ouble:   l23 = READ | WRITE | UNIQUE, (empty)
    let mut res: libc::c_double = deltatime(startime);
    // 1119: startime: typeof(_5) = *mut {l6} f64
    // 1119: startime:   l6 = READ | UNIQUE | NON_NULL, (empty)
    started = 0 as libc::c_int;
    // 1120: started: typeof(_7) = *mut {l9} i32
    // 1120: started:   l9 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    ptr = startimeptr;
    // 1121: startimeptr: typeof(_8) = *mut {l11} f64
    // 1121: startimeptr:   l11 = READ | WRITE, CELL
    // 1121: startimeptr: typeof(_9) = *mut {l13} *mut {g330} f64
    // 1121: startimeptr:   l13 = READ | UNIQUE | NON_NULL, (empty)
    // 1121: startimeptr:   g330 = READ | WRITE, CELL
    if !ptr.is_null() {
    // 1122: ptr: typeof(_13) = *mut {l18} f64
    // 1122: ptr:   l18 = (empty), CELL
        *ptr += res;
    }
    startimeptr = 0 as *mut libc::c_double;
    // 1125: startimeptr: typeof(_15) = *mut {l21} *mut {g330} f64
    // 1125: startimeptr:   l21 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    // 1125: startimeptr:   g330 = READ | WRITE, CELL
    // 1125: startimeptr = 0 ... ouble: typeof((*_15) = const 0_usize as *mut f64 (PointerFromExposedAddress)) = *mut {l24} f64
    // 1125: startimeptr = 0 ... ouble:   l24 = READ | WRITE | UNIQUE, (empty)
    return res;
}
unsafe extern "C" fn lockgen(mut lock_0: *mut Lock, mut name: *const libc::c_char) {
// 1128: mut lock_0: typeof(_1) = *mut {g5} DefId(0:832 ~ treengeling[2d04]::Lock)
// 1128: mut lock_0:   g5 = UNIQUE | NON_NULL, FIXED
// 1128: mut name: typeof(_2) = *const {g6} i8
// 1128: mut name:   g6 = UNIQUE | NON_NULL, FIXED
    if pthread_mutex_lock(&mut (*lock_0).mutex) != 0 {
    // 1129: &mut (*lock_0).mutex: typeof(_6) = *mut {l6} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 1129: &mut (*lock_0).mutex:   l6 = UNIQUE | NON_NULL, (empty)
    // 1129: &mut (*lock_0).mutex: typeof(_7) = &mut {l8} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 1129: &mut (*lock_0).mutex:   l8 = UNIQUE | NON_NULL, (empty)
    // 1129: &mut (*lock_0).mutex: typeof(_6 = &raw mut (*_7)) = *mut {l24} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 1129: &mut (*lock_0).mutex:   l24 = UNIQUE | NON_NULL, (empty)
    // 1129: &mut (*lock_0).mutex: typeof(_7 = &mut ((*_1).0: pthread_mutex_t)) = &mut {l23} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 1129: &mut (*lock_0).mutex:   l23 = UNIQUE | NON_NULL, (empty)
        warn(
            b"failed to lock '%s' mutex\0" as *const u8 as *const libc::c_char,
            // 1131: b"failed to loc ... _char: typeof(_9) = *const {l11} i8
            // 1131: b"failed to loc ... _char:   l11 = UNIQUE | NON_NULL, (empty)
            // 1131: b"failed to loc ... st u8: typeof(_10) = *const {l13} u8
            // 1131: b"failed to loc ... st u8:   l13 = UNIQUE | NON_NULL, (empty)
            // 1131: b"failed to loc ... ex\0": typeof(_11) = *const {l15} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
            // 1131: b"failed to loc ... ex\0":   l15 = UNIQUE | NON_NULL, (empty)
            // 1131: b"failed to loc ... ex\0": typeof(_12) = & {l17} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
            // 1131: b"failed to loc ... ex\0":   l17 = UNIQUE | NON_NULL, FIXED
            // 1131: b"failed to loc ... st u8: typeof(_10 = move _11 as *const u8 (Pointer(ArrayToPointer))) = *const {l27} u8
            // 1131: b"failed to loc ... st u8:   l27 = UNIQUE | NON_NULL, (empty)
            // 1131: b"failed to loc ... _char: typeof(_9 = move _10 as *const i8 (Misc)) = *const {l28} i8
            // 1131: b"failed to loc ... _char:   l28 = UNIQUE | NON_NULL, (empty)
            // 1131: b"failed to loc ... ex\0": typeof(_11 = &raw const (*_12)) = *const {l26} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
            // 1131: b"failed to loc ... ex\0":   l26 = UNIQUE | NON_NULL, (empty)
            // 1131: b"failed to loc ... ex\0": typeof(_12 = const b"failed to lock \'%s\' mutex\x00") = & {l25} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
            // 1131: b"failed to loc ... ex\0":   l25 = UNIQUE | NON_NULL, (empty)
            name,
            // 1132: name: typeof(_13) = *const {l19} i8
            // 1132: name:   l19 = UNIQUE | NON_NULL, (empty)
        );
    }
    (*lock_0).locked += 1;
    (*lock_0).locked;
}
unsafe extern "C" fn unlockgen(mut lock_0: *mut Lock, mut name: *const libc::c_char) {
// 1138: mut lock_0: typeof(_1) = *mut {g7} DefId(0:832 ~ treengeling[2d04]::Lock)
// 1138: mut lock_0:   g7 = UNIQUE | NON_NULL, FIXED
// 1138: mut name: typeof(_2) = *const {g8} i8
// 1138: mut name:   g8 = UNIQUE | NON_NULL, FIXED
    (*lock_0).locked -= 1;
    (*lock_0).locked;
    if pthread_mutex_unlock(&mut (*lock_0).mutex) != 0 {
    // 1141: &mut (*lock_0).mutex: typeof(_7) = *mut {l7} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 1141: &mut (*lock_0).mutex:   l7 = UNIQUE | NON_NULL, (empty)
    // 1141: &mut (*lock_0).mutex: typeof(_8) = &mut {l9} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 1141: &mut (*lock_0).mutex:   l9 = UNIQUE | NON_NULL, (empty)
    // 1141: &mut (*lock_0).mutex: typeof(_7 = &raw mut (*_8)) = *mut {l23} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 1141: &mut (*lock_0).mutex:   l23 = UNIQUE | NON_NULL, (empty)
    // 1141: &mut (*lock_0).mutex: typeof(_8 = &mut ((*_1).0: pthread_mutex_t)) = &mut {l22} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 1141: &mut (*lock_0).mutex:   l22 = UNIQUE | NON_NULL, (empty)
        warn(
            b"failed to lock '%s' mutex\0" as *const u8 as *const libc::c_char,
            // 1143: b"failed to loc ... _char: typeof(_10) = *const {l12} i8
            // 1143: b"failed to loc ... _char:   l12 = UNIQUE | NON_NULL, (empty)
            // 1143: b"failed to loc ... st u8: typeof(_11) = *const {l14} u8
            // 1143: b"failed to loc ... st u8:   l14 = UNIQUE | NON_NULL, (empty)
            // 1143: b"failed to loc ... ex\0": typeof(_12) = *const {l16} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
            // 1143: b"failed to loc ... ex\0":   l16 = UNIQUE | NON_NULL, (empty)
            // 1143: b"failed to loc ... ex\0": typeof(_13) = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
            // 1143: b"failed to loc ... ex\0":   l18 = UNIQUE | NON_NULL, FIXED
            // 1143: b"failed to loc ... _char: typeof(_10 = move _11 as *const i8 (Misc)) = *const {l27} i8
            // 1143: b"failed to loc ... _char:   l27 = UNIQUE | NON_NULL, (empty)
            // 1143: b"failed to loc ... st u8: typeof(_11 = move _12 as *const u8 (Pointer(ArrayToPointer))) = *const {l26} u8
            // 1143: b"failed to loc ... st u8:   l26 = UNIQUE | NON_NULL, (empty)
            // 1143: b"failed to loc ... ex\0": typeof(_13 = const b"failed to lock \'%s\' mutex\x00") = & {l24} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
            // 1143: b"failed to loc ... ex\0":   l24 = UNIQUE | NON_NULL, (empty)
            // 1143: b"failed to loc ... ex\0": typeof(_12 = &raw const (*_13)) = *const {l25} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
            // 1143: b"failed to loc ... ex\0":   l25 = UNIQUE | NON_NULL, (empty)
            name,
            // 1144: name: typeof(_14) = *const {l20} i8
            // 1144: name:   l20 = UNIQUE | NON_NULL, (empty)
        );
    }
}
unsafe extern "C" fn lockconfs() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.confs)).cast_mut(),
        // 1150: &mut lock.confs: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1150: &mut lock.confs:   l2 = UNIQUE | NON_NULL, (empty)
        // 1150: &mut lock.confs: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1150: &mut lock.confs:   l4 = UNIQUE | NON_NULL, (empty)
        // 1150: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1150: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1150: &mut lock.confs: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1150: &mut lock.confs:   l17 = UNIQUE | NON_NULL, (empty)
        // 1150: &mut lock.confs: typeof(_3 = &mut ((*_4).0: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1150: &mut lock.confs:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"confs\0") as *const u8 as *const libc::c_char)),
        // 1151: b"confs\0" as * ... _char: typeof(_5) = *const {l8} i8
        // 1151: b"confs\0" as * ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1151: b"confs\0" as * ... st u8: typeof(_6) = *const {l10} u8
        // 1151: b"confs\0" as * ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1151: b"confs\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1151: b"confs\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1151: b"confs\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1151: b"confs\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1151: b"confs\0" as * ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1151: b"confs\0" as * ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1151: b"confs\0": typeof(_8 = const b"confs\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1151: b"confs\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1151: b"confs\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1151: b"confs\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1151: b"confs\0" as * ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1151: b"confs\0" as * ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn lockdone() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.done)).cast_mut(),
        // 1156: &mut lock.done: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1156: &mut lock.done:   l2 = UNIQUE | NON_NULL, (empty)
        // 1156: &mut lock.done: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1156: &mut lock.done:   l4 = UNIQUE | NON_NULL, (empty)
        // 1156: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1156: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1156: &mut lock.done: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1156: &mut lock.done:   l17 = UNIQUE | NON_NULL, (empty)
        // 1156: &mut lock.done: typeof(_3 = &mut ((*_4).1: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1156: &mut lock.done:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"done\0") as *const u8 as *const libc::c_char)),
        // 1157: b"done\0" as *c ... _char: typeof(_5) = *const {l8} i8
        // 1157: b"done\0" as *c ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1157: b"done\0" as *c ... st u8: typeof(_6) = *const {l10} u8
        // 1157: b"done\0" as *c ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1157: b"done\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1157: b"done\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1157: b"done\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1157: b"done\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1157: b"done\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1157: b"done\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1157: b"done\0" as *c ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1157: b"done\0" as *c ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1157: b"done\0" as *c ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1157: b"done\0" as *c ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1157: b"done\0": typeof(_8 = const b"done\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1157: b"done\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    );
}
unsafe extern "C" fn lockleafs() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.leafs)).cast_mut(),
        // 1162: &mut lock.leafs: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1162: &mut lock.leafs:   l2 = UNIQUE | NON_NULL, (empty)
        // 1162: &mut lock.leafs: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1162: &mut lock.leafs:   l4 = UNIQUE | NON_NULL, (empty)
        // 1162: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1162: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1162: &mut lock.leafs: typeof(_3 = &mut ((*_4).2: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1162: &mut lock.leafs:   l16 = UNIQUE | NON_NULL, (empty)
        // 1162: &mut lock.leafs: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1162: &mut lock.leafs:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"leafs\0") as *const u8 as *const libc::c_char)),
        // 1163: b"leafs\0" as * ... _char: typeof(_5) = *const {l8} i8
        // 1163: b"leafs\0" as * ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1163: b"leafs\0" as * ... st u8: typeof(_6) = *const {l10} u8
        // 1163: b"leafs\0" as * ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1163: b"leafs\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1163: b"leafs\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1163: b"leafs\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1163: b"leafs\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1163: b"leafs\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1163: b"leafs\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1163: b"leafs\0" as * ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1163: b"leafs\0" as * ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1163: b"leafs\0" as * ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1163: b"leafs\0" as * ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1163: b"leafs\0": typeof(_8 = const b"leafs\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1163: b"leafs\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    );
}
unsafe extern "C" fn lockmem() {
    lockgen(core::ptr::addr_of!(*&mut *(&mut lock.mem)).cast_mut(), core::ptr::addr_of!(*(&*(b"mem\0") as *const u8 as *const libc::c_char)));
    // 1167: &mut lock.mem: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1167: &mut lock.mem:   l2 = UNIQUE | NON_NULL, (empty)
    // 1167: &mut lock.mem: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1167: &mut lock.mem:   l4 = UNIQUE | NON_NULL, (empty)
    // 1167: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 1167: lock:   l6 = UNIQUE | NON_NULL, (empty)
    // 1167: b"mem\0" as *co ... _char: typeof(_5) = *const {l8} i8
    // 1167: b"mem\0" as *co ... _char:   l8 = UNIQUE | NON_NULL, (empty)
    // 1167: b"mem\0" as *co ... st u8: typeof(_6) = *const {l10} u8
    // 1167: b"mem\0" as *co ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
    // 1167: b"mem\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1167: b"mem\0":   l12 = UNIQUE | NON_NULL, (empty)
    // 1167: b"mem\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1167: b"mem\0":   l14 = UNIQUE | NON_NULL, FIXED
    // 1167: b"mem\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1167: b"mem\0":   l19 = UNIQUE | NON_NULL, (empty)
    // 1167: b"mem\0" as *co ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
    // 1167: b"mem\0" as *co ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
    // 1167: b"mem\0": typeof(_8 = const b"mem\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1167: b"mem\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 1167: b"mem\0" as *co ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
    // 1167: b"mem\0" as *co ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    // 1167: &mut lock.mem: typeof(_3 = &mut ((*_4).3: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1167: &mut lock.mem:   l16 = UNIQUE | NON_NULL, (empty)
    // 1167: &mut lock.mem: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1167: &mut lock.mem:   l17 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn lockmsg() {
    lockgen(core::ptr::addr_of!(*&mut *(&mut lock.msg)).cast_mut(), core::ptr::addr_of!(*(&*(b"msg\0") as *const u8 as *const libc::c_char)));
    // 1170: &mut lock.msg: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1170: &mut lock.msg:   l2 = UNIQUE | NON_NULL, (empty)
    // 1170: &mut lock.msg: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1170: &mut lock.msg:   l4 = UNIQUE | NON_NULL, (empty)
    // 1170: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 1170: lock:   l6 = UNIQUE | NON_NULL, (empty)
    // 1170: b"msg\0" as *co ... _char: typeof(_5) = *const {l8} i8
    // 1170: b"msg\0" as *co ... _char:   l8 = UNIQUE | NON_NULL, (empty)
    // 1170: b"msg\0" as *co ... st u8: typeof(_6) = *const {l10} u8
    // 1170: b"msg\0" as *co ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
    // 1170: b"msg\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1170: b"msg\0":   l12 = UNIQUE | NON_NULL, (empty)
    // 1170: b"msg\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1170: b"msg\0":   l14 = UNIQUE | NON_NULL, FIXED
    // 1170: b"msg\0" as *co ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
    // 1170: b"msg\0" as *co ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
    // 1170: &mut lock.msg: typeof(_3 = &mut ((*_4).4: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1170: &mut lock.msg:   l16 = UNIQUE | NON_NULL, (empty)
    // 1170: &mut lock.msg: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1170: &mut lock.msg:   l17 = UNIQUE | NON_NULL, (empty)
    // 1170: b"msg\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1170: b"msg\0":   l19 = UNIQUE | NON_NULL, (empty)
    // 1170: b"msg\0" as *co ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
    // 1170: b"msg\0" as *co ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    // 1170: b"msg\0": typeof(_8 = const b"msg\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1170: b"msg\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
}
unsafe extern "C" fn locknodes() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.nodes)).cast_mut(),
        // 1174: &mut lock.nodes: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1174: &mut lock.nodes:   l2 = UNIQUE | NON_NULL, (empty)
        // 1174: &mut lock.nodes: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1174: &mut lock.nodes:   l4 = UNIQUE | NON_NULL, (empty)
        // 1174: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1174: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1174: &mut lock.nodes: typeof(_3 = &mut ((*_4).5: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1174: &mut lock.nodes:   l16 = UNIQUE | NON_NULL, (empty)
        // 1174: &mut lock.nodes: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1174: &mut lock.nodes:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"nodes\0") as *const u8 as *const libc::c_char)),
        // 1175: b"nodes\0" as * ... _char: typeof(_5) = *const {l8} i8
        // 1175: b"nodes\0" as * ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1175: b"nodes\0" as * ... st u8: typeof(_6) = *const {l10} u8
        // 1175: b"nodes\0" as * ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1175: b"nodes\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1175: b"nodes\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1175: b"nodes\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1175: b"nodes\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1175: b"nodes\0" as * ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1175: b"nodes\0" as * ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1175: b"nodes\0": typeof(_8 = const b"nodes\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1175: b"nodes\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1175: b"nodes\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1175: b"nodes\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1175: b"nodes\0" as * ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1175: b"nodes\0" as * ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn lockopts() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.opts)).cast_mut(),
        // 1180: &mut lock.opts: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1180: &mut lock.opts:   l2 = UNIQUE | NON_NULL, (empty)
        // 1180: &mut lock.opts: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1180: &mut lock.opts:   l4 = UNIQUE | NON_NULL, (empty)
        // 1180: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1180: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1180: &mut lock.opts: typeof(_3 = &mut ((*_4).6: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1180: &mut lock.opts:   l16 = UNIQUE | NON_NULL, (empty)
        // 1180: &mut lock.opts: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1180: &mut lock.opts:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"opts\0") as *const u8 as *const libc::c_char)),
        // 1181: b"opts\0" as *c ... _char: typeof(_5) = *const {l8} i8
        // 1181: b"opts\0" as *c ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1181: b"opts\0" as *c ... st u8: typeof(_6) = *const {l10} u8
        // 1181: b"opts\0" as *c ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1181: b"opts\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1181: b"opts\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1181: b"opts\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1181: b"opts\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1181: b"opts\0" as *c ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1181: b"opts\0" as *c ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1181: b"opts\0": typeof(_8 = const b"opts\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1181: b"opts\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1181: b"opts\0" as *c ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1181: b"opts\0" as *c ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1181: b"opts\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1181: b"opts\0":   l19 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn lockparleafs() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.parleafs)).cast_mut(),
        // 1186: &mut lock.parleafs: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1186: &mut lock.parleafs:   l2 = UNIQUE | NON_NULL, (empty)
        // 1186: &mut lock.parleafs: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1186: &mut lock.parleafs:   l4 = UNIQUE | NON_NULL, (empty)
        // 1186: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1186: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1186: &mut lock.parleafs: typeof(_3 = &mut ((*_4).7: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1186: &mut lock.parleafs:   l16 = UNIQUE | NON_NULL, (empty)
        // 1186: &mut lock.parleafs: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1186: &mut lock.parleafs:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"parleafs\0") as *const u8 as *const libc::c_char)),
        // 1187: b"parleafs\0" a ... _char: typeof(_5) = *const {l8} i8
        // 1187: b"parleafs\0" a ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1187: b"parleafs\0" a ... st u8: typeof(_6) = *const {l10} u8
        // 1187: b"parleafs\0" a ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1187: b"parleafs\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1187: b"parleafs\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1187: b"parleafs\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1187: b"parleafs\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1187: b"parleafs\0": typeof(_8 = const b"parleafs\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1187: b"parleafs\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1187: b"parleafs\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1187: b"parleafs\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1187: b"parleafs\0" a ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1187: b"parleafs\0" a ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1187: b"parleafs\0" a ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1187: b"parleafs\0" a ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn lockparstats() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.parstats)).cast_mut(),
        // 1192: &mut lock.parstats: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1192: &mut lock.parstats:   l2 = UNIQUE | NON_NULL, (empty)
        // 1192: &mut lock.parstats: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1192: &mut lock.parstats:   l4 = UNIQUE | NON_NULL, (empty)
        // 1192: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1192: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1192: &mut lock.parstats: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1192: &mut lock.parstats:   l17 = UNIQUE | NON_NULL, (empty)
        // 1192: &mut lock.parstats: typeof(_3 = &mut ((*_4).8: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1192: &mut lock.parstats:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"parstats\0") as *const u8 as *const libc::c_char)),
        // 1193: b"parstats\0" a ... _char: typeof(_5) = *const {l8} i8
        // 1193: b"parstats\0" a ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1193: b"parstats\0" a ... st u8: typeof(_6) = *const {l10} u8
        // 1193: b"parstats\0" a ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1193: b"parstats\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1193: b"parstats\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1193: b"parstats\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1193: b"parstats\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1193: b"parstats\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1193: b"parstats\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1193: b"parstats\0" a ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1193: b"parstats\0" a ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1193: b"parstats\0": typeof(_8 = const b"parstats\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1193: b"parstats\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1193: b"parstats\0" a ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1193: b"parstats\0" a ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn lockparunits() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.parunits)).cast_mut(),
        // 1198: &mut lock.parunits: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1198: &mut lock.parunits:   l2 = UNIQUE | NON_NULL, (empty)
        // 1198: &mut lock.parunits: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1198: &mut lock.parunits:   l4 = UNIQUE | NON_NULL, (empty)
        // 1198: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1198: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1198: &mut lock.parunits: typeof(_3 = &mut ((*_4).9: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1198: &mut lock.parunits:   l16 = UNIQUE | NON_NULL, (empty)
        // 1198: &mut lock.parunits: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1198: &mut lock.parunits:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"parunits\0") as *const u8 as *const libc::c_char)),
        // 1199: b"parunits\0" a ... _char: typeof(_5) = *const {l8} i8
        // 1199: b"parunits\0" a ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1199: b"parunits\0" a ... st u8: typeof(_6) = *const {l10} u8
        // 1199: b"parunits\0" a ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1199: b"parunits\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1199: b"parunits\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1199: b"parunits\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1199: b"parunits\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1199: b"parunits\0": typeof(_8 = const b"parunits\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1199: b"parunits\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1199: b"parunits\0" a ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1199: b"parunits\0" a ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1199: b"parunits\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1199: b"parunits\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1199: b"parunits\0" a ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1199: b"parunits\0" a ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn locksimplified() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.simplified)).cast_mut(),
        // 1204: &mut lock.simplified: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1204: &mut lock.simplified:   l2 = UNIQUE | NON_NULL, (empty)
        // 1204: &mut lock.simplified: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1204: &mut lock.simplified:   l4 = UNIQUE | NON_NULL, (empty)
        // 1204: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1204: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1204: &mut lock.simplified: typeof(_3 = &mut ((*_4).10: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1204: &mut lock.simplified:   l16 = UNIQUE | NON_NULL, (empty)
        // 1204: &mut lock.simplified: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1204: &mut lock.simplified:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"simplified\0") as *const u8 as *const libc::c_char)),
        // 1205: b"simplified\0" ... _char: typeof(_5) = *const {l8} i8
        // 1205: b"simplified\0" ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1205: b"simplified\0" ... st u8: typeof(_6) = *const {l10} u8
        // 1205: b"simplified\0" ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1205: b"simplified\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1205: b"simplified\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1205: b"simplified\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1205: b"simplified\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1205: b"simplified\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1205: b"simplified\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1205: b"simplified\0" ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1205: b"simplified\0" ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1205: b"simplified\0" ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1205: b"simplified\0" ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1205: b"simplified\0": typeof(_8 = const b"simplified\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1205: b"simplified\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    );
}
unsafe extern "C" fn lockstats() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.stats)).cast_mut(),
        // 1210: &mut lock.stats: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1210: &mut lock.stats:   l2 = UNIQUE | NON_NULL, (empty)
        // 1210: &mut lock.stats: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1210: &mut lock.stats:   l4 = UNIQUE | NON_NULL, (empty)
        // 1210: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1210: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1210: &mut lock.stats: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1210: &mut lock.stats:   l17 = UNIQUE | NON_NULL, (empty)
        // 1210: &mut lock.stats: typeof(_3 = &mut ((*_4).11: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1210: &mut lock.stats:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"stats\0") as *const u8 as *const libc::c_char)),
        // 1211: b"stats\0" as * ... _char: typeof(_5) = *const {l8} i8
        // 1211: b"stats\0" as * ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1211: b"stats\0" as * ... st u8: typeof(_6) = *const {l10} u8
        // 1211: b"stats\0" as * ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1211: b"stats\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1211: b"stats\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1211: b"stats\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1211: b"stats\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1211: b"stats\0" as * ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1211: b"stats\0" as * ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1211: b"stats\0": typeof(_8 = const b"stats\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1211: b"stats\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1211: b"stats\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1211: b"stats\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1211: b"stats\0" as * ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1211: b"stats\0" as * ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn lockworkers() {
    lockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.workers)).cast_mut(),
        // 1216: &mut lock.workers: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1216: &mut lock.workers:   l2 = UNIQUE | NON_NULL, (empty)
        // 1216: &mut lock.workers: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1216: &mut lock.workers:   l4 = UNIQUE | NON_NULL, (empty)
        // 1216: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1216: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1216: &mut lock.workers: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1216: &mut lock.workers:   l17 = UNIQUE | NON_NULL, (empty)
        // 1216: &mut lock.workers: typeof(_3 = &mut ((*_4).12: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1216: &mut lock.workers:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"workers\0") as *const u8 as *const libc::c_char)),
        // 1217: b"workers\0" as ... _char: typeof(_5) = *const {l8} i8
        // 1217: b"workers\0" as ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1217: b"workers\0" as ... st u8: typeof(_6) = *const {l10} u8
        // 1217: b"workers\0" as ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1217: b"workers\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 1217: b"workers\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1217: b"workers\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 1217: b"workers\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1217: b"workers\0" as ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1217: b"workers\0" as ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1217: b"workers\0" as ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1217: b"workers\0" as ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1217: b"workers\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 1217: b"workers\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1217: b"workers\0": typeof(_8 = const b"workers\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 1217: b"workers\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockconfs() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.confs)).cast_mut(),
        // 1222: &mut lock.confs: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1222: &mut lock.confs:   l2 = UNIQUE | NON_NULL, (empty)
        // 1222: &mut lock.confs: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1222: &mut lock.confs:   l4 = UNIQUE | NON_NULL, (empty)
        // 1222: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1222: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1222: &mut lock.confs: typeof(_3 = &mut ((*_4).0: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1222: &mut lock.confs:   l16 = UNIQUE | NON_NULL, (empty)
        // 1222: &mut lock.confs: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1222: &mut lock.confs:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"confs\0") as *const u8 as *const libc::c_char)),
        // 1223: b"confs\0" as * ... _char: typeof(_5) = *const {l8} i8
        // 1223: b"confs\0" as * ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1223: b"confs\0" as * ... st u8: typeof(_6) = *const {l10} u8
        // 1223: b"confs\0" as * ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1223: b"confs\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1223: b"confs\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1223: b"confs\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1223: b"confs\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1223: b"confs\0" as * ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1223: b"confs\0" as * ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1223: b"confs\0" as * ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1223: b"confs\0" as * ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1223: b"confs\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1223: b"confs\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1223: b"confs\0": typeof(_8 = const b"confs\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1223: b"confs\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockdone() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.done)).cast_mut(),
        // 1228: &mut lock.done: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1228: &mut lock.done:   l2 = UNIQUE | NON_NULL, (empty)
        // 1228: &mut lock.done: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1228: &mut lock.done:   l4 = UNIQUE | NON_NULL, (empty)
        // 1228: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1228: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1228: &mut lock.done: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1228: &mut lock.done:   l17 = UNIQUE | NON_NULL, (empty)
        // 1228: &mut lock.done: typeof(_3 = &mut ((*_4).1: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1228: &mut lock.done:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"done\0") as *const u8 as *const libc::c_char)),
        // 1229: b"done\0" as *c ... _char: typeof(_5) = *const {l8} i8
        // 1229: b"done\0" as *c ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1229: b"done\0" as *c ... st u8: typeof(_6) = *const {l10} u8
        // 1229: b"done\0" as *c ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1229: b"done\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1229: b"done\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1229: b"done\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1229: b"done\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1229: b"done\0": typeof(_8 = const b"done\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1229: b"done\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1229: b"done\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1229: b"done\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1229: b"done\0" as *c ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1229: b"done\0" as *c ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1229: b"done\0" as *c ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1229: b"done\0" as *c ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockleafs() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.leafs)).cast_mut(),
        // 1234: &mut lock.leafs: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1234: &mut lock.leafs:   l2 = UNIQUE | NON_NULL, (empty)
        // 1234: &mut lock.leafs: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1234: &mut lock.leafs:   l4 = UNIQUE | NON_NULL, (empty)
        // 1234: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1234: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1234: &mut lock.leafs: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1234: &mut lock.leafs:   l17 = UNIQUE | NON_NULL, (empty)
        // 1234: &mut lock.leafs: typeof(_3 = &mut ((*_4).2: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1234: &mut lock.leafs:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"leafs\0") as *const u8 as *const libc::c_char)),
        // 1235: b"leafs\0" as * ... _char: typeof(_5) = *const {l8} i8
        // 1235: b"leafs\0" as * ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1235: b"leafs\0" as * ... st u8: typeof(_6) = *const {l10} u8
        // 1235: b"leafs\0" as * ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1235: b"leafs\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1235: b"leafs\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1235: b"leafs\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1235: b"leafs\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1235: b"leafs\0" as * ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1235: b"leafs\0" as * ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1235: b"leafs\0" as * ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1235: b"leafs\0" as * ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1235: b"leafs\0": typeof(_8 = const b"leafs\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1235: b"leafs\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1235: b"leafs\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1235: b"leafs\0":   l19 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockmem() {
    unlockgen(core::ptr::addr_of!(*&mut *(&mut lock.mem)).cast_mut(), core::ptr::addr_of!(*(&*(b"mem\0") as *const u8 as *const libc::c_char)));
    // 1239: &mut lock.mem: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1239: &mut lock.mem:   l2 = UNIQUE | NON_NULL, (empty)
    // 1239: &mut lock.mem: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1239: &mut lock.mem:   l4 = UNIQUE | NON_NULL, (empty)
    // 1239: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 1239: lock:   l6 = UNIQUE | NON_NULL, (empty)
    // 1239: b"mem\0" as *co ... _char: typeof(_5) = *const {l8} i8
    // 1239: b"mem\0" as *co ... _char:   l8 = UNIQUE | NON_NULL, (empty)
    // 1239: b"mem\0" as *co ... st u8: typeof(_6) = *const {l10} u8
    // 1239: b"mem\0" as *co ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
    // 1239: b"mem\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1239: b"mem\0":   l12 = UNIQUE | NON_NULL, (empty)
    // 1239: b"mem\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1239: b"mem\0":   l14 = UNIQUE | NON_NULL, FIXED
    // 1239: b"mem\0" as *co ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
    // 1239: b"mem\0" as *co ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    // 1239: &mut lock.mem: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1239: &mut lock.mem:   l17 = UNIQUE | NON_NULL, (empty)
    // 1239: b"mem\0" as *co ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
    // 1239: b"mem\0" as *co ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
    // 1239: b"mem\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1239: b"mem\0":   l19 = UNIQUE | NON_NULL, (empty)
    // 1239: &mut lock.mem: typeof(_3 = &mut ((*_4).3: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1239: &mut lock.mem:   l16 = UNIQUE | NON_NULL, (empty)
    // 1239: b"mem\0": typeof(_8 = const b"mem\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1239: b"mem\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
}
unsafe extern "C" fn unlockmsg() {
    unlockgen(core::ptr::addr_of!(*&mut *(&mut lock.msg)).cast_mut(), core::ptr::addr_of!(*(&*(b"msg\0") as *const u8 as *const libc::c_char)));
    // 1242: &mut lock.msg: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1242: &mut lock.msg:   l2 = UNIQUE | NON_NULL, (empty)
    // 1242: &mut lock.msg: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1242: &mut lock.msg:   l4 = UNIQUE | NON_NULL, (empty)
    // 1242: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 1242: lock:   l6 = UNIQUE | NON_NULL, (empty)
    // 1242: b"msg\0" as *co ... _char: typeof(_5) = *const {l8} i8
    // 1242: b"msg\0" as *co ... _char:   l8 = UNIQUE | NON_NULL, (empty)
    // 1242: b"msg\0" as *co ... st u8: typeof(_6) = *const {l10} u8
    // 1242: b"msg\0" as *co ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
    // 1242: b"msg\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1242: b"msg\0":   l12 = UNIQUE | NON_NULL, (empty)
    // 1242: b"msg\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1242: b"msg\0":   l14 = UNIQUE | NON_NULL, FIXED
    // 1242: b"msg\0" as *co ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
    // 1242: b"msg\0" as *co ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
    // 1242: b"msg\0" as *co ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
    // 1242: b"msg\0" as *co ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    // 1242: &mut lock.msg: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1242: &mut lock.msg:   l17 = UNIQUE | NON_NULL, (empty)
    // 1242: &mut lock.msg: typeof(_3 = &mut ((*_4).4: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
    // 1242: &mut lock.msg:   l16 = UNIQUE | NON_NULL, (empty)
    // 1242: b"msg\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1242: b"msg\0":   l19 = UNIQUE | NON_NULL, (empty)
    // 1242: b"msg\0": typeof(_8 = const b"msg\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1242: b"msg\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
}
unsafe extern "C" fn unlocknodes() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.nodes)).cast_mut(),
        // 1246: &mut lock.nodes: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1246: &mut lock.nodes:   l2 = UNIQUE | NON_NULL, (empty)
        // 1246: &mut lock.nodes: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1246: &mut lock.nodes:   l4 = UNIQUE | NON_NULL, (empty)
        // 1246: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1246: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1246: &mut lock.nodes: typeof(_3 = &mut ((*_4).5: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1246: &mut lock.nodes:   l16 = UNIQUE | NON_NULL, (empty)
        // 1246: &mut lock.nodes: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1246: &mut lock.nodes:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"nodes\0") as *const u8 as *const libc::c_char)),
        // 1247: b"nodes\0" as * ... _char: typeof(_5) = *const {l8} i8
        // 1247: b"nodes\0" as * ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1247: b"nodes\0" as * ... st u8: typeof(_6) = *const {l10} u8
        // 1247: b"nodes\0" as * ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1247: b"nodes\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1247: b"nodes\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1247: b"nodes\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1247: b"nodes\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1247: b"nodes\0": typeof(_8 = const b"nodes\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1247: b"nodes\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1247: b"nodes\0" as * ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1247: b"nodes\0" as * ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1247: b"nodes\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1247: b"nodes\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1247: b"nodes\0" as * ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1247: b"nodes\0" as * ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockopts() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.opts)).cast_mut(),
        // 1252: &mut lock.opts: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1252: &mut lock.opts:   l2 = UNIQUE | NON_NULL, (empty)
        // 1252: &mut lock.opts: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1252: &mut lock.opts:   l4 = UNIQUE | NON_NULL, (empty)
        // 1252: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1252: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1252: &mut lock.opts: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1252: &mut lock.opts:   l17 = UNIQUE | NON_NULL, (empty)
        // 1252: &mut lock.opts: typeof(_3 = &mut ((*_4).6: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1252: &mut lock.opts:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"opts\0") as *const u8 as *const libc::c_char)),
        // 1253: b"opts\0" as *c ... _char: typeof(_5) = *const {l8} i8
        // 1253: b"opts\0" as *c ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1253: b"opts\0" as *c ... st u8: typeof(_6) = *const {l10} u8
        // 1253: b"opts\0" as *c ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1253: b"opts\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1253: b"opts\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1253: b"opts\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1253: b"opts\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1253: b"opts\0" as *c ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1253: b"opts\0" as *c ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1253: b"opts\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1253: b"opts\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1253: b"opts\0" as *c ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1253: b"opts\0" as *c ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1253: b"opts\0": typeof(_8 = const b"opts\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 1253: b"opts\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockparleafs() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.parleafs)).cast_mut(),
        // 1258: &mut lock.parleafs: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1258: &mut lock.parleafs:   l2 = UNIQUE | NON_NULL, (empty)
        // 1258: &mut lock.parleafs: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1258: &mut lock.parleafs:   l4 = UNIQUE | NON_NULL, (empty)
        // 1258: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1258: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1258: &mut lock.parleafs: typeof(_3 = &mut ((*_4).7: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1258: &mut lock.parleafs:   l16 = UNIQUE | NON_NULL, (empty)
        // 1258: &mut lock.parleafs: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1258: &mut lock.parleafs:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"parleafs\0") as *const u8 as *const libc::c_char)),
        // 1259: b"parleafs\0" a ... _char: typeof(_5) = *const {l8} i8
        // 1259: b"parleafs\0" a ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1259: b"parleafs\0" a ... st u8: typeof(_6) = *const {l10} u8
        // 1259: b"parleafs\0" a ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1259: b"parleafs\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1259: b"parleafs\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1259: b"parleafs\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1259: b"parleafs\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1259: b"parleafs\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1259: b"parleafs\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1259: b"parleafs\0": typeof(_8 = const b"parleafs\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1259: b"parleafs\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1259: b"parleafs\0" a ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1259: b"parleafs\0" a ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1259: b"parleafs\0" a ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1259: b"parleafs\0" a ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockparstats() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.parstats)).cast_mut(),
        // 1264: &mut lock.parstats: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1264: &mut lock.parstats:   l2 = UNIQUE | NON_NULL, (empty)
        // 1264: &mut lock.parstats: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1264: &mut lock.parstats:   l4 = UNIQUE | NON_NULL, (empty)
        // 1264: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1264: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1264: &mut lock.parstats: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1264: &mut lock.parstats:   l17 = UNIQUE | NON_NULL, (empty)
        // 1264: &mut lock.parstats: typeof(_3 = &mut ((*_4).8: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1264: &mut lock.parstats:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"parstats\0") as *const u8 as *const libc::c_char)),
        // 1265: b"parstats\0" a ... _char: typeof(_5) = *const {l8} i8
        // 1265: b"parstats\0" a ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1265: b"parstats\0" a ... st u8: typeof(_6) = *const {l10} u8
        // 1265: b"parstats\0" a ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1265: b"parstats\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1265: b"parstats\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1265: b"parstats\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1265: b"parstats\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1265: b"parstats\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1265: b"parstats\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1265: b"parstats\0" a ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1265: b"parstats\0" a ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1265: b"parstats\0" a ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1265: b"parstats\0" a ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1265: b"parstats\0": typeof(_8 = const b"parstats\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1265: b"parstats\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockparunits() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.parunits)).cast_mut(),
        // 1270: &mut lock.parunits: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1270: &mut lock.parunits:   l2 = UNIQUE | NON_NULL, (empty)
        // 1270: &mut lock.parunits: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1270: &mut lock.parunits:   l4 = UNIQUE | NON_NULL, (empty)
        // 1270: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1270: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1270: &mut lock.parunits: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1270: &mut lock.parunits:   l17 = UNIQUE | NON_NULL, (empty)
        // 1270: &mut lock.parunits: typeof(_3 = &mut ((*_4).9: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1270: &mut lock.parunits:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"parunits\0") as *const u8 as *const libc::c_char)),
        // 1271: b"parunits\0" a ... _char: typeof(_5) = *const {l8} i8
        // 1271: b"parunits\0" a ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1271: b"parunits\0" a ... st u8: typeof(_6) = *const {l10} u8
        // 1271: b"parunits\0" a ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1271: b"parunits\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1271: b"parunits\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1271: b"parunits\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1271: b"parunits\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1271: b"parunits\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1271: b"parunits\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1271: b"parunits\0": typeof(_8 = const b"parunits\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 1271: b"parunits\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1271: b"parunits\0" a ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1271: b"parunits\0" a ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1271: b"parunits\0" a ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1271: b"parunits\0" a ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlocksimplified() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.simplified)).cast_mut(),
        // 1276: &mut lock.simplified: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1276: &mut lock.simplified:   l2 = UNIQUE | NON_NULL, (empty)
        // 1276: &mut lock.simplified: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1276: &mut lock.simplified:   l4 = UNIQUE | NON_NULL, (empty)
        // 1276: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1276: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1276: &mut lock.simplified: typeof(_3 = &mut ((*_4).10: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1276: &mut lock.simplified:   l16 = UNIQUE | NON_NULL, (empty)
        // 1276: &mut lock.simplified: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1276: &mut lock.simplified:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"simplified\0") as *const u8 as *const libc::c_char)),
        // 1277: b"simplified\0" ... _char: typeof(_5) = *const {l8} i8
        // 1277: b"simplified\0" ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1277: b"simplified\0" ... st u8: typeof(_6) = *const {l10} u8
        // 1277: b"simplified\0" ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1277: b"simplified\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1277: b"simplified\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1277: b"simplified\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1277: b"simplified\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1277: b"simplified\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1277: b"simplified\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1277: b"simplified\0" ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1277: b"simplified\0" ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1277: b"simplified\0" ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1277: b"simplified\0" ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1277: b"simplified\0": typeof(_8 = const b"simplified\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1277: b"simplified\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockstats() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.stats)).cast_mut(),
        // 1282: &mut lock.stats: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1282: &mut lock.stats:   l2 = UNIQUE | NON_NULL, (empty)
        // 1282: &mut lock.stats: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1282: &mut lock.stats:   l4 = UNIQUE | NON_NULL, (empty)
        // 1282: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1282: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1282: &mut lock.stats: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1282: &mut lock.stats:   l17 = UNIQUE | NON_NULL, (empty)
        // 1282: &mut lock.stats: typeof(_3 = &mut ((*_4).11: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1282: &mut lock.stats:   l16 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"stats\0") as *const u8 as *const libc::c_char)),
        // 1283: b"stats\0" as * ... _char: typeof(_5) = *const {l8} i8
        // 1283: b"stats\0" as * ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1283: b"stats\0" as * ... st u8: typeof(_6) = *const {l10} u8
        // 1283: b"stats\0" as * ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1283: b"stats\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1283: b"stats\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1283: b"stats\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1283: b"stats\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1283: b"stats\0" as * ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1283: b"stats\0" as * ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1283: b"stats\0" as * ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1283: b"stats\0" as * ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1283: b"stats\0": typeof(_8 = const b"stats\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1283: b"stats\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1283: b"stats\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 1283: b"stats\0":   l19 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn unlockworkers() {
    unlockgen(
        core::ptr::addr_of!(*&mut *(&mut lock.workers)).cast_mut(),
        // 1288: &mut lock.workers: typeof(_2) = *mut {l2} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1288: &mut lock.workers:   l2 = UNIQUE | NON_NULL, (empty)
        // 1288: &mut lock.workers: typeof(_3) = &mut {l4} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1288: &mut lock.workers:   l4 = UNIQUE | NON_NULL, (empty)
        // 1288: lock: typeof(_4) = *mut {l6} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 1288: lock:   l6 = UNIQUE | NON_NULL, (empty)
        // 1288: &mut lock.workers: typeof(_3 = &mut ((*_4).12: Lock)) = &mut {l16} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1288: &mut lock.workers:   l16 = UNIQUE | NON_NULL, (empty)
        // 1288: &mut lock.workers: typeof(_2 = &raw mut (*_3)) = *mut {l17} DefId(0:832 ~ treengeling[2d04]::Lock)
        // 1288: &mut lock.workers:   l17 = UNIQUE | NON_NULL, (empty)
        core::ptr::addr_of!(*(&*(b"workers\0") as *const u8 as *const libc::c_char)),
        // 1289: b"workers\0" as ... _char: typeof(_5) = *const {l8} i8
        // 1289: b"workers\0" as ... _char:   l8 = UNIQUE | NON_NULL, (empty)
        // 1289: b"workers\0" as ... st u8: typeof(_6) = *const {l10} u8
        // 1289: b"workers\0" as ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
        // 1289: b"workers\0": typeof(_7) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 1289: b"workers\0":   l12 = UNIQUE | NON_NULL, (empty)
        // 1289: b"workers\0": typeof(_8) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 1289: b"workers\0":   l14 = UNIQUE | NON_NULL, FIXED
        // 1289: b"workers\0": typeof(_8 = const b"workers\x00") = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 1289: b"workers\0":   l18 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1289: b"workers\0": typeof(_7 = &raw const (*_8)) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 1289: b"workers\0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1289: b"workers\0" as ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l20} u8
        // 1289: b"workers\0" as ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1289: b"workers\0" as ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l21} i8
        // 1289: b"workers\0" as ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn err(mut fmt: *const libc::c_char, mut args: ...) {
// 1292: mut fmt: typeof(_1) = *const {g9} i8
// 1292: mut fmt:   g9 = UNIQUE | NON_NULL, FIXED
    let mut ap: ::core::ffi::VaListImpl;
    lockmsg();
    fputs(b"c *** \0" as *const u8 as *const libc::c_char, stdout);
    // 1295: b"c *** \0" as  ... _char: typeof(_7) = *const {l7} i8
    // 1295: b"c *** \0" as  ... _char:   l7 = UNIQUE | NON_NULL, (empty)
    // 1295: b"c *** \0" as  ... st u8: typeof(_8) = *const {l9} u8
    // 1295: b"c *** \0" as  ... st u8:   l9 = UNIQUE | NON_NULL, (empty)
    // 1295: b"c *** \0": typeof(_9) = *const {l11} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 1295: b"c *** \0":   l11 = UNIQUE | NON_NULL, (empty)
    // 1295: b"c *** \0": typeof(_10) = & {l13} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 1295: b"c *** \0":   l13 = UNIQUE | NON_NULL, FIXED
    // 1295: stdout: typeof(_11) = *mut {l15} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1295: stdout:   l15 = UNIQUE | NON_NULL, (empty)
    // 1295: stdout: typeof(_12) = *mut {l17} *mut {l18} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1295: stdout:   l17 = UNIQUE | NON_NULL, (empty)
    // 1295: stdout:   l18 = UNIQUE | NON_NULL, (empty)
    // 1295: b"c *** \0": typeof(_10 = const b"c *** \x00") = & {l45} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 1295: b"c *** \0":   l45 = UNIQUE | NON_NULL, (empty)
    // 1295: b"c *** \0" as  ... st u8: typeof(_8 = move _9 as *const u8 (Pointer(ArrayToPointer))) = *const {l47} u8
    // 1295: b"c *** \0" as  ... st u8:   l47 = UNIQUE | NON_NULL, (empty)
    // 1295: b"c *** \0" as  ... _char: typeof(_7 = move _8 as *const i8 (Misc)) = *const {l48} i8
    // 1295: b"c *** \0" as  ... _char:   l48 = UNIQUE | NON_NULL, (empty)
    // 1295: b"c *** \0": typeof(_9 = &raw const (*_10)) = *const {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 1295: b"c *** \0":   l46 = UNIQUE | NON_NULL, (empty)
    ap = args.clone();
    // 1296: args.clone(): typeof(_14) = & {l21} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1296: args.clone():   l21 = UNIQUE | NON_NULL, (empty)
    // 1296: args.clone(): typeof(_14 = &_2) = & {l49} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1296: args.clone():   l49 = UNIQUE | NON_NULL, (empty)
    vprintf(fmt, ap.as_va_list());
    // 1297: fmt: typeof(_16) = *const {l24} i8
    // 1297: fmt:   l24 = UNIQUE | NON_NULL, (empty)
    // 1297: ap.as_va_list(): typeof(_18) = &mut {l27} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1297: ap.as_va_list():   l27 = UNIQUE | NON_NULL, (empty)
    // 1297: ap.as_va_list(): typeof(_18 = &mut _4) = &mut {l50} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1297: ap.as_va_list():   l50 = UNIQUE | NON_NULL, (empty)
    fputc('\n' as i32, stdout);
    // 1298: stdout: typeof(_21) = *mut {l31} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1298: stdout:   l31 = UNIQUE | NON_NULL, (empty)
    // 1298: stdout: typeof(_22) = *mut {l33} *mut {l34} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1298: stdout:   l33 = UNIQUE | NON_NULL, (empty)
    // 1298: stdout:   l34 = UNIQUE | NON_NULL, (empty)
    fflush(stdout);
    // 1299: stdout: typeof(_24) = *mut {l37} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1299: stdout:   l37 = UNIQUE | NON_NULL, (empty)
    // 1299: stdout: typeof(_25) = *mut {l39} *mut {l40} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1299: stdout:   l39 = UNIQUE | NON_NULL, (empty)
    // 1299: stdout:   l40 = UNIQUE | NON_NULL, (empty)
    unlockmsg();
    exit(1 as libc::c_int);
}
unsafe extern "C" fn smsg() {
    let mut t: libc::c_double = getime();
    let mut m: libc::c_double = 0.;
    lockmem();
    m = currentbytes as libc::c_double
    // 1307: currentbytes: typeof(_6) = *mut {l6} u64
    // 1307: currentbytes:   l6 = UNIQUE | NON_NULL, (empty)
        / ((1 as libc::c_int) << 20 as libc::c_int) as libc::c_double;
    unlockmem();
    printf(
        b"(%.1f %d %lld %d %d %.0f) \0" as *const u8 as *const libc::c_char,
        // 1311: b"(%.1f %d %lld ... _char: typeof(_14) = *const {l15} i8
        // 1311: b"(%.1f %d %lld ... _char:   l15 = UNIQUE | NON_NULL, (empty)
        // 1311: b"(%.1f %d %lld ... st u8: typeof(_15) = *const {l17} u8
        // 1311: b"(%.1f %d %lld ... st u8:   l17 = UNIQUE | NON_NULL, (empty)
        // 1311: b"(%.1f %d %lld ... ) \0": typeof(_16) = *const {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 1311: b"(%.1f %d %lld ... ) \0":   l19 = UNIQUE | NON_NULL, (empty)
        // 1311: b"(%.1f %d %lld ... ) \0": typeof(_17) = & {l21} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 1311: b"(%.1f %d %lld ... ) \0":   l21 = UNIQUE | NON_NULL, FIXED
        // 1311: b"(%.1f %d %lld ... ) \0": typeof(_17 = const b"(%.1f %d %lld %d %d %.0f) \x00") = & {l37} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 1311: b"(%.1f %d %lld ... ) \0":   l37 = UNIQUE | NON_NULL, (empty)
        // 1311: b"(%.1f %d %lld ... _char: typeof(_14 = move _15 as *const i8 (Misc)) = *const {l40} i8
        // 1311: b"(%.1f %d %lld ... _char:   l40 = UNIQUE | NON_NULL, (empty)
        // 1311: b"(%.1f %d %lld ... st u8: typeof(_15 = move _16 as *const u8 (Pointer(ArrayToPointer))) = *const {l39} u8
        // 1311: b"(%.1f %d %lld ... st u8:   l39 = UNIQUE | NON_NULL, (empty)
        // 1311: b"(%.1f %d %lld ... ) \0": typeof(_16 = &raw const (*_17)) = *const {l38} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 1311: b"(%.1f %d %lld ... ) \0":   l38 = UNIQUE | NON_NULL, (empty)
        t,
        round,
        // 1313: round: typeof(_20) = *mut {l25} i32
        // 1313: round:   l25 = UNIQUE | NON_NULL, (empty)
        ids as libc::c_longlong,
        // 1314: ids: typeof(_22) = *mut {l28} i64
        // 1314: ids:   l28 = UNIQUE | NON_NULL, (empty)
        numnodes,
        // 1315: numnodes: typeof(_24) = *mut {l31} i32
        // 1315: numnodes:   l31 = UNIQUE | NON_NULL, (empty)
        clim,
        // 1316: clim: typeof(_26) = *mut {l34} i32
        // 1316: clim:   l34 = UNIQUE | NON_NULL, (empty)
        m,
    );
}
unsafe extern "C" fn msg(mut fmt: *const libc::c_char, mut args: ...) {
// 1320: mut fmt: typeof(_1) = *const {g10} i8
// 1320: mut fmt:   g10 = UNIQUE | NON_NULL, FIXED
    let mut ap: ::core::ffi::VaListImpl;
    lockmsg();
    fputs(b"c \0" as *const u8 as *const libc::c_char, stdout);
    // 1323: b"c \0" as *con ... _char: typeof(_6) = *const {l6} i8
    // 1323: b"c \0" as *con ... _char:   l6 = UNIQUE | NON_NULL, (empty)
    // 1323: b"c \0" as *const u8: typeof(_7) = *const {l8} u8
    // 1323: b"c \0" as *const u8:   l8 = UNIQUE | NON_NULL, (empty)
    // 1323: b"c \0": typeof(_8) = *const {l10} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1323: b"c \0":   l10 = UNIQUE | NON_NULL, (empty)
    // 1323: b"c \0": typeof(_9) = & {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1323: b"c \0":   l12 = UNIQUE | NON_NULL, FIXED
    // 1323: stdout: typeof(_10) = *mut {l14} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1323: stdout:   l14 = UNIQUE | NON_NULL, (empty)
    // 1323: stdout: typeof(_11) = *mut {l16} *mut {l17} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1323: stdout:   l16 = UNIQUE | NON_NULL, (empty)
    // 1323: stdout:   l17 = UNIQUE | NON_NULL, (empty)
    // 1323: b"c \0" as *const u8: typeof(_7 = move _8 as *const u8 (Pointer(ArrayToPointer))) = *const {l44} u8
    // 1323: b"c \0" as *const u8:   l44 = UNIQUE | NON_NULL, (empty)
    // 1323: b"c \0": typeof(_9 = const b"c \x00") = & {l42} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1323: b"c \0":   l42 = UNIQUE | NON_NULL, (empty)
    // 1323: b"c \0" as *con ... _char: typeof(_6 = move _7 as *const i8 (Misc)) = *const {l45} i8
    // 1323: b"c \0" as *con ... _char:   l45 = UNIQUE | NON_NULL, (empty)
    // 1323: b"c \0": typeof(_8 = &raw const (*_9)) = *const {l43} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1323: b"c \0":   l43 = UNIQUE | NON_NULL, (empty)
    ap = args.clone();
    // 1324: args.clone(): typeof(_13) = & {l20} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1324: args.clone():   l20 = UNIQUE | NON_NULL, (empty)
    // 1324: args.clone(): typeof(_13 = &_2) = & {l46} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1324: args.clone():   l46 = UNIQUE | NON_NULL, (empty)
    vprintf(fmt, ap.as_va_list());
    // 1325: fmt: typeof(_15) = *const {l23} i8
    // 1325: fmt:   l23 = UNIQUE | NON_NULL, (empty)
    // 1325: ap.as_va_list(): typeof(_17) = &mut {l26} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1325: ap.as_va_list():   l26 = UNIQUE | NON_NULL, (empty)
    // 1325: ap.as_va_list(): typeof(_17 = &mut _3) = &mut {l47} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1325: ap.as_va_list():   l47 = UNIQUE | NON_NULL, (empty)
    fputc('\n' as i32, stdout);
    // 1326: stdout: typeof(_20) = *mut {l30} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1326: stdout:   l30 = UNIQUE | NON_NULL, (empty)
    // 1326: stdout: typeof(_21) = *mut {l32} *mut {l33} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1326: stdout:   l32 = UNIQUE | NON_NULL, (empty)
    // 1326: stdout:   l33 = UNIQUE | NON_NULL, (empty)
    fflush(stdout);
    // 1327: stdout: typeof(_23) = *mut {l36} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1327: stdout:   l36 = UNIQUE | NON_NULL, (empty)
    // 1327: stdout: typeof(_24) = *mut {l38} *mut {l39} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1327: stdout:   l38 = UNIQUE | NON_NULL, (empty)
    // 1327: stdout:   l39 = UNIQUE | NON_NULL, (empty)
    unlockmsg();
}
unsafe extern "C" fn vrb(mut fmt: *const libc::c_char, mut args: ...) {
// 1330: mut fmt: typeof(_1) = *const {g11} i8
// 1330: mut fmt:   g11 = UNIQUE | NON_NULL, FIXED
    let mut ap: ::core::ffi::VaListImpl;
    if verbose == 0 {
    // 1332: verbose: typeof(_7) = *mut {l7} i32
    // 1332: verbose:   l7 = UNIQUE | NON_NULL, (empty)
        return;
    }
    lockmsg();
    fputs(b"c \0" as *const u8 as *const libc::c_char, stdout);
    // 1336: b"c \0" as *con ... _char: typeof(_11) = *const {l12} i8
    // 1336: b"c \0" as *con ... _char:   l12 = UNIQUE | NON_NULL, (empty)
    // 1336: b"c \0" as *const u8: typeof(_12) = *const {l14} u8
    // 1336: b"c \0" as *const u8:   l14 = UNIQUE | NON_NULL, (empty)
    // 1336: b"c \0": typeof(_13) = *const {l16} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1336: b"c \0":   l16 = UNIQUE | NON_NULL, (empty)
    // 1336: b"c \0": typeof(_14) = & {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1336: b"c \0":   l18 = UNIQUE | NON_NULL, FIXED
    // 1336: stdout: typeof(_15) = *mut {l20} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1336: stdout:   l20 = UNIQUE | NON_NULL, (empty)
    // 1336: stdout: typeof(_16) = *mut {l22} *mut {l23} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1336: stdout:   l22 = UNIQUE | NON_NULL, (empty)
    // 1336: stdout:   l23 = UNIQUE | NON_NULL, (empty)
    // 1336: b"c \0": typeof(_13 = &raw const (*_14)) = *const {l50} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1336: b"c \0":   l50 = UNIQUE | NON_NULL, (empty)
    // 1336: b"c \0" as *const u8: typeof(_12 = move _13 as *const u8 (Pointer(ArrayToPointer))) = *const {l51} u8
    // 1336: b"c \0" as *const u8:   l51 = UNIQUE | NON_NULL, (empty)
    // 1336: b"c \0" as *con ... _char: typeof(_11 = move _12 as *const i8 (Misc)) = *const {l52} i8
    // 1336: b"c \0" as *con ... _char:   l52 = UNIQUE | NON_NULL, (empty)
    // 1336: b"c \0": typeof(_14 = const b"c \x00") = & {l49} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1336: b"c \0":   l49 = UNIQUE | NON_NULL, (empty)
    smsg();
    ap = args.clone();
    // 1338: args.clone(): typeof(_19) = & {l27} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1338: args.clone():   l27 = UNIQUE | NON_NULL, (empty)
    // 1338: args.clone(): typeof(_19 = &_2) = & {l53} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1338: args.clone():   l53 = UNIQUE | NON_NULL, (empty)
    vprintf(fmt, ap.as_va_list());
    // 1339: fmt: typeof(_21) = *const {l30} i8
    // 1339: fmt:   l30 = UNIQUE | NON_NULL, (empty)
    // 1339: ap.as_va_list(): typeof(_23) = &mut {l33} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1339: ap.as_va_list():   l33 = UNIQUE | NON_NULL, (empty)
    // 1339: ap.as_va_list(): typeof(_23 = &mut _3) = &mut {l54} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1339: ap.as_va_list():   l54 = UNIQUE | NON_NULL, (empty)
    fputc('\n' as i32, stdout);
    // 1340: stdout: typeof(_26) = *mut {l37} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1340: stdout:   l37 = UNIQUE | NON_NULL, (empty)
    // 1340: stdout: typeof(_27) = *mut {l39} *mut {l40} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1340: stdout:   l39 = UNIQUE | NON_NULL, (empty)
    // 1340: stdout:   l40 = UNIQUE | NON_NULL, (empty)
    fflush(stdout);
    // 1341: stdout: typeof(_29) = *mut {l43} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1341: stdout:   l43 = UNIQUE | NON_NULL, (empty)
    // 1341: stdout: typeof(_30) = *mut {l45} *mut {l46} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1341: stdout:   l45 = UNIQUE | NON_NULL, (empty)
    // 1341: stdout:   l46 = UNIQUE | NON_NULL, (empty)
    unlockmsg();
}
unsafe extern "C" fn nmsg(mut node: *mut Node, mut fmt: *const libc::c_char, mut args: ...) {
// 1344: mut node: typeof(_1) = *mut {g12} DefId(0:777 ~ treengeling[2d04]::Node)
// 1344: mut node:   g12 = UNIQUE | NON_NULL, FIXED
// 1344: mut fmt: typeof(_2) = *const {g13} i8
// 1344: mut fmt:   g13 = UNIQUE | NON_NULL, FIXED
    let mut ap: ::core::ffi::VaListImpl;
    if verbose == 0 {
    // 1346: verbose: typeof(_8) = *mut {l8} i32
    // 1346: verbose:   l8 = UNIQUE | NON_NULL, (empty)
        return;
    }
    lockmsg();
    printf(
        b"c [%d %lld] \0" as *const u8 as *const libc::c_char,
        // 1351: b"c [%d %lld] \ ... _char: typeof(_12) = *const {l13} i8
        // 1351: b"c [%d %lld] \ ... _char:   l13 = UNIQUE | NON_NULL, (empty)
        // 1351: b"c [%d %lld] \ ... st u8: typeof(_13) = *const {l15} u8
        // 1351: b"c [%d %lld] \ ... st u8:   l15 = UNIQUE | NON_NULL, (empty)
        // 1351: b"c [%d %lld] \0": typeof(_14) = *const {l17} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 1351: b"c [%d %lld] \0":   l17 = UNIQUE | NON_NULL, (empty)
        // 1351: b"c [%d %lld] \0": typeof(_15) = & {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 1351: b"c [%d %lld] \0":   l19 = UNIQUE | NON_NULL, FIXED
        // 1351: b"c [%d %lld] \0": typeof(_15 = const b"c [%d %lld] \x00") = & {l47} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 1351: b"c [%d %lld] \0":   l47 = UNIQUE | NON_NULL, (empty)
        // 1351: b"c [%d %lld] \ ... st u8: typeof(_13 = move _14 as *const u8 (Pointer(ArrayToPointer))) = *const {l49} u8
        // 1351: b"c [%d %lld] \ ... st u8:   l49 = UNIQUE | NON_NULL, (empty)
        // 1351: b"c [%d %lld] \ ... _char: typeof(_12 = move _13 as *const i8 (Misc)) = *const {l50} i8
        // 1351: b"c [%d %lld] \ ... _char:   l50 = UNIQUE | NON_NULL, (empty)
        // 1351: b"c [%d %lld] \0": typeof(_14 = &raw const (*_15)) = *const {l48} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 1351: b"c [%d %lld] \0":   l48 = UNIQUE | NON_NULL, (empty)
        (*node).depth,
        (*node).id as libc::c_longlong,
    );
    smsg();
    ap = args.clone();
    // 1356: args.clone(): typeof(_20) = & {l25} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1356: args.clone():   l25 = UNIQUE | NON_NULL, (empty)
    // 1356: args.clone(): typeof(_20 = &_3) = & {l51} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1356: args.clone():   l51 = UNIQUE | NON_NULL, (empty)
    vprintf(fmt, ap.as_va_list());
    // 1357: fmt: typeof(_22) = *const {l28} i8
    // 1357: fmt:   l28 = UNIQUE | NON_NULL, (empty)
    // 1357: ap.as_va_list(): typeof(_24) = &mut {l31} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1357: ap.as_va_list():   l31 = UNIQUE | NON_NULL, (empty)
    // 1357: ap.as_va_list(): typeof(_24 = &mut _4) = &mut {l52} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1357: ap.as_va_list():   l52 = UNIQUE | NON_NULL, (empty)
    fputc('\n' as i32, stdout);
    // 1358: stdout: typeof(_27) = *mut {l35} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1358: stdout:   l35 = UNIQUE | NON_NULL, (empty)
    // 1358: stdout: typeof(_28) = *mut {l37} *mut {l38} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1358: stdout:   l37 = UNIQUE | NON_NULL, (empty)
    // 1358: stdout:   l38 = UNIQUE | NON_NULL, (empty)
    fflush(stdout);
    // 1359: stdout: typeof(_30) = *mut {l41} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1359: stdout:   l41 = UNIQUE | NON_NULL, (empty)
    // 1359: stdout: typeof(_31) = *mut {l43} *mut {l44} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1359: stdout:   l43 = UNIQUE | NON_NULL, (empty)
    // 1359: stdout:   l44 = UNIQUE | NON_NULL, (empty)
    unlockmsg();
}
unsafe extern "C" fn jmsg(mut job: *mut Job, mut msg_0: *const libc::c_char) {
// 1362: mut job: typeof(_1) = *mut {g14} DefId(0:822 ~ treengeling[2d04]::Job)
// 1362: mut job:   g14 = UNIQUE, FIXED
// 1362: mut msg_0: typeof(_2) = *const {g15} i8
// 1362: mut msg_0:   g15 = UNIQUE | NON_NULL, FIXED
    let mut node: *mut Node = (*job).node;
    // 1363: mut node: typeof(_3) = *mut {l3} DefId(0:777 ~ treengeling[2d04]::Node)
    // 1363: mut node:   l3 = UNIQUE | NON_NULL, (empty)
    if verbose == 0 {
    // 1364: verbose: typeof(_7) = *mut {l8} i32
    // 1364: verbose:   l8 = UNIQUE | NON_NULL, (empty)
        return;
    }
    lockmsg();
    printf(
        b"c [%d %lld] \0" as *const u8 as *const libc::c_char,
        // 1369: b"c [%d %lld] \ ... _char: typeof(_11) = *const {l13} i8
        // 1369: b"c [%d %lld] \ ... _char:   l13 = UNIQUE | NON_NULL, (empty)
        // 1369: b"c [%d %lld] \ ... st u8: typeof(_12) = *const {l15} u8
        // 1369: b"c [%d %lld] \ ... st u8:   l15 = UNIQUE | NON_NULL, (empty)
        // 1369: b"c [%d %lld] \0": typeof(_13) = *const {l17} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 1369: b"c [%d %lld] \0":   l17 = UNIQUE | NON_NULL, (empty)
        // 1369: b"c [%d %lld] \0": typeof(_14) = & {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 1369: b"c [%d %lld] \0":   l19 = UNIQUE | NON_NULL, FIXED
        // 1369: b"c [%d %lld] \ ... st u8: typeof(_12 = move _13 as *const u8 (Pointer(ArrayToPointer))) = *const {l47} u8
        // 1369: b"c [%d %lld] \ ... st u8:   l47 = UNIQUE | NON_NULL, (empty)
        // 1369: b"c [%d %lld] \0": typeof(_13 = &raw const (*_14)) = *const {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 1369: b"c [%d %lld] \0":   l46 = UNIQUE | NON_NULL, (empty)
        // 1369: b"c [%d %lld] \ ... _char: typeof(_11 = move _12 as *const i8 (Misc)) = *const {l48} i8
        // 1369: b"c [%d %lld] \ ... _char:   l48 = UNIQUE | NON_NULL, (empty)
        // 1369: b"c [%d %lld] \0": typeof(_14 = const b"c [%d %lld] \x00") = & {l45} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 1369: b"c [%d %lld] \0":   l45 = UNIQUE | NON_NULL, (empty)
        (*node).depth,
        (*node).id as libc::c_longlong,
    );
    smsg();
    printf(
        b"%s %s job %d\n\0" as *const u8 as *const libc::c_char,
        // 1375: b"%s %s job %d\ ... _char: typeof(_19) = *const {l25} i8
        // 1375: b"%s %s job %d\ ... _char:   l25 = UNIQUE | NON_NULL, (empty)
        // 1375: b"%s %s job %d\ ... st u8: typeof(_20) = *const {l27} u8
        // 1375: b"%s %s job %d\ ... st u8:   l27 = UNIQUE | NON_NULL, (empty)
        // 1375: b"%s %s job %d\n\0": typeof(_21) = *const {l29} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1375: b"%s %s job %d\n\0":   l29 = UNIQUE | NON_NULL, (empty)
        // 1375: b"%s %s job %d\n\0": typeof(_22) = & {l31} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1375: b"%s %s job %d\n\0":   l31 = UNIQUE | NON_NULL, FIXED
        // 1375: b"%s %s job %d\n\0": typeof(_22 = const b"%s %s job %d\n\x00") = & {l49} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1375: b"%s %s job %d\n\0":   l49 = UNIQUE | NON_NULL, (empty)
        // 1375: b"%s %s job %d\n\0": typeof(_21 = &raw const (*_22)) = *const {l50} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1375: b"%s %s job %d\n\0":   l50 = UNIQUE | NON_NULL, (empty)
        // 1375: b"%s %s job %d\ ... _char: typeof(_19 = move _20 as *const i8 (Misc)) = *const {l52} i8
        // 1375: b"%s %s job %d\ ... _char:   l52 = UNIQUE | NON_NULL, (empty)
        // 1375: b"%s %s job %d\ ... st u8: typeof(_20 = move _21 as *const u8 (Pointer(ArrayToPointer))) = *const {l51} u8
        // 1375: b"%s %s job %d\ ... st u8:   l51 = UNIQUE | NON_NULL, (empty)
        msg_0,
        // 1376: msg_0: typeof(_23) = *const {l33} i8
        // 1376: msg_0:   l33 = UNIQUE | NON_NULL, (empty)
        (*job).name,
        // 1377: (*job).name: typeof(_24) = *const {l35} i8
        // 1377: (*job).name:   l35 = UNIQUE | NON_NULL, (empty)
        (*job).pos,
    );
    fflush(stdout);
    // 1380: stdout: typeof(_27) = *mut {l39} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1380: stdout:   l39 = UNIQUE | NON_NULL, (empty)
    // 1380: stdout: typeof(_28) = *mut {l41} *mut {l42} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1380: stdout:   l41 = UNIQUE | NON_NULL, (empty)
    // 1380: stdout:   l42 = UNIQUE | NON_NULL, (empty)
    unlockmsg();
}
unsafe extern "C" fn mmsg(mut msg_0: *const libc::c_char, mut node: *mut Node) {
// 1383: mut msg_0: typeof(_1) = *const {g16} i8
// 1383: mut msg_0:   g16 = UNIQUE | NON_NULL, FIXED
// 1383: mut node: typeof(_2) = *mut {g17} DefId(0:777 ~ treengeling[2d04]::Node)
// 1383: mut node:   g17 = UNIQUE | NON_NULL, FIXED
    if verbose == 0 {
    // 1384: verbose: typeof(_6) = *mut {l6} i32
    // 1384: verbose:   l6 = UNIQUE | NON_NULL, (empty)
        return;
    }
    lockmsg();
    printf(b"c \0" as *const u8 as *const libc::c_char);
    // 1388: b"c \0" as *con ... _char: typeof(_10) = *const {l11} i8
    // 1388: b"c \0" as *con ... _char:   l11 = UNIQUE | NON_NULL, (empty)
    // 1388: b"c \0" as *const u8: typeof(_11) = *const {l13} u8
    // 1388: b"c \0" as *const u8:   l13 = UNIQUE | NON_NULL, (empty)
    // 1388: b"c \0": typeof(_12) = *const {l15} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1388: b"c \0":   l15 = UNIQUE | NON_NULL, (empty)
    // 1388: b"c \0": typeof(_13) = & {l17} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1388: b"c \0":   l17 = UNIQUE | NON_NULL, FIXED
    // 1388: b"c \0": typeof(_12 = &raw const (*_13)) = *const {l41} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1388: b"c \0":   l41 = UNIQUE | NON_NULL, (empty)
    // 1388: b"c \0" as *const u8: typeof(_11 = move _12 as *const u8 (Pointer(ArrayToPointer))) = *const {l42} u8
    // 1388: b"c \0" as *const u8:   l42 = UNIQUE | NON_NULL, (empty)
    // 1388: b"c \0": typeof(_13 = const b"c \x00") = & {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
    // 1388: b"c \0":   l40 = UNIQUE | NON_NULL, (empty)
    // 1388: b"c \0" as *con ... _char: typeof(_10 = move _11 as *const i8 (Misc)) = *const {l43} i8
    // 1388: b"c \0" as *con ... _char:   l43 = UNIQUE | NON_NULL, (empty)
    smsg();
    printf(
        b"%s [%d %lld]\n\0" as *const u8 as *const libc::c_char,
        // 1391: b"%s [%d %lld]\ ... _char: typeof(_16) = *const {l21} i8
        // 1391: b"%s [%d %lld]\ ... _char:   l21 = UNIQUE | NON_NULL, (empty)
        // 1391: b"%s [%d %lld]\ ... st u8: typeof(_17) = *const {l23} u8
        // 1391: b"%s [%d %lld]\ ... st u8:   l23 = UNIQUE | NON_NULL, (empty)
        // 1391: b"%s [%d %lld]\n\0": typeof(_18) = *const {l25} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1391: b"%s [%d %lld]\n\0":   l25 = UNIQUE | NON_NULL, (empty)
        // 1391: b"%s [%d %lld]\n\0": typeof(_19) = & {l27} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1391: b"%s [%d %lld]\n\0":   l27 = UNIQUE | NON_NULL, FIXED
        // 1391: b"%s [%d %lld]\n\0": typeof(_19 = const b"%s [%d %lld]\n\x00") = & {l44} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1391: b"%s [%d %lld]\n\0":   l44 = UNIQUE | NON_NULL, (empty)
        // 1391: b"%s [%d %lld]\ ... _char: typeof(_16 = move _17 as *const i8 (Misc)) = *const {l47} i8
        // 1391: b"%s [%d %lld]\ ... _char:   l47 = UNIQUE | NON_NULL, (empty)
        // 1391: b"%s [%d %lld]\ ... st u8: typeof(_17 = move _18 as *const u8 (Pointer(ArrayToPointer))) = *const {l46} u8
        // 1391: b"%s [%d %lld]\ ... st u8:   l46 = UNIQUE | NON_NULL, (empty)
        // 1391: b"%s [%d %lld]\n\0": typeof(_18 = &raw const (*_19)) = *const {l45} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1391: b"%s [%d %lld]\n\0":   l45 = UNIQUE | NON_NULL, (empty)
        msg_0,
        // 1392: msg_0: typeof(_20) = *const {l29} i8
        // 1392: msg_0:   l29 = UNIQUE | NON_NULL, (empty)
        (*node).depth,
        (*node).id as libc::c_longlong,
    );
    fflush(stdout);
    // 1396: stdout: typeof(_24) = *mut {l34} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1396: stdout:   l34 = UNIQUE | NON_NULL, (empty)
    // 1396: stdout: typeof(_25) = *mut {l36} *mut {l37} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1396: stdout:   l36 = UNIQUE | NON_NULL, (empty)
    // 1396: stdout:   l37 = UNIQUE | NON_NULL, (empty)
    unlockmsg();
}
unsafe extern "C" fn perr(mut fmt: *const libc::c_char, mut args: ...) {
// 1399: mut fmt: typeof(_1) = *const {g18} i8
// 1399: mut fmt:   g18 = UNIQUE | NON_NULL, FIXED
    let mut ap: ::core::ffi::VaListImpl;
    printf(
        b"c *** parse error in '%s' at line %d: \0" as *const u8 as *const libc::c_char,
        // 1402: b"c *** parse e ... _char: typeof(_6) = *const {l6} i8
        // 1402: b"c *** parse e ... _char:   l6 = UNIQUE | NON_NULL, (empty)
        // 1402: b"c *** parse e ... st u8: typeof(_7) = *const {l8} u8
        // 1402: b"c *** parse e ... st u8:   l8 = UNIQUE | NON_NULL, (empty)
        // 1402: b"c *** parse e ... : \0": typeof(_8) = *const {l10} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
        // 1402: b"c *** parse e ... : \0":   l10 = UNIQUE | NON_NULL, (empty)
        // 1402: b"c *** parse e ... : \0": typeof(_9) = & {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
        // 1402: b"c *** parse e ... : \0":   l12 = UNIQUE | NON_NULL, FIXED
        // 1402: b"c *** parse e ... : \0": typeof(_8 = &raw const (*_9)) = *const {l47} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
        // 1402: b"c *** parse e ... : \0":   l47 = UNIQUE | NON_NULL, (empty)
        // 1402: b"c *** parse e ... _char: typeof(_6 = move _7 as *const i8 (Misc)) = *const {l49} i8
        // 1402: b"c *** parse e ... _char:   l49 = UNIQUE | NON_NULL, (empty)
        // 1402: b"c *** parse e ... : \0": typeof(_9 = const b"c *** parse error in \'%s\' at line %d: \x00") = & {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
        // 1402: b"c *** parse e ... : \0":   l46 = UNIQUE | NON_NULL, (empty)
        // 1402: b"c *** parse e ... st u8: typeof(_7 = move _8 as *const u8 (Pointer(ArrayToPointer))) = *const {l48} u8
        // 1402: b"c *** parse e ... st u8:   l48 = UNIQUE | NON_NULL, (empty)
        fname,
        // 1403: fname: typeof(_10) = *const {l14} i8
        // 1403: fname:   l14 = UNIQUE | NON_NULL, (empty)
        // 1403: fname: typeof(_11) = *mut {l16} *const {l17} i8
        // 1403: fname:   l16 = UNIQUE | NON_NULL, (empty)
        // 1403: fname:   l17 = UNIQUE | NON_NULL, (empty)
        lineno,
        // 1404: lineno: typeof(_13) = *mut {l20} i32
        // 1404: lineno:   l20 = UNIQUE | NON_NULL, (empty)
    );
    ap = args.clone();
    // 1406: args.clone(): typeof(_15) = & {l23} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1406: args.clone():   l23 = UNIQUE | NON_NULL, (empty)
    // 1406: args.clone(): typeof(_15 = &_2) = & {l50} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1406: args.clone():   l50 = UNIQUE | NON_NULL, (empty)
    vprintf(fmt, ap.as_va_list());
    // 1407: fmt: typeof(_17) = *const {l26} i8
    // 1407: fmt:   l26 = UNIQUE | NON_NULL, (empty)
    // 1407: ap.as_va_list(): typeof(_19) = &mut {l29} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1407: ap.as_va_list():   l29 = UNIQUE | NON_NULL, (empty)
    // 1407: ap.as_va_list(): typeof(_19 = &mut _4) = &mut {l51} DefId(2:46548 ~ core[480a]::ffi::VaListImpl)
    // 1407: ap.as_va_list():   l51 = UNIQUE | NON_NULL, (empty)
    fputc('\n' as i32, stdout);
    // 1408: stdout: typeof(_22) = *mut {l33} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1408: stdout:   l33 = UNIQUE | NON_NULL, (empty)
    // 1408: stdout: typeof(_23) = *mut {l35} *mut {l36} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1408: stdout:   l35 = UNIQUE | NON_NULL, (empty)
    // 1408: stdout:   l36 = UNIQUE | NON_NULL, (empty)
    fflush(stdout);
    // 1409: stdout: typeof(_25) = *mut {l39} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1409: stdout:   l39 = UNIQUE | NON_NULL, (empty)
    // 1409: stdout: typeof(_26) = *mut {l41} *mut {l42} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1409: stdout:   l41 = UNIQUE | NON_NULL, (empty)
    // 1409: stdout:   l42 = UNIQUE | NON_NULL, (empty)
    exit(1 as libc::c_int);
}
unsafe extern "C" fn skipnode(mut node: *mut Node) -> libc::c_int {
// 1412: mut node: typeof(_1) = *mut {g19} DefId(0:777 ~ treengeling[2d04]::Node)
// 1412: mut node:   g19 = (empty), CELL | FIXED
    if lglinconsistent((*node).lgl) != 0 {
    // 1413: (*node).lgl: typeof(_6) = *mut {l6} LGL
    // 1413: (*node).lgl:   l6 = UNIQUE | NON_NULL, (empty)
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn incround() {
    round += 1;
    // 1419: round: typeof(_1) = *mut {l1} i32
    // 1419: round:   l1 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    round;
    // 1420: round: typeof(_4) = *mut {l5} i32
    // 1420: round:   l5 = READ | UNIQUE | NON_NULL, (empty)
    vrb(b"\0" as *const u8 as *const libc::c_char);
    // 1421: b"\0" as *const ... _char: typeof(_6) = *const {l8} i8
    // 1421: b"\0" as *const ... _char:   l8 = UNIQUE | NON_NULL, (empty)
    // 1421: b"\0" as *const u8: typeof(_7) = *const {l10} u8
    // 1421: b"\0" as *const u8:   l10 = UNIQUE | NON_NULL, (empty)
    // 1421: b"\0": typeof(_8) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1421: b"\0":   l12 = UNIQUE | NON_NULL, (empty)
    // 1421: b"\0": typeof(_9) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1421: b"\0":   l14 = UNIQUE | NON_NULL, FIXED
    // 1421: b"\0": typeof(_9 = const b"\x00") = & {l37} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1421: b"\0":   l37 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 1421: b"\0" as *const u8: typeof(_7 = move _8 as *const u8 (Pointer(ArrayToPointer))) = *const {l39} u8
    // 1421: b"\0" as *const u8:   l39 = UNIQUE | NON_NULL, (empty)
    // 1421: b"\0": typeof(_8 = &raw const (*_9)) = *const {l38} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1421: b"\0":   l38 = UNIQUE | NON_NULL, (empty)
    // 1421: b"\0" as *const ... _char: typeof(_6 = move _7 as *const i8 (Misc)) = *const {l40} i8
    // 1421: b"\0" as *const ... _char:   l40 = UNIQUE | NON_NULL, (empty)
    vrb(
        b"=================== [ round %d ] ===================\0" as *const u8
        // 1423: b"============= ... _char: typeof(_11) = *const {l17} i8
        // 1423: b"============= ... _char:   l17 = UNIQUE | NON_NULL, (empty)
        // 1423: b"============= ... st u8: typeof(_12) = *const {l19} u8
        // 1423: b"============= ... st u8:   l19 = UNIQUE | NON_NULL, (empty)
        // 1423: b"============= ... ==\0": typeof(_13) = *const {l21} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
        // 1423: b"============= ... ==\0":   l21 = UNIQUE | NON_NULL, (empty)
        // 1423: b"============= ... ==\0": typeof(_14) = & {l23} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
        // 1423: b"============= ... ==\0":   l23 = UNIQUE | NON_NULL, FIXED
        // 1423: b"============= ... ==\0": typeof(_13 = &raw const (*_14)) = *const {l42} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
        // 1423: b"============= ... ==\0":   l42 = UNIQUE | NON_NULL, (empty)
        // 1423: b"============= ... st u8: typeof(_12 = move _13 as *const u8 (Pointer(ArrayToPointer))) = *const {l43} u8
        // 1423: b"============= ... st u8:   l43 = UNIQUE | NON_NULL, (empty)
        // 1423: b"============= ... _char: typeof(_11 = move _12 as *const i8 (Misc)) = *const {l44} i8
        // 1423: b"============= ... _char:   l44 = UNIQUE | NON_NULL, (empty)
        // 1423: b"============= ... ==\0": typeof(_14 = const b"=================== [ round %d ] ===================\x00") = & {l41} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
        // 1423: b"============= ... ==\0":   l41 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            as *const libc::c_char,
        round,
        // 1425: round: typeof(_16) = *mut {l26} i32
        // 1425: round:   l26 = READ | UNIQUE | NON_NULL, (empty)
    );
    vrb(b"\0" as *const u8 as *const libc::c_char);
    // 1427: b"\0" as *const ... _char: typeof(_18) = *const {l29} i8
    // 1427: b"\0" as *const ... _char:   l29 = UNIQUE | NON_NULL, (empty)
    // 1427: b"\0" as *const u8: typeof(_19) = *const {l31} u8
    // 1427: b"\0" as *const u8:   l31 = UNIQUE | NON_NULL, (empty)
    // 1427: b"\0": typeof(_20) = *const {l33} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1427: b"\0":   l33 = UNIQUE | NON_NULL, (empty)
    // 1427: b"\0": typeof(_21) = & {l35} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1427: b"\0":   l35 = UNIQUE | NON_NULL, FIXED
    // 1427: b"\0" as *const u8: typeof(_19 = move _20 as *const u8 (Pointer(ArrayToPointer))) = *const {l47} u8
    // 1427: b"\0" as *const u8:   l47 = UNIQUE | NON_NULL, (empty)
    // 1427: b"\0": typeof(_20 = &raw const (*_21)) = *const {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1427: b"\0":   l46 = UNIQUE | NON_NULL, (empty)
    // 1427: b"\0": typeof(_21 = const b"\x00") = & {l45} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1427: b"\0":   l45 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 1427: b"\0" as *const ... _char: typeof(_18 = move _19 as *const i8 (Misc)) = *const {l48} i8
    // 1427: b"\0" as *const ... _char:   l48 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn startphase(mut phase: *const libc::c_char) {
// 1429: mut phase: typeof(_1) = *const {g20} i8
// 1429: mut phase:   g20 = UNIQUE | NON_NULL, FIXED
    if verbose == 0 {
    // 1430: verbose: typeof(_5) = *mut {l5} i32
    // 1430: verbose:   l5 = READ | UNIQUE | NON_NULL, (empty)
        return;
    }
    vrb(b"\0" as *const u8 as *const libc::c_char);
    // 1433: b"\0" as *const ... _char: typeof(_8) = *const {l9} i8
    // 1433: b"\0" as *const ... _char:   l9 = UNIQUE | NON_NULL, (empty)
    // 1433: b"\0" as *const u8: typeof(_9) = *const {l11} u8
    // 1433: b"\0" as *const u8:   l11 = UNIQUE | NON_NULL, (empty)
    // 1433: b"\0": typeof(_10) = *const {l13} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1433: b"\0":   l13 = UNIQUE | NON_NULL, (empty)
    // 1433: b"\0": typeof(_11) = & {l15} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1433: b"\0":   l15 = UNIQUE | NON_NULL, FIXED
    // 1433: b"\0" as *const u8: typeof(_9 = move _10 as *const u8 (Pointer(ArrayToPointer))) = *const {l42} u8
    // 1433: b"\0" as *const u8:   l42 = UNIQUE | NON_NULL, (empty)
    // 1433: b"\0": typeof(_11 = const b"\x00") = & {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1433: b"\0":   l40 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 1433: b"\0": typeof(_10 = &raw const (*_11)) = *const {l41} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1433: b"\0":   l41 = UNIQUE | NON_NULL, (empty)
    // 1433: b"\0" as *const ... _char: typeof(_8 = move _9 as *const i8 (Misc)) = *const {l43} i8
    // 1433: b"\0" as *const ... _char:   l43 = UNIQUE | NON_NULL, (empty)
    vrb(
        b"------------------- [ %s %d ] -------------------\0" as *const u8 as *const libc::c_char,
        // 1435: b"------------- ... _char: typeof(_13) = *const {l18} i8
        // 1435: b"------------- ... _char:   l18 = UNIQUE | NON_NULL, (empty)
        // 1435: b"------------- ... st u8: typeof(_14) = *const {l20} u8
        // 1435: b"------------- ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
        // 1435: b"------------- ... --\0": typeof(_15) = *const {l22} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 1435: b"------------- ... --\0":   l22 = UNIQUE | NON_NULL, (empty)
        // 1435: b"------------- ... --\0": typeof(_16) = & {l24} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 1435: b"------------- ... --\0":   l24 = UNIQUE | NON_NULL, FIXED
        // 1435: b"------------- ... _char: typeof(_13 = move _14 as *const i8 (Misc)) = *const {l47} i8
        // 1435: b"------------- ... _char:   l47 = UNIQUE | NON_NULL, (empty)
        // 1435: b"------------- ... --\0": typeof(_15 = &raw const (*_16)) = *const {l45} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 1435: b"------------- ... --\0":   l45 = UNIQUE | NON_NULL, (empty)
        // 1435: b"------------- ... st u8: typeof(_14 = move _15 as *const u8 (Pointer(ArrayToPointer))) = *const {l46} u8
        // 1435: b"------------- ... st u8:   l46 = UNIQUE | NON_NULL, (empty)
        // 1435: b"------------- ... --\0": typeof(_16 = const b"------------------- [ %s %d ] -------------------\x00") = & {l44} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 1435: b"------------- ... --\0":   l44 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        phase,
        // 1436: phase: typeof(_17) = *const {l26} i8
        // 1436: phase:   l26 = UNIQUE | NON_NULL, (empty)
        round,
        // 1437: round: typeof(_19) = *mut {l29} i32
        // 1437: round:   l29 = READ | UNIQUE | NON_NULL, (empty)
    );
    vrb(b"\0" as *const u8 as *const libc::c_char);
    // 1439: b"\0" as *const ... _char: typeof(_21) = *const {l32} i8
    // 1439: b"\0" as *const ... _char:   l32 = UNIQUE | NON_NULL, (empty)
    // 1439: b"\0" as *const u8: typeof(_22) = *const {l34} u8
    // 1439: b"\0" as *const u8:   l34 = UNIQUE | NON_NULL, (empty)
    // 1439: b"\0": typeof(_23) = *const {l36} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1439: b"\0":   l36 = UNIQUE | NON_NULL, (empty)
    // 1439: b"\0": typeof(_24) = & {l38} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1439: b"\0":   l38 = UNIQUE | NON_NULL, FIXED
    // 1439: b"\0": typeof(_24 = const b"\x00") = & {l48} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1439: b"\0":   l48 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 1439: b"\0": typeof(_23 = &raw const (*_24)) = *const {l49} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 1439: b"\0":   l49 = UNIQUE | NON_NULL, (empty)
    // 1439: b"\0" as *const u8: typeof(_22 = move _23 as *const u8 (Pointer(ArrayToPointer))) = *const {l50} u8
    // 1439: b"\0" as *const u8:   l50 = UNIQUE | NON_NULL, (empty)
    // 1439: b"\0" as *const ... _char: typeof(_21 = move _22 as *const i8 (Misc)) = *const {l51} i8
    // 1439: b"\0" as *const ... _char:   l51 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn avg(mut a: libc::c_double, mut b: libc::c_double) -> libc::c_double {
    return if b > 0 as libc::c_int as libc::c_double {
        a / b
    } else {
        0.0f64
    };
}
unsafe extern "C" fn pcnt(mut a: libc::c_double, mut b: libc::c_double) -> libc::c_double {
    return avg(100.0f64 * a, b);
}
unsafe extern "C" fn incmem(mut bytes: size_t) {
    lockmem();
    currentbytes = currentbytes.wrapping_add(bytes);
    // 1453: currentbytes: typeof(_5) = *mut {l5} u64
    // 1453: currentbytes:   l5 = READ | UNIQUE | NON_NULL, (empty)
    // 1453: currentbytes: typeof(_7) = *mut {l8} u64
    // 1453: currentbytes:   l8 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    if currentbytes > maxbytes {
    // 1454: currentbytes: typeof(_11) = *mut {l13} u64
    // 1454: currentbytes:   l13 = READ | UNIQUE | NON_NULL, (empty)
    // 1454: maxbytes: typeof(_13) = *mut {l16} u64
    // 1454: maxbytes:   l16 = READ | UNIQUE | NON_NULL, (empty)
        maxbytes = currentbytes;
        // 1455: currentbytes: typeof(_15) = *mut {l19} u64
        // 1455: currentbytes:   l19 = READ | UNIQUE | NON_NULL, (empty)
        // 1455: maxbytes: typeof(_16) = *mut {l21} u64
        // 1455: maxbytes:   l21 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    }
    unlockmem();
}
unsafe extern "C" fn decmem(mut bytes: size_t) {
    lockmem();
    currentbytes = currentbytes.wrapping_sub(bytes);
    // 1461: currentbytes: typeof(_5) = *mut {l5} u64
    // 1461: currentbytes:   l5 = READ | UNIQUE | NON_NULL, (empty)
    // 1461: currentbytes: typeof(_7) = *mut {l8} u64
    // 1461: currentbytes:   l8 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    unlockmem();
}
unsafe extern "C" fn alloc<'h0,'h1>(mut dummy: &'h0 (libc::c_void), mut bytes: size_t) -> core::option::Option<&'h1 (libc::c_void)> {
// 1464: *mut libc::c_void: typeof(_0) = *mut {g22} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 1464: *mut libc::c_void:   g22 = UNIQUE, (empty)
// 1464: mut dummy: typeof(_1) = *mut {g21} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 1464: mut dummy:   g21 = UNIQUE | NON_NULL, (empty)
    let mut res: core::option::Option<&mut [(libc::c_char)]> = None;
    // 1465: mut res: typeof(_4) = *mut {l4} i8
    // 1465: mut res:   l4 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 1465: 0 as *mut libc: ... _char: typeof(_4 = const 0_usize as *mut i8 (PointerFromExposedAddress)) = *mut {l41} i8
    // 1465: 0 as *mut libc: ... _char:   l41 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    let mut BYTES: size_t =
        bytes.wrapping_mul(::core::mem::size_of::<libc::c_char>() as libc::c_ulong);
    res = std::option::Option::Some((malloc(BYTES) as *mut libc::c_char));
    // 1468: malloc(BYTES): typeof(_9) = *mut {l10} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1468: malloc(BYTES):   l10 = WRITE | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 1468: res = malloc(BY ... _char: typeof(_4 = move _9 as *mut i8 (Misc)) = *mut {l42} i8
    // 1468: res = malloc(BY ... _char:   l42 = WRITE | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    if (res).as_deref().map(|__ptr| &__ptr[0]).is_none() {
    // 1469: res: typeof(_13) = *mut {l15} i8
    // 1469: res:   l15 = UNIQUE, (empty)
        err(core::ptr::addr_of!(*(&*(b"out of memory\0") as *const u8 as *const libc::c_char)));
        // 1470: b"out of memory ... _char: typeof(_16) = *const {l19} i8
        // 1470: b"out of memory ... _char:   l19 = UNIQUE | NON_NULL, (empty)
        // 1470: b"out of memory ... st u8: typeof(_17) = *const {l21} u8
        // 1470: b"out of memory ... st u8:   l21 = UNIQUE | NON_NULL, (empty)
        // 1470: b"out of memory\0": typeof(_18) = *const {l23} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1470: b"out of memory\0":   l23 = UNIQUE | NON_NULL, (empty)
        // 1470: b"out of memory\0": typeof(_19) = & {l25} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1470: b"out of memory\0":   l25 = UNIQUE | NON_NULL, FIXED
        // 1470: b"out of memory ... st u8: typeof(_17 = move _18 as *const u8 (Pointer(ArrayToPointer))) = *const {l45} u8
        // 1470: b"out of memory ... st u8:   l45 = UNIQUE | NON_NULL, (empty)
        // 1470: b"out of memory ... _char: typeof(_16 = move _17 as *const i8 (Misc)) = *const {l46} i8
        // 1470: b"out of memory ... _char:   l46 = UNIQUE | NON_NULL, (empty)
        // 1470: b"out of memory\0": typeof(_19 = const b"out of memory\x00") = & {l43} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1470: b"out of memory\0":   l43 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 1470: b"out of memory\0": typeof(_18 = &raw const (*_19)) = *const {l44} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 1470: b"out of memory\0":   l44 = UNIQUE | NON_NULL, (empty)
        exit(1 as libc::c_int);
    }
    memset(res as *mut libc::c_void, 0 as libc::c_int, BYTES);
    // 1473: memset(res as * ... YTES): typeof(_22) = *mut {l29} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1473: memset(res as * ... YTES):   l29 = UNIQUE | NON_NULL, (empty)
    // 1473: res as *mut lib ... _void: typeof(_23) = *mut {l31} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1473: res as *mut lib ... _void:   l31 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 1473: res: typeof(_24) = *mut {l33} i8
    // 1473: res:   l33 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 1473: res as *mut lib ... _void: typeof(_23 = move _24 as *mut libc::c_void (Misc)) = *mut {l47} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1473: res as *mut lib ... _void:   l47 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    incmem(BYTES);
    return (res).as_deref().map(|__ptr| &__ptr[0]) as *mut libc::c_void;
    // 1475: res: typeof(_29) = *mut {l39} i8
    // 1475: res:   l39 = UNIQUE, (empty)
    // 1475: res as *mut lib ... _void: typeof(_0 = move _29 as *mut libc::c_void (Misc)) = *mut {l48} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1475: res as *mut lib ... _void:   l48 = UNIQUE, (empty)
}
unsafe fn alloc_shim(arg0: *mut libc::c_void, arg1: size_t) -> *mut libc::c_void {
    {
    let safe_arg0 = &*arg0.cast_const();
    let safe_arg1 = arg1;
    let safe_result = alloc(safe_arg0,safe_arg1);
    let result = core::ptr::addr_of!(*safe_result.unwrap()).cast_mut();
    result
}
}

unsafe extern "C" fn dealloc<'h0,'h1>(
    mut dummy: &'h0 (libc::c_void),
    // 1478: mut dummy: typeof(_1) = *mut {g23} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1478: mut dummy:   g23 = UNIQUE | NON_NULL, (empty)
    mut void_ptr: &'h1 (libc::c_void),
    // 1479: mut void_ptr: typeof(_2) = *mut {g24} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1479: mut void_ptr:   g24 = UNIQUE | FREE | NON_NULL, (empty)
    mut bytes: size_t,
) {
    let mut char_ptr: &(libc::c_char) = void_ptr as *mut libc::c_char;
    // 1482: mut char_ptr: typeof(_4) = *mut {l4} i8
    // 1482: mut char_ptr:   l4 = UNIQUE | FREE | NON_NULL, (empty)
    // 1482: void_ptr: typeof(_5) = *mut {l6} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1482: void_ptr:   l6 = UNIQUE | FREE | NON_NULL, (empty)
    // 1482: void_ptr as *mu ... _char: typeof(_4 = move _5 as *mut i8 (Misc)) = *mut {l19} i8
    // 1482: void_ptr as *mu ... _char:   l19 = UNIQUE | FREE | NON_NULL, (empty)
    let mut BYTES: size_t =
        bytes.wrapping_mul(::core::mem::size_of::<libc::c_char>() as libc::c_ulong);
    decmem(BYTES);
    free(char_ptr as *mut libc::c_void);
    // 1486: char_ptr as *mu ... _void: typeof(_13) = *mut {l15} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1486: char_ptr as *mu ... _void:   l15 = UNIQUE | FREE | NON_NULL, (empty)
    // 1486: char_ptr: typeof(_14) = *mut {l17} i8
    // 1486: char_ptr:   l17 = UNIQUE | FREE | NON_NULL, (empty)
    // 1486: char_ptr as *mu ... _void: typeof(_13 = move _14 as *mut libc::c_void (Misc)) = *mut {l20} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1486: char_ptr as *mu ... _void:   l20 = UNIQUE | FREE | NON_NULL, (empty)
}
unsafe fn dealloc_shim(arg0: *mut libc::c_void, arg1: *mut libc::c_void, arg2: size_t) {
    {
    let safe_arg0 = &*arg0.cast_const();
    let safe_arg1 = &*arg1.cast_const();
    let safe_arg2 = arg2;
    let safe_result = dealloc(safe_arg0,safe_arg1,safe_arg2);
    let result = safe_result;
    result
}
}

unsafe extern "C" fn resize(
    mut dummy: *mut libc::c_void,
    // 1489: mut dummy: typeof(_1) = *mut {g25} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1489: mut dummy:   g25 = UNIQUE | NON_NULL, FIXED
    mut ptr: *mut libc::c_void,
    // 1490: mut ptr: typeof(_2) = *mut {g26} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1490: mut ptr:   g26 = UNIQUE | FREE | NON_NULL, FIXED
    mut old_bytes: size_t,
    mut new_bytes: size_t,
) -> *mut libc::c_void {
// 1493: *mut libc::c_void: typeof(_0) = *mut {g27} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 1493: *mut libc::c_void:   g27 = UNIQUE | NON_NULL, FIXED
    lockmem();
    currentbytes = currentbytes.wrapping_sub(old_bytes);
    // 1495: currentbytes: typeof(_9) = *mut {l9} u64
    // 1495: currentbytes:   l9 = READ | UNIQUE | NON_NULL, (empty)
    // 1495: currentbytes: typeof(_11) = *mut {l12} u64
    // 1495: currentbytes:   l12 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    currentbytes = currentbytes.wrapping_add(new_bytes);
    // 1496: currentbytes: typeof(_14) = *mut {l16} u64
    // 1496: currentbytes:   l16 = READ | UNIQUE | NON_NULL, (empty)
    // 1496: currentbytes: typeof(_16) = *mut {l19} u64
    // 1496: currentbytes:   l19 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    if currentbytes > maxbytes {
    // 1497: currentbytes: typeof(_20) = *mut {l24} u64
    // 1497: currentbytes:   l24 = READ | UNIQUE | NON_NULL, (empty)
    // 1497: maxbytes: typeof(_22) = *mut {l27} u64
    // 1497: maxbytes:   l27 = READ | UNIQUE | NON_NULL, (empty)
        maxbytes = currentbytes;
        // 1498: currentbytes: typeof(_24) = *mut {l30} u64
        // 1498: currentbytes:   l30 = READ | UNIQUE | NON_NULL, (empty)
        // 1498: maxbytes: typeof(_25) = *mut {l32} u64
        // 1498: maxbytes:   l32 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    }
    unlockmem();
    return realloc(ptr, new_bytes);
    // 1501: ptr: typeof(_27) = *mut {l35} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 1501: ptr:   l35 = UNIQUE | FREE | NON_NULL, (empty)
}
unsafe extern "C" fn getotalmem(mut explain: libc::c_int) -> int64_t {
    let mut res: libc::c_longlong = 0;
    let mut p: *mut FILE = popen(
    // 1505: mut p: typeof(_4) = *mut {l4} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1505: mut p:   l4 = UNIQUE | NON_NULL, (empty)
        b"grep MemTotal /proc/meminfo\0" as *const u8 as *const libc::c_char,
        // 1506: b"grep MemTotal ... _char: typeof(_5) = *const {l6} i8
        // 1506: b"grep MemTotal ... _char:   l6 = UNIQUE | NON_NULL, (empty)
        // 1506: b"grep MemTotal ... st u8: typeof(_6) = *const {l8} u8
        // 1506: b"grep MemTotal ... st u8:   l8 = UNIQUE | NON_NULL, (empty)
        // 1506: b"grep MemTotal ... fo\0": typeof(_7) = *const {l10} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 1506: b"grep MemTotal ... fo\0":   l10 = UNIQUE | NON_NULL, (empty)
        // 1506: b"grep MemTotal ... fo\0": typeof(_8) = & {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 1506: b"grep MemTotal ... fo\0":   l12 = UNIQUE | NON_NULL, FIXED
        // 1506: b"grep MemTotal ... fo\0": typeof(_7 = &raw const (*_8)) = *const {l84} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 1506: b"grep MemTotal ... fo\0":   l84 = UNIQUE | NON_NULL, (empty)
        // 1506: b"grep MemTotal ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l85} u8
        // 1506: b"grep MemTotal ... st u8:   l85 = UNIQUE | NON_NULL, (empty)
        // 1506: b"grep MemTotal ... fo\0": typeof(_8 = const b"grep MemTotal /proc/meminfo\x00") = & {l83} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 1506: b"grep MemTotal ... fo\0":   l83 = UNIQUE | NON_NULL, (empty)
        // 1506: b"grep MemTotal ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l86} i8
        // 1506: b"grep MemTotal ... _char:   l86 = UNIQUE | NON_NULL, (empty)
        b"r\0" as *const u8 as *const libc::c_char,
        // 1507: b"r\0" as *cons ... _char: typeof(_9) = *const {l14} i8
        // 1507: b"r\0" as *cons ... _char:   l14 = UNIQUE | NON_NULL, (empty)
        // 1507: b"r\0" as *const u8: typeof(_10) = *const {l16} u8
        // 1507: b"r\0" as *const u8:   l16 = UNIQUE | NON_NULL, (empty)
        // 1507: b"r\0": typeof(_11) = *const {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1507: b"r\0":   l18 = UNIQUE | NON_NULL, (empty)
        // 1507: b"r\0": typeof(_12) = & {l20} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1507: b"r\0":   l20 = UNIQUE | NON_NULL, FIXED
        // 1507: b"r\0" as *const u8: typeof(_10 = move _11 as *const u8 (Pointer(ArrayToPointer))) = *const {l89} u8
        // 1507: b"r\0" as *const u8:   l89 = UNIQUE | NON_NULL, (empty)
        // 1507: b"r\0": typeof(_11 = &raw const (*_12)) = *const {l88} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1507: b"r\0":   l88 = UNIQUE | NON_NULL, (empty)
        // 1507: b"r\0": typeof(_12 = const b"r\x00") = & {l87} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1507: b"r\0":   l87 = UNIQUE | NON_NULL, (empty)
        // 1507: b"r\0" as *cons ... _char: typeof(_9 = move _10 as *const i8 (Misc)) = *const {l90} i8
        // 1507: b"r\0" as *cons ... _char:   l90 = UNIQUE | NON_NULL, (empty)
    );
    if !p.is_null()
    // 1509: p: typeof(_17) = *mut {l26} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1509: p:   l26 = UNIQUE | NON_NULL, (empty)
        && fscanf(
            p,
            // 1511: p: typeof(_20) = *mut {l30} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 1511: p:   l30 = UNIQUE | NON_NULL, (empty)
            b"MemTotal: %lld kB\0" as *const u8 as *const libc::c_char,
            // 1512: b"MemTotal: %ll ... _char: typeof(_21) = *const {l32} i8
            // 1512: b"MemTotal: %ll ... _char:   l32 = UNIQUE | NON_NULL, (empty)
            // 1512: b"MemTotal: %ll ... st u8: typeof(_22) = *const {l34} u8
            // 1512: b"MemTotal: %ll ... st u8:   l34 = UNIQUE | NON_NULL, (empty)
            // 1512: b"MemTotal: %ll ... kB\0": typeof(_23) = *const {l36} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000012)) }]
            // 1512: b"MemTotal: %ll ... kB\0":   l36 = UNIQUE | NON_NULL, (empty)
            // 1512: b"MemTotal: %ll ... kB\0": typeof(_24) = & {l38} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000012)) }]
            // 1512: b"MemTotal: %ll ... kB\0":   l38 = UNIQUE | NON_NULL, FIXED
            // 1512: b"MemTotal: %ll ... _char: typeof(_21 = move _22 as *const i8 (Misc)) = *const {l94} i8
            // 1512: b"MemTotal: %ll ... _char:   l94 = UNIQUE | NON_NULL, (empty)
            // 1512: b"MemTotal: %ll ... kB\0": typeof(_24 = const b"MemTotal: %lld kB\x00") = & {l91} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000012)) }]
            // 1512: b"MemTotal: %ll ... kB\0":   l91 = UNIQUE | NON_NULL, (empty)
            // 1512: b"MemTotal: %ll ... kB\0": typeof(_23 = &raw const (*_24)) = *const {l92} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000012)) }]
            // 1512: b"MemTotal: %ll ... kB\0":   l92 = UNIQUE | NON_NULL, (empty)
            // 1512: b"MemTotal: %ll ... st u8: typeof(_22 = move _23 as *const u8 (Pointer(ArrayToPointer))) = *const {l93} u8
            // 1512: b"MemTotal: %ll ... st u8:   l93 = UNIQUE | NON_NULL, (empty)
            &mut res as *mut libc::c_longlong,
            // 1513: &mut res as *mu ... glong: typeof(_25) = *mut {l40} i64
            // 1513: &mut res as *mu ... glong:   l40 = UNIQUE | NON_NULL, (empty)
            // 1513: &mut res: typeof(_26) = &mut {l42} i64
            // 1513: &mut res:   l42 = UNIQUE | NON_NULL, (empty)
            // 1513: &mut res: typeof(_25 = &raw mut (*_26)) = *mut {l96} i64
            // 1513: &mut res:   l96 = UNIQUE | NON_NULL, (empty)
            // 1513: &mut res: typeof(_26 = &mut _3) = &mut {l95} i64
            // 1513: &mut res:   l95 = UNIQUE | NON_NULL, (empty)
        ) == 1 as libc::c_int
    {
        if explain != 0 {
            msg(
                b"%lld KB total memory according to '/proc/meminfo'\0" as *const u8
                // 1518: b"%lld KB total ... _char: typeof(_32) = *const {l49} i8
                // 1518: b"%lld KB total ... _char:   l49 = UNIQUE | NON_NULL, (empty)
                // 1518: b"%lld KB total ... st u8: typeof(_33) = *const {l51} u8
                // 1518: b"%lld KB total ... st u8:   l51 = UNIQUE | NON_NULL, (empty)
                // 1518: b"%lld KB total ... o'\0": typeof(_34) = *const {l53} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
                // 1518: b"%lld KB total ... o'\0":   l53 = UNIQUE | NON_NULL, (empty)
                // 1518: b"%lld KB total ... o'\0": typeof(_35) = & {l55} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
                // 1518: b"%lld KB total ... o'\0":   l55 = UNIQUE | NON_NULL, FIXED
                // 1518: b"%lld KB total ... o'\0": typeof(_34 = &raw const (*_35)) = *const {l98} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
                // 1518: b"%lld KB total ... o'\0":   l98 = UNIQUE | NON_NULL, (empty)
                // 1518: b"%lld KB total ... _char: typeof(_32 = move _33 as *const i8 (Misc)) = *const {l100} i8
                // 1518: b"%lld KB total ... _char:   l100 = UNIQUE | NON_NULL, (empty)
                // 1518: b"%lld KB total ... o'\0": typeof(_35 = const b"%lld KB total memory according to \'/proc/meminfo\'\x00") = & {l97} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
                // 1518: b"%lld KB total ... o'\0":   l97 = UNIQUE | NON_NULL, (empty)
                // 1518: b"%lld KB total ... st u8: typeof(_33 = move _34 as *const u8 (Pointer(ArrayToPointer))) = *const {l99} u8
                // 1518: b"%lld KB total ... st u8:   l99 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
                res,
            );
        }
        res <<= 10 as libc::c_int;
    } else {
        res = (12 as libc::c_longlong) << 30 as libc::c_int;
        if explain != 0 {
            msg(
                b"assuming compiled in memory size of %d GB\0" as *const u8 as *const libc::c_char,
                // 1528: b"assuming comp ... _char: typeof(_45) = *const {l66} i8
                // 1528: b"assuming comp ... _char:   l66 = UNIQUE | NON_NULL, (empty)
                // 1528: b"assuming comp ... st u8: typeof(_46) = *const {l68} u8
                // 1528: b"assuming comp ... st u8:   l68 = UNIQUE | NON_NULL, (empty)
                // 1528: b"assuming comp ... GB\0": typeof(_47) = *const {l70} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
                // 1528: b"assuming comp ... GB\0":   l70 = UNIQUE | NON_NULL, (empty)
                // 1528: b"assuming comp ... GB\0": typeof(_48) = & {l72} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
                // 1528: b"assuming comp ... GB\0":   l72 = UNIQUE | NON_NULL, FIXED
                // 1528: b"assuming comp ... GB\0": typeof(_47 = &raw const (*_48)) = *const {l102} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
                // 1528: b"assuming comp ... GB\0":   l102 = UNIQUE | NON_NULL, (empty)
                // 1528: b"assuming comp ... _char: typeof(_45 = move _46 as *const i8 (Misc)) = *const {l104} i8
                // 1528: b"assuming comp ... _char:   l104 = UNIQUE | NON_NULL, (empty)
                // 1528: b"assuming comp ... st u8: typeof(_46 = move _47 as *const u8 (Pointer(ArrayToPointer))) = *const {l103} u8
                // 1528: b"assuming comp ... st u8:   l103 = UNIQUE | NON_NULL, (empty)
                // 1528: b"assuming comp ... GB\0": typeof(_48 = const b"assuming compiled in memory size of %d GB\x00") = & {l101} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
                // 1528: b"assuming comp ... GB\0":   l101 = UNIQUE | NON_NULL, (empty)
                12 as libc::c_longlong,
            );
        }
    }
    if !p.is_null() {
    // 1533: p: typeof(_53) = *mut {l78} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1533: p:   l78 = UNIQUE | NON_NULL, (empty)
        pclose(p);
        // 1534: p: typeof(_55) = *mut {l81} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 1534: p:   l81 = UNIQUE | NON_NULL, (empty)
    }
    return res as int64_t;
}
unsafe extern "C" fn getcores(mut explain: libc::c_int) -> libc::c_int {
    let mut syscores: libc::c_int = 0;
    let mut coreids: libc::c_int = 0;
    let mut physids: libc::c_int = 0;
    let mut procpuinfocores: libc::c_int = 0;
    let mut usesyscores: libc::c_int = 0;
    let mut useprocpuinfo: libc::c_int = 0;
    let mut amd: libc::c_int = 0;
    let mut intel: libc::c_int = 0;
    let mut res: libc::c_int = 0;
    let mut p: *mut FILE = 0 as *mut FILE;
    // 1548: mut p: typeof(_12) = *mut {l12} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1548: mut p:   l12 = UNIQUE | NON_NULL, (empty)
    // 1548: 0 as *mut FILE: typeof(_12 = const 0_usize as *mut _IO_FILE (PointerFromExposedAddress)) = *mut {l437} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1548: 0 as *mut FILE:   l437 = UNIQUE | NON_NULL, (empty)
    syscores = sysconf(_SC_NPROCESSORS_ONLN as libc::c_int) as libc::c_int;
    if explain != 0 {
        if syscores > 0 as libc::c_int {
            msg(
                b"'sysconf' reports %d processors online\0" as *const u8 as *const libc::c_char,
                // 1553: b"'sysconf' rep ... _char: typeof(_22) = *const {l23} i8
                // 1553: b"'sysconf' rep ... _char:   l23 = UNIQUE | NON_NULL, (empty)
                // 1553: b"'sysconf' rep ... st u8: typeof(_23) = *const {l25} u8
                // 1553: b"'sysconf' rep ... st u8:   l25 = UNIQUE | NON_NULL, (empty)
                // 1553: b"'sysconf' rep ... ne\0": typeof(_24) = *const {l27} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                // 1553: b"'sysconf' rep ... ne\0":   l27 = UNIQUE | NON_NULL, (empty)
                // 1553: b"'sysconf' rep ... ne\0": typeof(_25) = & {l29} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                // 1553: b"'sysconf' rep ... ne\0":   l29 = UNIQUE | NON_NULL, FIXED
                // 1553: b"'sysconf' rep ... ne\0": typeof(_25 = const b"\'sysconf\' reports %d processors online\x00") = & {l438} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                // 1553: b"'sysconf' rep ... ne\0":   l438 = UNIQUE | NON_NULL, (empty)
                // 1553: b"'sysconf' rep ... _char: typeof(_22 = move _23 as *const i8 (Misc)) = *const {l441} i8
                // 1553: b"'sysconf' rep ... _char:   l441 = UNIQUE | NON_NULL, (empty)
                // 1553: b"'sysconf' rep ... ne\0": typeof(_24 = &raw const (*_25)) = *const {l439} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                // 1553: b"'sysconf' rep ... ne\0":   l439 = UNIQUE | NON_NULL, (empty)
                // 1553: b"'sysconf' rep ... st u8: typeof(_23 = move _24 as *const u8 (Pointer(ArrayToPointer))) = *const {l440} u8
                // 1553: b"'sysconf' rep ... st u8:   l440 = UNIQUE | NON_NULL, (empty)
                syscores,
            );
        } else {
            msg(
                b"'sysconf' fails to determine number of online processors\0" as *const u8
                // 1558: b"'sysconf' fai ... _char: typeof(_28) = *const {l33} i8
                // 1558: b"'sysconf' fai ... _char:   l33 = UNIQUE | NON_NULL, (empty)
                // 1558: b"'sysconf' fai ... st u8: typeof(_29) = *const {l35} u8
                // 1558: b"'sysconf' fai ... st u8:   l35 = UNIQUE | NON_NULL, (empty)
                // 1558: b"'sysconf' fai ... rs\0": typeof(_30) = *const {l37} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000039)) }]
                // 1558: b"'sysconf' fai ... rs\0":   l37 = UNIQUE | NON_NULL, (empty)
                // 1558: b"'sysconf' fai ... rs\0": typeof(_31) = & {l39} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000039)) }]
                // 1558: b"'sysconf' fai ... rs\0":   l39 = UNIQUE | NON_NULL, FIXED
                // 1558: b"'sysconf' fai ... _char: typeof(_28 = move _29 as *const i8 (Misc)) = *const {l445} i8
                // 1558: b"'sysconf' fai ... _char:   l445 = UNIQUE | NON_NULL, (empty)
                // 1558: b"'sysconf' fai ... st u8: typeof(_29 = move _30 as *const u8 (Pointer(ArrayToPointer))) = *const {l444} u8
                // 1558: b"'sysconf' fai ... st u8:   l444 = UNIQUE | NON_NULL, (empty)
                // 1558: b"'sysconf' fai ... rs\0": typeof(_31 = const b"\'sysconf\' fails to determine number of online processors\x00") = & {l442} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000039)) }]
                // 1558: b"'sysconf' fai ... rs\0":   l442 = UNIQUE | NON_NULL, (empty)
                // 1558: b"'sysconf' fai ... rs\0": typeof(_30 = &raw const (*_31)) = *const {l443} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000039)) }]
                // 1558: b"'sysconf' fai ... rs\0":   l443 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
            );
        }
    }
    p = popen(
    // 1563: popen( b"grep ' ... ar, ): typeof(_32) = *mut {l41} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1563: popen( b"grep ' ... ar, ):   l41 = UNIQUE | NON_NULL, (empty)
        b"grep '^core id' /proc/cpuinfo 2>/dev/null|sort|uniq|wc -l\0" as *const u8
        // 1564: b"grep '^core i ... _char: typeof(_33) = *const {l43} i8
        // 1564: b"grep '^core i ... _char:   l43 = UNIQUE | NON_NULL, (empty)
        // 1564: b"grep '^core i ... st u8: typeof(_34) = *const {l45} u8
        // 1564: b"grep '^core i ... st u8:   l45 = UNIQUE | NON_NULL, (empty)
        // 1564: b"grep '^core i ... -l\0": typeof(_35) = *const {l47} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
        // 1564: b"grep '^core i ... -l\0":   l47 = UNIQUE | NON_NULL, (empty)
        // 1564: b"grep '^core i ... -l\0": typeof(_36) = & {l49} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
        // 1564: b"grep '^core i ... -l\0":   l49 = UNIQUE | NON_NULL, FIXED
        // 1564: b"grep '^core i ... -l\0": typeof(_36 = const b"grep \'^core id\' /proc/cpuinfo 2>/dev/null|sort|uniq|wc -l\x00") = & {l446} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
        // 1564: b"grep '^core i ... -l\0":   l446 = UNIQUE | NON_NULL, (empty)
        // 1564: b"grep '^core i ... st u8: typeof(_34 = move _35 as *const u8 (Pointer(ArrayToPointer))) = *const {l448} u8
        // 1564: b"grep '^core i ... st u8:   l448 = UNIQUE | NON_NULL, (empty)
        // 1564: b"grep '^core i ... _char: typeof(_33 = move _34 as *const i8 (Misc)) = *const {l449} i8
        // 1564: b"grep '^core i ... _char:   l449 = UNIQUE | NON_NULL, (empty)
        // 1564: b"grep '^core i ... -l\0": typeof(_35 = &raw const (*_36)) = *const {l447} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
        // 1564: b"grep '^core i ... -l\0":   l447 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        b"r\0" as *const u8 as *const libc::c_char,
        // 1566: b"r\0" as *cons ... _char: typeof(_37) = *const {l51} i8
        // 1566: b"r\0" as *cons ... _char:   l51 = UNIQUE | NON_NULL, (empty)
        // 1566: b"r\0" as *const u8: typeof(_38) = *const {l53} u8
        // 1566: b"r\0" as *const u8:   l53 = UNIQUE | NON_NULL, (empty)
        // 1566: b"r\0": typeof(_39) = *const {l55} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1566: b"r\0":   l55 = UNIQUE | NON_NULL, (empty)
        // 1566: b"r\0": typeof(_40) = & {l57} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1566: b"r\0":   l57 = UNIQUE | NON_NULL, FIXED
        // 1566: b"r\0" as *const u8: typeof(_38 = move _39 as *const u8 (Pointer(ArrayToPointer))) = *const {l452} u8
        // 1566: b"r\0" as *const u8:   l452 = UNIQUE | NON_NULL, (empty)
        // 1566: b"r\0": typeof(_39 = &raw const (*_40)) = *const {l451} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1566: b"r\0":   l451 = UNIQUE | NON_NULL, (empty)
        // 1566: b"r\0": typeof(_40 = const b"r\x00") = & {l450} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1566: b"r\0":   l450 = UNIQUE | NON_NULL, (empty)
        // 1566: b"r\0" as *cons ... _char: typeof(_37 = move _38 as *const i8 (Misc)) = *const {l453} i8
        // 1566: b"r\0" as *cons ... _char:   l453 = UNIQUE | NON_NULL, (empty)
    );
    if !p.is_null() {
    // 1568: p: typeof(_44) = *mut {l62} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1568: p:   l62 = UNIQUE | NON_NULL, (empty)
        if fscanf(
            p,
            // 1570: p: typeof(_48) = *mut {l67} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 1570: p:   l67 = UNIQUE | NON_NULL, (empty)
            b"%d\0" as *const u8 as *const libc::c_char,
            // 1571: b"%d\0" as *con ... _char: typeof(_49) = *const {l69} i8
            // 1571: b"%d\0" as *con ... _char:   l69 = UNIQUE | NON_NULL, (empty)
            // 1571: b"%d\0" as *const u8: typeof(_50) = *const {l71} u8
            // 1571: b"%d\0" as *const u8:   l71 = UNIQUE | NON_NULL, (empty)
            // 1571: b"%d\0": typeof(_51) = *const {l73} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 1571: b"%d\0":   l73 = UNIQUE | NON_NULL, (empty)
            // 1571: b"%d\0": typeof(_52) = & {l75} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 1571: b"%d\0":   l75 = UNIQUE | NON_NULL, FIXED
            // 1571: b"%d\0" as *con ... _char: typeof(_49 = move _50 as *const i8 (Misc)) = *const {l457} i8
            // 1571: b"%d\0" as *con ... _char:   l457 = UNIQUE | NON_NULL, (empty)
            // 1571: b"%d\0" as *const u8: typeof(_50 = move _51 as *const u8 (Pointer(ArrayToPointer))) = *const {l456} u8
            // 1571: b"%d\0" as *const u8:   l456 = UNIQUE | NON_NULL, (empty)
            // 1571: b"%d\0": typeof(_52 = const b"%d\x00") = & {l454} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 1571: b"%d\0":   l454 = UNIQUE | NON_NULL, (empty)
            // 1571: b"%d\0": typeof(_51 = &raw const (*_52)) = *const {l455} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 1571: b"%d\0":   l455 = UNIQUE | NON_NULL, (empty)
            &mut coreids as *mut libc::c_int,
            // 1572: &mut coreids as ... c_int: typeof(_53) = *mut {l77} i32
            // 1572: &mut coreids as ... c_int:   l77 = UNIQUE | NON_NULL, (empty)
            // 1572: &mut coreids: typeof(_54) = &mut {l79} i32
            // 1572: &mut coreids:   l79 = UNIQUE | NON_NULL, (empty)
            // 1572: &mut coreids: typeof(_53 = &raw mut (*_54)) = *mut {l459} i32
            // 1572: &mut coreids:   l459 = UNIQUE | NON_NULL, (empty)
            // 1572: &mut coreids: typeof(_54 = &mut _4) = &mut {l458} i32
            // 1572: &mut coreids:   l458 = UNIQUE | NON_NULL, (empty)
        ) != 1 as libc::c_int
        {
            coreids = 0 as libc::c_int;
        }
        if explain != 0 {
            if coreids > 0 as libc::c_int {
                msg(
                    b"found %d unique core ids in '/proc/cpuinfo'\0" as *const u8
                    // 1580: b"found %d uniq ... _char: typeof(_64) = *const {l90} i8
                    // 1580: b"found %d uniq ... _char:   l90 = UNIQUE | NON_NULL, (empty)
                    // 1580: b"found %d uniq ... st u8: typeof(_65) = *const {l92} u8
                    // 1580: b"found %d uniq ... st u8:   l92 = UNIQUE | NON_NULL, (empty)
                    // 1580: b"found %d uniq ... o'\0": typeof(_66) = *const {l94} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                    // 1580: b"found %d uniq ... o'\0":   l94 = UNIQUE | NON_NULL, (empty)
                    // 1580: b"found %d uniq ... o'\0": typeof(_67) = & {l96} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                    // 1580: b"found %d uniq ... o'\0":   l96 = UNIQUE | NON_NULL, FIXED
                    // 1580: b"found %d uniq ... _char: typeof(_64 = move _65 as *const i8 (Misc)) = *const {l463} i8
                    // 1580: b"found %d uniq ... _char:   l463 = UNIQUE | NON_NULL, (empty)
                    // 1580: b"found %d uniq ... st u8: typeof(_65 = move _66 as *const u8 (Pointer(ArrayToPointer))) = *const {l462} u8
                    // 1580: b"found %d uniq ... st u8:   l462 = UNIQUE | NON_NULL, (empty)
                    // 1580: b"found %d uniq ... o'\0": typeof(_67 = const b"found %d unique core ids in \'/proc/cpuinfo\'\x00") = & {l460} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                    // 1580: b"found %d uniq ... o'\0":   l460 = UNIQUE | NON_NULL, (empty)
                    // 1580: b"found %d uniq ... o'\0": typeof(_66 = &raw const (*_67)) = *const {l461} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                    // 1580: b"found %d uniq ... o'\0":   l461 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                    coreids,
                );
            } else {
                msg(
                    b"failed to extract core ids from '/proc/cpuinfo'\0" as *const u8
                    // 1586: b"failed to ext ... _char: typeof(_70) = *const {l100} i8
                    // 1586: b"failed to ext ... _char:   l100 = UNIQUE | NON_NULL, (empty)
                    // 1586: b"failed to ext ... st u8: typeof(_71) = *const {l102} u8
                    // 1586: b"failed to ext ... st u8:   l102 = UNIQUE | NON_NULL, (empty)
                    // 1586: b"failed to ext ... o'\0": typeof(_72) = *const {l104} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1586: b"failed to ext ... o'\0":   l104 = UNIQUE | NON_NULL, (empty)
                    // 1586: b"failed to ext ... o'\0": typeof(_73) = & {l106} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1586: b"failed to ext ... o'\0":   l106 = UNIQUE | NON_NULL, FIXED
                    // 1586: b"failed to ext ... st u8: typeof(_71 = move _72 as *const u8 (Pointer(ArrayToPointer))) = *const {l466} u8
                    // 1586: b"failed to ext ... st u8:   l466 = UNIQUE | NON_NULL, (empty)
                    // 1586: b"failed to ext ... _char: typeof(_70 = move _71 as *const i8 (Misc)) = *const {l467} i8
                    // 1586: b"failed to ext ... _char:   l467 = UNIQUE | NON_NULL, (empty)
                    // 1586: b"failed to ext ... o'\0": typeof(_72 = &raw const (*_73)) = *const {l465} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1586: b"failed to ext ... o'\0":   l465 = UNIQUE | NON_NULL, (empty)
                    // 1586: b"failed to ext ... o'\0": typeof(_73 = const b"failed to extract core ids from \'/proc/cpuinfo\'\x00") = & {l464} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1586: b"failed to ext ... o'\0":   l464 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                );
            }
        }
        pclose(p);
        // 1591: p: typeof(_75) = *mut {l109} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 1591: p:   l109 = UNIQUE | NON_NULL, (empty)
    } else {
        coreids = 0 as libc::c_int;
    }
    p = popen(
    // 1595: popen( b"grep ' ... ar, ): typeof(_77) = *mut {l112} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1595: popen( b"grep ' ... ar, ):   l112 = UNIQUE | NON_NULL, (empty)
        b"grep '^physical id' /proc/cpuinfo 2>/dev/null|sort|uniq|wc -l\0" as *const u8
        // 1596: b"grep '^physic ... _char: typeof(_78) = *const {l114} i8
        // 1596: b"grep '^physic ... _char:   l114 = UNIQUE | NON_NULL, (empty)
        // 1596: b"grep '^physic ... st u8: typeof(_79) = *const {l116} u8
        // 1596: b"grep '^physic ... st u8:   l116 = UNIQUE | NON_NULL, (empty)
        // 1596: b"grep '^physic ... -l\0": typeof(_80) = *const {l118} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003e)) }]
        // 1596: b"grep '^physic ... -l\0":   l118 = UNIQUE | NON_NULL, (empty)
        // 1596: b"grep '^physic ... -l\0": typeof(_81) = & {l120} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003e)) }]
        // 1596: b"grep '^physic ... -l\0":   l120 = UNIQUE | NON_NULL, FIXED
        // 1596: b"grep '^physic ... st u8: typeof(_79 = move _80 as *const u8 (Pointer(ArrayToPointer))) = *const {l470} u8
        // 1596: b"grep '^physic ... st u8:   l470 = UNIQUE | NON_NULL, (empty)
        // 1596: b"grep '^physic ... -l\0": typeof(_80 = &raw const (*_81)) = *const {l469} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003e)) }]
        // 1596: b"grep '^physic ... -l\0":   l469 = UNIQUE | NON_NULL, (empty)
        // 1596: b"grep '^physic ... _char: typeof(_78 = move _79 as *const i8 (Misc)) = *const {l471} i8
        // 1596: b"grep '^physic ... _char:   l471 = UNIQUE | NON_NULL, (empty)
        // 1596: b"grep '^physic ... -l\0": typeof(_81 = const b"grep \'^physical id\' /proc/cpuinfo 2>/dev/null|sort|uniq|wc -l\x00") = & {l468} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003e)) }]
        // 1596: b"grep '^physic ... -l\0":   l468 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        b"r\0" as *const u8 as *const libc::c_char,
        // 1598: b"r\0" as *cons ... _char: typeof(_82) = *const {l122} i8
        // 1598: b"r\0" as *cons ... _char:   l122 = UNIQUE | NON_NULL, (empty)
        // 1598: b"r\0" as *const u8: typeof(_83) = *const {l124} u8
        // 1598: b"r\0" as *const u8:   l124 = UNIQUE | NON_NULL, (empty)
        // 1598: b"r\0": typeof(_84) = *const {l126} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1598: b"r\0":   l126 = UNIQUE | NON_NULL, (empty)
        // 1598: b"r\0": typeof(_85) = & {l128} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1598: b"r\0":   l128 = UNIQUE | NON_NULL, FIXED
        // 1598: b"r\0": typeof(_85 = const b"r\x00") = & {l472} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1598: b"r\0":   l472 = UNIQUE | NON_NULL, (empty)
        // 1598: b"r\0" as *const u8: typeof(_83 = move _84 as *const u8 (Pointer(ArrayToPointer))) = *const {l474} u8
        // 1598: b"r\0" as *const u8:   l474 = UNIQUE | NON_NULL, (empty)
        // 1598: b"r\0" as *cons ... _char: typeof(_82 = move _83 as *const i8 (Misc)) = *const {l475} i8
        // 1598: b"r\0" as *cons ... _char:   l475 = UNIQUE | NON_NULL, (empty)
        // 1598: b"r\0": typeof(_84 = &raw const (*_85)) = *const {l473} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 1598: b"r\0":   l473 = UNIQUE | NON_NULL, (empty)
    );
    if !p.is_null() {
    // 1600: p: typeof(_89) = *mut {l133} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1600: p:   l133 = UNIQUE | NON_NULL, (empty)
        if fscanf(
            p,
            // 1602: p: typeof(_93) = *mut {l138} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 1602: p:   l138 = UNIQUE | NON_NULL, (empty)
            b"%d\0" as *const u8 as *const libc::c_char,
            // 1603: b"%d\0" as *con ... _char: typeof(_94) = *const {l140} i8
            // 1603: b"%d\0" as *con ... _char:   l140 = UNIQUE | NON_NULL, (empty)
            // 1603: b"%d\0" as *const u8: typeof(_95) = *const {l142} u8
            // 1603: b"%d\0" as *const u8:   l142 = UNIQUE | NON_NULL, (empty)
            // 1603: b"%d\0": typeof(_96) = *const {l144} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 1603: b"%d\0":   l144 = UNIQUE | NON_NULL, (empty)
            // 1603: b"%d\0": typeof(_97) = & {l146} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 1603: b"%d\0":   l146 = UNIQUE | NON_NULL, FIXED
            // 1603: b"%d\0": typeof(_97 = const b"%d\x00") = & {l476} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 1603: b"%d\0":   l476 = UNIQUE | NON_NULL, (empty)
            // 1603: b"%d\0" as *con ... _char: typeof(_94 = move _95 as *const i8 (Misc)) = *const {l479} i8
            // 1603: b"%d\0" as *con ... _char:   l479 = UNIQUE | NON_NULL, (empty)
            // 1603: b"%d\0": typeof(_96 = &raw const (*_97)) = *const {l477} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 1603: b"%d\0":   l477 = UNIQUE | NON_NULL, (empty)
            // 1603: b"%d\0" as *const u8: typeof(_95 = move _96 as *const u8 (Pointer(ArrayToPointer))) = *const {l478} u8
            // 1603: b"%d\0" as *const u8:   l478 = UNIQUE | NON_NULL, (empty)
            &mut physids as *mut libc::c_int,
            // 1604: &mut physids as ... c_int: typeof(_98) = *mut {l148} i32
            // 1604: &mut physids as ... c_int:   l148 = UNIQUE | NON_NULL, (empty)
            // 1604: &mut physids: typeof(_99) = &mut {l150} i32
            // 1604: &mut physids:   l150 = UNIQUE | NON_NULL, (empty)
            // 1604: &mut physids: typeof(_98 = &raw mut (*_99)) = *mut {l481} i32
            // 1604: &mut physids:   l481 = UNIQUE | NON_NULL, (empty)
            // 1604: &mut physids: typeof(_99 = &mut _5) = &mut {l480} i32
            // 1604: &mut physids:   l480 = UNIQUE | NON_NULL, (empty)
        ) != 1 as libc::c_int
        {
            physids = 0 as libc::c_int;
        }
        if explain != 0 {
            if physids > 0 as libc::c_int {
                msg(
                    b"found %d unique physical ids in '/proc/cpuinfo'\0" as *const u8
                    // 1612: b"found %d uniq ... _char: typeof(_109) = *const {l161} i8
                    // 1612: b"found %d uniq ... _char:   l161 = UNIQUE | NON_NULL, (empty)
                    // 1612: b"found %d uniq ... st u8: typeof(_110) = *const {l163} u8
                    // 1612: b"found %d uniq ... st u8:   l163 = UNIQUE | NON_NULL, (empty)
                    // 1612: b"found %d uniq ... o'\0": typeof(_111) = *const {l165} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1612: b"found %d uniq ... o'\0":   l165 = UNIQUE | NON_NULL, (empty)
                    // 1612: b"found %d uniq ... o'\0": typeof(_112) = & {l167} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1612: b"found %d uniq ... o'\0":   l167 = UNIQUE | NON_NULL, FIXED
                    // 1612: b"found %d uniq ... o'\0": typeof(_112 = const b"found %d unique physical ids in \'/proc/cpuinfo\'\x00") = & {l482} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1612: b"found %d uniq ... o'\0":   l482 = UNIQUE | NON_NULL, (empty)
                    // 1612: b"found %d uniq ... o'\0": typeof(_111 = &raw const (*_112)) = *const {l483} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1612: b"found %d uniq ... o'\0":   l483 = UNIQUE | NON_NULL, (empty)
                    // 1612: b"found %d uniq ... st u8: typeof(_110 = move _111 as *const u8 (Pointer(ArrayToPointer))) = *const {l484} u8
                    // 1612: b"found %d uniq ... st u8:   l484 = UNIQUE | NON_NULL, (empty)
                    // 1612: b"found %d uniq ... _char: typeof(_109 = move _110 as *const i8 (Misc)) = *const {l485} i8
                    // 1612: b"found %d uniq ... _char:   l485 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                    physids,
                );
            } else {
                msg(
                    b"failed to extract physical ids from '/proc/cpuinfo'\0" as *const u8
                    // 1618: b"failed to ext ... _char: typeof(_115) = *const {l171} i8
                    // 1618: b"failed to ext ... _char:   l171 = UNIQUE | NON_NULL, (empty)
                    // 1618: b"failed to ext ... st u8: typeof(_116) = *const {l173} u8
                    // 1618: b"failed to ext ... st u8:   l173 = UNIQUE | NON_NULL, (empty)
                    // 1618: b"failed to ext ... o'\0": typeof(_117) = *const {l175} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                    // 1618: b"failed to ext ... o'\0":   l175 = UNIQUE | NON_NULL, (empty)
                    // 1618: b"failed to ext ... o'\0": typeof(_118) = & {l177} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                    // 1618: b"failed to ext ... o'\0":   l177 = UNIQUE | NON_NULL, FIXED
                    // 1618: b"failed to ext ... o'\0": typeof(_118 = const b"failed to extract physical ids from \'/proc/cpuinfo\'\x00") = & {l486} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                    // 1618: b"failed to ext ... o'\0":   l486 = UNIQUE | NON_NULL, (empty)
                    // 1618: b"failed to ext ... st u8: typeof(_116 = move _117 as *const u8 (Pointer(ArrayToPointer))) = *const {l488} u8
                    // 1618: b"failed to ext ... st u8:   l488 = UNIQUE | NON_NULL, (empty)
                    // 1618: b"failed to ext ... _char: typeof(_115 = move _116 as *const i8 (Misc)) = *const {l489} i8
                    // 1618: b"failed to ext ... _char:   l489 = UNIQUE | NON_NULL, (empty)
                    // 1618: b"failed to ext ... o'\0": typeof(_117 = &raw const (*_118)) = *const {l487} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                    // 1618: b"failed to ext ... o'\0":   l487 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                );
            }
        }
        pclose(p);
        // 1623: p: typeof(_120) = *mut {l180} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 1623: p:   l180 = UNIQUE | NON_NULL, (empty)
    } else {
        physids = 0 as libc::c_int;
    }
    if coreids > 0 as libc::c_int && physids > 0 as libc::c_int && {
        procpuinfocores = coreids * physids;
        procpuinfocores > 0 as libc::c_int
    } {
        if explain != 0 {
            msg(
                b"%d cores = %d core times %d physical ids in '/proc/cpuinfo'\0" as *const u8
                // 1633: b"%d cores = %d ... _char: typeof(_140) = *const {l201} i8
                // 1633: b"%d cores = %d ... _char:   l201 = UNIQUE | NON_NULL, (empty)
                // 1633: b"%d cores = %d ... st u8: typeof(_141) = *const {l203} u8
                // 1633: b"%d cores = %d ... st u8:   l203 = UNIQUE | NON_NULL, (empty)
                // 1633: b"%d cores = %d ... o'\0": typeof(_142) = *const {l205} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
                // 1633: b"%d cores = %d ... o'\0":   l205 = UNIQUE | NON_NULL, (empty)
                // 1633: b"%d cores = %d ... o'\0": typeof(_143) = & {l207} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
                // 1633: b"%d cores = %d ... o'\0":   l207 = UNIQUE | NON_NULL, FIXED
                // 1633: b"%d cores = %d ... st u8: typeof(_141 = move _142 as *const u8 (Pointer(ArrayToPointer))) = *const {l492} u8
                // 1633: b"%d cores = %d ... st u8:   l492 = UNIQUE | NON_NULL, (empty)
                // 1633: b"%d cores = %d ... o'\0": typeof(_142 = &raw const (*_143)) = *const {l491} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
                // 1633: b"%d cores = %d ... o'\0":   l491 = UNIQUE | NON_NULL, (empty)
                // 1633: b"%d cores = %d ... o'\0": typeof(_143 = const b"%d cores = %d core times %d physical ids in \'/proc/cpuinfo\'\x00") = & {l490} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
                // 1633: b"%d cores = %d ... o'\0":   l490 = UNIQUE | NON_NULL, (empty)
                // 1633: b"%d cores = %d ... _char: typeof(_140 = move _141 as *const i8 (Misc)) = *const {l493} i8
                // 1633: b"%d cores = %d ... _char:   l493 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
                procpuinfocores,
                coreids,
                physids,
            );
        }
    } else {
        procpuinfocores = 0 as libc::c_int;
    }
    useprocpuinfo = 0 as libc::c_int;
    usesyscores = useprocpuinfo;
    if procpuinfocores > 0 as libc::c_int && procpuinfocores == syscores {
        if explain != 0 {
            msg(
                b"'sysconf' and '/proc/cpuinfo' results match\0" as *const u8
                // 1648: b"'sysconf' and ... _char: typeof(_162) = *const {l227} i8
                // 1648: b"'sysconf' and ... _char:   l227 = UNIQUE | NON_NULL, (empty)
                // 1648: b"'sysconf' and ... st u8: typeof(_163) = *const {l229} u8
                // 1648: b"'sysconf' and ... st u8:   l229 = UNIQUE | NON_NULL, (empty)
                // 1648: b"'sysconf' and ... ch\0": typeof(_164) = *const {l231} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                // 1648: b"'sysconf' and ... ch\0":   l231 = UNIQUE | NON_NULL, (empty)
                // 1648: b"'sysconf' and ... ch\0": typeof(_165) = & {l233} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                // 1648: b"'sysconf' and ... ch\0":   l233 = UNIQUE | NON_NULL, FIXED
                // 1648: b"'sysconf' and ... ch\0": typeof(_164 = &raw const (*_165)) = *const {l495} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                // 1648: b"'sysconf' and ... ch\0":   l495 = UNIQUE | NON_NULL, (empty)
                // 1648: b"'sysconf' and ... ch\0": typeof(_165 = const b"\'sysconf\' and \'/proc/cpuinfo\' results match\x00") = & {l494} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                // 1648: b"'sysconf' and ... ch\0":   l494 = UNIQUE | NON_NULL, (empty)
                // 1648: b"'sysconf' and ... _char: typeof(_162 = move _163 as *const i8 (Misc)) = *const {l497} i8
                // 1648: b"'sysconf' and ... _char:   l497 = UNIQUE | NON_NULL, (empty)
                // 1648: b"'sysconf' and ... st u8: typeof(_163 = move _164 as *const u8 (Pointer(ArrayToPointer))) = *const {l496} u8
                // 1648: b"'sysconf' and ... st u8:   l496 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
            );
        }
        usesyscores = 1 as libc::c_int;
    } else if procpuinfocores > 0 as libc::c_int && syscores <= 0 as libc::c_int {
        if explain != 0 {
            msg(b"only '/proc/cpuinfo' result valid\0" as *const u8 as *const libc::c_char);
            // 1655: b"only '/proc/c ... _char: typeof(_178) = *const {l247} i8
            // 1655: b"only '/proc/c ... _char:   l247 = UNIQUE | NON_NULL, (empty)
            // 1655: b"only '/proc/c ... st u8: typeof(_179) = *const {l249} u8
            // 1655: b"only '/proc/c ... st u8:   l249 = UNIQUE | NON_NULL, (empty)
            // 1655: b"only '/proc/c ... id\0": typeof(_180) = *const {l251} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
            // 1655: b"only '/proc/c ... id\0":   l251 = UNIQUE | NON_NULL, (empty)
            // 1655: b"only '/proc/c ... id\0": typeof(_181) = & {l253} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
            // 1655: b"only '/proc/c ... id\0":   l253 = UNIQUE | NON_NULL, FIXED
            // 1655: b"only '/proc/c ... _char: typeof(_178 = move _179 as *const i8 (Misc)) = *const {l501} i8
            // 1655: b"only '/proc/c ... _char:   l501 = UNIQUE | NON_NULL, (empty)
            // 1655: b"only '/proc/c ... st u8: typeof(_179 = move _180 as *const u8 (Pointer(ArrayToPointer))) = *const {l500} u8
            // 1655: b"only '/proc/c ... st u8:   l500 = UNIQUE | NON_NULL, (empty)
            // 1655: b"only '/proc/c ... id\0": typeof(_181 = const b"only \'/proc/cpuinfo\' result valid\x00") = & {l498} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
            // 1655: b"only '/proc/c ... id\0":   l498 = UNIQUE | NON_NULL, (empty)
            // 1655: b"only '/proc/c ... id\0": typeof(_180 = &raw const (*_181)) = *const {l499} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
            // 1655: b"only '/proc/c ... id\0":   l499 = UNIQUE | NON_NULL, (empty)
        }
        useprocpuinfo = 1 as libc::c_int;
    } else if procpuinfocores <= 0 as libc::c_int && syscores > 0 as libc::c_int {
        if explain != 0 {
            msg(b"only 'sysconf' result valid\0" as *const u8 as *const libc::c_char);
            // 1660: b"only 'sysconf ... _char: typeof(_194) = *const {l267} i8
            // 1660: b"only 'sysconf ... _char:   l267 = UNIQUE | NON_NULL, (empty)
            // 1660: b"only 'sysconf ... st u8: typeof(_195) = *const {l269} u8
            // 1660: b"only 'sysconf ... st u8:   l269 = UNIQUE | NON_NULL, (empty)
            // 1660: b"only 'sysconf ... id\0": typeof(_196) = *const {l271} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 1660: b"only 'sysconf ... id\0":   l271 = UNIQUE | NON_NULL, (empty)
            // 1660: b"only 'sysconf ... id\0": typeof(_197) = & {l273} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 1660: b"only 'sysconf ... id\0":   l273 = UNIQUE | NON_NULL, FIXED
            // 1660: b"only 'sysconf ... st u8: typeof(_195 = move _196 as *const u8 (Pointer(ArrayToPointer))) = *const {l504} u8
            // 1660: b"only 'sysconf ... st u8:   l504 = UNIQUE | NON_NULL, (empty)
            // 1660: b"only 'sysconf ... id\0": typeof(_196 = &raw const (*_197)) = *const {l503} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 1660: b"only 'sysconf ... id\0":   l503 = UNIQUE | NON_NULL, (empty)
            // 1660: b"only 'sysconf ... _char: typeof(_194 = move _195 as *const i8 (Misc)) = *const {l505} i8
            // 1660: b"only 'sysconf ... _char:   l505 = UNIQUE | NON_NULL, (empty)
            // 1660: b"only 'sysconf ... id\0": typeof(_197 = const b"only \'sysconf\' result valid\x00") = & {l502} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 1660: b"only 'sysconf ... id\0":   l502 = UNIQUE | NON_NULL, (empty)
        }
        usesyscores = 1 as libc::c_int;
    } else if procpuinfocores > 0 as libc::c_int && syscores > 0 as libc::c_int {
        intel = (system(
            b"grep vendor /proc/cpuinfo 2>/dev/null|grep -q Intel\0" as *const u8
            // 1665: b"grep vendor / ... _char: typeof(_208) = *const {l285} i8
            // 1665: b"grep vendor / ... _char:   l285 = UNIQUE | NON_NULL, (empty)
            // 1665: b"grep vendor / ... st u8: typeof(_209) = *const {l287} u8
            // 1665: b"grep vendor / ... st u8:   l287 = UNIQUE | NON_NULL, (empty)
            // 1665: b"grep vendor / ... el\0": typeof(_210) = *const {l289} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 1665: b"grep vendor / ... el\0":   l289 = UNIQUE | NON_NULL, (empty)
            // 1665: b"grep vendor / ... el\0": typeof(_211) = & {l291} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 1665: b"grep vendor / ... el\0":   l291 = UNIQUE | NON_NULL, FIXED
            // 1665: b"grep vendor / ... el\0": typeof(_211 = const b"grep vendor /proc/cpuinfo 2>/dev/null|grep -q Intel\x00") = & {l506} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 1665: b"grep vendor / ... el\0":   l506 = UNIQUE | NON_NULL, (empty)
            // 1665: b"grep vendor / ... _char: typeof(_208 = move _209 as *const i8 (Misc)) = *const {l509} i8
            // 1665: b"grep vendor / ... _char:   l509 = UNIQUE | NON_NULL, (empty)
            // 1665: b"grep vendor / ... st u8: typeof(_209 = move _210 as *const u8 (Pointer(ArrayToPointer))) = *const {l508} u8
            // 1665: b"grep vendor / ... st u8:   l508 = UNIQUE | NON_NULL, (empty)
            // 1665: b"grep vendor / ... el\0": typeof(_210 = &raw const (*_211)) = *const {l507} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 1665: b"grep vendor / ... el\0":   l507 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        ) == 0) as libc::c_int;
        if intel != 0 && explain != 0 {
            msg(b"found Intel as vendor in '/proc/cpuinfo'\0" as *const u8 as *const libc::c_char);
            // 1669: b"found Intel a ... _char: typeof(_219) = *const {l300} i8
            // 1669: b"found Intel a ... _char:   l300 = UNIQUE | NON_NULL, (empty)
            // 1669: b"found Intel a ... st u8: typeof(_220) = *const {l302} u8
            // 1669: b"found Intel a ... st u8:   l302 = UNIQUE | NON_NULL, (empty)
            // 1669: b"found Intel a ... o'\0": typeof(_221) = *const {l304} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
            // 1669: b"found Intel a ... o'\0":   l304 = UNIQUE | NON_NULL, (empty)
            // 1669: b"found Intel a ... o'\0": typeof(_222) = & {l306} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
            // 1669: b"found Intel a ... o'\0":   l306 = UNIQUE | NON_NULL, FIXED
            // 1669: b"found Intel a ... _char: typeof(_219 = move _220 as *const i8 (Misc)) = *const {l513} i8
            // 1669: b"found Intel a ... _char:   l513 = UNIQUE | NON_NULL, (empty)
            // 1669: b"found Intel a ... st u8: typeof(_220 = move _221 as *const u8 (Pointer(ArrayToPointer))) = *const {l512} u8
            // 1669: b"found Intel a ... st u8:   l512 = UNIQUE | NON_NULL, (empty)
            // 1669: b"found Intel a ... o'\0": typeof(_221 = &raw const (*_222)) = *const {l511} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
            // 1669: b"found Intel a ... o'\0":   l511 = UNIQUE | NON_NULL, (empty)
            // 1669: b"found Intel a ... o'\0": typeof(_222 = const b"found Intel as vendor in \'/proc/cpuinfo\'\x00") = & {l510} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
            // 1669: b"found Intel a ... o'\0":   l510 = UNIQUE | NON_NULL, (empty)
        }
        amd = (system(
            b"grep vendor /proc/cpuinfo 2>/dev/null|grep -q AMD\0" as *const u8
            // 1672: b"grep vendor / ... _char: typeof(_225) = *const {l310} i8
            // 1672: b"grep vendor / ... _char:   l310 = UNIQUE | NON_NULL, (empty)
            // 1672: b"grep vendor / ... st u8: typeof(_226) = *const {l312} u8
            // 1672: b"grep vendor / ... st u8:   l312 = UNIQUE | NON_NULL, (empty)
            // 1672: b"grep vendor / ... MD\0": typeof(_227) = *const {l314} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
            // 1672: b"grep vendor / ... MD\0":   l314 = UNIQUE | NON_NULL, (empty)
            // 1672: b"grep vendor / ... MD\0": typeof(_228) = & {l316} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
            // 1672: b"grep vendor / ... MD\0":   l316 = UNIQUE | NON_NULL, FIXED
            // 1672: b"grep vendor / ... MD\0": typeof(_227 = &raw const (*_228)) = *const {l515} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
            // 1672: b"grep vendor / ... MD\0":   l515 = UNIQUE | NON_NULL, (empty)
            // 1672: b"grep vendor / ... _char: typeof(_225 = move _226 as *const i8 (Misc)) = *const {l517} i8
            // 1672: b"grep vendor / ... _char:   l517 = UNIQUE | NON_NULL, (empty)
            // 1672: b"grep vendor / ... st u8: typeof(_226 = move _227 as *const u8 (Pointer(ArrayToPointer))) = *const {l516} u8
            // 1672: b"grep vendor / ... st u8:   l516 = UNIQUE | NON_NULL, (empty)
            // 1672: b"grep vendor / ... MD\0": typeof(_228 = const b"grep vendor /proc/cpuinfo 2>/dev/null|grep -q AMD\x00") = & {l514} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
            // 1672: b"grep vendor / ... MD\0":   l514 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        ) == 0) as libc::c_int;
        if amd != 0 && explain != 0 {
            msg(b"found AMD as vendor in '/proc/cpuinfo'\0" as *const u8 as *const libc::c_char);
            // 1676: b"found AMD as  ... _char: typeof(_236) = *const {l325} i8
            // 1676: b"found AMD as  ... _char:   l325 = UNIQUE | NON_NULL, (empty)
            // 1676: b"found AMD as  ... st u8: typeof(_237) = *const {l327} u8
            // 1676: b"found AMD as  ... st u8:   l327 = UNIQUE | NON_NULL, (empty)
            // 1676: b"found AMD as  ... o'\0": typeof(_238) = *const {l329} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 1676: b"found AMD as  ... o'\0":   l329 = UNIQUE | NON_NULL, (empty)
            // 1676: b"found AMD as  ... o'\0": typeof(_239) = & {l331} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 1676: b"found AMD as  ... o'\0":   l331 = UNIQUE | NON_NULL, FIXED
            // 1676: b"found AMD as  ... _char: typeof(_236 = move _237 as *const i8 (Misc)) = *const {l521} i8
            // 1676: b"found AMD as  ... _char:   l521 = UNIQUE | NON_NULL, (empty)
            // 1676: b"found AMD as  ... st u8: typeof(_237 = move _238 as *const u8 (Pointer(ArrayToPointer))) = *const {l520} u8
            // 1676: b"found AMD as  ... st u8:   l520 = UNIQUE | NON_NULL, (empty)
            // 1676: b"found AMD as  ... o'\0": typeof(_238 = &raw const (*_239)) = *const {l519} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 1676: b"found AMD as  ... o'\0":   l519 = UNIQUE | NON_NULL, (empty)
            // 1676: b"found AMD as  ... o'\0": typeof(_239 = const b"found AMD as vendor in \'/proc/cpuinfo\'\x00") = & {l518} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 1676: b"found AMD as  ... o'\0":   l518 = UNIQUE | NON_NULL, (empty)
        }
        if amd != 0 {
            if explain != 0 {
                msg(b"trusting 'sysconf' on AMD\0" as *const u8 as *const libc::c_char);
                // 1680: b"trusting 'sys ... _char: typeof(_246) = *const {l339} i8
                // 1680: b"trusting 'sys ... _char:   l339 = UNIQUE | NON_NULL, (empty)
                // 1680: b"trusting 'sys ... st u8: typeof(_247) = *const {l341} u8
                // 1680: b"trusting 'sys ... st u8:   l341 = UNIQUE | NON_NULL, (empty)
                // 1680: b"trusting 'sys ... MD\0": typeof(_248) = *const {l343} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
                // 1680: b"trusting 'sys ... MD\0":   l343 = UNIQUE | NON_NULL, (empty)
                // 1680: b"trusting 'sys ... MD\0": typeof(_249) = & {l345} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
                // 1680: b"trusting 'sys ... MD\0":   l345 = UNIQUE | NON_NULL, FIXED
                // 1680: b"trusting 'sys ... _char: typeof(_246 = move _247 as *const i8 (Misc)) = *const {l525} i8
                // 1680: b"trusting 'sys ... _char:   l525 = UNIQUE | NON_NULL, (empty)
                // 1680: b"trusting 'sys ... MD\0": typeof(_248 = &raw const (*_249)) = *const {l523} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
                // 1680: b"trusting 'sys ... MD\0":   l523 = UNIQUE | NON_NULL, (empty)
                // 1680: b"trusting 'sys ... st u8: typeof(_247 = move _248 as *const u8 (Pointer(ArrayToPointer))) = *const {l524} u8
                // 1680: b"trusting 'sys ... st u8:   l524 = UNIQUE | NON_NULL, (empty)
                // 1680: b"trusting 'sys ... MD\0": typeof(_249 = const b"trusting \'sysconf\' on AMD\x00") = & {l522} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001a)) }]
                // 1680: b"trusting 'sys ... MD\0":   l522 = UNIQUE | NON_NULL, (empty)
            }
            usesyscores = 1 as libc::c_int;
        } else if intel != 0 {
            if explain != 0 {
                msg(
                    b"'sysconf' result off by a factor of %f on Intel\0" as *const u8
                    // 1686: b"'sysconf' res ... _char: typeof(_257) = *const {l354} i8
                    // 1686: b"'sysconf' res ... _char:   l354 = UNIQUE | NON_NULL, (empty)
                    // 1686: b"'sysconf' res ... st u8: typeof(_258) = *const {l356} u8
                    // 1686: b"'sysconf' res ... st u8:   l356 = UNIQUE | NON_NULL, (empty)
                    // 1686: b"'sysconf' res ... el\0": typeof(_259) = *const {l358} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1686: b"'sysconf' res ... el\0":   l358 = UNIQUE | NON_NULL, (empty)
                    // 1686: b"'sysconf' res ... el\0": typeof(_260) = & {l360} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1686: b"'sysconf' res ... el\0":   l360 = UNIQUE | NON_NULL, FIXED
                    // 1686: b"'sysconf' res ... el\0": typeof(_259 = &raw const (*_260)) = *const {l527} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1686: b"'sysconf' res ... el\0":   l527 = UNIQUE | NON_NULL, (empty)
                    // 1686: b"'sysconf' res ... _char: typeof(_257 = move _258 as *const i8 (Misc)) = *const {l529} i8
                    // 1686: b"'sysconf' res ... _char:   l529 = UNIQUE | NON_NULL, (empty)
                    // 1686: b"'sysconf' res ... st u8: typeof(_258 = move _259 as *const u8 (Pointer(ArrayToPointer))) = *const {l528} u8
                    // 1686: b"'sysconf' res ... st u8:   l528 = UNIQUE | NON_NULL, (empty)
                    // 1686: b"'sysconf' res ... el\0": typeof(_260 = const b"\'sysconf\' result off by a factor of %f on Intel\x00") = & {l526} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
                    // 1686: b"'sysconf' res ... el\0":   l526 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                    syscores as libc::c_double / procpuinfocores as libc::c_double,
                );
                msg(
                    b"trusting 'sysconf' on Intel (assuming HyperThreading)\0" as *const u8
                    // 1691: b"trusting 'sys ... _char: typeof(_267) = *const {l368} i8
                    // 1691: b"trusting 'sys ... _char:   l368 = UNIQUE | NON_NULL, (empty)
                    // 1691: b"trusting 'sys ... st u8: typeof(_268) = *const {l370} u8
                    // 1691: b"trusting 'sys ... st u8:   l370 = UNIQUE | NON_NULL, (empty)
                    // 1691: b"trusting 'sys ... g)\0": typeof(_269) = *const {l372} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
                    // 1691: b"trusting 'sys ... g)\0":   l372 = UNIQUE | NON_NULL, (empty)
                    // 1691: b"trusting 'sys ... g)\0": typeof(_270) = & {l374} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
                    // 1691: b"trusting 'sys ... g)\0":   l374 = UNIQUE | NON_NULL, FIXED
                    // 1691: b"trusting 'sys ... g)\0": typeof(_270 = const b"trusting \'sysconf\' on Intel (assuming HyperThreading)\x00") = & {l530} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
                    // 1691: b"trusting 'sys ... g)\0":   l530 = UNIQUE | NON_NULL, (empty)
                    // 1691: b"trusting 'sys ... _char: typeof(_267 = move _268 as *const i8 (Misc)) = *const {l533} i8
                    // 1691: b"trusting 'sys ... _char:   l533 = UNIQUE | NON_NULL, (empty)
                    // 1691: b"trusting 'sys ... g)\0": typeof(_269 = &raw const (*_270)) = *const {l531} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
                    // 1691: b"trusting 'sys ... g)\0":   l531 = UNIQUE | NON_NULL, (empty)
                    // 1691: b"trusting 'sys ... st u8: typeof(_268 = move _269 as *const u8 (Pointer(ArrayToPointer))) = *const {l532} u8
                    // 1691: b"trusting 'sys ... st u8:   l532 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                );
            }
            usesyscores = 1 as libc::c_int;
        } else {
            if explain != 0 {
                msg(
                    b"trusting 'sysconf' on unknown vendor machine\0" as *const u8
                    // 1699: b"trusting 'sys ... _char: typeof(_276) = *const {l381} i8
                    // 1699: b"trusting 'sys ... _char:   l381 = UNIQUE | NON_NULL, (empty)
                    // 1699: b"trusting 'sys ... st u8: typeof(_277) = *const {l383} u8
                    // 1699: b"trusting 'sys ... st u8:   l383 = UNIQUE | NON_NULL, (empty)
                    // 1699: b"trusting 'sys ... ne\0": typeof(_278) = *const {l385} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
                    // 1699: b"trusting 'sys ... ne\0":   l385 = UNIQUE | NON_NULL, (empty)
                    // 1699: b"trusting 'sys ... ne\0": typeof(_279) = & {l387} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
                    // 1699: b"trusting 'sys ... ne\0":   l387 = UNIQUE | NON_NULL, FIXED
                    // 1699: b"trusting 'sys ... ne\0": typeof(_279 = const b"trusting \'sysconf\' on unknown vendor machine\x00") = & {l534} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
                    // 1699: b"trusting 'sys ... ne\0":   l534 = UNIQUE | NON_NULL, (empty)
                    // 1699: b"trusting 'sys ... st u8: typeof(_277 = move _278 as *const u8 (Pointer(ArrayToPointer))) = *const {l536} u8
                    // 1699: b"trusting 'sys ... st u8:   l536 = UNIQUE | NON_NULL, (empty)
                    // 1699: b"trusting 'sys ... _char: typeof(_276 = move _277 as *const i8 (Misc)) = *const {l537} i8
                    // 1699: b"trusting 'sys ... _char:   l537 = UNIQUE | NON_NULL, (empty)
                    // 1699: b"trusting 'sys ... ne\0": typeof(_278 = &raw const (*_279)) = *const {l535} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
                    // 1699: b"trusting 'sys ... ne\0":   l535 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                );
            }
            usesyscores = 1 as libc::c_int;
        }
    }
    if useprocpuinfo != 0 {
        if explain != 0 {
            msg(
                b"assuming cores = core * physical ids in '/proc/cpuinfo' = %d\0" as *const u8
                // 1709: b"assuming core ... _char: typeof(_288) = *const {l397} i8
                // 1709: b"assuming core ... _char:   l397 = UNIQUE | NON_NULL, (empty)
                // 1709: b"assuming core ... st u8: typeof(_289) = *const {l399} u8
                // 1709: b"assuming core ... st u8:   l399 = UNIQUE | NON_NULL, (empty)
                // 1709: b"assuming core ... %d\0": typeof(_290) = *const {l401} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003d)) }]
                // 1709: b"assuming core ... %d\0":   l401 = UNIQUE | NON_NULL, (empty)
                // 1709: b"assuming core ... %d\0": typeof(_291) = & {l403} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003d)) }]
                // 1709: b"assuming core ... %d\0":   l403 = UNIQUE | NON_NULL, FIXED
                // 1709: b"assuming core ... st u8: typeof(_289 = move _290 as *const u8 (Pointer(ArrayToPointer))) = *const {l540} u8
                // 1709: b"assuming core ... st u8:   l540 = UNIQUE | NON_NULL, (empty)
                // 1709: b"assuming core ... %d\0": typeof(_290 = &raw const (*_291)) = *const {l539} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003d)) }]
                // 1709: b"assuming core ... %d\0":   l539 = UNIQUE | NON_NULL, (empty)
                // 1709: b"assuming core ... _char: typeof(_288 = move _289 as *const i8 (Misc)) = *const {l541} i8
                // 1709: b"assuming core ... _char:   l541 = UNIQUE | NON_NULL, (empty)
                // 1709: b"assuming core ... %d\0": typeof(_291 = const b"assuming cores = core * physical ids in \'/proc/cpuinfo\' = %d\x00") = & {l538} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003d)) }]
                // 1709: b"assuming core ... %d\0":   l538 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
                procpuinfocores,
            );
        }
        res = procpuinfocores;
    } else if usesyscores != 0 {
        if explain != 0 {
            msg(
                b"assuming cores = number of processors reported by 'sysconf' = %d\0" as *const u8
                // 1718: b"assuming core ... _char: typeof(_300) = *const {l413} i8
                // 1718: b"assuming core ... _char:   l413 = UNIQUE | NON_NULL, (empty)
                // 1718: b"assuming core ... st u8: typeof(_301) = *const {l415} u8
                // 1718: b"assuming core ... st u8:   l415 = UNIQUE | NON_NULL, (empty)
                // 1718: b"assuming core ... %d\0": typeof(_302) = *const {l417} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000041)) }]
                // 1718: b"assuming core ... %d\0":   l417 = UNIQUE | NON_NULL, (empty)
                // 1718: b"assuming core ... %d\0": typeof(_303) = & {l419} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000041)) }]
                // 1718: b"assuming core ... %d\0":   l419 = UNIQUE | NON_NULL, FIXED
                // 1718: b"assuming core ... _char: typeof(_300 = move _301 as *const i8 (Misc)) = *const {l545} i8
                // 1718: b"assuming core ... _char:   l545 = UNIQUE | NON_NULL, (empty)
                // 1718: b"assuming core ... %d\0": typeof(_303 = const b"assuming cores = number of processors reported by \'sysconf\' = %d\x00") = & {l542} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000041)) }]
                // 1718: b"assuming core ... %d\0":   l542 = UNIQUE | NON_NULL, (empty)
                // 1718: b"assuming core ... st u8: typeof(_301 = move _302 as *const u8 (Pointer(ArrayToPointer))) = *const {l544} u8
                // 1718: b"assuming core ... st u8:   l544 = UNIQUE | NON_NULL, (empty)
                // 1718: b"assuming core ... %d\0": typeof(_302 = &raw const (*_303)) = *const {l543} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000041)) }]
                // 1718: b"assuming core ... %d\0":   l543 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
                syscores,
            );
        }
        res = syscores;
    } else {
        if explain != 0 {
            msg(
                b"using compiled in default value of assumed %d cores\0" as *const u8
                // 1727: b"using compile ... _char: typeof(_310) = *const {l427} i8
                // 1727: b"using compile ... _char:   l427 = UNIQUE | NON_NULL, (empty)
                // 1727: b"using compile ... st u8: typeof(_311) = *const {l429} u8
                // 1727: b"using compile ... st u8:   l429 = UNIQUE | NON_NULL, (empty)
                // 1727: b"using compile ... es\0": typeof(_312) = *const {l431} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                // 1727: b"using compile ... es\0":   l431 = UNIQUE | NON_NULL, (empty)
                // 1727: b"using compile ... es\0": typeof(_313) = & {l433} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                // 1727: b"using compile ... es\0":   l433 = UNIQUE | NON_NULL, FIXED
                // 1727: b"using compile ... es\0": typeof(_312 = &raw const (*_313)) = *const {l547} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                // 1727: b"using compile ... es\0":   l547 = UNIQUE | NON_NULL, (empty)
                // 1727: b"using compile ... es\0": typeof(_313 = const b"using compiled in default value of assumed %d cores\x00") = & {l546} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                // 1727: b"using compile ... es\0":   l546 = UNIQUE | NON_NULL, (empty)
                // 1727: b"using compile ... _char: typeof(_310 = move _311 as *const i8 (Misc)) = *const {l549} i8
                // 1727: b"using compile ... _char:   l549 = UNIQUE | NON_NULL, (empty)
                // 1727: b"using compile ... st u8: typeof(_311 = move _312 as *const u8 (Pointer(ArrayToPointer))) = *const {l548} u8
                // 1727: b"using compile ... st u8:   l548 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
                8 as libc::c_int,
            );
        }
        res = 8 as libc::c_int;
    }
    return res;
}
unsafe extern "C" fn usage() {
    let mut b: int64_t = getotalmem(0 as libc::c_int);
    let mut m: libc::c_longlong = (b + ((1 as libc::c_int) << 20 as libc::c_int) as int64_t
        - 1 as libc::c_int as int64_t
        >> 20 as libc::c_int) as libc::c_longlong;
    let mut g: libc::c_longlong = (b + ((1 as libc::c_int) << 30 as libc::c_int) as int64_t
        - 1 as libc::c_int as int64_t
        >> 30 as libc::c_int) as libc::c_longlong;
    let mut c: libc::c_int = getcores(0 as libc::c_int);
    printf(
        b"usage: treengeling [<option> ...] [<file> [<workers>]]\n\nwhere <option> is one of the following\n\n  -h             print option summary\n  --version      print version and exit\n  -v             increase verbose level\n  -S             print statistics for each solver instance too\n  -n             do not print satisfying assignments\n\n  -t <workers>   maximum number actual worker threads (system default %d)\n  -a <nodes>     maximum number active nodes (system default %d)\n\n  -m <mb>        assumed memory in mega bytes (system default %lld MB)\n  -g <gb>        assumed memory in giga bytes (system default %lld GB)\n\n  -r <posnum>    randomize splits by swapping <posnum> nodes\n  -s <seed>      unsigned 64 bit seed for randomizing splits (default 0)\n\n  -b <branches>  percentage of nodes split (default %d%%)\n\n  --balance      split larger nodes first\n  --symmetric    symmetric splitting%s\n  --asymmetric   asymmetric splitting%s\n  --eager        eager splitting by forced reduction of limit (default)\n  --lazy         disable eager splitting (opposite of '--eager')\n  --portfolio    use portfolio style option fuzzing (default off)\n\n  --locslkhd      use local searchf or look-ahead\n  --no-relevancelkhd do not use relevance (VSIDS/VMTF) look-ahead\n  --treelook=<d>  maximum depth for tree-based look-ahead (default %d)\n\n  --min=<lim>    minimum conflict limit per search (compiled default %d)\n  --init=<lim>   initial conflict limit per search (compiled default %d)\n  --max=<lim>    maximum conflict limit per search (compiled default %d)\n\n  --reduce       reduce learned clause cache for all right branches\n  --force-simp   force simplification even after light simplification\n  --no-simp      do not explicitly simplify in each round\n  --no-search    do not even search in each round\n  --no-parallel  disable additional parallel solver instance\n  --no-full      no full rounds every %d rounds\n  -f <fullint>   full round interval (default %d)\n\nand the <file> is a DIMACS file.  If the name of the file has a '.gz'\nrespectively '.bz2' suffix, it is assumed to be a file compressed with\n'gzip' respectively 'bzip2'.  In this case the parser will open a pipe\nand execute 'gunzip' respectively 'bzcat'.\n\0"
        // 1746: b"usage: treeng ... _char: typeof(_37) = *const {l37} i8
        // 1746: b"usage: treeng ... _char:   l37 = UNIQUE | NON_NULL, (empty)
        // 1746: b"usage: treeng ... st u8: typeof(_38) = *const {l39} u8
        // 1746: b"usage: treeng ... st u8:   l39 = UNIQUE | NON_NULL, (empty)
        // 1746: b"usage: treeng ... \n\0": typeof(_39) = *const {l41} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000089b)) }]
        // 1746: b"usage: treeng ... \n\0":   l41 = UNIQUE | NON_NULL, (empty)
        // 1746: b"usage: treeng ... \n\0": typeof(_40) = & {l43} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000089b)) }]
        // 1746: b"usage: treeng ... \n\0":   l43 = UNIQUE | NON_NULL, FIXED
        // 1746: b"usage: treeng ... st u8: typeof(_38 = move _39 as *const u8 (Pointer(ArrayToPointer))) = *const {l101} u8
        // 1746: b"usage: treeng ... st u8:   l101 = UNIQUE | NON_NULL, (empty)
        // 1746: b"usage: treeng ... _char: typeof(_37 = move _38 as *const i8 (Misc)) = *const {l102} i8
        // 1746: b"usage: treeng ... _char:   l102 = UNIQUE | NON_NULL, (empty)
        // 1746: b"usage: treeng ... \n\0": typeof(_39 = &raw const (*_40)) = *const {l100} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000089b)) }]
        // 1746: b"usage: treeng ... \n\0":   l100 = UNIQUE | NON_NULL, (empty)
        // 1746: b"usage: treeng ... \n\0": typeof(_40 = const b"usage: treengeling [<option> ...] [<file> [<workers>]]\n\nwhere <option> is one of the following\n\n  -h             print option summary\n  --version      print version and exit\n  -v             increase verbose level\n  -S             print statistics for each solver instance too\n  -n             do not print satisfying assignments\n\n  -t <workers>   maximum number actual worker threads (system default %d)\n  -a <nodes>     maximum number active nodes (system default %d)\n\n  -m <mb>        assumed memory in mega bytes (system default %lld MB)\n  -g <gb>        assumed memory in giga bytes (system default %lld GB)\n\n  -r <posnum>    randomize splits by swapping <posnum> nodes\n  -s <seed>      unsigned 64 bit seed for randomizing splits (default 0)\n\n  -b <branches>  percentage of nodes split (default %d%%)\n\n  --balance      split larger nodes first\n  --symmetric    symmetric splitting%s\n  --asymmetric   asymmetric splitting%s\n  --eager        eager splitting by forced reduction of limit (default)\n  --lazy         disable eager splitting (opposite of \'--eager\')\n  --portfolio    use portfolio style option fuzzing (default off)\n\n  --locslkhd      use local searchf or look-ahead\n  --no-relevancelkhd do not use relevance (VSIDS/VMTF) look-ahead\n  --treelook=<d>  maximum depth for tree-based look-ahead (default %d)\n\n  --min=<lim>    minimum conflict limit per search (compiled default %d)\n  --init=<lim>   initial conflict limit per search (compiled default %d)\n  --max=<lim>    maximum conflict limit per search (compiled default %d)\n\n  --reduce       reduce learned clause cache for all right branches\n  --force-simp   force simplification even after light simplification\n  --no-simp      do not explicitly simplify in each round\n  --no-search    do not even search in each round\n  --no-parallel  disable additional parallel solver instance\n  --no-full      no full rounds every %d rounds\n  -f <fullint>   full round interval (default %d)\n\nand the <file> is a DIMACS file.  If the name of the file has a \'.gz\'\nrespectively \'.bz2\' suffix, it is assumed to be a file compressed with\n\'gzip\' respectively \'bzip2\'.  In this case the parser will open a pipe\nand execute \'gunzip\' respectively \'bzcat\'.\n\x00") = & {l99} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000089b)) }]
        // 1746: b"usage: treeng ... \n\0":   l99 = UNIQUE | NON_NULL, (empty)
            as *const u8 as *const libc::c_char,
        c,
        8 as libc::c_int * c,
        m,
        g,
        50 as libc::c_int,
        if 1 as libc::c_int != 0 {
        // 1753: if 1 as libc::c ... har }: typeof(_49) = *const {l53} i8
        // 1753: if 1 as libc::c ... har }:   l53 = UNIQUE | NON_NULL, (empty)
            b"\0" as *const u8 as *const libc::c_char
            // 1754: b"\0" as *const u8: typeof(_52) = *const {l57} u8
            // 1754: b"\0" as *const u8:   l57 = UNIQUE | NON_NULL, (empty)
            // 1754: b"\0": typeof(_53) = *const {l59} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 1754: b"\0":   l59 = UNIQUE | NON_NULL, (empty)
            // 1754: b"\0": typeof(_54) = & {l61} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 1754: b"\0":   l61 = UNIQUE | NON_NULL, FIXED
            // 1754: b"\0": typeof(_53 = &raw const (*_54)) = *const {l104} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 1754: b"\0":   l104 = UNIQUE | NON_NULL, (empty)
            // 1754: b"\0" as *const u8: typeof(_52 = move _53 as *const u8 (Pointer(ArrayToPointer))) = *const {l105} u8
            // 1754: b"\0" as *const u8:   l105 = UNIQUE | NON_NULL, (empty)
            // 1754: b"\0" as *const ... _char: typeof(_49 = move _52 as *const i8 (Misc)) = *const {l106} i8
            // 1754: b"\0" as *const ... _char:   l106 = UNIQUE | NON_NULL, (empty)
            // 1754: b"\0": typeof(_54 = const b"\x00") = & {l103} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 1754: b"\0":   l103 = UNIQUE | NON_NULL, (empty)
        } else {
            b" (default)\0" as *const u8 as *const libc::c_char
            // 1756: b" (default)\0" ... st u8: typeof(_55) = *const {l63} u8
            // 1756: b" (default)\0" ... st u8:   l63 = UNIQUE | NON_NULL, (empty)
            // 1756: b" (default)\0": typeof(_56) = *const {l65} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 1756: b" (default)\0":   l65 = UNIQUE | NON_NULL, (empty)
            // 1756: b" (default)\0": typeof(_57) = & {l67} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 1756: b" (default)\0":   l67 = UNIQUE | NON_NULL, FIXED
            // 1756: b" (default)\0": typeof(_56 = &raw const (*_57)) = *const {l108} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 1756: b" (default)\0":   l108 = UNIQUE | NON_NULL, (empty)
            // 1756: b" (default)\0" ... st u8: typeof(_55 = move _56 as *const u8 (Pointer(ArrayToPointer))) = *const {l109} u8
            // 1756: b" (default)\0" ... st u8:   l109 = UNIQUE | NON_NULL, (empty)
            // 1756: b" (default)\0": typeof(_57 = const b" (default)\x00") = & {l107} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 1756: b" (default)\0":   l107 = UNIQUE | NON_NULL, (empty)
            // 1756: b" (default)\0" ... _char: typeof(_49 = move _55 as *const i8 (Misc)) = *const {l110} i8
            // 1756: b" (default)\0" ... _char:   l110 = UNIQUE | NON_NULL, (empty)
        },
        if 1 as libc::c_int != 0 {
        // 1758: if 1 as libc::c ... har }: typeof(_58) = *const {l69} i8
        // 1758: if 1 as libc::c ... har }:   l69 = UNIQUE | NON_NULL, (empty)
            b" (default)\0" as *const u8 as *const libc::c_char
            // 1759: b" (default)\0" ... st u8: typeof(_61) = *const {l73} u8
            // 1759: b" (default)\0" ... st u8:   l73 = UNIQUE | NON_NULL, (empty)
            // 1759: b" (default)\0": typeof(_62) = *const {l75} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 1759: b" (default)\0":   l75 = UNIQUE | NON_NULL, (empty)
            // 1759: b" (default)\0": typeof(_63) = & {l77} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 1759: b" (default)\0":   l77 = UNIQUE | NON_NULL, FIXED
            // 1759: b" (default)\0": typeof(_63 = const b" (default)\x00") = & {l111} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 1759: b" (default)\0":   l111 = UNIQUE | NON_NULL, (empty)
            // 1759: b" (default)\0": typeof(_62 = &raw const (*_63)) = *const {l112} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 1759: b" (default)\0":   l112 = UNIQUE | NON_NULL, (empty)
            // 1759: b" (default)\0" ... st u8: typeof(_61 = move _62 as *const u8 (Pointer(ArrayToPointer))) = *const {l113} u8
            // 1759: b" (default)\0" ... st u8:   l113 = UNIQUE | NON_NULL, (empty)
            // 1759: b" (default)\0" ... _char: typeof(_58 = move _61 as *const i8 (Misc)) = *const {l114} i8
            // 1759: b" (default)\0" ... _char:   l114 = UNIQUE | NON_NULL, (empty)
        } else {
            b"\0" as *const u8 as *const libc::c_char
            // 1761: b"\0" as *const u8: typeof(_64) = *const {l79} u8
            // 1761: b"\0" as *const u8:   l79 = UNIQUE | NON_NULL, (empty)
            // 1761: b"\0": typeof(_65) = *const {l81} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 1761: b"\0":   l81 = UNIQUE | NON_NULL, (empty)
            // 1761: b"\0": typeof(_66) = & {l83} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 1761: b"\0":   l83 = UNIQUE | NON_NULL, FIXED
            // 1761: b"\0": typeof(_66 = const b"\x00") = & {l115} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 1761: b"\0":   l115 = UNIQUE | NON_NULL, (empty)
            // 1761: b"\0": typeof(_65 = &raw const (*_66)) = *const {l116} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 1761: b"\0":   l116 = UNIQUE | NON_NULL, (empty)
            // 1761: b"\0" as *const u8: typeof(_64 = move _65 as *const u8 (Pointer(ArrayToPointer))) = *const {l117} u8
            // 1761: b"\0" as *const u8:   l117 = UNIQUE | NON_NULL, (empty)
            // 1761: b"\0" as *const ... _char: typeof(_58 = move _64 as *const i8 (Misc)) = *const {l118} i8
            // 1761: b"\0" as *const ... _char:   l118 = UNIQUE | NON_NULL, (empty)
        },
        10 as libc::c_int,
        1000 as libc::c_int,
        10000 as libc::c_int,
        100000 as libc::c_int,
        10 as libc::c_int,
        10 as libc::c_int,
    );
    fflush(stdout);
    // 1770: stdout: typeof(_74) = *mut {l92} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1770: stdout:   l92 = UNIQUE | NON_NULL, (empty)
    // 1770: stdout: typeof(_75) = *mut {l94} *mut {l95} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1770: stdout:   l94 = UNIQUE | NON_NULL, (empty)
    // 1770: stdout:   l95 = UNIQUE | NON_NULL, (empty)
    exit(0 as libc::c_int);
}
unsafe extern "C" fn version() {
    printf(b"%s\n\0" as *const u8 as *const libc::c_char, lglversion());
    // 1774: b"%s\n\0" as *c ... _char: typeof(_3) = *const {l3} i8
    // 1774: b"%s\n\0" as *c ... _char:   l3 = UNIQUE | NON_NULL, (empty)
    // 1774: b"%s\n\0" as *c ... st u8: typeof(_4) = *const {l5} u8
    // 1774: b"%s\n\0" as *c ... st u8:   l5 = UNIQUE | NON_NULL, (empty)
    // 1774: b"%s\n\0": typeof(_5) = *const {l7} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1774: b"%s\n\0":   l7 = UNIQUE | NON_NULL, (empty)
    // 1774: b"%s\n\0": typeof(_6) = & {l9} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1774: b"%s\n\0":   l9 = UNIQUE | NON_NULL, FIXED
    // 1774: lglversion(): typeof(_7) = *const {l11} i8
    // 1774: lglversion():   l11 = UNIQUE | NON_NULL, (empty)
    // 1774: b"%s\n\0": typeof(_5 = &raw const (*_6)) = *const {l16} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1774: b"%s\n\0":   l16 = UNIQUE | NON_NULL, (empty)
    // 1774: b"%s\n\0" as *c ... st u8: typeof(_4 = move _5 as *const u8 (Pointer(ArrayToPointer))) = *const {l17} u8
    // 1774: b"%s\n\0" as *c ... st u8:   l17 = UNIQUE | NON_NULL, (empty)
    // 1774: b"%s\n\0": typeof(_6 = const b"%s\n\x00") = & {l15} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 1774: b"%s\n\0":   l15 = UNIQUE | NON_NULL, (empty)
    // 1774: b"%s\n\0" as *c ... _char: typeof(_3 = move _4 as *const i8 (Misc)) = *const {l18} i8
    // 1774: b"%s\n\0" as *c ... _char:   l18 = UNIQUE | NON_NULL, (empty)
    exit(0 as libc::c_int);
}
unsafe extern "C" fn next() -> libc::c_int {
    let mut res: libc::c_int = getc(file);
    // 1778: file: typeof(_3) = *mut {l3} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1778: file:   l3 = UNIQUE | NON_NULL, (empty)
    // 1778: file: typeof(_4) = *mut {l5} *mut {l6} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 1778: file:   l5 = UNIQUE | NON_NULL, (empty)
    // 1778: file:   l6 = UNIQUE | NON_NULL, (empty)
    if res == '\n' as i32 {
        lineno += 1;
        // 1780: lineno: typeof(_9) = *mut {l12} i32
        // 1780: lineno:   l12 = UNIQUE | NON_NULL, (empty)
        lineno;
        // 1781: lineno: typeof(_12) = *mut {l16} i32
        // 1781: lineno:   l16 = UNIQUE | NON_NULL, (empty)
    }
    return res;
}
unsafe extern "C" fn ws(mut ch: libc::c_int) -> libc::c_int {
    return (ch == ' ' as i32 || ch == '\t' as i32 || ch == '\n' as i32 || ch == '\r' as i32)
        as libc::c_int;
}
unsafe extern "C" fn parse(mut lgl: *mut LGL) {
// 1789: mut lgl: typeof(_1) = *mut {g28} LGL
// 1789: mut lgl:   g28 = UNIQUE | NON_NULL, FIXED
    let mut sclauses: libc::c_int = 0;
    let mut ch: libc::c_int = 0;
    let mut sign: libc::c_int = 0;
    let mut lit: libc::c_int = 0;
    let mut last: libc::c_int = 0;
    let mut nlits: libc::c_int = 0;
    lineno = 1 as libc::c_int;
    // 1796: lineno: typeof(_9) = *mut {l9} i32
    // 1796: lineno:   l9 = UNIQUE | NON_NULL, (empty)
    loop {
        ch = next();
        if ch == -(1 as libc::c_int) {
            perr(b"unexpected end-of-file before header\0" as *const u8 as *const libc::c_char);
            // 1800: b"unexpected en ... _char: typeof(_20) = *const {l21} i8
            // 1800: b"unexpected en ... _char:   l21 = UNIQUE | NON_NULL, (empty)
            // 1800: b"unexpected en ... st u8: typeof(_21) = *const {l23} u8
            // 1800: b"unexpected en ... st u8:   l23 = UNIQUE | NON_NULL, (empty)
            // 1800: b"unexpected en ... er\0": typeof(_22) = *const {l25} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 1800: b"unexpected en ... er\0":   l25 = UNIQUE | NON_NULL, (empty)
            // 1800: b"unexpected en ... er\0": typeof(_23) = & {l27} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 1800: b"unexpected en ... er\0":   l27 = UNIQUE | NON_NULL, FIXED
            // 1800: b"unexpected en ... er\0": typeof(_23 = const b"unexpected end-of-file before header\x00") = & {l393} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 1800: b"unexpected en ... er\0":   l393 = UNIQUE | NON_NULL, (empty)
            // 1800: b"unexpected en ... er\0": typeof(_22 = &raw const (*_23)) = *const {l394} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 1800: b"unexpected en ... er\0":   l394 = UNIQUE | NON_NULL, (empty)
            // 1800: b"unexpected en ... st u8: typeof(_21 = move _22 as *const u8 (Pointer(ArrayToPointer))) = *const {l395} u8
            // 1800: b"unexpected en ... st u8:   l395 = UNIQUE | NON_NULL, (empty)
            // 1800: b"unexpected en ... _char: typeof(_20 = move _21 as *const i8 (Misc)) = *const {l396} i8
            // 1800: b"unexpected en ... _char:   l396 = UNIQUE | NON_NULL, (empty)
        }
        if !(ch == 'c' as i32) {
            break;
        }
        loop {
            ch = next();
            if !(ch != '\n' as i32) {
                break;
            }
            if ch == -(1 as libc::c_int) {
                perr(
                    b"unexpected end-of-file in header comment\0" as *const u8
                    // 1812: b"unexpected en ... _char: typeof(_43) = *const {l48} i8
                    // 1812: b"unexpected en ... _char:   l48 = UNIQUE | NON_NULL, (empty)
                    // 1812: b"unexpected en ... st u8: typeof(_44) = *const {l50} u8
                    // 1812: b"unexpected en ... st u8:   l50 = UNIQUE | NON_NULL, (empty)
                    // 1812: b"unexpected en ... nt\0": typeof(_45) = *const {l52} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
                    // 1812: b"unexpected en ... nt\0":   l52 = UNIQUE | NON_NULL, (empty)
                    // 1812: b"unexpected en ... nt\0": typeof(_46) = & {l54} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
                    // 1812: b"unexpected en ... nt\0":   l54 = UNIQUE | NON_NULL, FIXED
                    // 1812: b"unexpected en ... st u8: typeof(_44 = move _45 as *const u8 (Pointer(ArrayToPointer))) = *const {l399} u8
                    // 1812: b"unexpected en ... st u8:   l399 = UNIQUE | NON_NULL, (empty)
                    // 1812: b"unexpected en ... _char: typeof(_43 = move _44 as *const i8 (Misc)) = *const {l400} i8
                    // 1812: b"unexpected en ... _char:   l400 = UNIQUE | NON_NULL, (empty)
                    // 1812: b"unexpected en ... nt\0": typeof(_46 = const b"unexpected end-of-file in header comment\x00") = & {l397} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
                    // 1812: b"unexpected en ... nt\0":   l397 = UNIQUE | NON_NULL, (empty)
                    // 1812: b"unexpected en ... nt\0": typeof(_45 = &raw const (*_46)) = *const {l398} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
                    // 1812: b"unexpected en ... nt\0":   l398 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                );
            }
        }
    }
    if ch != 'p' as i32 {
        perr(
            b"unexpected character 0x%02x in header\0" as *const u8 as *const libc::c_char,
            // 1820: b"unexpected ch ... _char: typeof(_52) = *const {l61} i8
            // 1820: b"unexpected ch ... _char:   l61 = UNIQUE | NON_NULL, (empty)
            // 1820: b"unexpected ch ... st u8: typeof(_53) = *const {l63} u8
            // 1820: b"unexpected ch ... st u8:   l63 = UNIQUE | NON_NULL, (empty)
            // 1820: b"unexpected ch ... er\0": typeof(_54) = *const {l65} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
            // 1820: b"unexpected ch ... er\0":   l65 = UNIQUE | NON_NULL, (empty)
            // 1820: b"unexpected ch ... er\0": typeof(_55) = & {l67} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
            // 1820: b"unexpected ch ... er\0":   l67 = UNIQUE | NON_NULL, FIXED
            // 1820: b"unexpected ch ... er\0": typeof(_54 = &raw const (*_55)) = *const {l402} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
            // 1820: b"unexpected ch ... er\0":   l402 = UNIQUE | NON_NULL, (empty)
            // 1820: b"unexpected ch ... er\0": typeof(_55 = const b"unexpected character 0x%02x in header\x00") = & {l401} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
            // 1820: b"unexpected ch ... er\0":   l401 = UNIQUE | NON_NULL, (empty)
            // 1820: b"unexpected ch ... st u8: typeof(_53 = move _54 as *const u8 (Pointer(ArrayToPointer))) = *const {l403} u8
            // 1820: b"unexpected ch ... st u8:   l403 = UNIQUE | NON_NULL, (empty)
            // 1820: b"unexpected ch ... _char: typeof(_52 = move _53 as *const i8 (Misc)) = *const {l404} i8
            // 1820: b"unexpected ch ... _char:   l404 = UNIQUE | NON_NULL, (empty)
            ch,
        );
    }
    if fscanf(
        file,
        // 1825: file: typeof(_62) = *mut {l75} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 1825: file:   l75 = UNIQUE | NON_NULL, (empty)
        // 1825: file: typeof(_63) = *mut {l77} *mut {l78} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 1825: file:   l77 = UNIQUE | NON_NULL, (empty)
        // 1825: file:   l78 = UNIQUE | NON_NULL, (empty)
        b" cnf %d %d\0" as *const u8 as *const libc::c_char,
        // 1826: b" cnf %d %d\0" ... _char: typeof(_64) = *const {l80} i8
        // 1826: b" cnf %d %d\0" ... _char:   l80 = UNIQUE | NON_NULL, (empty)
        // 1826: b" cnf %d %d\0" ... st u8: typeof(_65) = *const {l82} u8
        // 1826: b" cnf %d %d\0" ... st u8:   l82 = UNIQUE | NON_NULL, (empty)
        // 1826: b" cnf %d %d\0": typeof(_66) = *const {l84} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1826: b" cnf %d %d\0":   l84 = UNIQUE | NON_NULL, (empty)
        // 1826: b" cnf %d %d\0": typeof(_67) = & {l86} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1826: b" cnf %d %d\0":   l86 = UNIQUE | NON_NULL, FIXED
        // 1826: b" cnf %d %d\0" ... st u8: typeof(_65 = move _66 as *const u8 (Pointer(ArrayToPointer))) = *const {l407} u8
        // 1826: b" cnf %d %d\0" ... st u8:   l407 = UNIQUE | NON_NULL, (empty)
        // 1826: b" cnf %d %d\0" ... _char: typeof(_64 = move _65 as *const i8 (Misc)) = *const {l408} i8
        // 1826: b" cnf %d %d\0" ... _char:   l408 = UNIQUE | NON_NULL, (empty)
        // 1826: b" cnf %d %d\0": typeof(_67 = const b" cnf %d %d\x00") = & {l405} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1826: b" cnf %d %d\0":   l405 = UNIQUE | NON_NULL, (empty)
        // 1826: b" cnf %d %d\0": typeof(_66 = &raw const (*_67)) = *const {l406} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 1826: b" cnf %d %d\0":   l406 = UNIQUE | NON_NULL, (empty)
        &mut nvars as *mut libc::c_int,
        // 1827: &mut nvars as * ... c_int: typeof(_68) = *mut {l88} i32
        // 1827: &mut nvars as * ... c_int:   l88 = UNIQUE | NON_NULL, (empty)
        // 1827: &mut nvars: typeof(_69) = &mut {l90} i32
        // 1827: &mut nvars:   l90 = UNIQUE | NON_NULL, (empty)
        // 1827: nvars: typeof(_70) = *mut {l92} i32
        // 1827: nvars:   l92 = UNIQUE | NON_NULL, (empty)
        // 1827: &mut nvars: typeof(_68 = &raw mut (*_69)) = *mut {l410} i32
        // 1827: &mut nvars:   l410 = UNIQUE | NON_NULL, (empty)
        // 1827: &mut nvars: typeof(_69 = &mut (*_70)) = &mut {l409} i32
        // 1827: &mut nvars:   l409 = UNIQUE | NON_NULL, (empty)
        &mut sclauses as *mut libc::c_int,
        // 1828: &mut sclauses a ... c_int: typeof(_71) = *mut {l94} i32
        // 1828: &mut sclauses a ... c_int:   l94 = UNIQUE | NON_NULL, (empty)
        // 1828: &mut sclauses: typeof(_72) = &mut {l96} i32
        // 1828: &mut sclauses:   l96 = UNIQUE | NON_NULL, (empty)
        // 1828: &mut sclauses: typeof(_72 = &mut _2) = &mut {l411} i32
        // 1828: &mut sclauses:   l411 = UNIQUE | NON_NULL, (empty)
        // 1828: &mut sclauses: typeof(_71 = &raw mut (*_72)) = *mut {l412} i32
        // 1828: &mut sclauses:   l412 = UNIQUE | NON_NULL, (empty)
    ) != 2 as libc::c_int
        || nvars < 0 as libc::c_int
        // 1830: nvars: typeof(_76) = *mut {l101} i32
        // 1830: nvars:   l101 = UNIQUE | NON_NULL, (empty)
        || sclauses < 0 as libc::c_int
    {
        perr(b"invalid header\0" as *const u8 as *const libc::c_char);
        // 1833: b"invalid heade ... _char: typeof(_82) = *const {l108} i8
        // 1833: b"invalid heade ... _char:   l108 = UNIQUE | NON_NULL, (empty)
        // 1833: b"invalid heade ... st u8: typeof(_83) = *const {l110} u8
        // 1833: b"invalid heade ... st u8:   l110 = UNIQUE | NON_NULL, (empty)
        // 1833: b"invalid header\0": typeof(_84) = *const {l112} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 1833: b"invalid header\0":   l112 = UNIQUE | NON_NULL, (empty)
        // 1833: b"invalid header\0": typeof(_85) = & {l114} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 1833: b"invalid header\0":   l114 = UNIQUE | NON_NULL, FIXED
        // 1833: b"invalid header\0": typeof(_85 = const b"invalid header\x00") = & {l413} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 1833: b"invalid header\0":   l413 = UNIQUE | NON_NULL, (empty)
        // 1833: b"invalid header\0": typeof(_84 = &raw const (*_85)) = *const {l414} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 1833: b"invalid header\0":   l414 = UNIQUE | NON_NULL, (empty)
        // 1833: b"invalid heade ... st u8: typeof(_83 = move _84 as *const u8 (Pointer(ArrayToPointer))) = *const {l415} u8
        // 1833: b"invalid heade ... st u8:   l415 = UNIQUE | NON_NULL, (empty)
        // 1833: b"invalid heade ... _char: typeof(_82 = move _83 as *const i8 (Misc)) = *const {l416} i8
        // 1833: b"invalid heade ... _char:   l416 = UNIQUE | NON_NULL, (empty)
    }
    msg(
        b"found 'p cnf %d %d' header\0" as *const u8 as *const libc::c_char,
        // 1836: b"found 'p cnf  ... _char: typeof(_87) = *const {l117} i8
        // 1836: b"found 'p cnf  ... _char:   l117 = UNIQUE | NON_NULL, (empty)
        // 1836: b"found 'p cnf  ... st u8: typeof(_88) = *const {l119} u8
        // 1836: b"found 'p cnf  ... st u8:   l119 = UNIQUE | NON_NULL, (empty)
        // 1836: b"found 'p cnf  ... er\0": typeof(_89) = *const {l121} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 1836: b"found 'p cnf  ... er\0":   l121 = UNIQUE | NON_NULL, (empty)
        // 1836: b"found 'p cnf  ... er\0": typeof(_90) = & {l123} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 1836: b"found 'p cnf  ... er\0":   l123 = UNIQUE | NON_NULL, FIXED
        // 1836: b"found 'p cnf  ... st u8: typeof(_88 = move _89 as *const u8 (Pointer(ArrayToPointer))) = *const {l419} u8
        // 1836: b"found 'p cnf  ... st u8:   l419 = UNIQUE | NON_NULL, (empty)
        // 1836: b"found 'p cnf  ... er\0": typeof(_90 = const b"found \'p cnf %d %d\' header\x00") = & {l417} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 1836: b"found 'p cnf  ... er\0":   l417 = UNIQUE | NON_NULL, (empty)
        // 1836: b"found 'p cnf  ... _char: typeof(_87 = move _88 as *const i8 (Misc)) = *const {l420} i8
        // 1836: b"found 'p cnf  ... _char:   l420 = UNIQUE | NON_NULL, (empty)
        // 1836: b"found 'p cnf  ... er\0": typeof(_89 = &raw const (*_90)) = *const {l418} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 1836: b"found 'p cnf  ... er\0":   l418 = UNIQUE | NON_NULL, (empty)
        nvars,
        // 1837: nvars: typeof(_92) = *mut {l126} i32
        // 1837: nvars:   l126 = UNIQUE | NON_NULL, (empty)
        sclauses,
    );
    last = 0 as libc::c_int;
    nlits = last;
    loop {
        ch = next();
        if ch == ' ' as i32 || ch == '\t' as i32 || ch == '\n' as i32 || ch == '\r' as i32 {
            continue;
        }
        if ch == -(1 as libc::c_int) {
            if last != 0 {
                perr(
                    b"zero missing after %d in last clause\0" as *const u8 as *const libc::c_char,
                    // 1850: b"zero missing  ... _char: typeof(_126) = *const {l161} i8
                    // 1850: b"zero missing  ... _char:   l161 = UNIQUE | NON_NULL, (empty)
                    // 1850: b"zero missing  ... st u8: typeof(_127) = *const {l163} u8
                    // 1850: b"zero missing  ... st u8:   l163 = UNIQUE | NON_NULL, (empty)
                    // 1850: b"zero missing  ... se\0": typeof(_128) = *const {l165} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
                    // 1850: b"zero missing  ... se\0":   l165 = UNIQUE | NON_NULL, (empty)
                    // 1850: b"zero missing  ... se\0": typeof(_129) = & {l167} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
                    // 1850: b"zero missing  ... se\0":   l167 = UNIQUE | NON_NULL, FIXED
                    // 1850: b"zero missing  ... se\0": typeof(_129 = const b"zero missing after %d in last clause\x00") = & {l421} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
                    // 1850: b"zero missing  ... se\0":   l421 = UNIQUE | NON_NULL, (empty)
                    // 1850: b"zero missing  ... se\0": typeof(_128 = &raw const (*_129)) = *const {l422} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
                    // 1850: b"zero missing  ... se\0":   l422 = UNIQUE | NON_NULL, (empty)
                    // 1850: b"zero missing  ... _char: typeof(_126 = move _127 as *const i8 (Misc)) = *const {l424} i8
                    // 1850: b"zero missing  ... _char:   l424 = UNIQUE | NON_NULL, (empty)
                    // 1850: b"zero missing  ... st u8: typeof(_127 = move _128 as *const u8 (Pointer(ArrayToPointer))) = *const {l423} u8
                    // 1850: b"zero missing  ... st u8:   l423 = UNIQUE | NON_NULL, (empty)
                    last,
                );
            }
            if nclauses < sclauses {
            // 1854: nclauses: typeof(_134) = *mut {l173} i32
            // 1854: nclauses:   l173 = UNIQUE | NON_NULL, (empty)
                perr(
                    b"%d clauses missing\0" as *const u8 as *const libc::c_char,
                    // 1856: b"%d clauses mi ... _char: typeof(_137) = *const {l177} i8
                    // 1856: b"%d clauses mi ... _char:   l177 = UNIQUE | NON_NULL, (empty)
                    // 1856: b"%d clauses mi ... st u8: typeof(_138) = *const {l179} u8
                    // 1856: b"%d clauses mi ... st u8:   l179 = UNIQUE | NON_NULL, (empty)
                    // 1856: b"%d clauses mi ... ng\0": typeof(_139) = *const {l181} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
                    // 1856: b"%d clauses mi ... ng\0":   l181 = UNIQUE | NON_NULL, (empty)
                    // 1856: b"%d clauses mi ... ng\0": typeof(_140) = & {l183} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
                    // 1856: b"%d clauses mi ... ng\0":   l183 = UNIQUE | NON_NULL, FIXED
                    // 1856: b"%d clauses mi ... ng\0": typeof(_139 = &raw const (*_140)) = *const {l426} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
                    // 1856: b"%d clauses mi ... ng\0":   l426 = UNIQUE | NON_NULL, (empty)
                    // 1856: b"%d clauses mi ... ng\0": typeof(_140 = const b"%d clauses missing\x00") = & {l425} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
                    // 1856: b"%d clauses mi ... ng\0":   l425 = UNIQUE | NON_NULL, (empty)
                    // 1856: b"%d clauses mi ... st u8: typeof(_138 = move _139 as *const u8 (Pointer(ArrayToPointer))) = *const {l427} u8
                    // 1856: b"%d clauses mi ... st u8:   l427 = UNIQUE | NON_NULL, (empty)
                    // 1856: b"%d clauses mi ... _char: typeof(_137 = move _138 as *const i8 (Misc)) = *const {l428} i8
                    // 1856: b"%d clauses mi ... _char:   l428 = UNIQUE | NON_NULL, (empty)
                    sclauses - nclauses,
                    // 1857: nclauses: typeof(_144) = *mut {l188} i32
                    // 1857: nclauses:   l188 = UNIQUE | NON_NULL, (empty)
                );
            }
            msg(
                b"parsed %d literals in %d clauses in %.2f seconds\0" as *const u8
                // 1861: b"parsed %d lit ... _char: typeof(_147) = *const {l192} i8
                // 1861: b"parsed %d lit ... _char:   l192 = UNIQUE | NON_NULL, (empty)
                // 1861: b"parsed %d lit ... st u8: typeof(_148) = *const {l194} u8
                // 1861: b"parsed %d lit ... st u8:   l194 = UNIQUE | NON_NULL, (empty)
                // 1861: b"parsed %d lit ... ds\0": typeof(_149) = *const {l196} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
                // 1861: b"parsed %d lit ... ds\0":   l196 = UNIQUE | NON_NULL, (empty)
                // 1861: b"parsed %d lit ... ds\0": typeof(_150) = & {l198} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
                // 1861: b"parsed %d lit ... ds\0":   l198 = UNIQUE | NON_NULL, FIXED
                // 1861: b"parsed %d lit ... st u8: typeof(_148 = move _149 as *const u8 (Pointer(ArrayToPointer))) = *const {l431} u8
                // 1861: b"parsed %d lit ... st u8:   l431 = UNIQUE | NON_NULL, (empty)
                // 1861: b"parsed %d lit ... ds\0": typeof(_150 = const b"parsed %d literals in %d clauses in %.2f seconds\x00") = & {l429} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
                // 1861: b"parsed %d lit ... ds\0":   l429 = UNIQUE | NON_NULL, (empty)
                // 1861: b"parsed %d lit ... _char: typeof(_147 = move _148 as *const i8 (Misc)) = *const {l432} i8
                // 1861: b"parsed %d lit ... _char:   l432 = UNIQUE | NON_NULL, (empty)
                // 1861: b"parsed %d lit ... ds\0": typeof(_149 = &raw const (*_150)) = *const {l430} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
                // 1861: b"parsed %d lit ... ds\0":   l430 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
                nlits,
                nclauses,
                // 1864: nclauses: typeof(_153) = *mut {l202} i32
                // 1864: nclauses:   l202 = UNIQUE | NON_NULL, (empty)
                getime(),
            );
            return;
        }
        if ch == 'c' as i32 {
            loop {
                ch = next();
                if !(ch != '\n' as i32) {
                    break;
                }
                if ch == -(1 as libc::c_int) {
                    perr(
                        b"unexpected end-of-file in body comment\0" as *const u8
                        // 1877: b"unexpected en ... _char: typeof(_171) = *const {l221} i8
                        // 1877: b"unexpected en ... _char:   l221 = UNIQUE | NON_NULL, (empty)
                        // 1877: b"unexpected en ... st u8: typeof(_172) = *const {l223} u8
                        // 1877: b"unexpected en ... st u8:   l223 = UNIQUE | NON_NULL, (empty)
                        // 1877: b"unexpected en ... nt\0": typeof(_173) = *const {l225} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                        // 1877: b"unexpected en ... nt\0":   l225 = UNIQUE | NON_NULL, (empty)
                        // 1877: b"unexpected en ... nt\0": typeof(_174) = & {l227} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                        // 1877: b"unexpected en ... nt\0":   l227 = UNIQUE | NON_NULL, FIXED
                        // 1877: b"unexpected en ... st u8: typeof(_172 = move _173 as *const u8 (Pointer(ArrayToPointer))) = *const {l435} u8
                        // 1877: b"unexpected en ... st u8:   l435 = UNIQUE | NON_NULL, (empty)
                        // 1877: b"unexpected en ... nt\0": typeof(_173 = &raw const (*_174)) = *const {l434} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                        // 1877: b"unexpected en ... nt\0":   l434 = UNIQUE | NON_NULL, (empty)
                        // 1877: b"unexpected en ... nt\0": typeof(_174 = const b"unexpected end-of-file in body comment\x00") = & {l433} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                        // 1877: b"unexpected en ... nt\0":   l433 = UNIQUE | NON_NULL, (empty)
                        // 1877: b"unexpected en ... _char: typeof(_171 = move _172 as *const i8 (Misc)) = *const {l436} i8
                        // 1877: b"unexpected en ... _char:   l436 = UNIQUE | NON_NULL, (empty)
                            as *const libc::c_char,
                    );
                }
            }
        } else {
            sign = 1 as libc::c_int;
            if ch == '-' as i32 {
                ch = next();
                if *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                // 1886: (*__ctype_b_loc ... size): typeof(_186) = *const {l240} u16
                // 1886: (*__ctype_b_loc ... size):   l240 = UNIQUE | NON_NULL, (empty)
                // 1886: (*__ctype_b_loc()): typeof(_187) = *const {l242} u16
                // 1886: (*__ctype_b_loc()):   l242 = UNIQUE | NON_NULL, (empty)
                // 1886: __ctype_b_loc(): typeof(_188) = *mut {l244} *const {l245} u16
                // 1886: __ctype_b_loc():   l244 = UNIQUE | NON_NULL, (empty)
                // 1886: __ctype_b_loc():   l245 = UNIQUE | NON_NULL, (empty)
                    & _ISdigit as libc::c_int as libc::c_ushort as libc::c_int
                    == 0
                {
                    perr(b"expected digit after '-'\0" as *const u8 as *const libc::c_char);
                    // 1890: b"expected digi ... _char: typeof(_195) = *const {l253} i8
                    // 1890: b"expected digi ... _char:   l253 = UNIQUE | NON_NULL, (empty)
                    // 1890: b"expected digi ... st u8: typeof(_196) = *const {l255} u8
                    // 1890: b"expected digi ... st u8:   l255 = UNIQUE | NON_NULL, (empty)
                    // 1890: b"expected digi ... -'\0": typeof(_197) = *const {l257} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                    // 1890: b"expected digi ... -'\0":   l257 = UNIQUE | NON_NULL, (empty)
                    // 1890: b"expected digi ... -'\0": typeof(_198) = & {l259} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                    // 1890: b"expected digi ... -'\0":   l259 = UNIQUE | NON_NULL, FIXED
                    // 1890: b"expected digi ... -'\0": typeof(_197 = &raw const (*_198)) = *const {l438} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                    // 1890: b"expected digi ... -'\0":   l438 = UNIQUE | NON_NULL, (empty)
                    // 1890: b"expected digi ... st u8: typeof(_196 = move _197 as *const u8 (Pointer(ArrayToPointer))) = *const {l439} u8
                    // 1890: b"expected digi ... st u8:   l439 = UNIQUE | NON_NULL, (empty)
                    // 1890: b"expected digi ... -'\0": typeof(_198 = const b"expected digit after \'-\'\x00") = & {l437} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                    // 1890: b"expected digi ... -'\0":   l437 = UNIQUE | NON_NULL, (empty)
                    // 1890: b"expected digi ... _char: typeof(_195 = move _196 as *const i8 (Misc)) = *const {l440} i8
                    // 1890: b"expected digi ... _char:   l440 = UNIQUE | NON_NULL, (empty)
                }
                sign = -(1 as libc::c_int);
            } else if *(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
            // 1893: (*__ctype_b_loc ... size): typeof(_205) = *const {l267} u16
            // 1893: (*__ctype_b_loc ... size):   l267 = UNIQUE | NON_NULL, (empty)
            // 1893: (*__ctype_b_loc()): typeof(_206) = *const {l269} u16
            // 1893: (*__ctype_b_loc()):   l269 = UNIQUE | NON_NULL, (empty)
            // 1893: __ctype_b_loc(): typeof(_207) = *mut {l271} *const {l272} u16
            // 1893: __ctype_b_loc():   l271 = UNIQUE | NON_NULL, (empty)
            // 1893: __ctype_b_loc():   l272 = UNIQUE | NON_NULL, (empty)
                & _ISdigit as libc::c_int as libc::c_ushort as libc::c_int
                == 0
            {
                perr(b"expected digit or '-'\0" as *const u8 as *const libc::c_char);
                // 1897: b"expected digi ... _char: typeof(_214) = *const {l280} i8
                // 1897: b"expected digi ... _char:   l280 = UNIQUE | NON_NULL, (empty)
                // 1897: b"expected digi ... st u8: typeof(_215) = *const {l282} u8
                // 1897: b"expected digi ... st u8:   l282 = UNIQUE | NON_NULL, (empty)
                // 1897: b"expected digi ... -'\0": typeof(_216) = *const {l284} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
                // 1897: b"expected digi ... -'\0":   l284 = UNIQUE | NON_NULL, (empty)
                // 1897: b"expected digi ... -'\0": typeof(_217) = & {l286} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
                // 1897: b"expected digi ... -'\0":   l286 = UNIQUE | NON_NULL, FIXED
                // 1897: b"expected digi ... -'\0": typeof(_216 = &raw const (*_217)) = *const {l442} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
                // 1897: b"expected digi ... -'\0":   l442 = UNIQUE | NON_NULL, (empty)
                // 1897: b"expected digi ... st u8: typeof(_215 = move _216 as *const u8 (Pointer(ArrayToPointer))) = *const {l443} u8
                // 1897: b"expected digi ... st u8:   l443 = UNIQUE | NON_NULL, (empty)
                // 1897: b"expected digi ... -'\0": typeof(_217 = const b"expected digit or \'-\'\x00") = & {l441} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
                // 1897: b"expected digi ... -'\0":   l441 = UNIQUE | NON_NULL, (empty)
                // 1897: b"expected digi ... _char: typeof(_214 = move _215 as *const i8 (Misc)) = *const {l444} i8
                // 1897: b"expected digi ... _char:   l444 = UNIQUE | NON_NULL, (empty)
            }
            lit = ch - '0' as i32;
            loop {
                ch = next();
                if !(*(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
                // 1902: (*__ctype_b_loc ... size): typeof(_229) = *const {l299} u16
                // 1902: (*__ctype_b_loc ... size):   l299 = UNIQUE | NON_NULL, (empty)
                // 1902: (*__ctype_b_loc()): typeof(_230) = *const {l301} u16
                // 1902: (*__ctype_b_loc()):   l301 = UNIQUE | NON_NULL, (empty)
                // 1902: __ctype_b_loc(): typeof(_231) = *mut {l303} *const {l304} u16
                // 1902: __ctype_b_loc():   l303 = UNIQUE | NON_NULL, (empty)
                // 1902: __ctype_b_loc():   l304 = UNIQUE | NON_NULL, (empty)
                    & _ISdigit as libc::c_int as libc::c_ushort as libc::c_int
                    != 0)
                {
                    break;
                }
                lit = 10 as libc::c_int * lit + (ch - '0' as i32);
            }
            if lit > nvars {
            // 1910: nvars: typeof(_251) = *mut {l325} i32
            // 1910: nvars:   l325 = UNIQUE | NON_NULL, (empty)
                perr(
                    b"variable %d exceeds maximum %d\0" as *const u8 as *const libc::c_char,
                    // 1912: b"variable %d e ... _char: typeof(_253) = *const {l328} i8
                    // 1912: b"variable %d e ... _char:   l328 = UNIQUE | NON_NULL, (empty)
                    // 1912: b"variable %d e ... st u8: typeof(_254) = *const {l330} u8
                    // 1912: b"variable %d e ... st u8:   l330 = UNIQUE | NON_NULL, (empty)
                    // 1912: b"variable %d e ... %d\0": typeof(_255) = *const {l332} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001f)) }]
                    // 1912: b"variable %d e ... %d\0":   l332 = UNIQUE | NON_NULL, (empty)
                    // 1912: b"variable %d e ... %d\0": typeof(_256) = & {l334} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001f)) }]
                    // 1912: b"variable %d e ... %d\0":   l334 = UNIQUE | NON_NULL, FIXED
                    // 1912: b"variable %d e ... st u8: typeof(_254 = move _255 as *const u8 (Pointer(ArrayToPointer))) = *const {l447} u8
                    // 1912: b"variable %d e ... st u8:   l447 = UNIQUE | NON_NULL, (empty)
                    // 1912: b"variable %d e ... _char: typeof(_253 = move _254 as *const i8 (Misc)) = *const {l448} i8
                    // 1912: b"variable %d e ... _char:   l448 = UNIQUE | NON_NULL, (empty)
                    // 1912: b"variable %d e ... %d\0": typeof(_256 = const b"variable %d exceeds maximum %d\x00") = & {l445} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001f)) }]
                    // 1912: b"variable %d e ... %d\0":   l445 = UNIQUE | NON_NULL, (empty)
                    // 1912: b"variable %d e ... %d\0": typeof(_255 = &raw const (*_256)) = *const {l446} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001f)) }]
                    // 1912: b"variable %d e ... %d\0":   l446 = UNIQUE | NON_NULL, (empty)
                    lit,
                    nvars,
                    // 1914: nvars: typeof(_259) = *mut {l338} i32
                    // 1914: nvars:   l338 = UNIQUE | NON_NULL, (empty)
                );
            }
            if nclauses == sclauses {
            // 1917: nclauses: typeof(_263) = *mut {l343} i32
            // 1917: nclauses:   l343 = UNIQUE | NON_NULL, (empty)
                perr(b"too many clauses\0" as *const u8 as *const libc::c_char);
                // 1918: b"too many clau ... _char: typeof(_266) = *const {l347} i8
                // 1918: b"too many clau ... _char:   l347 = UNIQUE | NON_NULL, (empty)
                // 1918: b"too many clau ... st u8: typeof(_267) = *const {l349} u8
                // 1918: b"too many clau ... st u8:   l349 = UNIQUE | NON_NULL, (empty)
                // 1918: b"too many clau ... es\0": typeof(_268) = *const {l351} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
                // 1918: b"too many clau ... es\0":   l351 = UNIQUE | NON_NULL, (empty)
                // 1918: b"too many clau ... es\0": typeof(_269) = & {l353} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
                // 1918: b"too many clau ... es\0":   l353 = UNIQUE | NON_NULL, FIXED
                // 1918: b"too many clau ... st u8: typeof(_267 = move _268 as *const u8 (Pointer(ArrayToPointer))) = *const {l451} u8
                // 1918: b"too many clau ... st u8:   l451 = UNIQUE | NON_NULL, (empty)
                // 1918: b"too many clau ... es\0": typeof(_269 = const b"too many clauses\x00") = & {l449} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
                // 1918: b"too many clau ... es\0":   l449 = UNIQUE | NON_NULL, (empty)
                // 1918: b"too many clau ... _char: typeof(_266 = move _267 as *const i8 (Misc)) = *const {l452} i8
                // 1918: b"too many clau ... _char:   l452 = UNIQUE | NON_NULL, (empty)
                // 1918: b"too many clau ... es\0": typeof(_268 = &raw const (*_269)) = *const {l450} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
                // 1918: b"too many clau ... es\0":   l450 = UNIQUE | NON_NULL, (empty)
            }
            if lit != 0 {
                lit *= sign;
                nlits += 1;
                nlits;
            } else {
                nclauses += 1;
                // 1925: nclauses: typeof(_277) = *mut {l362} i32
                // 1925: nclauses:   l362 = UNIQUE | NON_NULL, (empty)
                nclauses;
                // 1926: nclauses: typeof(_280) = *mut {l366} i32
                // 1926: nclauses:   l366 = UNIQUE | NON_NULL, (empty)
            }
            if ch != -(1 as libc::c_int) && ws(ch) == 0 {
                perr(
                    b"expected white space after %d\0" as *const u8 as *const libc::c_char,
                    // 1930: b"expected whit ... _char: typeof(_292) = *const {l379} i8
                    // 1930: b"expected whit ... _char:   l379 = UNIQUE | NON_NULL, (empty)
                    // 1930: b"expected whit ... st u8: typeof(_293) = *const {l381} u8
                    // 1930: b"expected whit ... st u8:   l381 = UNIQUE | NON_NULL, (empty)
                    // 1930: b"expected whit ... %d\0": typeof(_294) = *const {l383} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
                    // 1930: b"expected whit ... %d\0":   l383 = UNIQUE | NON_NULL, (empty)
                    // 1930: b"expected whit ... %d\0": typeof(_295) = & {l385} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
                    // 1930: b"expected whit ... %d\0":   l385 = UNIQUE | NON_NULL, FIXED
                    // 1930: b"expected whit ... %d\0": typeof(_294 = &raw const (*_295)) = *const {l454} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
                    // 1930: b"expected whit ... %d\0":   l454 = UNIQUE | NON_NULL, (empty)
                    // 1930: b"expected whit ... %d\0": typeof(_295 = const b"expected white space after %d\x00") = & {l453} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
                    // 1930: b"expected whit ... %d\0":   l453 = UNIQUE | NON_NULL, (empty)
                    // 1930: b"expected whit ... st u8: typeof(_293 = move _294 as *const u8 (Pointer(ArrayToPointer))) = *const {l455} u8
                    // 1930: b"expected whit ... st u8:   l455 = UNIQUE | NON_NULL, (empty)
                    // 1930: b"expected whit ... _char: typeof(_292 = move _293 as *const i8 (Misc)) = *const {l456} i8
                    // 1930: b"expected whit ... _char:   l456 = UNIQUE | NON_NULL, (empty)
                    lit,
                );
            }
            lgladd(lgl, lit);
            // 1934: lgl: typeof(_298) = *mut {l389} LGL
            // 1934: lgl:   l389 = UNIQUE | NON_NULL, (empty)
            last = lit;
        }
    }
}
unsafe extern "C" fn isnum(mut str: *const libc::c_char) -> libc::c_int {
// 1939: mut str: typeof(_1) = *const {g29} i8
// 1939: mut str:   g29 = (empty), FIXED
    let mut p: *const libc::c_char = str;
    // 1940: mut p: typeof(_3) = *const {l3} i8
    // 1940: mut p:   l3 = UNIQUE | NON_NULL, (empty)
    if *(*__ctype_b_loc()).offset(*p as libc::c_int as isize) as libc::c_int
    // 1941: (*__ctype_b_loc ... size): typeof(_9) = *const {l10} u16
    // 1941: (*__ctype_b_loc ... size):   l10 = UNIQUE | NON_NULL, (empty)
    // 1941: (*__ctype_b_loc()): typeof(_10) = *const {l12} u16
    // 1941: (*__ctype_b_loc()):   l12 = UNIQUE | NON_NULL, (empty)
    // 1941: __ctype_b_loc(): typeof(_11) = *mut {l14} *const {l15} u16
    // 1941: __ctype_b_loc():   l14 = UNIQUE | NON_NULL, (empty)
    // 1941: __ctype_b_loc():   l15 = UNIQUE | NON_NULL, (empty)
        & _ISdigit as libc::c_int as libc::c_ushort as libc::c_int
        == 0
    {
        return 0 as libc::c_int;
    }
    loop {
        p = p.offset(1);
        // 1948: p.offset(1): typeof(_21) = *const {l26} i8
        // 1948: p.offset(1):   l26 = UNIQUE | NON_NULL, (empty)
        // 1948: p: typeof(_22) = *const {l28} i8
        // 1948: p:   l28 = UNIQUE | NON_NULL, (empty)
        if !(*p != 0) {
            break;
        }
        if *(*__ctype_b_loc()).offset(*p as libc::c_int as isize) as libc::c_int
        // 1952: (*__ctype_b_loc ... size): typeof(_32) = *const {l39} u16
        // 1952: (*__ctype_b_loc ... size):   l39 = UNIQUE | NON_NULL, (empty)
        // 1952: (*__ctype_b_loc()): typeof(_33) = *const {l41} u16
        // 1952: (*__ctype_b_loc()):   l41 = UNIQUE | NON_NULL, (empty)
        // 1952: __ctype_b_loc(): typeof(_34) = *mut {l43} *const {l44} u16
        // 1952: __ctype_b_loc():   l43 = UNIQUE | NON_NULL, (empty)
        // 1952: __ctype_b_loc():   l44 = UNIQUE | NON_NULL, (empty)
            & _ISdigit as libc::c_int as libc::c_ushort as libc::c_int
            == 0
        {
            return 0 as libc::c_int;
        }
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn exists(mut str: *const libc::c_char) -> libc::c_int {
// 1961: mut str: typeof(_1) = *const {g30} i8
// 1961: mut str:   g30 = READ | UNIQUE | OFFSET_ADD | NON_NULL, FIXED
    let mut buf: stat = stat {
        st_dev: 0,
        st_ino: 0,
        st_nlink: 0,
        st_mode: 0,
        st_uid: 0,
        st_gid: 0,
        __pad0: 0,
        st_rdev: 0,
        st_size: 0,
        st_blksize: 0,
        st_blocks: 0,
        st_atim: timespec {
            tv_sec: 0,
            tv_nsec: 0,
        },
        st_mtim: timespec {
            tv_sec: 0,
            tv_nsec: 0,
        },
        st_ctim: timespec {
            tv_sec: 0,
            tv_nsec: 0,
        },
        __glibc_reserved: [0; 3],
    };
    return (stat(str, &mut buf) == 0) as libc::c_int;
    // 1988: str: typeof(_10) = *const {l10} i8
    // 1988: str:   l10 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 1988: &mut buf: typeof(_11) = *mut {l12} DefId(0:756 ~ treengeling[2d04]::stat)
    // 1988: &mut buf:   l12 = WRITE | UNIQUE | NON_NULL, (empty)
    // 1988: &mut buf: typeof(_12) = &mut {l14} DefId(0:756 ~ treengeling[2d04]::stat)
    // 1988: &mut buf:   l14 = WRITE | UNIQUE | NON_NULL, (empty)
    // 1988: &mut buf: typeof(_12 = &mut _3) = &mut {l16} DefId(0:756 ~ treengeling[2d04]::stat)
    // 1988: &mut buf:   l16 = WRITE | UNIQUE | NON_NULL, (empty)
    // 1988: &mut buf: typeof(_11 = &raw mut (*_12)) = *mut {l17} DefId(0:756 ~ treengeling[2d04]::stat)
    // 1988: &mut buf:   l17 = WRITE | UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn term<'h0>(mut dummy: &'h0 (libc::c_void)) -> libc::c_int {
// 1990: mut dummy: typeof(_1) = *mut {g31} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 1990: mut dummy:   g31 = UNIQUE | NON_NULL, (empty)
    let mut res: libc::c_int = 0;
    lockdone();
    res = (done != 0 || stop != 0) as libc::c_int;
    // 1993: done: typeof(_8) = *mut {l8} i32
    // 1993: done:   l8 = READ | UNIQUE | NON_NULL, (empty)
    // 1993: stop: typeof(_11) = *mut {l12} i32
    // 1993: stop:   l12 = READ | UNIQUE | NON_NULL, (empty)
    unlockdone();
    return res;
}
unsafe fn term_shim(arg0: *mut libc::c_void) -> libc::c_int {
    {
    let safe_arg0 = &*arg0.cast_const();
    let safe_result = term(safe_arg0);
    let result = safe_result;
    result
}
}

unsafe extern "C" fn produceunit(mut voidptr: *mut libc::c_void, mut lit: libc::c_int) {
// 1997: mut voidptr: typeof(_1) = *mut {g32} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 1997: mut voidptr:   g32 = UNIQUE | NON_NULL, FIXED
    lockparunits();
    let fresh0 = parallel.nunits;
    // 1999: parallel: typeof(_5) = *mut {l5} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 1999: parallel:   l5 = READ | UNIQUE | NON_NULL, (empty)
    parallel.nunits = parallel.nunits + 1;
    // 2000: parallel: typeof(_7) = *mut {l8} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2000: parallel:   l8 = READ | UNIQUE | NON_NULL, (empty)
    // 2000: parallel: typeof(_9) = *mut {l11} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2000: parallel:   l11 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    *(parallel.units).offset(fresh0 as isize) = lit;
    // 2001: (parallel.units ... size): typeof(_11) = *mut {l14} i32
    // 2001: (parallel.units ... size):   l14 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    // 2001: (parallel.units): typeof(_12) = *mut {l16} i32
    // 2001: (parallel.units):   l16 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    // 2001: parallel: typeof(_13) = *mut {l18} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2001: parallel:   l18 = READ | UNIQUE | NON_NULL, (empty)
    parallel.produced.units += 1;
    // 2002: parallel: typeof(_16) = *mut {l22} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2002: parallel:   l22 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    parallel.produced.units;
    // 2003: parallel: typeof(_19) = *mut {l26} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2003: parallel:   l26 = READ | UNIQUE | NON_NULL, (empty)
    unlockparunits();
}
unsafe extern "C" fn consumeunits(
    mut voidptr: *mut libc::c_void,
    // 2007: mut voidptr: typeof(_1) = *mut {g33} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2007: mut voidptr:   g33 = READ | WRITE | UNIQUE | NON_NULL, FIXED
    mut fromptr: *mut *mut libc::c_int,
    // 2008: mut fromptr: typeof(_2) = *mut {g34} *mut {g35} i32
    // 2008: mut fromptr:   g34 = READ | WRITE | UNIQUE | NON_NULL, FIXED
    // 2008: mut fromptr:   g35 = UNIQUE | NON_NULL, FIXED
    mut toptr: *mut *mut libc::c_int,
    // 2009: mut toptr: typeof(_3) = *mut {g36} *mut {g37} i32
    // 2009: mut toptr:   g36 = READ | WRITE | UNIQUE | NON_NULL, FIXED
    // 2009: mut toptr:   g37 = UNIQUE | NON_NULL, FIXED
) {
    let mut consumedptr: *mut libc::c_int = voidptr as *mut libc::c_int;
    // 2011: mut consumedptr: typeof(_4) = *mut {l4} i32
    // 2011: mut consumedptr:   l4 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    // 2011: voidptr: typeof(_5) = *mut {l6} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2011: voidptr:   l6 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    // 2011: voidptr as *mut ... c_int: typeof(_4 = move _5 as *mut i32 (Misc)) = *mut {l40} i32
    // 2011: voidptr as *mut ... c_int:   l40 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    let mut produced: libc::c_int = 0;
    let mut consumed: libc::c_int = 0;
    lockparunits();
    produced = parallel.nunits;
    // 2015: parallel: typeof(_10) = *mut {l12} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2015: parallel:   l12 = READ | UNIQUE | NON_NULL, (empty)
    consumed = produced - *consumedptr;
    parallel.consumed.units += consumed as int64_t;
    // 2017: parallel: typeof(_16) = *mut {l19} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2017: parallel:   l19 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    unlockparunits();
    *fromptr = (parallel.units).offset(*consumedptr as isize);
    // 2019: (parallel.units ... size): typeof(_19) = *mut {l23} i32
    // 2019: (parallel.units ... size):   l23 = UNIQUE | NON_NULL, (empty)
    // 2019: (parallel.units): typeof(_20) = *mut {l25} i32
    // 2019: (parallel.units):   l25 = UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    // 2019: parallel: typeof(_21) = *mut {l27} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2019: parallel:   l27 = READ | UNIQUE | NON_NULL, (empty)
    *toptr = (parallel.units).offset(produced as isize);
    // 2020: (parallel.units ... size): typeof(_24) = *mut {l31} i32
    // 2020: (parallel.units ... size):   l31 = UNIQUE | NON_NULL, (empty)
    // 2020: (parallel.units): typeof(_25) = *mut {l33} i32
    // 2020: (parallel.units):   l33 = UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    // 2020: parallel: typeof(_26) = *mut {l35} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2020: parallel:   l35 = READ | UNIQUE | NON_NULL, (empty)
    *consumedptr = produced;
}
unsafe extern "C" fn intslen(mut ints: *const libc::c_int) -> libc::c_int {
// 2023: mut ints: typeof(_1) = *const {g38} i32
// 2023: mut ints:   g38 = UNIQUE, FIXED
    let mut p: *const libc::c_int = 0 as *const libc::c_int;
    // 2024: mut p: typeof(_3) = *const {l3} i32
    // 2024: mut p:   l3 = UNIQUE | NON_NULL, (empty)
    // 2024: 0 as *const lib ... c_int: typeof(_3 = const 0_usize as *const i32 (PointerFromExposedAddress)) = *const {l26} i32
    // 2024: 0 as *const lib ... c_int:   l26 = UNIQUE | NON_NULL, (empty)
    p = ints;
    // 2025: ints: typeof(_4) = *const {l5} i32
    // 2025: ints:   l5 = UNIQUE | NON_NULL, (empty)
    while *p != 0 {
        p = p.offset(1);
        // 2027: p.offset(1): typeof(_9) = *const {l11} i32
        // 2027: p.offset(1):   l11 = UNIQUE | NON_NULL, (empty)
        // 2027: p: typeof(_10) = *const {l13} i32
        // 2027: p:   l13 = UNIQUE | NON_NULL, (empty)
        p;
        // 2028: p: typeof(_11) = *const {l15} i32
        // 2028: p:   l15 = UNIQUE | NON_NULL, (empty)
    }
    return p.offset_from(ints) as libc::c_long as libc::c_int;
    // 2030: p: typeof(_17) = *const {l22} i32
    // 2030: p:   l22 = UNIQUE | NON_NULL, (empty)
    // 2030: ints: typeof(_18) = *const {l24} i32
    // 2030: ints:   l24 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn appendint(mut ints: *mut libc::c_int, mut i: libc::c_int) -> *mut libc::c_int {
// 2032: *mut libc::c_int: typeof(_0) = *mut {g40} i32
// 2032: *mut libc::c_int:   g40 = (empty), CELL | FIXED
// 2032: mut ints: typeof(_1) = *mut {g39} i32
// 2032: mut ints:   g39 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, FIXED
    let mut len: libc::c_int = 0;
    let mut res: *mut libc::c_int = 0 as *mut libc::c_int;
    // 2034: mut res: typeof(_5) = *mut {l5} i32
    // 2034: mut res:   l5 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    // 2034: 0 as *mut libc: ... c_int: typeof(_5 = const 0_usize as *mut i32 (PointerFromExposedAddress)) = *mut {l95} i32
    // 2034: 0 as *mut libc: ... c_int:   l95 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    let mut q: *mut libc::c_int = 0 as *mut libc::c_int;
    // 2035: mut q: typeof(_6) = *mut {l7} i32
    // 2035: mut q:   l7 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    // 2035: 0 as *mut libc: ... c_int: typeof(_6 = const 0_usize as *mut i32 (PointerFromExposedAddress)) = *mut {l96} i32
    // 2035: 0 as *mut libc: ... c_int:   l96 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    let mut other: libc::c_int = 0;
    let mut p: *const libc::c_int = 0 as *const libc::c_int;
    // 2037: mut p: typeof(_8) = *const {l10} i32
    // 2037: mut p:   l10 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
    // 2037: 0 as *const lib ... c_int: typeof(_8 = const 0_usize as *const i32 (PointerFromExposedAddress)) = *const {l97} i32
    // 2037: 0 as *const lib ... c_int:   l97 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    len = intslen(ints) + 1 as libc::c_int;
    // 2038: ints: typeof(_10) = *const {l13} i32
    // 2038: ints:   l13 = UNIQUE | NON_NULL, (empty)
    // 2038: ints: typeof(_11) = *mut {l15} i32
    // 2038: ints:   l15 = UNIQUE | NON_NULL, (empty)
    // 2038: ints: typeof(_10 = move _11 as *const i32 (Pointer(MutToConstPointer))) = *const {l98} i32
    // 2038: ints:   l98 = UNIQUE | NON_NULL, (empty)
    let mut BYTES: size_t = ((len + 1 as libc::c_int) as libc::c_ulong)
        .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong);
    res = malloc(BYTES) as *mut libc::c_int;
    // 2041: malloc(BYTES): typeof(_22) = *mut {l27} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2041: malloc(BYTES):   l27 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    // 2041: res = malloc(BY ... c_int: typeof(_5 = move _22 as *mut i32 (Misc)) = *mut {l99} i32
    // 2041: res = malloc(BY ... c_int:   l99 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    if res.is_null() {
    // 2042: res: typeof(_26) = *mut {l32} i32
    // 2042: res:   l32 = (empty), CELL
        err(b"out of memory\0" as *const u8 as *const libc::c_char);
        // 2043: b"out of memory ... _char: typeof(_29) = *const {l36} i8
        // 2043: b"out of memory ... _char:   l36 = UNIQUE | NON_NULL, (empty)
        // 2043: b"out of memory ... st u8: typeof(_30) = *const {l38} u8
        // 2043: b"out of memory ... st u8:   l38 = UNIQUE | NON_NULL, (empty)
        // 2043: b"out of memory\0": typeof(_31) = *const {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2043: b"out of memory\0":   l40 = UNIQUE | NON_NULL, (empty)
        // 2043: b"out of memory\0": typeof(_32) = & {l42} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2043: b"out of memory\0":   l42 = UNIQUE | NON_NULL, FIXED
        // 2043: b"out of memory ... _char: typeof(_29 = move _30 as *const i8 (Misc)) = *const {l103} i8
        // 2043: b"out of memory ... _char:   l103 = UNIQUE | NON_NULL, (empty)
        // 2043: b"out of memory\0": typeof(_31 = &raw const (*_32)) = *const {l101} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2043: b"out of memory\0":   l101 = UNIQUE | NON_NULL, (empty)
        // 2043: b"out of memory ... st u8: typeof(_30 = move _31 as *const u8 (Pointer(ArrayToPointer))) = *const {l102} u8
        // 2043: b"out of memory ... st u8:   l102 = UNIQUE | NON_NULL, (empty)
        // 2043: b"out of memory\0": typeof(_32 = const b"out of memory\x00") = & {l100} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2043: b"out of memory\0":   l100 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        exit(1 as libc::c_int);
    }
    memset(res as *mut libc::c_void, 0 as libc::c_int, BYTES);
    // 2046: memset(res as * ... YTES): typeof(_35) = *mut {l46} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2046: memset(res as * ... YTES):   l46 = UNIQUE | NON_NULL, (empty)
    // 2046: res as *mut lib ... _void: typeof(_36) = *mut {l48} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2046: res as *mut lib ... _void:   l48 = WRITE | OFFSET_ADD, CELL
    // 2046: res: typeof(_37) = *mut {l50} i32
    // 2046: res:   l50 = WRITE | OFFSET_ADD, CELL
    // 2046: res as *mut lib ... _void: typeof(_36 = move _37 as *mut libc::c_void (Misc)) = *mut {l104} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2046: res as *mut lib ... _void:   l104 = WRITE | OFFSET_ADD, CELL
    incmem(BYTES);
    q = res;
    // 2048: res: typeof(_42) = *mut {l56} i32
    // 2048: res:   l56 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    p = ints;
    // 2049: ints: typeof(_43) = *mut {l58} i32
    // 2049: ints:   l58 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    // 2049: p = ints: typeof(_8 = move _43 as *const i32 (Pointer(MutToConstPointer))) = *const {l105} i32
    // 2049: p = ints:   l105 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    loop {
        other = *p;
        if !(other != 0) {
            break;
        }
        let fresh1 = q;
        // 2055: fresh1: typeof(_52) = *mut {l68} i32
        // 2055: fresh1:   l68 = READ | WRITE, CELL
        q = q.offset(1);
        // 2056: q.offset(1): typeof(_53) = *mut {l70} i32
        // 2056: q.offset(1):   l70 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
        // 2056: q: typeof(_54) = *mut {l72} i32
        // 2056: q:   l72 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
        *fresh1 = other;
        p = p.offset(1);
        // 2058: p.offset(1): typeof(_56) = *const {l75} i32
        // 2058: p.offset(1):   l75 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
        // 2058: p: typeof(_57) = *const {l77} i32
        // 2058: p:   l77 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
        p;
        // 2059: p: typeof(_58) = *const {l79} i32
        // 2059: p:   l79 = (empty), (empty)
    }
    let fresh2 = q;
    // 2061: fresh2: typeof(_59) = *mut {l81} i32
    // 2061: fresh2:   l81 = READ | WRITE, CELL
    q = q.offset(1);
    // 2062: q.offset(1): typeof(_60) = *mut {l83} i32
    // 2062: q.offset(1):   l83 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    // 2062: q: typeof(_61) = *mut {l85} i32
    // 2062: q:   l85 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    *fresh2 = i;
    let fresh3 = q;
    // 2064: fresh3: typeof(_63) = *mut {l88} i32
    // 2064: fresh3:   l88 = READ | WRITE, CELL
    q = q.offset(1);
    // 2065: q.offset(1): typeof(_64) = *mut {l90} i32
    // 2065: q.offset(1):   l90 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    // 2065: q: typeof(_65) = *mut {l92} i32
    // 2065: q:   l92 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    *fresh3 = 0 as libc::c_int;
    return res;
}
unsafe extern "C" fn addint<'h0,'h1>(mut intsptr: &'h0 mut (core::option::Option<&'h1 [(libc::c_int)]>), mut i: libc::c_int) {
// 2069: mut intsptr: typeof(_1) = *mut {g41} *mut {g42} i32
// 2069: mut intsptr:   g41 = READ | WRITE | UNIQUE | NON_NULL, (empty)
// 2069: mut intsptr:   g42 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE, (empty)
    let mut oldints: core::option::Option<&[(libc::c_int)]> = *intsptr;
    // 2070: mut oldints: typeof(_3) = *mut {l3} i32
    // 2070: mut oldints:   l3 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE, (empty)
    let mut len: libc::c_int = intslen(core::ptr::addr_of!(*(oldints).map(|__ptr| &__ptr[0]).unwrap()));
    // 2071: oldints: typeof(_5) = *const {l6} i32
    // 2071: oldints:   l6 = UNIQUE, (empty)
    // 2071: oldints: typeof(_6) = *mut {l8} i32
    // 2071: oldints:   l8 = UNIQUE, (empty)
    // 2071: oldints: typeof(_5 = move _6 as *const i32 (Pointer(MutToConstPointer))) = *const {l103} i32
    // 2071: oldints:   l103 = UNIQUE, (empty)
    let mut p: core::option::Option<&[(libc::c_int)]> = None;
    // 2072: mut p: typeof(_7) = *const {l10} i32
    // 2072: mut p:   l10 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
    // 2072: 0 as *const lib ... c_int: typeof(_7 = const 0_usize as *const i32 (PointerFromExposedAddress)) = *const {l104} i32
    // 2072: 0 as *const lib ... c_int:   l104 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    let mut q: core::option::Option<&[core::cell::Cell<(libc::c_int)>]> = None.as_deref_mut().map(|__ptr| std::cell::Cell::from_mut(__ptr));
    // 2073: mut q: typeof(_8) = *mut {l12} i32
    // 2073: mut q:   l12 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    // 2073: 0 as *mut libc: ... c_int: typeof(_8 = const 0_usize as *mut i32 (PointerFromExposedAddress)) = *mut {l105} i32
    // 2073: 0 as *mut libc: ... c_int:   l105 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    let mut o: libc::c_int = 0;
    let mut newints: core::option::Option<&mut [(libc::c_int)]> = None;
    // 2075: mut newints: typeof(_10) = *mut {l15} i32
    // 2075: mut newints:   l15 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE, (empty)
    // 2075: 0 as *mut libc: ... c_int: typeof(_10 = const 0_usize as *mut i32 (PointerFromExposedAddress)) = *mut {l106} i32
    // 2075: 0 as *mut libc: ... c_int:   l106 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE, (empty)
    let mut BYTES: size_t = ((len + 2 as libc::c_int) as libc::c_ulong)
        .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong);
    newints = std::option::Option::Some((malloc(BYTES)));
    // 2078: malloc(BYTES): typeof(_19) = *mut {l25} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2078: malloc(BYTES):   l25 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
    // 2078: newints = mallo ... c_int: typeof(_10 = move _19 as *mut i32 (Misc)) = *mut {l107} i32
    // 2078: newints = mallo ... c_int:   l107 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
    if (newints).as_deref().map(|__ptr| &__ptr[0]).is_none() {
    // 2079: newints: typeof(_23) = *mut {l30} i32
    // 2079: newints:   l30 = UNIQUE, (empty)
        err(core::ptr::addr_of!(*(&*(b"out of memory\0") as *const u8 as *const libc::c_char)));
        // 2080: b"out of memory ... _char: typeof(_26) = *const {l34} i8
        // 2080: b"out of memory ... _char:   l34 = UNIQUE | NON_NULL, (empty)
        // 2080: b"out of memory ... st u8: typeof(_27) = *const {l36} u8
        // 2080: b"out of memory ... st u8:   l36 = UNIQUE | NON_NULL, (empty)
        // 2080: b"out of memory\0": typeof(_28) = *const {l38} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2080: b"out of memory\0":   l38 = UNIQUE | NON_NULL, (empty)
        // 2080: b"out of memory\0": typeof(_29) = & {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2080: b"out of memory\0":   l40 = UNIQUE | NON_NULL, FIXED
        // 2080: b"out of memory ... _char: typeof(_26 = move _27 as *const i8 (Misc)) = *const {l111} i8
        // 2080: b"out of memory ... _char:   l111 = UNIQUE | NON_NULL, (empty)
        // 2080: b"out of memory\0": typeof(_29 = const b"out of memory\x00") = & {l108} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2080: b"out of memory\0":   l108 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 2080: b"out of memory\0": typeof(_28 = &raw const (*_29)) = *const {l109} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2080: b"out of memory\0":   l109 = UNIQUE | NON_NULL, (empty)
        // 2080: b"out of memory ... st u8: typeof(_27 = move _28 as *const u8 (Pointer(ArrayToPointer))) = *const {l110} u8
        // 2080: b"out of memory ... st u8:   l110 = UNIQUE | NON_NULL, (empty)
        exit(1 as libc::c_int);
    }
    {
    // 2083: memset(newints  ... YTES): typeof(_32) = *mut {l44} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2083: memset(newints  ... YTES):   l44 = UNIQUE | NON_NULL, (empty)
    // 2083: newints as *mut ... _void: typeof(_33) = *mut {l46} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2083: newints as *mut ... _void:   l46 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 2083: newints: typeof(_34) = *mut {l48} i32
    // 2083: newints:   l48 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 2083: newints as *mut ... _void: typeof(_33 = move _34 as *mut libc::c_void (Misc)) = *mut {l112} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2083: newints as *mut ... _void:   l112 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    let (dest, val, byte_len, ) = (((newints)), (0 as libc::c_int), (BYTES), );
    let (n, ) = (byte_len as usize / 4, );
    assert_eq!(val, 0, "non-zero memset NYI");
    for i in 0..n {
    (*dest)[i] = 0;
};
    dest
};
    incmem(BYTES);
    q = (newints).as_deref_mut().map(|__ptr| std::cell::Cell::from_mut(__ptr));
    // 2085: newints: typeof(_39) = *mut {l54} i32
    // 2085: newints:   l54 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    p = oldints;
    // 2086: oldints: typeof(_40) = *mut {l56} i32
    // 2086: oldints:   l56 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    // 2086: p = oldints: typeof(_7 = move _40 as *const i32 (Pointer(MutToConstPointer))) = *const {l113} i32
    // 2086: p = oldints:   l113 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    loop {
        o = *(p).unwrap();
        if !(o != 0) {
            break;
        }
        let fresh4 = (q).map(|__ptr| &__ptr[0]);
        // 2092: fresh4: typeof(_49) = *mut {l66} i32
        // 2092: fresh4:   l66 = READ | WRITE, CELL
        q = {
        // 2093: q.offset(1): typeof(_50) = *mut {l68} i32
        // 2093: q.offset(1):   l68 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
        // 2093: q: typeof(_51) = *mut {l70} i32
        // 2093: q:   l70 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    let (arr, idx, ) = ((q), (1) as usize, );
    arr.map(|arr| &arr[idx ..])
};
        (fresh4).unwrap().set((o));
        p = {
        // 2095: p.offset(1): typeof(_53) = *const {l73} i32
        // 2095: p.offset(1):   l73 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
        // 2095: p: typeof(_54) = *const {l75} i32
        // 2095: p:   l75 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
    let (arr, idx, ) = ((p), (1) as usize, );
    arr.map(|arr| &arr[idx ..])
};
        (p).map(|__ptr| &__ptr[0]);
        // 2096: p: typeof(_55) = *const {l77} i32
        // 2096: p:   l77 = (empty), (empty)
    }
    let fresh5 = (q).map(|__ptr| &__ptr[0]);
    // 2098: fresh5: typeof(_56) = *mut {l79} i32
    // 2098: fresh5:   l79 = READ | WRITE, CELL
    q = {
    // 2099: q.offset(1): typeof(_57) = *mut {l81} i32
    // 2099: q.offset(1):   l81 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    // 2099: q: typeof(_58) = *mut {l83} i32
    // 2099: q:   l83 = READ | WRITE | OFFSET_ADD | OFFSET_SUB, CELL
    let (arr, idx, ) = ((q), (1) as usize, );
    arr.map(|arr| &arr[idx ..])
};
    (fresh5).unwrap().set((i));
    let mut BYTES_0: size_t = ((len + 1 as libc::c_int) as libc::c_ulong)
        .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong);
    decmem(BYTES_0);
    free((oldints).map(|__ptr| &__ptr[0]) as *mut libc::c_void);
    // 2104: oldints as *mut ... _void: typeof(_71) = *mut {l97} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2104: oldints as *mut ... _void:   l97 = UNIQUE | FREE, (empty)
    // 2104: oldints: typeof(_72) = *mut {l99} i32
    // 2104: oldints:   l99 = UNIQUE | FREE, (empty)
    // 2104: oldints as *mut ... _void: typeof(_71 = move _72 as *mut libc::c_void (Misc)) = *mut {l114} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2104: oldints as *mut ... _void:   l114 = UNIQUE | FREE, (empty)
    *intsptr = (newints).as_deref();
    // 2105: newints: typeof(_73) = *mut {l101} i32
    // 2105: newints:   l101 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE, (empty)
}
unsafe fn addint_shim(arg0: *mut *mut libc::c_int, arg1: libc::c_int) {
    {
    let safe_arg0 = &mut *arg0;
    let safe_arg1 = arg1;
    let safe_result = addint(safe_arg0,safe_arg1);
    let result = safe_result;
    result
}
}

unsafe extern "C" fn cubemsg(mut node: *mut Node, mut str: *const libc::c_char) {
// 2107: mut node: typeof(_1) = *mut {g43} DefId(0:777 ~ treengeling[2d04]::Node)
// 2107: mut node:   g43 = UNIQUE | NON_NULL, FIXED
// 2107: mut str: typeof(_2) = *const {g44} i8
// 2107: mut str:   g44 = UNIQUE | NON_NULL, FIXED
    let mut p: *const libc::c_int = 0 as *const libc::c_int;
    // 2108: mut p: typeof(_3) = *const {l3} i32
    // 2108: mut p:   l3 = UNIQUE | NON_NULL, (empty)
    // 2108: 0 as *const lib ... c_int: typeof(_3 = const 0_usize as *const i32 (PointerFromExposedAddress)) = *const {l104} i32
    // 2108: 0 as *const lib ... c_int:   l104 = UNIQUE | NON_NULL, (empty)
    if verbose == 0 {
    // 2109: verbose: typeof(_7) = *mut {l8} i32
    // 2109: verbose:   l8 = UNIQUE | NON_NULL, (empty)
        return;
    }
    lockmsg();
    printf(
        b"c [%d %lld] \0" as *const u8 as *const libc::c_char,
        // 2114: b"c [%d %lld] \ ... _char: typeof(_11) = *const {l13} i8
        // 2114: b"c [%d %lld] \ ... _char:   l13 = UNIQUE | NON_NULL, (empty)
        // 2114: b"c [%d %lld] \ ... st u8: typeof(_12) = *const {l15} u8
        // 2114: b"c [%d %lld] \ ... st u8:   l15 = UNIQUE | NON_NULL, (empty)
        // 2114: b"c [%d %lld] \0": typeof(_13) = *const {l17} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 2114: b"c [%d %lld] \0":   l17 = UNIQUE | NON_NULL, (empty)
        // 2114: b"c [%d %lld] \0": typeof(_14) = & {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 2114: b"c [%d %lld] \0":   l19 = UNIQUE | NON_NULL, FIXED
        // 2114: b"c [%d %lld] \ ... _char: typeof(_11 = move _12 as *const i8 (Misc)) = *const {l108} i8
        // 2114: b"c [%d %lld] \ ... _char:   l108 = UNIQUE | NON_NULL, (empty)
        // 2114: b"c [%d %lld] \ ... st u8: typeof(_12 = move _13 as *const u8 (Pointer(ArrayToPointer))) = *const {l107} u8
        // 2114: b"c [%d %lld] \ ... st u8:   l107 = UNIQUE | NON_NULL, (empty)
        // 2114: b"c [%d %lld] \0": typeof(_13 = &raw const (*_14)) = *const {l106} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 2114: b"c [%d %lld] \0":   l106 = UNIQUE | NON_NULL, (empty)
        // 2114: b"c [%d %lld] \0": typeof(_14 = const b"c [%d %lld] \x00") = & {l105} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 2114: b"c [%d %lld] \0":   l105 = UNIQUE | NON_NULL, (empty)
        (*node).depth,
        (*node).id as libc::c_longlong,
    );
    smsg();
    fputs(str, stdout);
    // 2119: str: typeof(_19) = *const {l25} i8
    // 2119: str:   l25 = UNIQUE | NON_NULL, (empty)
    // 2119: stdout: typeof(_20) = *mut {l27} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2119: stdout:   l27 = UNIQUE | NON_NULL, (empty)
    // 2119: stdout: typeof(_21) = *mut {l29} *mut {l30} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2119: stdout:   l29 = UNIQUE | NON_NULL, (empty)
    // 2119: stdout:   l30 = UNIQUE | NON_NULL, (empty)
    if !((*node).cube).is_null() {
    // 2120: ((*node).cube): typeof(_25) = *mut {l35} i32
    // 2120: ((*node).cube):   l35 = UNIQUE | NON_NULL, (empty)
        p = (*node).cube;
        // 2121: (*node).cube: typeof(_26) = *mut {l37} i32
        // 2121: (*node).cube:   l37 = UNIQUE | NON_NULL, (empty)
        // 2121: p = (*node).cube: typeof(_3 = move _26 as *const i32 (Pointer(MutToConstPointer))) = *const {l109} i32
        // 2121: p = (*node).cube:   l109 = UNIQUE | NON_NULL, (empty)
        while *p != 0 {
            printf(b" %d\0" as *const u8 as *const libc::c_char, *p);
            // 2123: b" %d\0" as *co ... _char: typeof(_32) = *const {l44} i8
            // 2123: b" %d\0" as *co ... _char:   l44 = UNIQUE | NON_NULL, (empty)
            // 2123: b" %d\0" as *co ... st u8: typeof(_33) = *const {l46} u8
            // 2123: b" %d\0" as *co ... st u8:   l46 = UNIQUE | NON_NULL, (empty)
            // 2123: b" %d\0": typeof(_34) = *const {l48} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2123: b" %d\0":   l48 = UNIQUE | NON_NULL, (empty)
            // 2123: b" %d\0": typeof(_35) = & {l50} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2123: b" %d\0":   l50 = UNIQUE | NON_NULL, FIXED
            // 2123: b" %d\0" as *co ... st u8: typeof(_33 = move _34 as *const u8 (Pointer(ArrayToPointer))) = *const {l112} u8
            // 2123: b" %d\0" as *co ... st u8:   l112 = UNIQUE | NON_NULL, (empty)
            // 2123: b" %d\0": typeof(_34 = &raw const (*_35)) = *const {l111} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2123: b" %d\0":   l111 = UNIQUE | NON_NULL, (empty)
            // 2123: b" %d\0" as *co ... _char: typeof(_32 = move _33 as *const i8 (Misc)) = *const {l113} i8
            // 2123: b" %d\0" as *co ... _char:   l113 = UNIQUE | NON_NULL, (empty)
            // 2123: b" %d\0": typeof(_35 = const b" %d\x00") = & {l110} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2123: b" %d\0":   l110 = UNIQUE | NON_NULL, (empty)
            p = p.offset(1);
            // 2124: p.offset(1): typeof(_37) = *const {l53} i32
            // 2124: p.offset(1):   l53 = UNIQUE | NON_NULL, (empty)
            // 2124: p: typeof(_38) = *const {l55} i32
            // 2124: p:   l55 = UNIQUE | NON_NULL, (empty)
            p;
            // 2125: p: typeof(_39) = *const {l57} i32
            // 2125: p:   l57 = UNIQUE | NON_NULL, (empty)
        }
        fputs(b" 0\0" as *const u8 as *const libc::c_char, stdout);
        // 2127: b" 0\0" as *con ... _char: typeof(_44) = *const {l63} i8
        // 2127: b" 0\0" as *con ... _char:   l63 = UNIQUE | NON_NULL, (empty)
        // 2127: b" 0\0" as *const u8: typeof(_45) = *const {l65} u8
        // 2127: b" 0\0" as *const u8:   l65 = UNIQUE | NON_NULL, (empty)
        // 2127: b" 0\0": typeof(_46) = *const {l67} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 2127: b" 0\0":   l67 = UNIQUE | NON_NULL, (empty)
        // 2127: b" 0\0": typeof(_47) = & {l69} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 2127: b" 0\0":   l69 = UNIQUE | NON_NULL, FIXED
        // 2127: stdout: typeof(_48) = *mut {l71} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 2127: stdout:   l71 = UNIQUE | NON_NULL, (empty)
        // 2127: stdout: typeof(_49) = *mut {l73} *mut {l74} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 2127: stdout:   l73 = UNIQUE | NON_NULL, (empty)
        // 2127: stdout:   l74 = UNIQUE | NON_NULL, (empty)
        // 2127: b" 0\0" as *const u8: typeof(_45 = move _46 as *const u8 (Pointer(ArrayToPointer))) = *const {l116} u8
        // 2127: b" 0\0" as *const u8:   l116 = UNIQUE | NON_NULL, (empty)
        // 2127: b" 0\0" as *con ... _char: typeof(_44 = move _45 as *const i8 (Misc)) = *const {l117} i8
        // 2127: b" 0\0" as *con ... _char:   l117 = UNIQUE | NON_NULL, (empty)
        // 2127: b" 0\0": typeof(_47 = const b" 0\x00") = & {l114} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 2127: b" 0\0":   l114 = UNIQUE | NON_NULL, (empty)
        // 2127: b" 0\0": typeof(_46 = &raw const (*_47)) = *const {l115} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 2127: b" 0\0":   l115 = UNIQUE | NON_NULL, (empty)
    } else {
        fputs(
            b" <cube-already-deleted>\0" as *const u8 as *const libc::c_char,
            // 2130: b" <cube-alread ... _char: typeof(_51) = *const {l77} i8
            // 2130: b" <cube-alread ... _char:   l77 = UNIQUE | NON_NULL, (empty)
            // 2130: b" <cube-alread ... st u8: typeof(_52) = *const {l79} u8
            // 2130: b" <cube-alread ... st u8:   l79 = UNIQUE | NON_NULL, (empty)
            // 2130: b" <cube-alread ... d>\0": typeof(_53) = *const {l81} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 2130: b" <cube-alread ... d>\0":   l81 = UNIQUE | NON_NULL, (empty)
            // 2130: b" <cube-alread ... d>\0": typeof(_54) = & {l83} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 2130: b" <cube-alread ... d>\0":   l83 = UNIQUE | NON_NULL, FIXED
            // 2130: b" <cube-alread ... _char: typeof(_51 = move _52 as *const i8 (Misc)) = *const {l121} i8
            // 2130: b" <cube-alread ... _char:   l121 = UNIQUE | NON_NULL, (empty)
            // 2130: b" <cube-alread ... d>\0": typeof(_53 = &raw const (*_54)) = *const {l119} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 2130: b" <cube-alread ... d>\0":   l119 = UNIQUE | NON_NULL, (empty)
            // 2130: b" <cube-alread ... d>\0": typeof(_54 = const b" <cube-already-deleted>\x00") = & {l118} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 2130: b" <cube-alread ... d>\0":   l118 = UNIQUE | NON_NULL, (empty)
            // 2130: b" <cube-alread ... st u8: typeof(_52 = move _53 as *const u8 (Pointer(ArrayToPointer))) = *const {l120} u8
            // 2130: b" <cube-alread ... st u8:   l120 = UNIQUE | NON_NULL, (empty)
            stdout,
            // 2131: stdout: typeof(_55) = *mut {l85} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 2131: stdout:   l85 = UNIQUE | NON_NULL, (empty)
            // 2131: stdout: typeof(_56) = *mut {l87} *mut {l88} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 2131: stdout:   l87 = UNIQUE | NON_NULL, (empty)
            // 2131: stdout:   l88 = UNIQUE | NON_NULL, (empty)
        );
    }
    fputc('\n' as i32, stdout);
    // 2134: stdout: typeof(_59) = *mut {l92} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2134: stdout:   l92 = UNIQUE | NON_NULL, (empty)
    // 2134: stdout: typeof(_60) = *mut {l94} *mut {l95} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2134: stdout:   l94 = UNIQUE | NON_NULL, (empty)
    // 2134: stdout:   l95 = UNIQUE | NON_NULL, (empty)
    fflush(stdout);
    // 2135: stdout: typeof(_62) = *mut {l98} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2135: stdout:   l98 = UNIQUE | NON_NULL, (empty)
    // 2135: stdout: typeof(_63) = *mut {l100} *mut {l101} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2135: stdout:   l100 = UNIQUE | NON_NULL, (empty)
    // 2135: stdout:   l101 = UNIQUE | NON_NULL, (empty)
    unlockmsg();
}
unsafe extern "C" fn initroot() {
    msg(b"initializing root solver instance\0" as *const u8 as *const libc::c_char);
    // 2139: b"initializing  ... _char: typeof(_2) = *const {l2} i8
    // 2139: b"initializing  ... _char:   l2 = UNIQUE | NON_NULL, (empty)
    // 2139: b"initializing  ... st u8: typeof(_3) = *const {l4} u8
    // 2139: b"initializing  ... st u8:   l4 = UNIQUE | NON_NULL, (empty)
    // 2139: b"initializing  ... ce\0": typeof(_4) = *const {l6} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
    // 2139: b"initializing  ... ce\0":   l6 = UNIQUE | NON_NULL, (empty)
    // 2139: b"initializing  ... ce\0": typeof(_5) = & {l8} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
    // 2139: b"initializing  ... ce\0":   l8 = UNIQUE | NON_NULL, FIXED
    // 2139: b"initializing  ... ce\0": typeof(_5 = const b"initializing root solver instance\x00") = & {l253} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
    // 2139: b"initializing  ... ce\0":   l253 = UNIQUE | NON_NULL, (empty)
    // 2139: b"initializing  ... ce\0": typeof(_4 = &raw const (*_5)) = *const {l254} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
    // 2139: b"initializing  ... ce\0":   l254 = UNIQUE | NON_NULL, (empty)
    // 2139: b"initializing  ... _char: typeof(_2 = move _3 as *const i8 (Misc)) = *const {l256} i8
    // 2139: b"initializing  ... _char:   l256 = UNIQUE | NON_NULL, (empty)
    // 2139: b"initializing  ... st u8: typeof(_3 = move _4 as *const u8 (Pointer(ArrayToPointer))) = *const {l255} u8
    // 2139: b"initializing  ... st u8:   l255 = UNIQUE | NON_NULL, (empty)
    root = lglminit(
    // 2140: lglminit( 0 as  ... )), ): typeof(_6) = *mut {l10} LGL
    // 2140: lglminit( 0 as  ... )), ):   l10 = UNIQUE | NON_NULL, (empty)
    // 2140: root: typeof(_14) = *mut {l34} *mut {l35} LGL
    // 2140: root:   l34 = UNIQUE | NON_NULL, (empty)
    // 2140: root:   l35 = UNIQUE | NON_NULL, (empty)
        0 as *mut libc::c_void,
        // 2141: 0 as *mut libc: ... _void: typeof(_7) = *mut {l12} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2141: 0 as *mut libc: ... _void:   l12 = UNIQUE | NON_NULL, (empty)
        // 2141: 0 as *mut libc: ... _void: typeof(_7 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l257} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2141: 0 as *mut libc: ... _void:   l257 = UNIQUE | NON_NULL, (empty)
        Some(alloc_shim as unsafe extern "C" fn(*mut libc::c_void, size_t) -> *mut libc::c_void),
        // 2142: Some(alloc as u ... void): typeof(_8) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l14} DefId(2:5583 ~ core[480a]::ffi::c_void), u64) -> *mut {l15} DefId(2:5583 ~ core[480a]::ffi::c_void)>
        // 2142: Some(alloc as u ... void):   l14 = UNIQUE | NON_NULL, (empty)
        // 2142: Some(alloc as u ... void):   l15 = UNIQUE | NON_NULL, (empty)
        // 2142: alloc as unsafe ... _void: typeof(_9) = fn(*mut {l17} DefId(2:5583 ~ core[480a]::ffi::c_void), u64) -> *mut {l18} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2142: alloc as unsafe ... _void:   l17 = UNIQUE | NON_NULL, (empty)
        // 2142: alloc as unsafe ... _void:   l18 = UNIQUE | NON_NULL, (empty)
        // 2142: alloc: typeof(_9 = alloc as unsafe extern "C" fn(*mut libc::c_void, u64) -> *mut libc::c_void (Pointer(ReifyFnPointer))) = fn(*mut {l258} DefId(2:5583 ~ core[480a]::ffi::c_void), u64) -> *mut {l259} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2142: alloc:   l258 = UNIQUE | NON_NULL, (empty)
        // 2142: alloc:   l259 = UNIQUE | NON_NULL, (empty)
        // 2142: Some(alloc as u ... void): typeof(_8 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void, u64) -> *mut libc::c_void>::Some(move _9)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l260} DefId(2:5583 ~ core[480a]::ffi::c_void), u64) -> *mut {l261} DefId(2:5583 ~ core[480a]::ffi::c_void)>
        // 2142: Some(alloc as u ... void):   l260 = UNIQUE | NON_NULL, (empty)
        // 2142: Some(alloc as u ... void):   l261 = UNIQUE | NON_NULL, (empty)
        Some(
        // 2143: Some( resize as ... id, ): typeof(_10) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l20} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l21} DefId(2:5583 ~ core[480a]::ffi::c_void), u64, u64) -> *mut {l22} DefId(2:5583 ~ core[480a]::ffi::c_void)>
        // 2143: Some( resize as ... id, ):   l20 = UNIQUE | NON_NULL, (empty)
        // 2143: Some( resize as ... id, ):   l21 = UNIQUE | NON_NULL, (empty)
        // 2143: Some( resize as ... id, ):   l22 = UNIQUE | NON_NULL, (empty)
        // 2143: Some( resize as ... id, ): typeof(_10 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void, u64, u64) -> *mut libc::c_void>::Some(move _11)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l265} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l266} DefId(2:5583 ~ core[480a]::ffi::c_void), u64, u64) -> *mut {l267} DefId(2:5583 ~ core[480a]::ffi::c_void)>
        // 2143: Some( resize as ... id, ):   l265 = UNIQUE | NON_NULL, (empty)
        // 2143: Some( resize as ... id, ):   l266 = UNIQUE | NON_NULL, (empty)
        // 2143: Some( resize as ... id, ):   l267 = UNIQUE | NON_NULL, (empty)
            resize
            // 2144: resize as unsaf ... _void: typeof(_11) = fn(*mut {l24} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l25} DefId(2:5583 ~ core[480a]::ffi::c_void), u64, u64) -> *mut {l26} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2144: resize as unsaf ... _void:   l24 = UNIQUE | NON_NULL, (empty)
            // 2144: resize as unsaf ... _void:   l25 = UNIQUE | NON_NULL, (empty)
            // 2144: resize as unsaf ... _void:   l26 = UNIQUE | NON_NULL, (empty)
            // 2144: resize: typeof(_11 = resize as unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void, u64, u64) -> *mut libc::c_void (Pointer(ReifyFnPointer))) = fn(*mut {l262} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l263} DefId(2:5583 ~ core[480a]::ffi::c_void), u64, u64) -> *mut {l264} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2144: resize:   l262 = UNIQUE | NON_NULL, (empty)
            // 2144: resize:   l263 = UNIQUE | NON_NULL, (empty)
            // 2144: resize:   l264 = UNIQUE | NON_NULL, (empty)
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *mut libc::c_void,
                    size_t,
                    size_t,
                ) -> *mut libc::c_void,
        ),
        Some(dealloc_shim as unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void, size_t) -> ()),
        // 2152: Some(dealloc as ... > ()): typeof(_12) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l28} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l29} DefId(2:5583 ~ core[480a]::ffi::c_void), u64) -> ()>
        // 2152: Some(dealloc as ... > ()):   l28 = UNIQUE | NON_NULL, (empty)
        // 2152: Some(dealloc as ... > ()):   l29 = UNIQUE | NON_NULL, (empty)
        // 2152: dealloc as unsa ... -> (): typeof(_13) = fn(*mut {l31} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l32} DefId(2:5583 ~ core[480a]::ffi::c_void), u64) -> ()
        // 2152: dealloc as unsa ... -> ():   l31 = UNIQUE | NON_NULL, (empty)
        // 2152: dealloc as unsa ... -> ():   l32 = UNIQUE | NON_NULL, (empty)
        // 2152: Some(dealloc as ... > ()): typeof(_12 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void, u64)>::Some(move _13)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l270} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l271} DefId(2:5583 ~ core[480a]::ffi::c_void), u64) -> ()>
        // 2152: Some(dealloc as ... > ()):   l270 = UNIQUE | NON_NULL, (empty)
        // 2152: Some(dealloc as ... > ()):   l271 = UNIQUE | NON_NULL, (empty)
        // 2152: dealloc: typeof(_13 = dealloc as unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void, u64) (Pointer(ReifyFnPointer))) = fn(*mut {l268} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l269} DefId(2:5583 ~ core[480a]::ffi::c_void), u64) -> ()
        // 2152: dealloc:   l268 = UNIQUE | NON_NULL, (empty)
        // 2152: dealloc:   l269 = UNIQUE | NON_NULL, (empty)
    );
    lglsetopt(
        root,
        // 2155: root: typeof(_16) = *mut {l38} LGL
        // 2155: root:   l38 = UNIQUE | NON_NULL, (empty)
        // 2155: root: typeof(_17) = *mut {l40} *mut {l41} LGL
        // 2155: root:   l40 = UNIQUE | NON_NULL, (empty)
        // 2155: root:   l41 = UNIQUE | NON_NULL, (empty)
        b"druplig\0" as *const u8 as *const libc::c_char,
        // 2156: b"druplig\0" as ... _char: typeof(_18) = *const {l43} i8
        // 2156: b"druplig\0" as ... _char:   l43 = UNIQUE | NON_NULL, (empty)
        // 2156: b"druplig\0" as ... st u8: typeof(_19) = *const {l45} u8
        // 2156: b"druplig\0" as ... st u8:   l45 = UNIQUE | NON_NULL, (empty)
        // 2156: b"druplig\0": typeof(_20) = *const {l47} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2156: b"druplig\0":   l47 = UNIQUE | NON_NULL, (empty)
        // 2156: b"druplig\0": typeof(_21) = & {l49} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2156: b"druplig\0":   l49 = UNIQUE | NON_NULL, FIXED
        // 2156: b"druplig\0": typeof(_21 = const b"druplig\x00") = & {l272} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2156: b"druplig\0":   l272 = UNIQUE | NON_NULL, (empty)
        // 2156: b"druplig\0" as ... _char: typeof(_18 = move _19 as *const i8 (Misc)) = *const {l275} i8
        // 2156: b"druplig\0" as ... _char:   l275 = UNIQUE | NON_NULL, (empty)
        // 2156: b"druplig\0": typeof(_20 = &raw const (*_21)) = *const {l273} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2156: b"druplig\0":   l273 = UNIQUE | NON_NULL, (empty)
        // 2156: b"druplig\0" as ... st u8: typeof(_19 = move _20 as *const u8 (Pointer(ArrayToPointer))) = *const {l274} u8
        // 2156: b"druplig\0" as ... st u8:   l274 = UNIQUE | NON_NULL, (empty)
        0 as libc::c_int,
    );
    lglsetopt(
        root,
        // 2160: root: typeof(_24) = *mut {l53} LGL
        // 2160: root:   l53 = UNIQUE | NON_NULL, (empty)
        // 2160: root: typeof(_25) = *mut {l55} *mut {l56} LGL
        // 2160: root:   l55 = UNIQUE | NON_NULL, (empty)
        // 2160: root:   l56 = UNIQUE | NON_NULL, (empty)
        b"classify\0" as *const u8 as *const libc::c_char,
        // 2161: b"classify\0" a ... _char: typeof(_26) = *const {l58} i8
        // 2161: b"classify\0" a ... _char:   l58 = UNIQUE | NON_NULL, (empty)
        // 2161: b"classify\0" a ... st u8: typeof(_27) = *const {l60} u8
        // 2161: b"classify\0" a ... st u8:   l60 = UNIQUE | NON_NULL, (empty)
        // 2161: b"classify\0": typeof(_28) = *const {l62} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 2161: b"classify\0":   l62 = UNIQUE | NON_NULL, (empty)
        // 2161: b"classify\0": typeof(_29) = & {l64} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 2161: b"classify\0":   l64 = UNIQUE | NON_NULL, FIXED
        // 2161: b"classify\0": typeof(_28 = &raw const (*_29)) = *const {l277} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 2161: b"classify\0":   l277 = UNIQUE | NON_NULL, (empty)
        // 2161: b"classify\0" a ... st u8: typeof(_27 = move _28 as *const u8 (Pointer(ArrayToPointer))) = *const {l278} u8
        // 2161: b"classify\0" a ... st u8:   l278 = UNIQUE | NON_NULL, (empty)
        // 2161: b"classify\0": typeof(_29 = const b"classify\x00") = & {l276} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 2161: b"classify\0":   l276 = UNIQUE | NON_NULL, (empty)
        // 2161: b"classify\0" a ... _char: typeof(_26 = move _27 as *const i8 (Misc)) = *const {l279} i8
        // 2161: b"classify\0" a ... _char:   l279 = UNIQUE | NON_NULL, (empty)
        0 as libc::c_int,
    );
    if verbose != 0 {
    // 2164: verbose: typeof(_34) = *mut {l70} i32
    // 2164: verbose:   l70 = UNIQUE | NON_NULL, (empty)
        lglsetopt(
            root,
            // 2166: root: typeof(_36) = *mut {l73} LGL
            // 2166: root:   l73 = UNIQUE | NON_NULL, (empty)
            // 2166: root: typeof(_37) = *mut {l75} *mut {l76} LGL
            // 2166: root:   l75 = UNIQUE | NON_NULL, (empty)
            // 2166: root:   l76 = UNIQUE | NON_NULL, (empty)
            b"verbose\0" as *const u8 as *const libc::c_char,
            // 2167: b"verbose\0" as ... _char: typeof(_38) = *const {l78} i8
            // 2167: b"verbose\0" as ... _char:   l78 = UNIQUE | NON_NULL, (empty)
            // 2167: b"verbose\0" as ... st u8: typeof(_39) = *const {l80} u8
            // 2167: b"verbose\0" as ... st u8:   l80 = UNIQUE | NON_NULL, (empty)
            // 2167: b"verbose\0": typeof(_40) = *const {l82} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 2167: b"verbose\0":   l82 = UNIQUE | NON_NULL, (empty)
            // 2167: b"verbose\0": typeof(_41) = & {l84} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 2167: b"verbose\0":   l84 = UNIQUE | NON_NULL, FIXED
            // 2167: b"verbose\0": typeof(_41 = const b"verbose\x00") = & {l280} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 2167: b"verbose\0":   l280 = UNIQUE | NON_NULL, (empty)
            // 2167: b"verbose\0": typeof(_40 = &raw const (*_41)) = *const {l281} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 2167: b"verbose\0":   l281 = UNIQUE | NON_NULL, (empty)
            // 2167: b"verbose\0" as ... st u8: typeof(_39 = move _40 as *const u8 (Pointer(ArrayToPointer))) = *const {l282} u8
            // 2167: b"verbose\0" as ... st u8:   l282 = UNIQUE | NON_NULL, (empty)
            // 2167: b"verbose\0" as ... _char: typeof(_38 = move _39 as *const i8 (Misc)) = *const {l283} i8
            // 2167: b"verbose\0" as ... _char:   l283 = UNIQUE | NON_NULL, (empty)
            verbose,
            // 2168: verbose: typeof(_43) = *mut {l87} i32
            // 2168: verbose:   l87 = UNIQUE | NON_NULL, (empty)
        );
    } else if showstats == 0 {
    // 2170: showstats: typeof(_46) = *mut {l91} i32
    // 2170: showstats:   l91 = UNIQUE | NON_NULL, (empty)
        lglsetopt(
            root,
            // 2172: root: typeof(_48) = *mut {l94} LGL
            // 2172: root:   l94 = UNIQUE | NON_NULL, (empty)
            // 2172: root: typeof(_49) = *mut {l96} *mut {l97} LGL
            // 2172: root:   l96 = UNIQUE | NON_NULL, (empty)
            // 2172: root:   l97 = UNIQUE | NON_NULL, (empty)
            b"profile\0" as *const u8 as *const libc::c_char,
            // 2173: b"profile\0" as ... _char: typeof(_50) = *const {l99} i8
            // 2173: b"profile\0" as ... _char:   l99 = UNIQUE | NON_NULL, (empty)
            // 2173: b"profile\0" as ... st u8: typeof(_51) = *const {l101} u8
            // 2173: b"profile\0" as ... st u8:   l101 = UNIQUE | NON_NULL, (empty)
            // 2173: b"profile\0": typeof(_52) = *const {l103} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 2173: b"profile\0":   l103 = UNIQUE | NON_NULL, (empty)
            // 2173: b"profile\0": typeof(_53) = & {l105} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 2173: b"profile\0":   l105 = UNIQUE | NON_NULL, FIXED
            // 2173: b"profile\0": typeof(_53 = const b"profile\x00") = & {l284} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 2173: b"profile\0":   l284 = UNIQUE | NON_NULL, (empty)
            // 2173: b"profile\0" as ... st u8: typeof(_51 = move _52 as *const u8 (Pointer(ArrayToPointer))) = *const {l286} u8
            // 2173: b"profile\0" as ... st u8:   l286 = UNIQUE | NON_NULL, (empty)
            // 2173: b"profile\0" as ... _char: typeof(_50 = move _51 as *const i8 (Misc)) = *const {l287} i8
            // 2173: b"profile\0" as ... _char:   l287 = UNIQUE | NON_NULL, (empty)
            // 2173: b"profile\0": typeof(_52 = &raw const (*_53)) = *const {l285} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 2173: b"profile\0":   l285 = UNIQUE | NON_NULL, (empty)
            0 as libc::c_int,
        );
    }
    lglsetopt(
        root,
        // 2178: root: typeof(_56) = *mut {l109} LGL
        // 2178: root:   l109 = UNIQUE | NON_NULL, (empty)
        // 2178: root: typeof(_57) = *mut {l111} *mut {l112} LGL
        // 2178: root:   l111 = UNIQUE | NON_NULL, (empty)
        // 2178: root:   l112 = UNIQUE | NON_NULL, (empty)
        b"abstime\0" as *const u8 as *const libc::c_char,
        // 2179: b"abstime\0" as ... _char: typeof(_58) = *const {l114} i8
        // 2179: b"abstime\0" as ... _char:   l114 = UNIQUE | NON_NULL, (empty)
        // 2179: b"abstime\0" as ... st u8: typeof(_59) = *const {l116} u8
        // 2179: b"abstime\0" as ... st u8:   l116 = UNIQUE | NON_NULL, (empty)
        // 2179: b"abstime\0": typeof(_60) = *const {l118} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2179: b"abstime\0":   l118 = UNIQUE | NON_NULL, (empty)
        // 2179: b"abstime\0": typeof(_61) = & {l120} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2179: b"abstime\0":   l120 = UNIQUE | NON_NULL, FIXED
        // 2179: b"abstime\0" as ... _char: typeof(_58 = move _59 as *const i8 (Misc)) = *const {l291} i8
        // 2179: b"abstime\0" as ... _char:   l291 = UNIQUE | NON_NULL, (empty)
        // 2179: b"abstime\0" as ... st u8: typeof(_59 = move _60 as *const u8 (Pointer(ArrayToPointer))) = *const {l290} u8
        // 2179: b"abstime\0" as ... st u8:   l290 = UNIQUE | NON_NULL, (empty)
        // 2179: b"abstime\0": typeof(_60 = &raw const (*_61)) = *const {l289} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2179: b"abstime\0":   l289 = UNIQUE | NON_NULL, (empty)
        // 2179: b"abstime\0": typeof(_61 = const b"abstime\x00") = & {l288} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2179: b"abstime\0":   l288 = UNIQUE | NON_NULL, (empty)
        1 as libc::c_int,
    );
    lglsetopt(
        root,
        // 2183: root: typeof(_64) = *mut {l124} LGL
        // 2183: root:   l124 = UNIQUE | NON_NULL, (empty)
        // 2183: root: typeof(_65) = *mut {l126} *mut {l127} LGL
        // 2183: root:   l126 = UNIQUE | NON_NULL, (empty)
        // 2183: root:   l127 = UNIQUE | NON_NULL, (empty)
        b"trep\0" as *const u8 as *const libc::c_char,
        // 2184: b"trep\0" as *c ... _char: typeof(_66) = *const {l129} i8
        // 2184: b"trep\0" as *c ... _char:   l129 = UNIQUE | NON_NULL, (empty)
        // 2184: b"trep\0" as *c ... st u8: typeof(_67) = *const {l131} u8
        // 2184: b"trep\0" as *c ... st u8:   l131 = UNIQUE | NON_NULL, (empty)
        // 2184: b"trep\0": typeof(_68) = *const {l133} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 2184: b"trep\0":   l133 = UNIQUE | NON_NULL, (empty)
        // 2184: b"trep\0": typeof(_69) = & {l135} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 2184: b"trep\0":   l135 = UNIQUE | NON_NULL, FIXED
        // 2184: b"trep\0": typeof(_68 = &raw const (*_69)) = *const {l293} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 2184: b"trep\0":   l293 = UNIQUE | NON_NULL, (empty)
        // 2184: b"trep\0": typeof(_69 = const b"trep\x00") = & {l292} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 2184: b"trep\0":   l292 = UNIQUE | NON_NULL, (empty)
        // 2184: b"trep\0" as *c ... _char: typeof(_66 = move _67 as *const i8 (Misc)) = *const {l295} i8
        // 2184: b"trep\0" as *c ... _char:   l295 = UNIQUE | NON_NULL, (empty)
        // 2184: b"trep\0" as *c ... st u8: typeof(_67 = move _68 as *const u8 (Pointer(ArrayToPointer))) = *const {l294} u8
        // 2184: b"trep\0" as *c ... st u8:   l294 = UNIQUE | NON_NULL, (empty)
        0 as libc::c_int,
    );
    lglsetopt(
        root,
        // 2188: root: typeof(_72) = *mut {l139} LGL
        // 2188: root:   l139 = UNIQUE | NON_NULL, (empty)
        // 2188: root: typeof(_73) = *mut {l141} *mut {l142} LGL
        // 2188: root:   l141 = UNIQUE | NON_NULL, (empty)
        // 2188: root:   l142 = UNIQUE | NON_NULL, (empty)
        b"compact\0" as *const u8 as *const libc::c_char,
        // 2189: b"compact\0" as ... _char: typeof(_74) = *const {l144} i8
        // 2189: b"compact\0" as ... _char:   l144 = UNIQUE | NON_NULL, (empty)
        // 2189: b"compact\0" as ... st u8: typeof(_75) = *const {l146} u8
        // 2189: b"compact\0" as ... st u8:   l146 = UNIQUE | NON_NULL, (empty)
        // 2189: b"compact\0": typeof(_76) = *const {l148} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2189: b"compact\0":   l148 = UNIQUE | NON_NULL, (empty)
        // 2189: b"compact\0": typeof(_77) = & {l150} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2189: b"compact\0":   l150 = UNIQUE | NON_NULL, FIXED
        // 2189: b"compact\0" as ... st u8: typeof(_75 = move _76 as *const u8 (Pointer(ArrayToPointer))) = *const {l298} u8
        // 2189: b"compact\0" as ... st u8:   l298 = UNIQUE | NON_NULL, (empty)
        // 2189: b"compact\0" as ... _char: typeof(_74 = move _75 as *const i8 (Misc)) = *const {l299} i8
        // 2189: b"compact\0" as ... _char:   l299 = UNIQUE | NON_NULL, (empty)
        // 2189: b"compact\0": typeof(_76 = &raw const (*_77)) = *const {l297} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2189: b"compact\0":   l297 = UNIQUE | NON_NULL, (empty)
        // 2189: b"compact\0": typeof(_77 = const b"compact\x00") = & {l296} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2189: b"compact\0":   l296 = UNIQUE | NON_NULL, (empty)
        1 as libc::c_int,
    );
    if noparallel == 0 {
    // 2192: noparallel: typeof(_82) = *mut {l156} i32
    // 2192: noparallel:   l156 = UNIQUE | NON_NULL, (empty)
        lglsetopt(
            root,
            // 2194: root: typeof(_84) = *mut {l159} LGL
            // 2194: root:   l159 = UNIQUE | NON_NULL, (empty)
            // 2194: root: typeof(_85) = *mut {l161} *mut {l162} LGL
            // 2194: root:   l161 = UNIQUE | NON_NULL, (empty)
            // 2194: root:   l162 = UNIQUE | NON_NULL, (empty)
            b"bca\0" as *const u8 as *const libc::c_char,
            // 2195: b"bca\0" as *co ... _char: typeof(_86) = *const {l164} i8
            // 2195: b"bca\0" as *co ... _char:   l164 = UNIQUE | NON_NULL, (empty)
            // 2195: b"bca\0" as *co ... st u8: typeof(_87) = *const {l166} u8
            // 2195: b"bca\0" as *co ... st u8:   l166 = UNIQUE | NON_NULL, (empty)
            // 2195: b"bca\0": typeof(_88) = *const {l168} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2195: b"bca\0":   l168 = UNIQUE | NON_NULL, (empty)
            // 2195: b"bca\0": typeof(_89) = & {l170} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2195: b"bca\0":   l170 = UNIQUE | NON_NULL, FIXED
            // 2195: b"bca\0" as *co ... _char: typeof(_86 = move _87 as *const i8 (Misc)) = *const {l303} i8
            // 2195: b"bca\0" as *co ... _char:   l303 = UNIQUE | NON_NULL, (empty)
            // 2195: b"bca\0" as *co ... st u8: typeof(_87 = move _88 as *const u8 (Pointer(ArrayToPointer))) = *const {l302} u8
            // 2195: b"bca\0" as *co ... st u8:   l302 = UNIQUE | NON_NULL, (empty)
            // 2195: b"bca\0": typeof(_89 = const b"bca\x00") = & {l300} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2195: b"bca\0":   l300 = UNIQUE | NON_NULL, (empty)
            // 2195: b"bca\0": typeof(_88 = &raw const (*_89)) = *const {l301} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2195: b"bca\0":   l301 = UNIQUE | NON_NULL, (empty)
            0 as libc::c_int,
        );
        lglseterm(
            root,
            // 2199: root: typeof(_92) = *mut {l174} LGL
            // 2199: root:   l174 = UNIQUE | NON_NULL, (empty)
            // 2199: root: typeof(_93) = *mut {l176} *mut {l177} LGL
            // 2199: root:   l176 = UNIQUE | NON_NULL, (empty)
            // 2199: root:   l177 = UNIQUE | NON_NULL, (empty)
            Some(term_shim as unsafe extern "C" fn(*mut libc::c_void) -> libc::c_int),
            // 2200: Some(term as un ... _int): typeof(_94) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l179} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
            // 2200: Some(term as un ... _int):   l179 = UNIQUE | NON_NULL, (empty)
            // 2200: term as unsafe  ... c_int: typeof(_95) = fn(*mut {l181} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 2200: term as unsafe  ... c_int:   l181 = UNIQUE | NON_NULL, (empty)
            // 2200: term: typeof(_95 = term as unsafe extern "C" fn(*mut libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*mut {l304} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 2200: term:   l304 = UNIQUE | NON_NULL, (empty)
            // 2200: Some(term as un ... _int): typeof(_94 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void) -> i32>::Some(move _95)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l305} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
            // 2200: Some(term as un ... _int):   l305 = UNIQUE | NON_NULL, (empty)
            0 as *mut libc::c_void,
            // 2201: 0 as *mut libc: ... _void: typeof(_96) = *mut {l183} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2201: 0 as *mut libc: ... _void:   l183 = UNIQUE | NON_NULL, (empty)
            // 2201: 0 as *mut libc: ... _void: typeof(_96 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l306} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2201: 0 as *mut libc: ... _void:   l306 = UNIQUE | NON_NULL, (empty)
        );
        lglsetconsumeunits(
            root,
            // 2204: root: typeof(_98) = *mut {l186} LGL
            // 2204: root:   l186 = UNIQUE | NON_NULL, (empty)
            // 2204: root: typeof(_99) = *mut {l188} *mut {l189} LGL
            // 2204: root:   l188 = UNIQUE | NON_NULL, (empty)
            // 2204: root:   l189 = UNIQUE | NON_NULL, (empty)
            Some(
            // 2205: Some( consumeun ... (), ): typeof(_100) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l191} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l192} *mut {l193} i32, *mut {l194} *mut {l195} i32) -> ()>
            // 2205: Some( consumeun ... (), ):   l191 = UNIQUE | NON_NULL, (empty)
            // 2205: Some( consumeun ... (), ):   l192 = UNIQUE | NON_NULL, (empty)
            // 2205: Some( consumeun ... (), ):   l193 = UNIQUE | NON_NULL, (empty)
            // 2205: Some( consumeun ... (), ):   l194 = UNIQUE | NON_NULL, (empty)
            // 2205: Some( consumeun ... (), ):   l195 = UNIQUE | NON_NULL, (empty)
            // 2205: Some( consumeun ... (), ): typeof(_100 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void, *mut *mut i32, *mut *mut i32)>::Some(move _101)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l312} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l313} *mut {l314} i32, *mut {l315} *mut {l316} i32) -> ()>
            // 2205: Some( consumeun ... (), ):   l312 = UNIQUE | NON_NULL, (empty)
            // 2205: Some( consumeun ... (), ):   l313 = UNIQUE | NON_NULL, (empty)
            // 2205: Some( consumeun ... (), ):   l314 = UNIQUE | NON_NULL, (empty)
            // 2205: Some( consumeun ... (), ):   l315 = UNIQUE | NON_NULL, (empty)
            // 2205: Some( consumeun ... (), ):   l316 = UNIQUE | NON_NULL, (empty)
                consumeunits
                // 2206: consumeunits as ... -> (): typeof(_101) = fn(*mut {l197} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l198} *mut {l199} i32, *mut {l200} *mut {l201} i32) -> ()
                // 2206: consumeunits as ... -> ():   l197 = UNIQUE | NON_NULL, (empty)
                // 2206: consumeunits as ... -> ():   l198 = UNIQUE | NON_NULL, (empty)
                // 2206: consumeunits as ... -> ():   l199 = UNIQUE | NON_NULL, (empty)
                // 2206: consumeunits as ... -> ():   l200 = UNIQUE | NON_NULL, (empty)
                // 2206: consumeunits as ... -> ():   l201 = UNIQUE | NON_NULL, (empty)
                // 2206: consumeunits: typeof(_101 = consumeunits as unsafe extern "C" fn(*mut libc::c_void, *mut *mut i32, *mut *mut i32) (Pointer(ReifyFnPointer))) = fn(*mut {l307} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l308} *mut {l309} i32, *mut {l310} *mut {l311} i32) -> ()
                // 2206: consumeunits:   l307 = UNIQUE | NON_NULL, (empty)
                // 2206: consumeunits:   l308 = UNIQUE | NON_NULL, (empty)
                // 2206: consumeunits:   l309 = UNIQUE | NON_NULL, (empty)
                // 2206: consumeunits:   l310 = UNIQUE | NON_NULL, (empty)
                // 2206: consumeunits:   l311 = UNIQUE | NON_NULL, (empty)
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *mut *mut libc::c_int,
                        *mut *mut libc::c_int,
                    ) -> (),
            ),
            &mut rootconsumed as *mut libc::c_int as *mut libc::c_void,
            // 2213: &mut rootconsum ... _void: typeof(_102) = *mut {l203} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2213: &mut rootconsum ... _void:   l203 = UNIQUE | NON_NULL, (empty)
            // 2213: &mut rootconsum ... c_int: typeof(_103) = *mut {l205} i32
            // 2213: &mut rootconsum ... c_int:   l205 = UNIQUE | NON_NULL, (empty)
            // 2213: &mut rootconsumed: typeof(_104) = &mut {l207} i32
            // 2213: &mut rootconsumed:   l207 = UNIQUE | NON_NULL, (empty)
            // 2213: rootconsumed: typeof(_105) = *mut {l209} i32
            // 2213: rootconsumed:   l209 = UNIQUE | NON_NULL, (empty)
            // 2213: &mut rootconsum ... _void: typeof(_102 = move _103 as *mut libc::c_void (Misc)) = *mut {l319} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2213: &mut rootconsum ... _void:   l319 = UNIQUE | NON_NULL, (empty)
            // 2213: &mut rootconsumed: typeof(_104 = &mut (*_105)) = &mut {l317} i32
            // 2213: &mut rootconsumed:   l317 = UNIQUE | NON_NULL, (empty)
            // 2213: &mut rootconsumed: typeof(_103 = &raw mut (*_104)) = *mut {l318} i32
            // 2213: &mut rootconsumed:   l318 = UNIQUE | NON_NULL, (empty)
        );
        lglsetmsglock(
            root,
            // 2216: root: typeof(_107) = *mut {l212} LGL
            // 2216: root:   l212 = UNIQUE | NON_NULL, (empty)
            // 2216: root: typeof(_108) = *mut {l214} *mut {l215} LGL
            // 2216: root:   l214 = UNIQUE | NON_NULL, (empty)
            // 2216: root:   l215 = UNIQUE | NON_NULL, (empty)
            ::core::mem::transmute::<
            // 2217: ::core::mem::tr ... sg))): typeof(_109) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l217} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> ()>
            // 2217: ::core::mem::tr ... sg))):   l217 = UNIQUE | NON_NULL, (empty)
                Option<unsafe extern "C" fn() -> ()>,
                Option<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
            >(Some(::core::mem::transmute::<
                unsafe extern "C" fn() -> (),
                unsafe extern "C" fn() -> (),
            >(lockmsg))),
            ::core::mem::transmute::<
            // 2224: ::core::mem::tr ... sg))): typeof(_113) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l222} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> ()>
            // 2224: ::core::mem::tr ... sg))):   l222 = UNIQUE | NON_NULL, (empty)
                Option<unsafe extern "C" fn() -> ()>,
                Option<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
            >(Some(::core::mem::transmute::<
                unsafe extern "C" fn() -> (),
                unsafe extern "C" fn() -> (),
            >(unlockmsg))),
            0 as *mut libc::c_void,
            // 2231: 0 as *mut libc: ... _void: typeof(_117) = *mut {l227} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2231: 0 as *mut libc: ... _void:   l227 = UNIQUE | NON_NULL, (empty)
            // 2231: 0 as *mut libc: ... _void: typeof(_117 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l320} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2231: 0 as *mut libc: ... _void:   l320 = UNIQUE | NON_NULL, (empty)
        );
    }
    lglsetime(
        root,
        // 2235: root: typeof(_119) = *mut {l230} LGL
        // 2235: root:   l230 = UNIQUE | NON_NULL, (empty)
        // 2235: root: typeof(_120) = *mut {l232} *mut {l233} LGL
        // 2235: root:   l232 = UNIQUE | NON_NULL, (empty)
        // 2235: root:   l233 = UNIQUE | NON_NULL, (empty)
        ::core::mem::transmute::<
            Option<unsafe extern "C" fn() -> libc::c_double>,
            Option<unsafe extern "C" fn() -> libc::c_double>,
        >(Some(::core::mem::transmute::<
            unsafe extern "C" fn() -> libc::c_double,
            unsafe extern "C" fn() -> libc::c_double,
        >(getime))),
    );
    lglsetprefix(root, b"c (root) \0" as *const u8 as *const libc::c_char);
    // 2244: root: typeof(_126) = *mut {l240} LGL
    // 2244: root:   l240 = UNIQUE | NON_NULL, (empty)
    // 2244: root: typeof(_127) = *mut {l242} *mut {l243} LGL
    // 2244: root:   l242 = UNIQUE | NON_NULL, (empty)
    // 2244: root:   l243 = UNIQUE | NON_NULL, (empty)
    // 2244: b"c (root) \0"  ... _char: typeof(_128) = *const {l245} i8
    // 2244: b"c (root) \0"  ... _char:   l245 = UNIQUE | NON_NULL, (empty)
    // 2244: b"c (root) \0"  ... st u8: typeof(_129) = *const {l247} u8
    // 2244: b"c (root) \0"  ... st u8:   l247 = UNIQUE | NON_NULL, (empty)
    // 2244: b"c (root) \0": typeof(_130) = *const {l249} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 2244: b"c (root) \0":   l249 = UNIQUE | NON_NULL, (empty)
    // 2244: b"c (root) \0": typeof(_131) = & {l251} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 2244: b"c (root) \0":   l251 = UNIQUE | NON_NULL, FIXED
    // 2244: b"c (root) \0": typeof(_131 = const b"c (root) \x00") = & {l321} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 2244: b"c (root) \0":   l321 = UNIQUE | NON_NULL, (empty)
    // 2244: b"c (root) \0": typeof(_130 = &raw const (*_131)) = *const {l322} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 2244: b"c (root) \0":   l322 = UNIQUE | NON_NULL, (empty)
    // 2244: b"c (root) \0"  ... st u8: typeof(_129 = move _130 as *const u8 (Pointer(ArrayToPointer))) = *const {l323} u8
    // 2244: b"c (root) \0"  ... st u8:   l323 = UNIQUE | NON_NULL, (empty)
    // 2244: b"c (root) \0"  ... _char: typeof(_128 = move _129 as *const i8 (Misc)) = *const {l324} i8
    // 2244: b"c (root) \0"  ... _char:   l324 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn newnode(mut parent: *mut Node, mut decision: libc::c_int) -> *mut Node {
// 2246: *mut Node: typeof(_0) = *mut {g46} DefId(0:777 ~ treengeling[2d04]::Node)
// 2246: *mut Node:   g46 = UNIQUE | NON_NULL, FIXED
// 2246: mut parent: typeof(_1) = *mut {g45} DefId(0:777 ~ treengeling[2d04]::Node)
// 2246: mut parent:   g45 = UNIQUE | NON_NULL, FIXED
    let mut prefix: [libc::c_char; 80] = [0; 80];
    let mut res: *mut Node = 0 as *mut Node;
    // 2248: mut res: typeof(_5) = *mut {l5} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2248: mut res:   l5 = UNIQUE | NON_NULL, (empty)
    // 2248: 0 as *mut Node: typeof(_5 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l364} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2248: 0 as *mut Node:   l364 = UNIQUE | NON_NULL, (empty)
    locknodes();
    let mut BYTES: size_t = (1 as libc::c_int as libc::c_ulong)
        .wrapping_mul(::core::mem::size_of::<Node>() as libc::c_ulong);
    res = malloc(BYTES) as *mut Node;
    // 2252: malloc(BYTES): typeof(_12) = *mut {l13} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2252: malloc(BYTES):   l13 = UNIQUE | NON_NULL, (empty)
    // 2252: res = malloc(BY ...  Node: typeof(_5 = move _12 as *mut Node (Misc)) = *mut {l365} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2252: res = malloc(BY ...  Node:   l365 = UNIQUE | NON_NULL, (empty)
    if res.is_null() {
    // 2253: res: typeof(_16) = *mut {l18} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2253: res:   l18 = UNIQUE | NON_NULL, (empty)
        err(b"out of memory\0" as *const u8 as *const libc::c_char);
        // 2254: b"out of memory ... _char: typeof(_19) = *const {l22} i8
        // 2254: b"out of memory ... _char:   l22 = UNIQUE | NON_NULL, (empty)
        // 2254: b"out of memory ... st u8: typeof(_20) = *const {l24} u8
        // 2254: b"out of memory ... st u8:   l24 = UNIQUE | NON_NULL, (empty)
        // 2254: b"out of memory\0": typeof(_21) = *const {l26} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2254: b"out of memory\0":   l26 = UNIQUE | NON_NULL, (empty)
        // 2254: b"out of memory\0": typeof(_22) = & {l28} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2254: b"out of memory\0":   l28 = UNIQUE | NON_NULL, FIXED
        // 2254: b"out of memory\0": typeof(_22 = const b"out of memory\x00") = & {l366} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2254: b"out of memory\0":   l366 = UNIQUE | NON_NULL, (empty)
        // 2254: b"out of memory ... st u8: typeof(_20 = move _21 as *const u8 (Pointer(ArrayToPointer))) = *const {l368} u8
        // 2254: b"out of memory ... st u8:   l368 = UNIQUE | NON_NULL, (empty)
        // 2254: b"out of memory\0": typeof(_21 = &raw const (*_22)) = *const {l367} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2254: b"out of memory\0":   l367 = UNIQUE | NON_NULL, (empty)
        // 2254: b"out of memory ... _char: typeof(_19 = move _20 as *const i8 (Misc)) = *const {l369} i8
        // 2254: b"out of memory ... _char:   l369 = UNIQUE | NON_NULL, (empty)
        exit(1 as libc::c_int);
    }
    memset(res as *mut libc::c_void, 0 as libc::c_int, BYTES);
    // 2257: memset(res as * ... YTES): typeof(_25) = *mut {l32} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2257: memset(res as * ... YTES):   l32 = UNIQUE | NON_NULL, (empty)
    // 2257: res as *mut lib ... _void: typeof(_26) = *mut {l34} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2257: res as *mut lib ... _void:   l34 = UNIQUE | NON_NULL, (empty)
    // 2257: res: typeof(_27) = *mut {l36} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2257: res:   l36 = UNIQUE | NON_NULL, (empty)
    // 2257: res as *mut lib ... _void: typeof(_26 = move _27 as *mut libc::c_void (Misc)) = *mut {l370} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2257: res as *mut lib ... _void:   l370 = UNIQUE | NON_NULL, (empty)
    incmem(BYTES);
    (*res).state = READY;
    if !parent.is_null() {
    // 2260: parent: typeof(_35) = *mut {l45} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2260: parent:   l45 = UNIQUE | NON_NULL, (empty)
        (*res).depth = (*parent).depth + 1 as libc::c_int;
    }
    let fresh6 = ids;
    // 2263: ids: typeof(_40) = *mut {l51} i64
    // 2263: ids:   l51 = UNIQUE | NON_NULL, (empty)
    ids = ids + 1;
    // 2264: ids: typeof(_42) = *mut {l54} i64
    // 2264: ids:   l54 = UNIQUE | NON_NULL, (empty)
    // 2264: ids: typeof(_44) = *mut {l57} i64
    // 2264: ids:   l57 = UNIQUE | NON_NULL, (empty)
    (*res).id = fresh6;
    (*res).pos = numnodes;
    // 2266: numnodes: typeof(_47) = *mut {l61} i32
    // 2266: numnodes:   l61 = UNIQUE | NON_NULL, (empty)
    if sizenodes == numnodes {
    // 2267: sizenodes: typeof(_51) = *mut {l66} i32
    // 2267: sizenodes:   l66 = UNIQUE | NON_NULL, (empty)
    // 2267: numnodes: typeof(_53) = *mut {l69} i32
    // 2267: numnodes:   l69 = UNIQUE | NON_NULL, (empty)
        let mut NEW_SIZE: size_t = sizenodes as size_t;
        // 2268: sizenodes: typeof(_56) = *mut {l73} i32
        // 2268: sizenodes:   l73 = UNIQUE | NON_NULL, (empty)
        let mut OLD_BYTES: size_t =
            NEW_SIZE.wrapping_mul(::core::mem::size_of::<*mut Node>() as libc::c_ulong);
        let mut NEW_BYTES: size_t = 0;
        if NEW_SIZE != 0 {
            NEW_SIZE = NEW_SIZE * 2 as libc::c_int as size_t;
        } else {
            NEW_SIZE = 1 as libc::c_int as size_t;
        }
        NEW_BYTES = NEW_SIZE.wrapping_mul(::core::mem::size_of::<*mut Node>() as libc::c_ulong);
        decmem(OLD_BYTES);
        nodes = realloc(nodes as *mut libc::c_void, NEW_BYTES) as *mut *mut Node;
        // 2279: realloc(nodes a ... YTES): typeof(_76) = *mut {l94} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2279: realloc(nodes a ... YTES):   l94 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes as *mut l ... _void: typeof(_77) = *mut {l96} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2279: nodes as *mut l ... _void:   l96 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes: typeof(_78) = *mut {l98} *mut {l99} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2279: nodes:   l98 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes:   l99 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes: typeof(_79) = *mut {l101} *mut {l102} *mut {l103} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2279: nodes:   l101 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes:   l102 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes:   l103 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes: typeof(_81) = *mut {l106} *mut {l107} *mut {l108} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2279: nodes:   l106 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes:   l107 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes:   l108 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes as *mut l ... _void: typeof(_77 = move _78 as *mut libc::c_void (Misc)) = *mut {l371} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2279: nodes as *mut l ... _void:   l371 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes = realloc ...  Node: typeof((*_81) = move _76 as *mut *mut Node (Misc)) = *mut {l372} *mut {l373} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2279: nodes = realloc ...  Node:   l372 = UNIQUE | NON_NULL, (empty)
        // 2279: nodes = realloc ...  Node:   l373 = UNIQUE | NON_NULL, (empty)
        if nodes.is_null() {
        // 2280: nodes: typeof(_84) = *mut {l112} *mut {l113} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2280: nodes:   l112 = UNIQUE | NON_NULL, (empty)
        // 2280: nodes:   l113 = UNIQUE | NON_NULL, (empty)
        // 2280: nodes: typeof(_85) = *mut {l115} *mut {l116} *mut {l117} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2280: nodes:   l115 = UNIQUE | NON_NULL, (empty)
        // 2280: nodes:   l116 = UNIQUE | NON_NULL, (empty)
        // 2280: nodes:   l117 = UNIQUE | NON_NULL, (empty)
            err(b"out of memory\0" as *const u8 as *const libc::c_char);
            // 2281: b"out of memory ... _char: typeof(_88) = *const {l121} i8
            // 2281: b"out of memory ... _char:   l121 = UNIQUE | NON_NULL, (empty)
            // 2281: b"out of memory ... st u8: typeof(_89) = *const {l123} u8
            // 2281: b"out of memory ... st u8:   l123 = UNIQUE | NON_NULL, (empty)
            // 2281: b"out of memory\0": typeof(_90) = *const {l125} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2281: b"out of memory\0":   l125 = UNIQUE | NON_NULL, (empty)
            // 2281: b"out of memory\0": typeof(_91) = & {l127} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2281: b"out of memory\0":   l127 = UNIQUE | NON_NULL, FIXED
            // 2281: b"out of memory\0": typeof(_91 = const b"out of memory\x00") = & {l374} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2281: b"out of memory\0":   l374 = UNIQUE | NON_NULL, (empty)
            // 2281: b"out of memory ... _char: typeof(_88 = move _89 as *const i8 (Misc)) = *const {l377} i8
            // 2281: b"out of memory ... _char:   l377 = UNIQUE | NON_NULL, (empty)
            // 2281: b"out of memory ... st u8: typeof(_89 = move _90 as *const u8 (Pointer(ArrayToPointer))) = *const {l376} u8
            // 2281: b"out of memory ... st u8:   l376 = UNIQUE | NON_NULL, (empty)
            // 2281: b"out of memory\0": typeof(_90 = &raw const (*_91)) = *const {l375} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2281: b"out of memory\0":   l375 = UNIQUE | NON_NULL, (empty)
            exit(1 as libc::c_int);
        }
        incmem(NEW_BYTES);
        sizenodes = NEW_SIZE as libc::c_int;
        // 2285: sizenodes: typeof(_97) = *mut {l134} i32
        // 2285: sizenodes:   l134 = UNIQUE | NON_NULL, (empty)
    }
    let fresh7 = numnodes;
    // 2287: numnodes: typeof(_99) = *mut {l137} i32
    // 2287: numnodes:   l137 = UNIQUE | NON_NULL, (empty)
    numnodes = numnodes + 1;
    // 2288: numnodes: typeof(_101) = *mut {l140} i32
    // 2288: numnodes:   l140 = UNIQUE | NON_NULL, (empty)
    // 2288: numnodes: typeof(_103) = *mut {l143} i32
    // 2288: numnodes:   l143 = UNIQUE | NON_NULL, (empty)
    let ref mut fresh8 = *nodes.offset(fresh7 as isize);
    // 2289: ref mut fresh8: typeof(_104) = &mut {l145} *mut {l146} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2289: ref mut fresh8:   l145 = UNIQUE | NON_NULL, FIXED
    // 2289: ref mut fresh8:   l146 = UNIQUE | NON_NULL, (empty)
    // 2289: nodes.offset(fr ... size): typeof(_105) = *mut {l148} *mut {l149} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2289: nodes.offset(fr ... size):   l148 = UNIQUE | NON_NULL, (empty)
    // 2289: nodes.offset(fr ... size):   l149 = UNIQUE | NON_NULL, (empty)
    // 2289: nodes: typeof(_106) = *mut {l151} *mut {l152} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2289: nodes:   l151 = UNIQUE | NON_NULL, (empty)
    // 2289: nodes:   l152 = UNIQUE | NON_NULL, (empty)
    // 2289: nodes: typeof(_107) = *mut {l154} *mut {l155} *mut {l156} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2289: nodes:   l154 = UNIQUE | NON_NULL, (empty)
    // 2289: nodes:   l155 = UNIQUE | NON_NULL, (empty)
    // 2289: nodes:   l156 = UNIQUE | NON_NULL, (empty)
    // 2289: ref mut fresh8: typeof(_104 = &mut (*_105)) = &mut {l378} *mut {l379} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2289: ref mut fresh8:   l378 = UNIQUE | NON_NULL, (empty)
    // 2289: ref mut fresh8:   l379 = UNIQUE | NON_NULL, (empty)
    *fresh8 = res;
    // 2290: res: typeof(_110) = *mut {l160} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2290: res:   l160 = UNIQUE | NON_NULL, (empty)
    if numnodes > maxnumnodes {
    // 2291: numnodes: typeof(_114) = *mut {l165} i32
    // 2291: numnodes:   l165 = UNIQUE | NON_NULL, (empty)
    // 2291: maxnumnodes: typeof(_116) = *mut {l168} i32
    // 2291: maxnumnodes:   l168 = UNIQUE | NON_NULL, (empty)
        maxnumnodes = numnodes;
        // 2292: numnodes: typeof(_118) = *mut {l171} i32
        // 2292: numnodes:   l171 = UNIQUE | NON_NULL, (empty)
        // 2292: maxnumnodes: typeof(_119) = *mut {l173} i32
        // 2292: maxnumnodes:   l173 = UNIQUE | NON_NULL, (empty)
    }
    unlocknodes();
    nmsg(res, b"new node\0" as *const u8 as *const libc::c_char);
    // 2295: res: typeof(_122) = *mut {l177} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2295: res:   l177 = UNIQUE | NON_NULL, (empty)
    // 2295: b"new node\0" a ... _char: typeof(_123) = *const {l179} i8
    // 2295: b"new node\0" a ... _char:   l179 = UNIQUE | NON_NULL, (empty)
    // 2295: b"new node\0" a ... st u8: typeof(_124) = *const {l181} u8
    // 2295: b"new node\0" a ... st u8:   l181 = UNIQUE | NON_NULL, (empty)
    // 2295: b"new node\0": typeof(_125) = *const {l183} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
    // 2295: b"new node\0":   l183 = UNIQUE | NON_NULL, (empty)
    // 2295: b"new node\0": typeof(_126) = & {l185} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
    // 2295: b"new node\0":   l185 = UNIQUE | NON_NULL, FIXED
    // 2295: b"new node\0" a ... _char: typeof(_123 = move _124 as *const i8 (Misc)) = *const {l383} i8
    // 2295: b"new node\0" a ... _char:   l383 = UNIQUE | NON_NULL, (empty)
    // 2295: b"new node\0": typeof(_126 = const b"new node\x00") = & {l380} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
    // 2295: b"new node\0":   l380 = UNIQUE | NON_NULL, (empty)
    // 2295: b"new node\0": typeof(_125 = &raw const (*_126)) = *const {l381} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
    // 2295: b"new node\0":   l381 = UNIQUE | NON_NULL, (empty)
    // 2295: b"new node\0" a ... st u8: typeof(_124 = move _125 as *const u8 (Pointer(ArrayToPointer))) = *const {l382} u8
    // 2295: b"new node\0" a ... st u8:   l382 = UNIQUE | NON_NULL, (empty)
    if !parent.is_null() {
    // 2296: parent: typeof(_130) = *mut {l190} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2296: parent:   l190 = UNIQUE | NON_NULL, (empty)
        (*res).lgl = lglclone((*parent).lgl);
        // 2297: lglclone((*pare ... .lgl): typeof(_131) = *mut {l192} LGL
        // 2297: lglclone((*pare ... .lgl):   l192 = UNIQUE | NON_NULL, (empty)
        // 2297: (*parent).lgl: typeof(_132) = *mut {l194} LGL
        // 2297: (*parent).lgl:   l194 = UNIQUE | NON_NULL, (empty)
        (*res).decisions = lglgetdecs((*res).lgl);
        // 2298: (*res).lgl: typeof(_134) = *mut {l197} LGL
        // 2298: (*res).lgl:   l197 = UNIQUE | NON_NULL, (empty)
        (*res).conflicts = lglgetconfs((*res).lgl);
        // 2299: (*res).lgl: typeof(_136) = *mut {l200} LGL
        // 2299: (*res).lgl:   l200 = UNIQUE | NON_NULL, (empty)
        (*res).propagations = lglgetprops((*res).lgl);
        // 2300: (*res).lgl: typeof(_138) = *mut {l203} LGL
        // 2300: (*res).lgl:   l203 = UNIQUE | NON_NULL, (empty)
        (*res).consumed = (*parent).consumed;
        (*res).cube = appendint((*parent).cube, decision);
        // 2302: appendint((*par ... sion): typeof(_140) = *mut {l206} i32
        // 2302: appendint((*par ... sion):   l206 = UNIQUE | NON_NULL, (empty)
        // 2302: (*parent).cube: typeof(_141) = *mut {l208} i32
        // 2302: (*parent).cube:   l208 = UNIQUE | NON_NULL, (empty)
        lgladd((*res).lgl, decision);
        // 2303: (*res).lgl: typeof(_144) = *mut {l212} LGL
        // 2303: (*res).lgl:   l212 = UNIQUE | NON_NULL, (empty)
        lgladd((*res).lgl, 0 as libc::c_int);
        // 2304: (*res).lgl: typeof(_147) = *mut {l216} LGL
        // 2304: (*res).lgl:   l216 = UNIQUE | NON_NULL, (empty)
    } else {
        msg(b"forking root solver instance\0" as *const u8 as *const libc::c_char);
        // 2306: b"forking root  ... _char: typeof(_150) = *const {l220} i8
        // 2306: b"forking root  ... _char:   l220 = UNIQUE | NON_NULL, (empty)
        // 2306: b"forking root  ... st u8: typeof(_151) = *const {l222} u8
        // 2306: b"forking root  ... st u8:   l222 = UNIQUE | NON_NULL, (empty)
        // 2306: b"forking root  ... ce\0": typeof(_152) = *const {l224} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
        // 2306: b"forking root  ... ce\0":   l224 = UNIQUE | NON_NULL, (empty)
        // 2306: b"forking root  ... ce\0": typeof(_153) = & {l226} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
        // 2306: b"forking root  ... ce\0":   l226 = UNIQUE | NON_NULL, FIXED
        // 2306: b"forking root  ... ce\0": typeof(_152 = &raw const (*_153)) = *const {l385} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
        // 2306: b"forking root  ... ce\0":   l385 = UNIQUE | NON_NULL, (empty)
        // 2306: b"forking root  ... st u8: typeof(_151 = move _152 as *const u8 (Pointer(ArrayToPointer))) = *const {l386} u8
        // 2306: b"forking root  ... st u8:   l386 = UNIQUE | NON_NULL, (empty)
        // 2306: b"forking root  ... ce\0": typeof(_153 = const b"forking root solver instance\x00") = & {l384} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
        // 2306: b"forking root  ... ce\0":   l384 = UNIQUE | NON_NULL, (empty)
        // 2306: b"forking root  ... _char: typeof(_150 = move _151 as *const i8 (Misc)) = *const {l387} i8
        // 2306: b"forking root  ... _char:   l387 = UNIQUE | NON_NULL, (empty)
        let mut BYTES_0: size_t = (1 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong);
        (*res).cube = malloc(BYTES_0) as *mut libc::c_int;
        // 2309: malloc(BYTES_0): typeof(_159) = *mut {l233} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2309: malloc(BYTES_0):   l233 = UNIQUE | NON_NULL, (empty)
        // 2309: (*res).cube = m ... c_int: typeof(((*_5).11: *mut i32) = move _159 as *mut i32 (Misc)) = *mut {l388} i32
        // 2309: (*res).cube = m ... c_int:   l388 = UNIQUE | NON_NULL, (empty)
        if ((*res).cube).is_null() {
        // 2310: ((*res).cube): typeof(_163) = *mut {l238} i32
        // 2310: ((*res).cube):   l238 = UNIQUE | NON_NULL, (empty)
            err(b"out of memory\0" as *const u8 as *const libc::c_char);
            // 2311: b"out of memory ... _char: typeof(_166) = *const {l242} i8
            // 2311: b"out of memory ... _char:   l242 = UNIQUE | NON_NULL, (empty)
            // 2311: b"out of memory ... st u8: typeof(_167) = *const {l244} u8
            // 2311: b"out of memory ... st u8:   l244 = UNIQUE | NON_NULL, (empty)
            // 2311: b"out of memory\0": typeof(_168) = *const {l246} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2311: b"out of memory\0":   l246 = UNIQUE | NON_NULL, (empty)
            // 2311: b"out of memory\0": typeof(_169) = & {l248} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2311: b"out of memory\0":   l248 = UNIQUE | NON_NULL, FIXED
            // 2311: b"out of memory\0": typeof(_169 = const b"out of memory\x00") = & {l389} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2311: b"out of memory\0":   l389 = UNIQUE | NON_NULL, (empty)
            // 2311: b"out of memory\0": typeof(_168 = &raw const (*_169)) = *const {l390} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2311: b"out of memory\0":   l390 = UNIQUE | NON_NULL, (empty)
            // 2311: b"out of memory ... _char: typeof(_166 = move _167 as *const i8 (Misc)) = *const {l392} i8
            // 2311: b"out of memory ... _char:   l392 = UNIQUE | NON_NULL, (empty)
            // 2311: b"out of memory ... st u8: typeof(_167 = move _168 as *const u8 (Pointer(ArrayToPointer))) = *const {l391} u8
            // 2311: b"out of memory ... st u8:   l391 = UNIQUE | NON_NULL, (empty)
            exit(1 as libc::c_int);
        }
        memset((*res).cube as *mut libc::c_void, 0 as libc::c_int, BYTES_0);
        // 2314: memset((*res).c ... ES_0): typeof(_172) = *mut {l252} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2314: memset((*res).c ... ES_0):   l252 = UNIQUE | NON_NULL, (empty)
        // 2314: (*res).cube as  ... _void: typeof(_173) = *mut {l254} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2314: (*res).cube as  ... _void:   l254 = UNIQUE | NON_NULL, (empty)
        // 2314: (*res).cube: typeof(_174) = *mut {l256} i32
        // 2314: (*res).cube:   l256 = UNIQUE | NON_NULL, (empty)
        // 2314: (*res).cube as  ... _void: typeof(_173 = move _174 as *mut libc::c_void (Misc)) = *mut {l393} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2314: (*res).cube as  ... _void:   l393 = UNIQUE | NON_NULL, (empty)
        incmem(BYTES_0);
        (*res).lgl = lglfork(root);
        // 2316: lglfork(root): typeof(_179) = *mut {l262} LGL
        // 2316: lglfork(root):   l262 = UNIQUE | NON_NULL, (empty)
        // 2316: root: typeof(_180) = *mut {l264} LGL
        // 2316: root:   l264 = UNIQUE | NON_NULL, (empty)
        // 2316: root: typeof(_181) = *mut {l266} *mut {l267} LGL
        // 2316: root:   l266 = UNIQUE | NON_NULL, (empty)
        // 2316: root:   l267 = UNIQUE | NON_NULL, (empty)
    }
    sprintf(
        prefix.as_mut_ptr(),
        // 2319: prefix.as_mut_ptr(): typeof(_183) = *mut {l270} i8
        // 2319: prefix.as_mut_ptr():   l270 = UNIQUE | NON_NULL, (empty)
        // 2319: prefix.as_mut_ptr(): typeof(_184) = &mut {l272} [i8]
        // 2319: prefix.as_mut_ptr():   l272 = UNIQUE | NON_NULL, FIXED
        // 2319: prefix.as_mut_ptr(): typeof(_185) = &mut {l274} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
        // 2319: prefix.as_mut_ptr():   l274 = UNIQUE | NON_NULL, (empty)
        // 2319: prefix.as_mut_ptr(): typeof(_184 = move _185 as &mut [i8] (Pointer(Unsize))) = &mut {l395} [i8]
        // 2319: prefix.as_mut_ptr():   l395 = UNIQUE | NON_NULL, FIXED
        // 2319: prefix.as_mut_ptr(): typeof(_185 = &mut _4) = &mut {l394} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
        // 2319: prefix.as_mut_ptr():   l394 = UNIQUE | NON_NULL, (empty)
        b"c (%d %lld) \0" as *const u8 as *const libc::c_char,
        // 2320: b"c (%d %lld) \ ... _char: typeof(_186) = *const {l276} i8
        // 2320: b"c (%d %lld) \ ... _char:   l276 = UNIQUE | NON_NULL, (empty)
        // 2320: b"c (%d %lld) \ ... st u8: typeof(_187) = *const {l278} u8
        // 2320: b"c (%d %lld) \ ... st u8:   l278 = UNIQUE | NON_NULL, (empty)
        // 2320: b"c (%d %lld) \0": typeof(_188) = *const {l280} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 2320: b"c (%d %lld) \0":   l280 = UNIQUE | NON_NULL, (empty)
        // 2320: b"c (%d %lld) \0": typeof(_189) = & {l282} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 2320: b"c (%d %lld) \0":   l282 = UNIQUE | NON_NULL, FIXED
        // 2320: b"c (%d %lld) \0": typeof(_188 = &raw const (*_189)) = *const {l397} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 2320: b"c (%d %lld) \0":   l397 = UNIQUE | NON_NULL, (empty)
        // 2320: b"c (%d %lld) \0": typeof(_189 = const b"c (%d %lld) \x00") = & {l396} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 2320: b"c (%d %lld) \0":   l396 = UNIQUE | NON_NULL, (empty)
        // 2320: b"c (%d %lld) \ ... st u8: typeof(_187 = move _188 as *const u8 (Pointer(ArrayToPointer))) = *const {l398} u8
        // 2320: b"c (%d %lld) \ ... st u8:   l398 = UNIQUE | NON_NULL, (empty)
        // 2320: b"c (%d %lld) \ ... _char: typeof(_186 = move _187 as *const i8 (Misc)) = *const {l399} i8
        // 2320: b"c (%d %lld) \ ... _char:   l399 = UNIQUE | NON_NULL, (empty)
        (*res).depth,
        (*res).id as libc::c_longlong,
    );
    lglsetprefix((*res).lgl, prefix.as_mut_ptr());
    // 2324: (*res).lgl: typeof(_193) = *mut {l287} LGL
    // 2324: (*res).lgl:   l287 = UNIQUE | NON_NULL, (empty)
    // 2324: prefix.as_mut_ptr(): typeof(_194) = *const {l289} i8
    // 2324: prefix.as_mut_ptr():   l289 = UNIQUE | NON_NULL, (empty)
    // 2324: prefix.as_mut_ptr(): typeof(_195) = *mut {l291} i8
    // 2324: prefix.as_mut_ptr():   l291 = UNIQUE | NON_NULL, (empty)
    // 2324: prefix.as_mut_ptr(): typeof(_196) = &mut {l293} [i8]
    // 2324: prefix.as_mut_ptr():   l293 = UNIQUE | NON_NULL, FIXED
    // 2324: prefix.as_mut_ptr(): typeof(_197) = &mut {l295} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
    // 2324: prefix.as_mut_ptr():   l295 = UNIQUE | NON_NULL, (empty)
    // 2324: prefix.as_mut_ptr(): typeof(_197 = &mut _4) = &mut {l400} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
    // 2324: prefix.as_mut_ptr():   l400 = UNIQUE | NON_NULL, (empty)
    // 2324: prefix.as_mut_ptr(): typeof(_196 = move _197 as &mut [i8] (Pointer(Unsize))) = &mut {l401} [i8]
    // 2324: prefix.as_mut_ptr():   l401 = UNIQUE | NON_NULL, FIXED
    // 2324: prefix.as_mut_ptr(): typeof(_194 = move _195 as *const i8 (Pointer(MutToConstPointer))) = *const {l402} i8
    // 2324: prefix.as_mut_ptr():   l402 = UNIQUE | NON_NULL, (empty)
    lglseterm(
        (*res).lgl,
        // 2326: (*res).lgl: typeof(_199) = *mut {l298} LGL
        // 2326: (*res).lgl:   l298 = UNIQUE | NON_NULL, (empty)
        Some(term_shim as unsafe extern "C" fn(*mut libc::c_void) -> libc::c_int),
        // 2327: Some(term as un ... _int): typeof(_200) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l300} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 2327: Some(term as un ... _int):   l300 = UNIQUE | NON_NULL, (empty)
        // 2327: term as unsafe  ... c_int: typeof(_201) = fn(*mut {l302} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
        // 2327: term as unsafe  ... c_int:   l302 = UNIQUE | NON_NULL, (empty)
        // 2327: Some(term as un ... _int): typeof(_200 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void) -> i32>::Some(move _201)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l404} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 2327: Some(term as un ... _int):   l404 = UNIQUE | NON_NULL, (empty)
        // 2327: term: typeof(_201 = term as unsafe extern "C" fn(*mut libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*mut {l403} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
        // 2327: term:   l403 = UNIQUE | NON_NULL, (empty)
        0 as *mut libc::c_void,
        // 2328: 0 as *mut libc: ... _void: typeof(_202) = *mut {l304} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2328: 0 as *mut libc: ... _void:   l304 = UNIQUE | NON_NULL, (empty)
        // 2328: 0 as *mut libc: ... _void: typeof(_202 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l405} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2328: 0 as *mut libc: ... _void:   l405 = UNIQUE | NON_NULL, (empty)
    );
    lglsetmsglock(
        (*res).lgl,
        // 2331: (*res).lgl: typeof(_204) = *mut {l307} LGL
        // 2331: (*res).lgl:   l307 = UNIQUE | NON_NULL, (empty)
        ::core::mem::transmute::<
        // 2332: ::core::mem::tr ... sg))): typeof(_205) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l309} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> ()>
        // 2332: ::core::mem::tr ... sg))):   l309 = UNIQUE | NON_NULL, (empty)
            Option<unsafe extern "C" fn() -> ()>,
            Option<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
        >(Some(::core::mem::transmute::<
            unsafe extern "C" fn() -> (),
            unsafe extern "C" fn() -> (),
        >(lockmsg))),
        ::core::mem::transmute::<
        // 2339: ::core::mem::tr ... sg))): typeof(_209) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l314} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> ()>
        // 2339: ::core::mem::tr ... sg))):   l314 = UNIQUE | NON_NULL, (empty)
            Option<unsafe extern "C" fn() -> ()>,
            Option<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
        >(Some(::core::mem::transmute::<
            unsafe extern "C" fn() -> (),
            unsafe extern "C" fn() -> (),
        >(unlockmsg))),
        0 as *mut libc::c_void,
        // 2346: 0 as *mut libc: ... _void: typeof(_213) = *mut {l319} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2346: 0 as *mut libc: ... _void:   l319 = UNIQUE | NON_NULL, (empty)
        // 2346: 0 as *mut libc: ... _void: typeof(_213 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l406} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2346: 0 as *mut libc: ... _void:   l406 = UNIQUE | NON_NULL, (empty)
    );
    if noparallel == 0 {
    // 2348: noparallel: typeof(_217) = *mut {l324} i32
    // 2348: noparallel:   l324 = UNIQUE | NON_NULL, (empty)
        lglsetconsumeunits(
            (*res).lgl,
            // 2350: (*res).lgl: typeof(_219) = *mut {l327} LGL
            // 2350: (*res).lgl:   l327 = UNIQUE | NON_NULL, (empty)
            Some(
            // 2351: Some( consumeun ... (), ): typeof(_220) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l329} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l330} *mut {l331} i32, *mut {l332} *mut {l333} i32) -> ()>
            // 2351: Some( consumeun ... (), ):   l329 = UNIQUE | NON_NULL, (empty)
            // 2351: Some( consumeun ... (), ):   l330 = UNIQUE | NON_NULL, (empty)
            // 2351: Some( consumeun ... (), ):   l331 = UNIQUE | NON_NULL, (empty)
            // 2351: Some( consumeun ... (), ):   l332 = UNIQUE | NON_NULL, (empty)
            // 2351: Some( consumeun ... (), ):   l333 = UNIQUE | NON_NULL, (empty)
            // 2351: Some( consumeun ... (), ): typeof(_220 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void, *mut *mut i32, *mut *mut i32)>::Some(move _221)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l412} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l413} *mut {l414} i32, *mut {l415} *mut {l416} i32) -> ()>
            // 2351: Some( consumeun ... (), ):   l412 = UNIQUE | NON_NULL, (empty)
            // 2351: Some( consumeun ... (), ):   l413 = UNIQUE | NON_NULL, (empty)
            // 2351: Some( consumeun ... (), ):   l414 = UNIQUE | NON_NULL, (empty)
            // 2351: Some( consumeun ... (), ):   l415 = UNIQUE | NON_NULL, (empty)
            // 2351: Some( consumeun ... (), ):   l416 = UNIQUE | NON_NULL, (empty)
                consumeunits
                // 2352: consumeunits as ... -> (): typeof(_221) = fn(*mut {l335} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l336} *mut {l337} i32, *mut {l338} *mut {l339} i32) -> ()
                // 2352: consumeunits as ... -> ():   l335 = UNIQUE | NON_NULL, (empty)
                // 2352: consumeunits as ... -> ():   l336 = UNIQUE | NON_NULL, (empty)
                // 2352: consumeunits as ... -> ():   l337 = UNIQUE | NON_NULL, (empty)
                // 2352: consumeunits as ... -> ():   l338 = UNIQUE | NON_NULL, (empty)
                // 2352: consumeunits as ... -> ():   l339 = UNIQUE | NON_NULL, (empty)
                // 2352: consumeunits: typeof(_221 = consumeunits as unsafe extern "C" fn(*mut libc::c_void, *mut *mut i32, *mut *mut i32) (Pointer(ReifyFnPointer))) = fn(*mut {l407} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l408} *mut {l409} i32, *mut {l410} *mut {l411} i32) -> ()
                // 2352: consumeunits:   l407 = UNIQUE | NON_NULL, (empty)
                // 2352: consumeunits:   l408 = UNIQUE | NON_NULL, (empty)
                // 2352: consumeunits:   l409 = UNIQUE | NON_NULL, (empty)
                // 2352: consumeunits:   l410 = UNIQUE | NON_NULL, (empty)
                // 2352: consumeunits:   l411 = UNIQUE | NON_NULL, (empty)
                    as unsafe extern "C" fn(
                        *mut libc::c_void,
                        *mut *mut libc::c_int,
                        *mut *mut libc::c_int,
                    ) -> (),
            ),
            &mut (*res).consumed as *mut libc::c_int as *mut libc::c_void,
            // 2359: &mut (*res).con ... _void: typeof(_222) = *mut {l341} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2359: &mut (*res).con ... _void:   l341 = UNIQUE | NON_NULL, (empty)
            // 2359: &mut (*res).con ... c_int: typeof(_223) = *mut {l343} i32
            // 2359: &mut (*res).con ... c_int:   l343 = UNIQUE | NON_NULL, (empty)
            // 2359: &mut (*res).consumed: typeof(_224) = &mut {l345} i32
            // 2359: &mut (*res).consumed:   l345 = UNIQUE | NON_NULL, (empty)
            // 2359: &mut (*res).consumed: typeof(_224 = &mut ((*_5).6: i32)) = &mut {l417} i32
            // 2359: &mut (*res).consumed:   l417 = UNIQUE | NON_NULL, (empty)
            // 2359: &mut (*res).consumed: typeof(_223 = &raw mut (*_224)) = *mut {l418} i32
            // 2359: &mut (*res).consumed:   l418 = UNIQUE | NON_NULL, (empty)
            // 2359: &mut (*res).con ... _void: typeof(_222 = move _223 as *mut libc::c_void (Misc)) = *mut {l419} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2359: &mut (*res).con ... _void:   l419 = UNIQUE | NON_NULL, (empty)
        );
    }
    cubemsg(res, b"opened cube\0" as *const u8 as *const libc::c_char);
    // 2362: res: typeof(_226) = *mut {l348} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2362: res:   l348 = UNIQUE | NON_NULL, (empty)
    // 2362: b"opened cube\0 ... _char: typeof(_227) = *const {l350} i8
    // 2362: b"opened cube\0 ... _char:   l350 = UNIQUE | NON_NULL, (empty)
    // 2362: b"opened cube\0 ... st u8: typeof(_228) = *const {l352} u8
    // 2362: b"opened cube\0 ... st u8:   l352 = UNIQUE | NON_NULL, (empty)
    // 2362: b"opened cube\0": typeof(_229) = *const {l354} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2362: b"opened cube\0":   l354 = UNIQUE | NON_NULL, (empty)
    // 2362: b"opened cube\0": typeof(_230) = & {l356} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2362: b"opened cube\0":   l356 = UNIQUE | NON_NULL, FIXED
    // 2362: b"opened cube\0": typeof(_229 = &raw const (*_230)) = *const {l421} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2362: b"opened cube\0":   l421 = UNIQUE | NON_NULL, (empty)
    // 2362: b"opened cube\0 ... _char: typeof(_227 = move _228 as *const i8 (Misc)) = *const {l423} i8
    // 2362: b"opened cube\0 ... _char:   l423 = UNIQUE | NON_NULL, (empty)
    // 2362: b"opened cube\0 ... st u8: typeof(_228 = move _229 as *const u8 (Pointer(ArrayToPointer))) = *const {l422} u8
    // 2362: b"opened cube\0 ... st u8:   l422 = UNIQUE | NON_NULL, (empty)
    // 2362: b"opened cube\0": typeof(_230 = const b"opened cube\x00") = & {l420} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2362: b"opened cube\0":   l420 = UNIQUE | NON_NULL, (empty)
    added += 1;
    // 2363: added: typeof(_231) = *mut {l358} i32
    // 2363: added:   l358 = UNIQUE | NON_NULL, (empty)
    added;
    // 2364: added: typeof(_234) = *mut {l362} i32
    // 2364: added:   l362 = UNIQUE | NON_NULL, (empty)
    return res;
}
unsafe extern "C" fn updstats(mut node: *mut Node) {
// 2367: mut node: typeof(_1) = *mut {g47} DefId(0:777 ~ treengeling[2d04]::Node)
// 2367: mut node:   g47 = UNIQUE | NON_NULL, FIXED
    let mut ptr: *mut libc::c_double = 0 as *mut libc::c_double;
    // 2368: mut ptr: typeof(_2) = *mut {l2} f64
    // 2368: mut ptr:   l2 = UNIQUE | NON_NULL, (empty)
    // 2368: 0 as *mut libc: ... ouble: typeof(_2 = const 0_usize as *mut f64 (PointerFromExposedAddress)) = *mut {l61} f64
    // 2368: 0 as *mut libc: ... ouble:   l61 = UNIQUE | NON_NULL, (empty)
    let mut now: libc::c_double = 0.;
    let mut delta: libc::c_double = 0.;
    let mut lgl: *mut LGL = (*node).lgl;
    // 2371: mut lgl: typeof(_5) = *mut {l6} LGL
    // 2371: mut lgl:   l6 = UNIQUE | NON_NULL, (empty)
    lockstats();
    decisions += lglgetdecs(lgl) - (*node).decisions;
    // 2373: lgl: typeof(_9) = *mut {l11} LGL
    // 2373: lgl:   l11 = UNIQUE | NON_NULL, (empty)
    // 2373: decisions: typeof(_12) = *mut {l15} i64
    // 2373: decisions:   l15 = UNIQUE | NON_NULL, (empty)
    conflicts += lglgetconfs(lgl) - (*node).conflicts;
    // 2374: lgl: typeof(_16) = *mut {l20} LGL
    // 2374: lgl:   l20 = UNIQUE | NON_NULL, (empty)
    // 2374: conflicts: typeof(_19) = *mut {l24} i64
    // 2374: conflicts:   l24 = UNIQUE | NON_NULL, (empty)
    propagations += lglgetprops(lgl) - (*node).propagations;
    // 2375: lgl: typeof(_23) = *mut {l29} LGL
    // 2375: lgl:   l29 = UNIQUE | NON_NULL, (empty)
    // 2375: propagations: typeof(_26) = *mut {l33} i64
    // 2375: propagations:   l33 = UNIQUE | NON_NULL, (empty)
    if started != 0 && {
    // 2376: started: typeof(_32) = *mut {l40} i32
    // 2376: started:   l40 = UNIQUE | NON_NULL, (empty)
        ptr = startimeptr;
        // 2377: startimeptr: typeof(_34) = *mut {l43} f64
        // 2377: startimeptr:   l43 = UNIQUE | NON_NULL, (empty)
        // 2377: startimeptr: typeof(_35) = *mut {l45} *mut {l46} f64
        // 2377: startimeptr:   l45 = UNIQUE | NON_NULL, (empty)
        // 2377: startimeptr:   l46 = UNIQUE | NON_NULL, (empty)
        !ptr.is_null()
        // 2378: ptr: typeof(_37) = *mut {l49} f64
        // 2378: ptr:   l49 = UNIQUE | NON_NULL, (empty)
    } {
        now = currentime();
        delta = now - startime;
        // 2381: startime: typeof(_41) = *mut {l54} f64
        // 2381: startime:   l54 = UNIQUE | NON_NULL, (empty)
        startime = now;
        // 2382: startime: typeof(_43) = *mut {l57} f64
        // 2382: startime:   l57 = UNIQUE | NON_NULL, (empty)
        *ptr += delta;
    }
    unlockstats();
}
unsafe extern "C" fn delnode(mut node: *mut Node) {
// 2387: mut node: typeof(_1) = *mut {g48} DefId(0:777 ~ treengeling[2d04]::Node)
// 2387: mut node:   g48 = UNIQUE | NON_NULL, FIXED
    let mut last: *mut Node = 0 as *mut Node;
    // 2388: mut last: typeof(_2) = *mut {l2} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2388: mut last:   l2 = UNIQUE | NON_NULL, (empty)
    // 2388: 0 as *mut Node: typeof(_2 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l148} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2388: 0 as *mut Node:   l148 = UNIQUE | NON_NULL, (empty)
    let mut lastpos: libc::c_int = 0;
    let mut lgl: *mut LGL = 0 as *mut LGL;
    // 2390: mut lgl: typeof(_4) = *mut {l5} LGL
    // 2390: mut lgl:   l5 = UNIQUE | NON_NULL, (empty)
    // 2390: 0 as *mut LGL: typeof(_4 = const 0_usize as *mut LGL (PointerFromExposedAddress)) = *mut {l149} LGL
    // 2390: 0 as *mut LGL:   l149 = UNIQUE | NON_NULL, (empty)
    cubemsg(node, b"closed cube\0" as *const u8 as *const libc::c_char);
    // 2391: node: typeof(_6) = *mut {l8} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2391: node:   l8 = UNIQUE | NON_NULL, (empty)
    // 2391: b"closed cube\0 ... _char: typeof(_7) = *const {l10} i8
    // 2391: b"closed cube\0 ... _char:   l10 = UNIQUE | NON_NULL, (empty)
    // 2391: b"closed cube\0 ... st u8: typeof(_8) = *const {l12} u8
    // 2391: b"closed cube\0 ... st u8:   l12 = UNIQUE | NON_NULL, (empty)
    // 2391: b"closed cube\0": typeof(_9) = *const {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2391: b"closed cube\0":   l14 = UNIQUE | NON_NULL, (empty)
    // 2391: b"closed cube\0": typeof(_10) = & {l16} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2391: b"closed cube\0":   l16 = UNIQUE | NON_NULL, FIXED
    // 2391: b"closed cube\0 ... st u8: typeof(_8 = move _9 as *const u8 (Pointer(ArrayToPointer))) = *const {l152} u8
    // 2391: b"closed cube\0 ... st u8:   l152 = UNIQUE | NON_NULL, (empty)
    // 2391: b"closed cube\0": typeof(_9 = &raw const (*_10)) = *const {l151} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2391: b"closed cube\0":   l151 = UNIQUE | NON_NULL, (empty)
    // 2391: b"closed cube\0 ... _char: typeof(_7 = move _8 as *const i8 (Misc)) = *const {l153} i8
    // 2391: b"closed cube\0 ... _char:   l153 = UNIQUE | NON_NULL, (empty)
    // 2391: b"closed cube\0": typeof(_10 = const b"closed cube\x00") = & {l150} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2391: b"closed cube\0":   l150 = UNIQUE | NON_NULL, (empty)
    nmsg(node, b"delete node\0" as *const u8 as *const libc::c_char);
    // 2392: node: typeof(_12) = *mut {l19} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2392: node:   l19 = UNIQUE | NON_NULL, (empty)
    // 2392: b"delete node\0 ... _char: typeof(_13) = *const {l21} i8
    // 2392: b"delete node\0 ... _char:   l21 = UNIQUE | NON_NULL, (empty)
    // 2392: b"delete node\0 ... st u8: typeof(_14) = *const {l23} u8
    // 2392: b"delete node\0 ... st u8:   l23 = UNIQUE | NON_NULL, (empty)
    // 2392: b"delete node\0": typeof(_15) = *const {l25} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2392: b"delete node\0":   l25 = UNIQUE | NON_NULL, (empty)
    // 2392: b"delete node\0": typeof(_16) = & {l27} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2392: b"delete node\0":   l27 = UNIQUE | NON_NULL, FIXED
    // 2392: b"delete node\0 ... st u8: typeof(_14 = move _15 as *const u8 (Pointer(ArrayToPointer))) = *const {l156} u8
    // 2392: b"delete node\0 ... st u8:   l156 = UNIQUE | NON_NULL, (empty)
    // 2392: b"delete node\0 ... _char: typeof(_13 = move _14 as *const i8 (Misc)) = *const {l157} i8
    // 2392: b"delete node\0 ... _char:   l157 = UNIQUE | NON_NULL, (empty)
    // 2392: b"delete node\0": typeof(_15 = &raw const (*_16)) = *const {l155} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2392: b"delete node\0":   l155 = UNIQUE | NON_NULL, (empty)
    // 2392: b"delete node\0": typeof(_16 = const b"delete node\x00") = & {l154} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
    // 2392: b"delete node\0":   l154 = UNIQUE | NON_NULL, (empty)
    locknodes();
    numnodes -= 1;
    // 2394: numnodes: typeof(_18) = *mut {l30} i32
    // 2394: numnodes:   l30 = UNIQUE | NON_NULL, (empty)
    lastpos = numnodes;
    // 2395: numnodes: typeof(_21) = *mut {l34} i32
    // 2395: numnodes:   l34 = UNIQUE | NON_NULL, (empty)
    last = *nodes.offset(lastpos as isize);
    // 2396: *nodes.offset(l ... size): typeof(_22) = *mut {l36} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2396: *nodes.offset(l ... size):   l36 = UNIQUE | NON_NULL, (empty)
    // 2396: nodes.offset(la ... size): typeof(_23) = *mut {l38} *mut {l39} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2396: nodes.offset(la ... size):   l38 = UNIQUE | NON_NULL, (empty)
    // 2396: nodes.offset(la ... size):   l39 = UNIQUE | NON_NULL, (empty)
    // 2396: nodes: typeof(_24) = *mut {l41} *mut {l42} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2396: nodes:   l41 = UNIQUE | NON_NULL, (empty)
    // 2396: nodes:   l42 = UNIQUE | NON_NULL, (empty)
    // 2396: nodes: typeof(_25) = *mut {l44} *mut {l45} *mut {l46} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2396: nodes:   l44 = UNIQUE | NON_NULL, (empty)
    // 2396: nodes:   l45 = UNIQUE | NON_NULL, (empty)
    // 2396: nodes:   l46 = UNIQUE | NON_NULL, (empty)
    if node != last {
    // 2397: node: typeof(_30) = *mut {l52} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2397: node:   l52 = UNIQUE | NON_NULL, (empty)
    // 2397: last: typeof(_31) = *mut {l54} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2397: last:   l54 = UNIQUE | NON_NULL, (empty)
        let ref mut fresh9 = *nodes.offset((*node).pos as isize);
        // 2398: ref mut fresh9: typeof(_32) = &mut {l56} *mut {l57} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2398: ref mut fresh9:   l56 = UNIQUE | NON_NULL, FIXED
        // 2398: ref mut fresh9:   l57 = UNIQUE | NON_NULL, (empty)
        // 2398: nodes.offset((* ... size): typeof(_33) = *mut {l59} *mut {l60} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2398: nodes.offset((* ... size):   l59 = UNIQUE | NON_NULL, (empty)
        // 2398: nodes.offset((* ... size):   l60 = UNIQUE | NON_NULL, (empty)
        // 2398: nodes: typeof(_34) = *mut {l62} *mut {l63} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2398: nodes:   l62 = UNIQUE | NON_NULL, (empty)
        // 2398: nodes:   l63 = UNIQUE | NON_NULL, (empty)
        // 2398: nodes: typeof(_35) = *mut {l65} *mut {l66} *mut {l67} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2398: nodes:   l65 = UNIQUE | NON_NULL, (empty)
        // 2398: nodes:   l66 = UNIQUE | NON_NULL, (empty)
        // 2398: nodes:   l67 = UNIQUE | NON_NULL, (empty)
        // 2398: ref mut fresh9: typeof(_32 = &mut (*_33)) = &mut {l158} *mut {l159} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2398: ref mut fresh9:   l158 = UNIQUE | NON_NULL, (empty)
        // 2398: ref mut fresh9:   l159 = UNIQUE | NON_NULL, (empty)
        *fresh9 = last;
        // 2399: last: typeof(_38) = *mut {l71} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2399: last:   l71 = UNIQUE | NON_NULL, (empty)
        (*last).pos = (*node).pos;
    }
    let ref mut fresh10 = *nodes.offset(lastpos as isize);
    // 2402: ref mut fresh10: typeof(_40) = &mut {l74} *mut {l75} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2402: ref mut fresh10:   l74 = UNIQUE | NON_NULL, FIXED
    // 2402: ref mut fresh10:   l75 = UNIQUE | NON_NULL, (empty)
    // 2402: nodes.offset(la ... size): typeof(_41) = *mut {l77} *mut {l78} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2402: nodes.offset(la ... size):   l77 = UNIQUE | NON_NULL, (empty)
    // 2402: nodes.offset(la ... size):   l78 = UNIQUE | NON_NULL, (empty)
    // 2402: nodes: typeof(_42) = *mut {l80} *mut {l81} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2402: nodes:   l80 = UNIQUE | NON_NULL, (empty)
    // 2402: nodes:   l81 = UNIQUE | NON_NULL, (empty)
    // 2402: nodes: typeof(_43) = *mut {l83} *mut {l84} *mut {l85} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2402: nodes:   l83 = UNIQUE | NON_NULL, (empty)
    // 2402: nodes:   l84 = UNIQUE | NON_NULL, (empty)
    // 2402: nodes:   l85 = UNIQUE | NON_NULL, (empty)
    // 2402: ref mut fresh10: typeof(_40 = &mut (*_41)) = &mut {l160} *mut {l161} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2402: ref mut fresh10:   l160 = UNIQUE | NON_NULL, (empty)
    // 2402: ref mut fresh10:   l161 = UNIQUE | NON_NULL, (empty)
    *fresh10 = 0 as *mut Node;
    // 2403: *fresh10 = 0 as ...  Node: typeof((*_40) = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l162} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2403: *fresh10 = 0 as ...  Node:   l162 = UNIQUE | NON_NULL, (empty)
    unlocknodes();
    lgl = (*node).lgl;
    // 2405: (*node).lgl: typeof(_47) = *mut {l90} LGL
    // 2405: (*node).lgl:   l90 = UNIQUE | NON_NULL, (empty)
    updstats(node);
    // 2406: node: typeof(_49) = *mut {l93} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2406: node:   l93 = UNIQUE | NON_NULL, (empty)
    (*node).lgl = 0 as *mut LGL;
    // 2407: (*node).lgl = 0 ... t LGL: typeof(((*_1).12: *mut LGL) = const 0_usize as *mut LGL (PointerFromExposedAddress)) = *mut {l163} LGL
    // 2407: (*node).lgl = 0 ... t LGL:   l163 = UNIQUE | NON_NULL, (empty)
    if !((*node).cube).is_null() {
    // 2408: ((*node).cube): typeof(_53) = *mut {l98} i32
    // 2408: ((*node).cube):   l98 = UNIQUE | NON_NULL, (empty)
        let mut BYTES: size_t = ((intslen((*node).cube) + 1 as libc::c_int) as libc::c_ulong)
        // 2409: (*node).cube: typeof(_58) = *const {l104} i32
        // 2409: (*node).cube:   l104 = UNIQUE | NON_NULL, (empty)
        // 2409: (*node).cube: typeof(_59) = *mut {l106} i32
        // 2409: (*node).cube:   l106 = UNIQUE | NON_NULL, (empty)
        // 2409: (*node).cube: typeof(_58 = move _59 as *const i32 (Pointer(MutToConstPointer))) = *const {l164} i32
        // 2409: (*node).cube:   l164 = UNIQUE | NON_NULL, (empty)
            .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong);
        decmem(BYTES);
        free((*node).cube as *mut libc::c_void);
        // 2412: (*node).cube as ... _void: typeof(_67) = *mut {l115} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2412: (*node).cube as ... _void:   l115 = UNIQUE | NON_NULL, (empty)
        // 2412: (*node).cube: typeof(_68) = *mut {l117} i32
        // 2412: (*node).cube:   l117 = UNIQUE | NON_NULL, (empty)
        // 2412: (*node).cube as ... _void: typeof(_67 = move _68 as *mut libc::c_void (Misc)) = *mut {l165} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2412: (*node).cube as ... _void:   l165 = UNIQUE | NON_NULL, (empty)
    }
    let mut BYTES_0: size_t = (1 as libc::c_int as libc::c_ulong)
        .wrapping_mul(::core::mem::size_of::<Node>() as libc::c_ulong);
    decmem(BYTES_0);
    free(node as *mut libc::c_void);
    // 2417: node as *mut li ... _void: typeof(_77) = *mut {l127} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2417: node as *mut li ... _void:   l127 = UNIQUE | NON_NULL, (empty)
    // 2417: node: typeof(_78) = *mut {l129} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2417: node:   l129 = UNIQUE | NON_NULL, (empty)
    // 2417: node as *mut li ... _void: typeof(_77 = move _78 as *mut libc::c_void (Misc)) = *mut {l166} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2417: node as *mut li ... _void:   l166 = UNIQUE | NON_NULL, (empty)
    if showstats != 0 {
    // 2418: showstats: typeof(_82) = *mut {l134} i32
    // 2418: showstats:   l134 = UNIQUE | NON_NULL, (empty)
        lglstats(lgl);
        // 2419: lgl: typeof(_84) = *mut {l137} LGL
        // 2419: lgl:   l137 = UNIQUE | NON_NULL, (empty)
    }
    lglrelease(lgl);
    // 2421: lgl: typeof(_86) = *mut {l140} LGL
    // 2421: lgl:   l140 = UNIQUE | NON_NULL, (empty)
    deleted += 1;
    // 2422: deleted: typeof(_87) = *mut {l142} i32
    // 2422: deleted:   l142 = UNIQUE | NON_NULL, (empty)
    deleted;
    // 2423: deleted: typeof(_90) = *mut {l146} i32
    // 2423: deleted:   l146 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn leafmsg(mut leaf: *mut Leaf, mut str: *const libc::c_char) {
// 2425: mut leaf: typeof(_1) = *mut {g49} DefId(0:794 ~ treengeling[2d04]::Leaf)
// 2425: mut leaf:   g49 = (empty), CELL | FIXED
// 2425: mut str: typeof(_2) = *const {g50} i8
// 2425: mut str:   g50 = UNIQUE | NON_NULL, FIXED
    let mut p: *const libc::c_int = 0 as *const libc::c_int;
    // 2426: mut p: typeof(_3) = *const {l3} i32
    // 2426: mut p:   l3 = UNIQUE | NON_NULL, (empty)
    // 2426: 0 as *const lib ... c_int: typeof(_3 = const 0_usize as *const i32 (PointerFromExposedAddress)) = *const {l91} i32
    // 2426: 0 as *const lib ... c_int:   l91 = UNIQUE | NON_NULL, (empty)
    if verbose == 0 {
    // 2427: verbose: typeof(_7) = *mut {l8} i32
    // 2427: verbose:   l8 = UNIQUE | NON_NULL, (empty)
        return;
    }
    lockmsg();
    printf(
        b"c %s leaf %lld clause\0" as *const u8 as *const libc::c_char,
        // 2432: b"c %s leaf %ll ... _char: typeof(_11) = *const {l13} i8
        // 2432: b"c %s leaf %ll ... _char:   l13 = UNIQUE | NON_NULL, (empty)
        // 2432: b"c %s leaf %ll ... st u8: typeof(_12) = *const {l15} u8
        // 2432: b"c %s leaf %ll ... st u8:   l15 = UNIQUE | NON_NULL, (empty)
        // 2432: b"c %s leaf %ll ... se\0": typeof(_13) = *const {l17} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
        // 2432: b"c %s leaf %ll ... se\0":   l17 = UNIQUE | NON_NULL, (empty)
        // 2432: b"c %s leaf %ll ... se\0": typeof(_14) = & {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
        // 2432: b"c %s leaf %ll ... se\0":   l19 = UNIQUE | NON_NULL, FIXED
        // 2432: b"c %s leaf %ll ... _char: typeof(_11 = move _12 as *const i8 (Misc)) = *const {l95} i8
        // 2432: b"c %s leaf %ll ... _char:   l95 = UNIQUE | NON_NULL, (empty)
        // 2432: b"c %s leaf %ll ... st u8: typeof(_12 = move _13 as *const u8 (Pointer(ArrayToPointer))) = *const {l94} u8
        // 2432: b"c %s leaf %ll ... st u8:   l94 = UNIQUE | NON_NULL, (empty)
        // 2432: b"c %s leaf %ll ... se\0": typeof(_13 = &raw const (*_14)) = *const {l93} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
        // 2432: b"c %s leaf %ll ... se\0":   l93 = UNIQUE | NON_NULL, (empty)
        // 2432: b"c %s leaf %ll ... se\0": typeof(_14 = const b"c %s leaf %lld clause\x00") = & {l92} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
        // 2432: b"c %s leaf %ll ... se\0":   l92 = UNIQUE | NON_NULL, (empty)
        str,
        // 2433: str: typeof(_15) = *const {l21} i8
        // 2433: str:   l21 = UNIQUE | NON_NULL, (empty)
        (*leaf).id as libc::c_longlong,
    );
    if !((*leaf).lits).is_null() {
    // 2436: ((*leaf).lits): typeof(_20) = *mut {l27} i32
    // 2436: ((*leaf).lits):   l27 = UNIQUE | NON_NULL, (empty)
        p = (*leaf).lits;
        // 2437: (*leaf).lits: typeof(_21) = *mut {l29} i32
        // 2437: (*leaf).lits:   l29 = UNIQUE | NON_NULL, (empty)
        // 2437: p = (*leaf).lits: typeof(_3 = move _21 as *const i32 (Pointer(MutToConstPointer))) = *const {l96} i32
        // 2437: p = (*leaf).lits:   l96 = UNIQUE | NON_NULL, (empty)
        while *p != 0 {
            printf(b" %d\0" as *const u8 as *const libc::c_char, *p);
            // 2439: b" %d\0" as *co ... _char: typeof(_27) = *const {l36} i8
            // 2439: b" %d\0" as *co ... _char:   l36 = UNIQUE | NON_NULL, (empty)
            // 2439: b" %d\0" as *co ... st u8: typeof(_28) = *const {l38} u8
            // 2439: b" %d\0" as *co ... st u8:   l38 = UNIQUE | NON_NULL, (empty)
            // 2439: b" %d\0": typeof(_29) = *const {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2439: b" %d\0":   l40 = UNIQUE | NON_NULL, (empty)
            // 2439: b" %d\0": typeof(_30) = & {l42} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2439: b" %d\0":   l42 = UNIQUE | NON_NULL, FIXED
            // 2439: b" %d\0": typeof(_30 = const b" %d\x00") = & {l97} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2439: b" %d\0":   l97 = UNIQUE | NON_NULL, (empty)
            // 2439: b" %d\0" as *co ... st u8: typeof(_28 = move _29 as *const u8 (Pointer(ArrayToPointer))) = *const {l99} u8
            // 2439: b" %d\0" as *co ... st u8:   l99 = UNIQUE | NON_NULL, (empty)
            // 2439: b" %d\0": typeof(_29 = &raw const (*_30)) = *const {l98} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 2439: b" %d\0":   l98 = UNIQUE | NON_NULL, (empty)
            // 2439: b" %d\0" as *co ... _char: typeof(_27 = move _28 as *const i8 (Misc)) = *const {l100} i8
            // 2439: b" %d\0" as *co ... _char:   l100 = UNIQUE | NON_NULL, (empty)
            p = p.offset(1);
            // 2440: p.offset(1): typeof(_32) = *const {l45} i32
            // 2440: p.offset(1):   l45 = UNIQUE | NON_NULL, (empty)
            // 2440: p: typeof(_33) = *const {l47} i32
            // 2440: p:   l47 = UNIQUE | NON_NULL, (empty)
            p;
            // 2441: p: typeof(_34) = *const {l49} i32
            // 2441: p:   l49 = UNIQUE | NON_NULL, (empty)
        }
        printf(b" 0\0" as *const u8 as *const libc::c_char);
        // 2443: b" 0\0" as *con ... _char: typeof(_39) = *const {l55} i8
        // 2443: b" 0\0" as *con ... _char:   l55 = UNIQUE | NON_NULL, (empty)
        // 2443: b" 0\0" as *const u8: typeof(_40) = *const {l57} u8
        // 2443: b" 0\0" as *const u8:   l57 = UNIQUE | NON_NULL, (empty)
        // 2443: b" 0\0": typeof(_41) = *const {l59} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 2443: b" 0\0":   l59 = UNIQUE | NON_NULL, (empty)
        // 2443: b" 0\0": typeof(_42) = & {l61} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 2443: b" 0\0":   l61 = UNIQUE | NON_NULL, FIXED
        // 2443: b" 0\0" as *const u8: typeof(_40 = move _41 as *const u8 (Pointer(ArrayToPointer))) = *const {l103} u8
        // 2443: b" 0\0" as *const u8:   l103 = UNIQUE | NON_NULL, (empty)
        // 2443: b" 0\0" as *con ... _char: typeof(_39 = move _40 as *const i8 (Misc)) = *const {l104} i8
        // 2443: b" 0\0" as *con ... _char:   l104 = UNIQUE | NON_NULL, (empty)
        // 2443: b" 0\0": typeof(_41 = &raw const (*_42)) = *const {l102} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 2443: b" 0\0":   l102 = UNIQUE | NON_NULL, (empty)
        // 2443: b" 0\0": typeof(_42 = const b" 0\x00") = & {l101} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 2443: b" 0\0":   l101 = UNIQUE | NON_NULL, (empty)
    } else {
        fputs(
            b" <literals-already-deleted>\0" as *const u8 as *const libc::c_char,
            // 2446: b" <literals-al ... _char: typeof(_44) = *const {l64} i8
            // 2446: b" <literals-al ... _char:   l64 = UNIQUE | NON_NULL, (empty)
            // 2446: b" <literals-al ... st u8: typeof(_45) = *const {l66} u8
            // 2446: b" <literals-al ... st u8:   l66 = UNIQUE | NON_NULL, (empty)
            // 2446: b" <literals-al ... d>\0": typeof(_46) = *const {l68} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 2446: b" <literals-al ... d>\0":   l68 = UNIQUE | NON_NULL, (empty)
            // 2446: b" <literals-al ... d>\0": typeof(_47) = & {l70} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 2446: b" <literals-al ... d>\0":   l70 = UNIQUE | NON_NULL, FIXED
            // 2446: b" <literals-al ... d>\0": typeof(_47 = const b" <literals-already-deleted>\x00") = & {l105} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 2446: b" <literals-al ... d>\0":   l105 = UNIQUE | NON_NULL, (empty)
            // 2446: b" <literals-al ... _char: typeof(_44 = move _45 as *const i8 (Misc)) = *const {l108} i8
            // 2446: b" <literals-al ... _char:   l108 = UNIQUE | NON_NULL, (empty)
            // 2446: b" <literals-al ... d>\0": typeof(_46 = &raw const (*_47)) = *const {l106} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 2446: b" <literals-al ... d>\0":   l106 = UNIQUE | NON_NULL, (empty)
            // 2446: b" <literals-al ... st u8: typeof(_45 = move _46 as *const u8 (Pointer(ArrayToPointer))) = *const {l107} u8
            // 2446: b" <literals-al ... st u8:   l107 = UNIQUE | NON_NULL, (empty)
            stdout,
            // 2447: stdout: typeof(_48) = *mut {l72} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 2447: stdout:   l72 = UNIQUE | NON_NULL, (empty)
            // 2447: stdout: typeof(_49) = *mut {l74} *mut {l75} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 2447: stdout:   l74 = UNIQUE | NON_NULL, (empty)
            // 2447: stdout:   l75 = UNIQUE | NON_NULL, (empty)
        );
    }
    fputc('\n' as i32, stdout);
    // 2450: stdout: typeof(_52) = *mut {l79} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2450: stdout:   l79 = UNIQUE | NON_NULL, (empty)
    // 2450: stdout: typeof(_53) = *mut {l81} *mut {l82} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2450: stdout:   l81 = UNIQUE | NON_NULL, (empty)
    // 2450: stdout:   l82 = UNIQUE | NON_NULL, (empty)
    fflush(stdout);
    // 2451: stdout: typeof(_55) = *mut {l85} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2451: stdout:   l85 = UNIQUE | NON_NULL, (empty)
    // 2451: stdout: typeof(_56) = *mut {l87} *mut {l88} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2451: stdout:   l87 = UNIQUE | NON_NULL, (empty)
    // 2451: stdout:   l88 = UNIQUE | NON_NULL, (empty)
    unlockmsg();
}
unsafe extern "C" fn newleaf(mut node: *mut Node) -> *mut Leaf {
// 2454: *mut Leaf: typeof(_0) = *mut {g52} DefId(0:794 ~ treengeling[2d04]::Leaf)
// 2454: *mut Leaf:   g52 = READ | WRITE | UNIQUE | FREE, FIXED
// 2454: mut node: typeof(_1) = *mut {g51} DefId(0:777 ~ treengeling[2d04]::Node)
// 2454: mut node:   g51 = READ | WRITE | UNIQUE | NON_NULL, FIXED
    let mut p: *mut libc::c_int = 0 as *mut libc::c_int;
    // 2455: mut p: typeof(_3) = *mut {l3} i32
    // 2455: mut p:   l3 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    // 2455: 0 as *mut libc: ... c_int: typeof(_3 = const 0_usize as *mut i32 (PointerFromExposedAddress)) = *mut {l95} i32
    // 2455: 0 as *mut libc: ... c_int:   l95 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    let mut lit: libc::c_int = 0;
    let mut res: *mut Leaf = 0 as *mut Leaf;
    // 2457: mut res: typeof(_5) = *mut {l6} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2457: mut res:   l6 = READ | WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 2457: 0 as *mut Leaf: typeof(_5 = const 0_usize as *mut Leaf (PointerFromExposedAddress)) = *mut {l96} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2457: 0 as *mut Leaf:   l96 = READ | WRITE | UNIQUE | OFFSET_ADD, (empty)
    let mut BYTES: size_t = (1 as libc::c_int as libc::c_ulong)
        .wrapping_mul(::core::mem::size_of::<Leaf>() as libc::c_ulong);
    res = malloc(BYTES) as *mut Leaf;
    // 2460: malloc(BYTES): typeof(_11) = *mut {l13} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2460: malloc(BYTES):   l13 = READ | WRITE | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 2460: res = malloc(BY ...  Leaf: typeof(_5 = move _11 as *mut Leaf (Misc)) = *mut {l97} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2460: res = malloc(BY ...  Leaf:   l97 = READ | WRITE | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    if res.is_null() {
    // 2461: res: typeof(_15) = *mut {l18} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2461: res:   l18 = UNIQUE, (empty)
        err(b"out of memory\0" as *const u8 as *const libc::c_char);
        // 2462: b"out of memory ... _char: typeof(_18) = *const {l22} i8
        // 2462: b"out of memory ... _char:   l22 = UNIQUE | NON_NULL, (empty)
        // 2462: b"out of memory ... st u8: typeof(_19) = *const {l24} u8
        // 2462: b"out of memory ... st u8:   l24 = UNIQUE | NON_NULL, (empty)
        // 2462: b"out of memory\0": typeof(_20) = *const {l26} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2462: b"out of memory\0":   l26 = UNIQUE | NON_NULL, (empty)
        // 2462: b"out of memory\0": typeof(_21) = & {l28} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2462: b"out of memory\0":   l28 = UNIQUE | NON_NULL, FIXED
        // 2462: b"out of memory ... _char: typeof(_18 = move _19 as *const i8 (Misc)) = *const {l101} i8
        // 2462: b"out of memory ... _char:   l101 = UNIQUE | NON_NULL, (empty)
        // 2462: b"out of memory ... st u8: typeof(_19 = move _20 as *const u8 (Pointer(ArrayToPointer))) = *const {l100} u8
        // 2462: b"out of memory ... st u8:   l100 = UNIQUE | NON_NULL, (empty)
        // 2462: b"out of memory\0": typeof(_20 = &raw const (*_21)) = *const {l99} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2462: b"out of memory\0":   l99 = UNIQUE | NON_NULL, (empty)
        // 2462: b"out of memory\0": typeof(_21 = const b"out of memory\x00") = & {l98} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2462: b"out of memory\0":   l98 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        exit(1 as libc::c_int);
    }
    memset(res as *mut libc::c_void, 0 as libc::c_int, BYTES);
    // 2465: memset(res as * ... YTES): typeof(_24) = *mut {l32} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2465: memset(res as * ... YTES):   l32 = UNIQUE | NON_NULL, (empty)
    // 2465: res as *mut lib ... _void: typeof(_25) = *mut {l34} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2465: res as *mut lib ... _void:   l34 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 2465: res: typeof(_26) = *mut {l36} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2465: res:   l36 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 2465: res as *mut lib ... _void: typeof(_25 = move _26 as *mut libc::c_void (Misc)) = *mut {l102} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2465: res as *mut lib ... _void:   l102 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    incmem(BYTES);
    leafs.num += 1;
    // 2467: leafs: typeof(_31) = *mut {l42} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2467: leafs:   l42 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    if leafs.num > leafs.max {
    // 2468: leafs: typeof(_36) = *mut {l48} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2468: leafs:   l48 = READ | UNIQUE | NON_NULL, (empty)
    // 2468: leafs: typeof(_38) = *mut {l51} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2468: leafs:   l51 = READ | UNIQUE | NON_NULL, (empty)
        leafs.max = leafs.num;
        // 2469: leafs: typeof(_40) = *mut {l54} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
        // 2469: leafs:   l54 = READ | UNIQUE | NON_NULL, (empty)
        // 2469: leafs: typeof(_41) = *mut {l56} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
        // 2469: leafs:   l56 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    }
    leafs.count += 1;
    // 2471: leafs: typeof(_42) = *mut {l58} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2471: leafs:   l58 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    (*res).id = leafs.count;
    // 2472: leafs: typeof(_45) = *mut {l62} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2472: leafs:   l62 = READ | UNIQUE | NON_NULL, (empty)
    (*res).lits = (*node).cube;
    // 2473: (*node).cube: typeof(_46) = *mut {l64} i32
    // 2473: (*node).cube:   l64 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    (*node).cube = 0 as *mut libc::c_int;
    // 2474: (*node).cube =  ... c_int: typeof(((*_1).11: *mut i32) = const 0_usize as *mut i32 (PointerFromExposedAddress)) = *mut {l103} i32
    // 2474: (*node).cube =  ... c_int:   l103 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    p = (*res).lits;
    // 2475: (*res).lits: typeof(_47) = *mut {l66} i32
    // 2475: (*res).lits:   l66 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    loop {
        lit = *p;
        if !(lit != 0) {
            break;
        }
        *p = -lit;
        p = p.offset(1);
        // 2482: p.offset(1): typeof(_58) = *mut {l78} i32
        // 2482: p.offset(1):   l78 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
        // 2482: p: typeof(_59) = *mut {l80} i32
        // 2482: p:   l80 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
        p;
        // 2483: p: typeof(_60) = *mut {l82} i32
        // 2483: p:   l82 = UNIQUE, (empty)
    }
    leafmsg(res, b"new\0" as *const u8 as *const libc::c_char);
    // 2485: res: typeof(_62) = *mut {l85} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2485: res:   l85 = UNIQUE, (empty)
    // 2485: b"new\0" as *co ... _char: typeof(_63) = *const {l87} i8
    // 2485: b"new\0" as *co ... _char:   l87 = UNIQUE | NON_NULL, (empty)
    // 2485: b"new\0" as *co ... st u8: typeof(_64) = *const {l89} u8
    // 2485: b"new\0" as *co ... st u8:   l89 = UNIQUE | NON_NULL, (empty)
    // 2485: b"new\0": typeof(_65) = *const {l91} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 2485: b"new\0":   l91 = UNIQUE | NON_NULL, (empty)
    // 2485: b"new\0": typeof(_66) = & {l93} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 2485: b"new\0":   l93 = UNIQUE | NON_NULL, FIXED
    // 2485: b"new\0": typeof(_66 = const b"new\x00") = & {l104} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 2485: b"new\0":   l104 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 2485: b"new\0" as *co ... st u8: typeof(_64 = move _65 as *const u8 (Pointer(ArrayToPointer))) = *const {l106} u8
    // 2485: b"new\0" as *co ... st u8:   l106 = UNIQUE | NON_NULL, (empty)
    // 2485: b"new\0": typeof(_65 = &raw const (*_66)) = *const {l105} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 2485: b"new\0":   l105 = UNIQUE | NON_NULL, (empty)
    // 2485: b"new\0" as *co ... _char: typeof(_63 = move _64 as *const i8 (Misc)) = *const {l107} i8
    // 2485: b"new\0" as *co ... _char:   l107 = UNIQUE | NON_NULL, (empty)
    return res;
}
unsafe extern "C" fn deleaf(mut leaf: *mut Leaf) {
// 2488: mut leaf: typeof(_1) = *mut {g53} DefId(0:794 ~ treengeling[2d04]::Leaf)
// 2488: mut leaf:   g53 = READ | FREE, CELL | FIXED
    leafmsg(leaf, b"delete\0" as *const u8 as *const libc::c_char);
    // 2489: leaf: typeof(_3) = *mut {l3} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2489: leaf:   l3 = (empty), (empty)
    // 2489: b"delete\0" as  ... _char: typeof(_4) = *const {l5} i8
    // 2489: b"delete\0" as  ... _char:   l5 = UNIQUE | NON_NULL, (empty)
    // 2489: b"delete\0" as  ... st u8: typeof(_5) = *const {l7} u8
    // 2489: b"delete\0" as  ... st u8:   l7 = UNIQUE | NON_NULL, (empty)
    // 2489: b"delete\0": typeof(_6) = *const {l9} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 2489: b"delete\0":   l9 = UNIQUE | NON_NULL, (empty)
    // 2489: b"delete\0": typeof(_7) = & {l11} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 2489: b"delete\0":   l11 = UNIQUE | NON_NULL, FIXED
    // 2489: b"delete\0": typeof(_6 = &raw const (*_7)) = *const {l56} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 2489: b"delete\0":   l56 = UNIQUE | NON_NULL, (empty)
    // 2489: b"delete\0" as  ... _char: typeof(_4 = move _5 as *const i8 (Misc)) = *const {l58} i8
    // 2489: b"delete\0" as  ... _char:   l58 = UNIQUE | NON_NULL, (empty)
    // 2489: b"delete\0" as  ... st u8: typeof(_5 = move _6 as *const u8 (Pointer(ArrayToPointer))) = *const {l57} u8
    // 2489: b"delete\0" as  ... st u8:   l57 = UNIQUE | NON_NULL, (empty)
    // 2489: b"delete\0": typeof(_7 = const b"delete\x00") = & {l55} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 2489: b"delete\0":   l55 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    if !((*leaf).lits).is_null() {
    // 2490: ((*leaf).lits): typeof(_11) = *mut {l16} i32
    // 2490: ((*leaf).lits):   l16 = UNIQUE, (empty)
        let mut BYTES: size_t = ((intslen((*leaf).lits) + 1 as libc::c_int) as libc::c_ulong)
        // 2491: (*leaf).lits: typeof(_16) = *const {l22} i32
        // 2491: (*leaf).lits:   l22 = UNIQUE, (empty)
        // 2491: (*leaf).lits: typeof(_17) = *mut {l24} i32
        // 2491: (*leaf).lits:   l24 = UNIQUE, (empty)
        // 2491: (*leaf).lits: typeof(_16 = move _17 as *const i32 (Pointer(MutToConstPointer))) = *const {l59} i32
        // 2491: (*leaf).lits:   l59 = UNIQUE, (empty)
            .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong);
        decmem(BYTES);
        free((*leaf).lits as *mut libc::c_void);
        // 2494: (*leaf).lits as ... _void: typeof(_25) = *mut {l33} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2494: (*leaf).lits as ... _void:   l33 = UNIQUE | FREE, (empty)
        // 2494: (*leaf).lits: typeof(_26) = *mut {l35} i32
        // 2494: (*leaf).lits:   l35 = UNIQUE | FREE, (empty)
        // 2494: (*leaf).lits as ... _void: typeof(_25 = move _26 as *mut libc::c_void (Misc)) = *mut {l60} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2494: (*leaf).lits as ... _void:   l60 = UNIQUE | FREE, (empty)
    }
    let mut BYTES_0: size_t = (1 as libc::c_int as libc::c_ulong)
        .wrapping_mul(::core::mem::size_of::<Leaf>() as libc::c_ulong);
    decmem(BYTES_0);
    free(leaf as *mut libc::c_void);
    // 2499: leaf as *mut li ... _void: typeof(_35) = *mut {l45} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2499: leaf as *mut li ... _void:   l45 = FREE, (empty)
    // 2499: leaf: typeof(_36) = *mut {l47} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2499: leaf:   l47 = FREE, (empty)
    // 2499: leaf as *mut li ... _void: typeof(_35 = move _36 as *mut libc::c_void (Misc)) = *mut {l61} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2499: leaf as *mut li ... _void:   l61 = FREE, (empty)
    leafs.count -= 1;
    // 2500: leafs: typeof(_37) = *mut {l49} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2500: leafs:   l49 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    leafs.count;
    // 2501: leafs: typeof(_40) = *mut {l53} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2501: leafs:   l53 = READ | UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn enqleaf<'h0,'h1,'h2,'h3>(mut leaf: core::option::Option<&'h0 mut (Leaf<'h1,'h2,'h3>)>) {
// 2503: mut leaf: typeof(_1) = *mut {g54} DefId(0:794 ~ treengeling[2d04]::Leaf)
// 2503: mut leaf:   g54 = READ | WRITE | UNIQUE | FREE, (empty)
    leafmsg(core::ptr::addr_of!(*(leaf).as_deref().unwrap()).cast_mut(), core::ptr::addr_of!(*(&*(b"enqueue\0") as *const u8 as *const libc::c_char)));
    // 2504: leaf: typeof(_3) = *mut {l3} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2504: leaf:   l3 = UNIQUE, (empty)
    // 2504: b"enqueue\0" as ... _char: typeof(_4) = *const {l5} i8
    // 2504: b"enqueue\0" as ... _char:   l5 = UNIQUE | NON_NULL, (empty)
    // 2504: b"enqueue\0" as ... st u8: typeof(_5) = *const {l7} u8
    // 2504: b"enqueue\0" as ... st u8:   l7 = UNIQUE | NON_NULL, (empty)
    // 2504: b"enqueue\0": typeof(_6) = *const {l9} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
    // 2504: b"enqueue\0":   l9 = UNIQUE | NON_NULL, (empty)
    // 2504: b"enqueue\0": typeof(_7) = & {l11} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
    // 2504: b"enqueue\0":   l11 = UNIQUE | NON_NULL, FIXED
    // 2504: b"enqueue\0": typeof(_6 = &raw const (*_7)) = *const {l47} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
    // 2504: b"enqueue\0":   l47 = UNIQUE | NON_NULL, (empty)
    // 2504: b"enqueue\0" as ... st u8: typeof(_5 = move _6 as *const u8 (Pointer(ArrayToPointer))) = *const {l48} u8
    // 2504: b"enqueue\0" as ... st u8:   l48 = UNIQUE | NON_NULL, (empty)
    // 2504: b"enqueue\0": typeof(_7 = const b"enqueue\x00") = & {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
    // 2504: b"enqueue\0":   l46 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 2504: b"enqueue\0" as ... _char: typeof(_4 = move _5 as *const i8 (Misc)) = *const {l49} i8
    // 2504: b"enqueue\0" as ... _char:   l49 = UNIQUE | NON_NULL, (empty)
    lockleafs();
    if !std::option::Option::Some(&*((&*(leafs).last)).cast_const()).is_none() {
    // 2506: (leafs.last): typeof(_12) = *mut {l17} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2506: (leafs.last):   l17 = UNIQUE, (empty)
    // 2506: leafs: typeof(_13) = *mut {l19} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2506: leafs:   l19 = READ | UNIQUE | NON_NULL, (empty)
        (*leafs.last).next = core::ptr::addr_of_mut!(*(leaf).as_deref_mut().unwrap());
        // 2507: leaf: typeof(_14) = *mut {l21} DefId(0:794 ~ treengeling[2d04]::Leaf)
        // 2507: leaf:   l21 = READ | WRITE | UNIQUE | FREE, (empty)
        // 2507: leafs: typeof(_15) = *mut {l23} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
        // 2507: leafs:   l23 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    } else {
        leafs.first = core::ptr::addr_of_mut!(*(leaf).as_deref_mut().unwrap());
        // 2509: leaf: typeof(_16) = *mut {l25} DefId(0:794 ~ treengeling[2d04]::Leaf)
        // 2509: leaf:   l25 = READ | WRITE | UNIQUE | FREE, (empty)
        // 2509: leafs: typeof(_17) = *mut {l27} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
        // 2509: leafs:   l27 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    }
    (*(leaf).as_deref_mut().unwrap()).prev = core::ptr::addr_of!(*std::option::Option::Some(&*(&*(leafs).last).cast_const()).unwrap()).cast_mut();
    // 2511: leafs.last: typeof(_18) = *mut {l29} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2511: leafs.last:   l29 = UNIQUE, (empty)
    // 2511: leafs: typeof(_19) = *mut {l31} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2511: leafs:   l31 = READ | UNIQUE | NON_NULL, (empty)
    leafs.last = core::ptr::addr_of_mut!(*(leaf).as_deref_mut().unwrap());
    // 2512: leaf: typeof(_20) = *mut {l33} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2512: leaf:   l33 = READ | WRITE | UNIQUE, (empty)
    // 2512: leafs: typeof(_21) = *mut {l35} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2512: leafs:   l35 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    unlockleafs();
    lockparleafs();
    parallel.produced.leafs += 1;
    // 2515: parallel: typeof(_24) = *mut {l39} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2515: parallel:   l39 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    &*(parallel).produced.leafs;
    // 2516: parallel: typeof(_27) = *mut {l43} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2516: parallel:   l43 = READ | UNIQUE | NON_NULL, (empty)
    unlockparleafs();
}
unsafe extern "C" fn deqleaf() -> *mut Leaf {
// 2519: *mut Leaf: typeof(_0) = *mut {g55} DefId(0:794 ~ treengeling[2d04]::Leaf)
// 2519: *mut Leaf:   g55 = READ | WRITE | FREE, CELL | FIXED
    let mut res: *mut Leaf = 0 as *mut Leaf;
    // 2520: mut res: typeof(_2) = *mut {l2} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2520: mut res:   l2 = READ | WRITE | FREE, CELL
    // 2520: 0 as *mut Leaf: typeof(_2 = const 0_usize as *mut Leaf (PointerFromExposedAddress)) = *mut {l42} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2520: 0 as *mut Leaf:   l42 = READ | WRITE | UNIQUE | FREE, (empty)
    lockleafs();
    res = leafs.first;
    // 2522: leafs.first: typeof(_4) = *mut {l5} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2522: leafs.first:   l5 = READ | WRITE | FREE, CELL
    // 2522: leafs: typeof(_5) = *mut {l7} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
    // 2522: leafs:   l7 = READ | UNIQUE | NON_NULL, (empty)
    if !res.is_null() {
    // 2523: res: typeof(_9) = *mut {l12} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2523: res:   l12 = (empty), CELL
        if !((*res).next).is_null() {
        // 2524: ((*res).next): typeof(_13) = *mut {l17} DefId(0:794 ~ treengeling[2d04]::Leaf)
        // 2524: ((*res).next):   l17 = UNIQUE, (empty)
            (*(*res).next).prev = 0 as *mut Leaf;
            // 2525: (*(*res).next). ...  Leaf: typeof(((*((*_2).1: *mut Leaf)).2: *mut Leaf) = const 0_usize as *mut Leaf (PointerFromExposedAddress)) = *mut {l43} DefId(0:794 ~ treengeling[2d04]::Leaf)
            // 2525: (*(*res).next). ...  Leaf:   l43 = UNIQUE, (empty)
        } else {
            leafs.last = 0 as *mut Leaf;
            // 2527: leafs: typeof(_14) = *mut {l19} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
            // 2527: leafs:   l19 = READ | WRITE | UNIQUE | NON_NULL, (empty)
            // 2527: leafs.last = 0  ...  Leaf: typeof(((*_14).4: *mut Leaf) = const 0_usize as *mut Leaf (PointerFromExposedAddress)) = *mut {l44} DefId(0:794 ~ treengeling[2d04]::Leaf)
            // 2527: leafs.last = 0  ...  Leaf:   l44 = READ | WRITE | UNIQUE, (empty)
        }
        leafs.first = (*res).next;
        // 2529: (*res).next: typeof(_15) = *mut {l21} DefId(0:794 ~ treengeling[2d04]::Leaf)
        // 2529: (*res).next:   l21 = READ | WRITE | UNIQUE | FREE, (empty)
        // 2529: leafs: typeof(_16) = *mut {l23} DefId(0:863 ~ treengeling[2d04]::C2RustUnnamed_6)
        // 2529: leafs:   l23 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    }
    unlockleafs();
    if !res.is_null() {
    // 2532: res: typeof(_21) = *mut {l29} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2532: res:   l29 = (empty), CELL
        leafmsg(res, b"dequeue\0" as *const u8 as *const libc::c_char);
        // 2533: res: typeof(_23) = *mut {l32} DefId(0:794 ~ treengeling[2d04]::Leaf)
        // 2533: res:   l32 = (empty), CELL
        // 2533: b"dequeue\0" as ... _char: typeof(_24) = *const {l34} i8
        // 2533: b"dequeue\0" as ... _char:   l34 = UNIQUE | NON_NULL, (empty)
        // 2533: b"dequeue\0" as ... st u8: typeof(_25) = *const {l36} u8
        // 2533: b"dequeue\0" as ... st u8:   l36 = UNIQUE | NON_NULL, (empty)
        // 2533: b"dequeue\0": typeof(_26) = *const {l38} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2533: b"dequeue\0":   l38 = UNIQUE | NON_NULL, (empty)
        // 2533: b"dequeue\0": typeof(_27) = & {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2533: b"dequeue\0":   l40 = UNIQUE | NON_NULL, FIXED
        // 2533: b"dequeue\0": typeof(_27 = const b"dequeue\x00") = & {l45} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2533: b"dequeue\0":   l45 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 2533: b"dequeue\0": typeof(_26 = &raw const (*_27)) = *const {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 2533: b"dequeue\0":   l46 = UNIQUE | NON_NULL, (empty)
        // 2533: b"dequeue\0" as ... st u8: typeof(_25 = move _26 as *const u8 (Pointer(ArrayToPointer))) = *const {l47} u8
        // 2533: b"dequeue\0" as ... st u8:   l47 = UNIQUE | NON_NULL, (empty)
        // 2533: b"dequeue\0" as ... _char: typeof(_24 = move _25 as *const i8 (Misc)) = *const {l48} i8
        // 2533: b"dequeue\0" as ... _char:   l48 = UNIQUE | NON_NULL, (empty)
    }
    return res;
}
unsafe extern "C" fn enqnewleafromnode<'h0,'h1,'h2>(mut node: &'h0 mut (Node<'h1,'h2>)) {
// 2537: mut node: typeof(_1) = *mut {g56} DefId(0:777 ~ treengeling[2d04]::Node)
// 2537: mut node:   g56 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    enqleaf(std::option::Option::Some(&mut *(newleaf(core::ptr::addr_of_mut!(*(node))))));
    // 2538: newleaf(node): typeof(_3) = *mut {l3} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2538: newleaf(node):   l3 = READ | WRITE | UNIQUE | FREE, (empty)
    // 2538: node: typeof(_4) = *mut {l5} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2538: node:   l5 = READ | WRITE | UNIQUE | NON_NULL, (empty)
}
unsafe fn enqnewleafromnode_shim(arg0: *mut Node) {
    {
    let safe_arg0 = &mut *arg0;
    let safe_result = enqnewleafromnode(safe_arg0);
    let result = safe_result;
    result
}
}

static mut clausetoconsume: *mut libc::c_int = 0 as *const libc::c_int as *mut libc::c_int;
unsafe extern "C" fn consumecls(
    mut voidptr: *mut libc::c_void,
    // 2542: mut voidptr: typeof(_1) = *mut {g57} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2542: mut voidptr:   g57 = UNIQUE | NON_NULL, FIXED
    mut cptr: *mut *mut libc::c_int,
    // 2543: mut cptr: typeof(_2) = *mut {g58} *mut {g59} i32
    // 2543: mut cptr:   g58 = READ | WRITE | UNIQUE | NON_NULL, FIXED
    // 2543: mut cptr:   g59 = UNIQUE, FIXED
    mut glueptr: *mut libc::c_int,
    // 2544: mut glueptr: typeof(_3) = *mut {g60} i32
    // 2544: mut glueptr:   g60 = READ | WRITE | UNIQUE | NON_NULL, FIXED
) {
    let mut leaf: *mut Leaf = deqleaf();
    // 2546: mut leaf: typeof(_4) = *mut {l4} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2546: mut leaf:   l4 = READ | WRITE | FREE, CELL
    if !leaf.is_null() {
    // 2547: leaf: typeof(_8) = *mut {l9} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 2547: leaf:   l9 = (empty), CELL
        if !clausetoconsume.is_null() {
        // 2548: clausetoconsume: typeof(_12) = *mut {l14} i32
        // 2548: clausetoconsume:   l14 = UNIQUE, (empty)
        // 2548: clausetoconsume: typeof(_13) = *mut {l16} *mut {g340} i32
        // 2548: clausetoconsume:   l16 = READ | UNIQUE | NON_NULL, (empty)
        // 2548: clausetoconsume:   g340 = UNIQUE | FREE, (empty)
            let mut BYTES: size_t = ((intslen(clausetoconsume) + 1 as libc::c_int)
            // 2549: clausetoconsume: typeof(_18) = *const {l22} i32
            // 2549: clausetoconsume:   l22 = UNIQUE, (empty)
            // 2549: clausetoconsume: typeof(_19) = *mut {l24} i32
            // 2549: clausetoconsume:   l24 = UNIQUE, (empty)
            // 2549: clausetoconsume: typeof(_20) = *mut {l26} *mut {g340} i32
            // 2549: clausetoconsume:   l26 = READ | UNIQUE | NON_NULL, (empty)
            // 2549: clausetoconsume:   g340 = UNIQUE | FREE, (empty)
            // 2549: clausetoconsume: typeof(_18 = move _19 as *const i32 (Pointer(MutToConstPointer))) = *const {l59} i32
            // 2549: clausetoconsume:   l59 = UNIQUE, (empty)
                as libc::c_ulong)
                .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong);
            decmem(BYTES);
            free(clausetoconsume as *mut libc::c_void);
            // 2553: clausetoconsume ... _void: typeof(_28) = *mut {l35} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2553: clausetoconsume ... _void:   l35 = UNIQUE | FREE, (empty)
            // 2553: clausetoconsume: typeof(_29) = *mut {l37} i32
            // 2553: clausetoconsume:   l37 = UNIQUE | FREE, (empty)
            // 2553: clausetoconsume: typeof(_30) = *mut {l39} *mut {g340} i32
            // 2553: clausetoconsume:   l39 = READ | UNIQUE | NON_NULL, (empty)
            // 2553: clausetoconsume:   g340 = UNIQUE | FREE, (empty)
            // 2553: clausetoconsume ... _void: typeof(_28 = move _29 as *mut libc::c_void (Misc)) = *mut {l60} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 2553: clausetoconsume ... _void:   l60 = UNIQUE | FREE, (empty)
        }
        clausetoconsume = (*leaf).lits;
        // 2555: (*leaf).lits: typeof(_31) = *mut {l41} i32
        // 2555: (*leaf).lits:   l41 = UNIQUE | FREE, (empty)
        // 2555: clausetoconsume: typeof(_32) = *mut {l43} *mut {g340} i32
        // 2555: clausetoconsume:   l43 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        // 2555: clausetoconsume:   g340 = UNIQUE | FREE, (empty)
        (*leaf).lits = 0 as *mut libc::c_int;
        // 2556: (*leaf).lits =  ... c_int: typeof(((*_4).3: *mut i32) = const 0_usize as *mut i32 (PointerFromExposedAddress)) = *mut {l61} i32
        // 2556: (*leaf).lits =  ... c_int:   l61 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE, (empty)
        *cptr = clausetoconsume;
        // 2557: clausetoconsume: typeof(_33) = *mut {l45} i32
        // 2557: clausetoconsume:   l45 = UNIQUE, (empty)
        // 2557: clausetoconsume: typeof(_34) = *mut {l47} *mut {g340} i32
        // 2557: clausetoconsume:   l47 = READ | UNIQUE | NON_NULL, (empty)
        // 2557: clausetoconsume:   g340 = UNIQUE | FREE, (empty)
        *glueptr = 0 as libc::c_int;
        deleaf(leaf);
        // 2559: leaf: typeof(_37) = *mut {l51} DefId(0:794 ~ treengeling[2d04]::Leaf)
        // 2559: leaf:   l51 = READ | FREE, CELL
        parallel.consumed.leafs += 1;
        // 2560: parallel: typeof(_38) = *mut {l53} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2560: parallel:   l53 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        parallel.consumed.leafs;
        // 2561: parallel: typeof(_41) = *mut {l57} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2561: parallel:   l57 = READ | UNIQUE | NON_NULL, (empty)
    } else {
        *cptr = 0 as *mut libc::c_int;
        // 2563: *cptr = 0 as *m ... c_int: typeof((*_2) = const 0_usize as *mut i32 (PointerFromExposedAddress)) = *mut {l62} i32
        // 2563: *cptr = 0 as *m ... c_int:   l62 = UNIQUE, (empty)
    };
}
unsafe extern "C" fn runparallel(mut dummy: *mut libc::c_void) -> *mut libc::c_void {
// 2566: *mut libc::c_void: typeof(_0) = *mut {g62} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 2566: *mut libc::c_void:   g62 = UNIQUE | NON_NULL, FIXED
// 2566: mut dummy: typeof(_1) = *mut {g61} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 2566: mut dummy:   g61 = UNIQUE | NON_NULL, FIXED
    let mut res: libc::c_int = 0;
    res = lglsat(parallel.lgl);
    // 2568: parallel.lgl: typeof(_5) = *mut {l5} LGL
    // 2568: parallel.lgl:   l5 = UNIQUE | NON_NULL, (empty)
    // 2568: parallel: typeof(_6) = *mut {l7} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2568: parallel:   l7 = UNIQUE | NON_NULL, (empty)
    if res != 0 {
        vrb(
            b"parallel solver search result %d\0" as *const u8 as *const libc::c_char,
            // 2571: b"parallel solv ... _char: typeof(_11) = *const {l13} i8
            // 2571: b"parallel solv ... _char:   l13 = UNIQUE | NON_NULL, (empty)
            // 2571: b"parallel solv ... st u8: typeof(_12) = *const {l15} u8
            // 2571: b"parallel solv ... st u8:   l15 = UNIQUE | NON_NULL, (empty)
            // 2571: b"parallel solv ... %d\0": typeof(_13) = *const {l17} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 2571: b"parallel solv ... %d\0":   l17 = UNIQUE | NON_NULL, (empty)
            // 2571: b"parallel solv ... %d\0": typeof(_14) = & {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 2571: b"parallel solv ... %d\0":   l19 = UNIQUE | NON_NULL, FIXED
            // 2571: b"parallel solv ... _char: typeof(_11 = move _12 as *const i8 (Misc)) = *const {l35} i8
            // 2571: b"parallel solv ... _char:   l35 = UNIQUE | NON_NULL, (empty)
            // 2571: b"parallel solv ... %d\0": typeof(_14 = const b"parallel solver search result %d\x00") = & {l32} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 2571: b"parallel solv ... %d\0":   l32 = UNIQUE | NON_NULL, (empty)
            // 2571: b"parallel solv ... st u8: typeof(_12 = move _13 as *const u8 (Pointer(ArrayToPointer))) = *const {l34} u8
            // 2571: b"parallel solv ... st u8:   l34 = UNIQUE | NON_NULL, (empty)
            // 2571: b"parallel solv ... %d\0": typeof(_13 = &raw const (*_14)) = *const {l33} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 2571: b"parallel solv ... %d\0":   l33 = UNIQUE | NON_NULL, (empty)
            res,
        );
        lockdone();
        parallel.res = res;
        // 2575: parallel: typeof(_18) = *mut {l24} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2575: parallel:   l24 = UNIQUE | NON_NULL, (empty)
        done = parallel.res;
        // 2576: parallel: typeof(_20) = *mut {l27} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2576: parallel:   l27 = UNIQUE | NON_NULL, (empty)
        // 2576: done: typeof(_21) = *mut {l29} i32
        // 2576: done:   l29 = UNIQUE | NON_NULL, (empty)
        unlockdone();
    }
    return dummy;
}
unsafe extern "C" fn startparallel(mut lgl: *mut LGL) {
// 2581: mut lgl: typeof(_1) = *mut {g63} LGL
// 2581: mut lgl:   g63 = UNIQUE | NON_NULL, FIXED
    let mut prefix: [libc::c_char; 80] = [0; 80];
    msg(
        b"cloning and starting %s additional parallel solver instance\0" as *const u8
        // 2584: b"cloning and s ... _char: typeof(_4) = *const {l4} i8
        // 2584: b"cloning and s ... _char:   l4 = UNIQUE | NON_NULL, (empty)
        // 2584: b"cloning and s ... st u8: typeof(_5) = *const {l6} u8
        // 2584: b"cloning and s ... st u8:   l6 = UNIQUE | NON_NULL, (empty)
        // 2584: b"cloning and s ... ce\0": typeof(_6) = *const {l8} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 2584: b"cloning and s ... ce\0":   l8 = UNIQUE | NON_NULL, (empty)
        // 2584: b"cloning and s ... ce\0": typeof(_7) = & {l10} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 2584: b"cloning and s ... ce\0":   l10 = UNIQUE | NON_NULL, FIXED
        // 2584: b"cloning and s ... st u8: typeof(_5 = move _6 as *const u8 (Pointer(ArrayToPointer))) = *const {l359} u8
        // 2584: b"cloning and s ... st u8:   l359 = UNIQUE | NON_NULL, (empty)
        // 2584: b"cloning and s ... ce\0": typeof(_6 = &raw const (*_7)) = *const {l358} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 2584: b"cloning and s ... ce\0":   l358 = UNIQUE | NON_NULL, (empty)
        // 2584: b"cloning and s ... ce\0": typeof(_7 = const b"cloning and starting %s additional parallel solver instance\x00") = & {l357} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 2584: b"cloning and s ... ce\0":   l357 = UNIQUE | NON_NULL, (empty)
        // 2584: b"cloning and s ... _char: typeof(_4 = move _5 as *const i8 (Misc)) = *const {l360} i8
        // 2584: b"cloning and s ... _char:   l360 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        if nparallel != 0 {
        // 2586: if nparallel != ... har }: typeof(_8) = *const {l12} i8
        // 2586: if nparallel != ... har }:   l12 = UNIQUE | NON_NULL, (empty)
        // 2586: nparallel: typeof(_11) = *mut {l16} i32
        // 2586: nparallel:   l16 = UNIQUE | NON_NULL, (empty)
            b"second\0" as *const u8 as *const libc::c_char
            // 2587: b"second\0" as  ... st u8: typeof(_12) = *const {l18} u8
            // 2587: b"second\0" as  ... st u8:   l18 = UNIQUE | NON_NULL, (empty)
            // 2587: b"second\0": typeof(_13) = *const {l20} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 2587: b"second\0":   l20 = UNIQUE | NON_NULL, (empty)
            // 2587: b"second\0": typeof(_14) = & {l22} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 2587: b"second\0":   l22 = UNIQUE | NON_NULL, FIXED
            // 2587: b"second\0" as  ... st u8: typeof(_12 = move _13 as *const u8 (Pointer(ArrayToPointer))) = *const {l363} u8
            // 2587: b"second\0" as  ... st u8:   l363 = UNIQUE | NON_NULL, (empty)
            // 2587: b"second\0": typeof(_14 = const b"second\x00") = & {l361} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 2587: b"second\0":   l361 = UNIQUE | NON_NULL, (empty)
            // 2587: b"second\0": typeof(_13 = &raw const (*_14)) = *const {l362} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 2587: b"second\0":   l362 = UNIQUE | NON_NULL, (empty)
            // 2587: b"second\0" as  ... _char: typeof(_8 = move _12 as *const i8 (Misc)) = *const {l364} i8
            // 2587: b"second\0" as  ... _char:   l364 = UNIQUE | NON_NULL, (empty)
        } else {
            b"first\0" as *const u8 as *const libc::c_char
            // 2589: b"first\0" as * ... st u8: typeof(_15) = *const {l24} u8
            // 2589: b"first\0" as * ... st u8:   l24 = UNIQUE | NON_NULL, (empty)
            // 2589: b"first\0": typeof(_16) = *const {l26} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 2589: b"first\0":   l26 = UNIQUE | NON_NULL, (empty)
            // 2589: b"first\0": typeof(_17) = & {l28} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 2589: b"first\0":   l28 = UNIQUE | NON_NULL, FIXED
            // 2589: b"first\0": typeof(_17 = const b"first\x00") = & {l365} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 2589: b"first\0":   l365 = UNIQUE | NON_NULL, (empty)
            // 2589: b"first\0" as * ... st u8: typeof(_15 = move _16 as *const u8 (Pointer(ArrayToPointer))) = *const {l367} u8
            // 2589: b"first\0" as * ... st u8:   l367 = UNIQUE | NON_NULL, (empty)
            // 2589: b"first\0" as * ... _char: typeof(_8 = move _15 as *const i8 (Misc)) = *const {l368} i8
            // 2589: b"first\0" as * ... _char:   l368 = UNIQUE | NON_NULL, (empty)
            // 2589: b"first\0": typeof(_16 = &raw const (*_17)) = *const {l366} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 2589: b"first\0":   l366 = UNIQUE | NON_NULL, (empty)
        },
    );
    nparallel += 1;
    // 2592: nparallel: typeof(_18) = *mut {l30} i32
    // 2592: nparallel:   l30 = UNIQUE | NON_NULL, (empty)
    nparallel;
    // 2593: nparallel: typeof(_21) = *mut {l34} i32
    // 2593: nparallel:   l34 = UNIQUE | NON_NULL, (empty)
    let mut BYTES: size_t = (nvars as libc::c_ulong)
    // 2594: nvars: typeof(_25) = *mut {l39} i32
    // 2594: nvars:   l39 = UNIQUE | NON_NULL, (empty)
        .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong);
    parallel.units = malloc(BYTES) as *mut libc::c_int;
    // 2596: malloc(BYTES): typeof(_28) = *mut {l43} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2596: malloc(BYTES):   l43 = UNIQUE | NON_NULL, (empty)
    // 2596: parallel: typeof(_30) = *mut {l46} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2596: parallel:   l46 = UNIQUE | NON_NULL, (empty)
    // 2596: parallel.units  ... c_int: typeof(((*_30).7: *mut i32) = move _28 as *mut i32 (Misc)) = *mut {l369} i32
    // 2596: parallel.units  ... c_int:   l369 = UNIQUE | NON_NULL, (empty)
    if (parallel.units).is_null() {
    // 2597: (parallel.units): typeof(_33) = *mut {l50} i32
    // 2597: (parallel.units):   l50 = UNIQUE | NON_NULL, (empty)
    // 2597: parallel: typeof(_34) = *mut {l52} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2597: parallel:   l52 = UNIQUE | NON_NULL, (empty)
        err(b"out of memory\0" as *const u8 as *const libc::c_char);
        // 2598: b"out of memory ... _char: typeof(_37) = *const {l56} i8
        // 2598: b"out of memory ... _char:   l56 = UNIQUE | NON_NULL, (empty)
        // 2598: b"out of memory ... st u8: typeof(_38) = *const {l58} u8
        // 2598: b"out of memory ... st u8:   l58 = UNIQUE | NON_NULL, (empty)
        // 2598: b"out of memory\0": typeof(_39) = *const {l60} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2598: b"out of memory\0":   l60 = UNIQUE | NON_NULL, (empty)
        // 2598: b"out of memory\0": typeof(_40) = & {l62} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2598: b"out of memory\0":   l62 = UNIQUE | NON_NULL, FIXED
        // 2598: b"out of memory\0": typeof(_40 = const b"out of memory\x00") = & {l370} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2598: b"out of memory\0":   l370 = UNIQUE | NON_NULL, (empty)
        // 2598: b"out of memory ... _char: typeof(_37 = move _38 as *const i8 (Misc)) = *const {l373} i8
        // 2598: b"out of memory ... _char:   l373 = UNIQUE | NON_NULL, (empty)
        // 2598: b"out of memory ... st u8: typeof(_38 = move _39 as *const u8 (Pointer(ArrayToPointer))) = *const {l372} u8
        // 2598: b"out of memory ... st u8:   l372 = UNIQUE | NON_NULL, (empty)
        // 2598: b"out of memory\0": typeof(_39 = &raw const (*_40)) = *const {l371} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2598: b"out of memory\0":   l371 = UNIQUE | NON_NULL, (empty)
        exit(1 as libc::c_int);
    }
    memset(parallel.units as *mut libc::c_void, 0 as libc::c_int, BYTES);
    // 2601: memset(parallel ... YTES): typeof(_43) = *mut {l66} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2601: memset(parallel ... YTES):   l66 = UNIQUE | NON_NULL, (empty)
    // 2601: parallel.units  ... _void: typeof(_44) = *mut {l68} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2601: parallel.units  ... _void:   l68 = UNIQUE | NON_NULL, (empty)
    // 2601: parallel.units: typeof(_45) = *mut {l70} i32
    // 2601: parallel.units:   l70 = UNIQUE | NON_NULL, (empty)
    // 2601: parallel: typeof(_46) = *mut {l72} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2601: parallel:   l72 = UNIQUE | NON_NULL, (empty)
    // 2601: parallel.units  ... _void: typeof(_44 = move _45 as *mut libc::c_void (Misc)) = *mut {l374} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2601: parallel.units  ... _void:   l374 = UNIQUE | NON_NULL, (empty)
    incmem(BYTES);
    parallel.lgl = lglclone(lgl);
    // 2603: lglclone(lgl): typeof(_51) = *mut {l78} LGL
    // 2603: lglclone(lgl):   l78 = UNIQUE | NON_NULL, (empty)
    // 2603: lgl: typeof(_52) = *mut {l80} LGL
    // 2603: lgl:   l80 = UNIQUE | NON_NULL, (empty)
    // 2603: parallel: typeof(_53) = *mut {l82} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2603: parallel:   l82 = UNIQUE | NON_NULL, (empty)
    sprintf(
        prefix.as_mut_ptr(),
        // 2605: prefix.as_mut_ptr(): typeof(_55) = *mut {l85} i8
        // 2605: prefix.as_mut_ptr():   l85 = UNIQUE | NON_NULL, (empty)
        // 2605: prefix.as_mut_ptr(): typeof(_56) = &mut {l87} [i8]
        // 2605: prefix.as_mut_ptr():   l87 = UNIQUE | NON_NULL, FIXED
        // 2605: prefix.as_mut_ptr(): typeof(_57) = &mut {l89} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
        // 2605: prefix.as_mut_ptr():   l89 = UNIQUE | NON_NULL, (empty)
        // 2605: prefix.as_mut_ptr(): typeof(_57 = &mut _2) = &mut {l375} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
        // 2605: prefix.as_mut_ptr():   l375 = UNIQUE | NON_NULL, (empty)
        // 2605: prefix.as_mut_ptr(): typeof(_56 = move _57 as &mut [i8] (Pointer(Unsize))) = &mut {l376} [i8]
        // 2605: prefix.as_mut_ptr():   l376 = UNIQUE | NON_NULL, FIXED
        b"c (parallel%d) \0" as *const u8 as *const libc::c_char,
        // 2606: b"c (parallel%d ... _char: typeof(_58) = *const {l91} i8
        // 2606: b"c (parallel%d ... _char:   l91 = UNIQUE | NON_NULL, (empty)
        // 2606: b"c (parallel%d ... st u8: typeof(_59) = *const {l93} u8
        // 2606: b"c (parallel%d ... st u8:   l93 = UNIQUE | NON_NULL, (empty)
        // 2606: b"c (parallel%d) \0": typeof(_60) = *const {l95} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000010)) }]
        // 2606: b"c (parallel%d) \0":   l95 = UNIQUE | NON_NULL, (empty)
        // 2606: b"c (parallel%d) \0": typeof(_61) = & {l97} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000010)) }]
        // 2606: b"c (parallel%d) \0":   l97 = UNIQUE | NON_NULL, FIXED
        // 2606: b"c (parallel%d ... _char: typeof(_58 = move _59 as *const i8 (Misc)) = *const {l380} i8
        // 2606: b"c (parallel%d ... _char:   l380 = UNIQUE | NON_NULL, (empty)
        // 2606: b"c (parallel%d) \0": typeof(_60 = &raw const (*_61)) = *const {l378} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000010)) }]
        // 2606: b"c (parallel%d) \0":   l378 = UNIQUE | NON_NULL, (empty)
        // 2606: b"c (parallel%d ... st u8: typeof(_59 = move _60 as *const u8 (Pointer(ArrayToPointer))) = *const {l379} u8
        // 2606: b"c (parallel%d ... st u8:   l379 = UNIQUE | NON_NULL, (empty)
        // 2606: b"c (parallel%d) \0": typeof(_61 = const b"c (parallel%d) \x00") = & {l377} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000010)) }]
        // 2606: b"c (parallel%d) \0":   l377 = UNIQUE | NON_NULL, (empty)
        nparallel,
        // 2607: nparallel: typeof(_63) = *mut {l100} i32
        // 2607: nparallel:   l100 = UNIQUE | NON_NULL, (empty)
    );
    lglsetprefix(parallel.lgl, prefix.as_mut_ptr());
    // 2609: parallel.lgl: typeof(_65) = *mut {l103} LGL
    // 2609: parallel.lgl:   l103 = UNIQUE | NON_NULL, (empty)
    // 2609: parallel: typeof(_66) = *mut {l105} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2609: parallel:   l105 = UNIQUE | NON_NULL, (empty)
    // 2609: prefix.as_mut_ptr(): typeof(_67) = *const {l107} i8
    // 2609: prefix.as_mut_ptr():   l107 = UNIQUE | NON_NULL, (empty)
    // 2609: prefix.as_mut_ptr(): typeof(_68) = *mut {l109} i8
    // 2609: prefix.as_mut_ptr():   l109 = UNIQUE | NON_NULL, (empty)
    // 2609: prefix.as_mut_ptr(): typeof(_69) = &mut {l111} [i8]
    // 2609: prefix.as_mut_ptr():   l111 = UNIQUE | NON_NULL, FIXED
    // 2609: prefix.as_mut_ptr(): typeof(_70) = &mut {l113} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
    // 2609: prefix.as_mut_ptr():   l113 = UNIQUE | NON_NULL, (empty)
    // 2609: prefix.as_mut_ptr(): typeof(_69 = move _70 as &mut [i8] (Pointer(Unsize))) = &mut {l382} [i8]
    // 2609: prefix.as_mut_ptr():   l382 = UNIQUE | NON_NULL, FIXED
    // 2609: prefix.as_mut_ptr(): typeof(_70 = &mut _2) = &mut {l381} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
    // 2609: prefix.as_mut_ptr():   l381 = UNIQUE | NON_NULL, (empty)
    // 2609: prefix.as_mut_ptr(): typeof(_67 = move _68 as *const i8 (Pointer(MutToConstPointer))) = *const {l383} i8
    // 2609: prefix.as_mut_ptr():   l383 = UNIQUE | NON_NULL, (empty)
    lglsetopt(
        parallel.lgl,
        // 2611: parallel.lgl: typeof(_72) = *mut {l116} LGL
        // 2611: parallel.lgl:   l116 = UNIQUE | NON_NULL, (empty)
        // 2611: parallel: typeof(_73) = *mut {l118} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2611: parallel:   l118 = UNIQUE | NON_NULL, (empty)
        b"locs\0" as *const u8 as *const libc::c_char,
        // 2612: b"locs\0" as *c ... _char: typeof(_74) = *const {l120} i8
        // 2612: b"locs\0" as *c ... _char:   l120 = UNIQUE | NON_NULL, (empty)
        // 2612: b"locs\0" as *c ... st u8: typeof(_75) = *const {l122} u8
        // 2612: b"locs\0" as *c ... st u8:   l122 = UNIQUE | NON_NULL, (empty)
        // 2612: b"locs\0": typeof(_76) = *const {l124} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 2612: b"locs\0":   l124 = UNIQUE | NON_NULL, (empty)
        // 2612: b"locs\0": typeof(_77) = & {l126} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 2612: b"locs\0":   l126 = UNIQUE | NON_NULL, FIXED
        // 2612: b"locs\0": typeof(_77 = const b"locs\x00") = & {l384} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 2612: b"locs\0":   l384 = UNIQUE | NON_NULL, (empty)
        // 2612: b"locs\0" as *c ... st u8: typeof(_75 = move _76 as *const u8 (Pointer(ArrayToPointer))) = *const {l386} u8
        // 2612: b"locs\0" as *c ... st u8:   l386 = UNIQUE | NON_NULL, (empty)
        // 2612: b"locs\0": typeof(_76 = &raw const (*_77)) = *const {l385} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 2612: b"locs\0":   l385 = UNIQUE | NON_NULL, (empty)
        // 2612: b"locs\0" as *c ... _char: typeof(_74 = move _75 as *const i8 (Misc)) = *const {l387} i8
        // 2612: b"locs\0" as *c ... _char:   l387 = UNIQUE | NON_NULL, (empty)
        -(1 as libc::c_int),
    );
    lglsetopt(
        parallel.lgl,
        // 2616: parallel.lgl: typeof(_82) = *mut {l132} LGL
        // 2616: parallel.lgl:   l132 = UNIQUE | NON_NULL, (empty)
        // 2616: parallel: typeof(_83) = *mut {l134} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2616: parallel:   l134 = UNIQUE | NON_NULL, (empty)
        b"locsbanner\0" as *const u8 as *const libc::c_char,
        // 2617: b"locsbanner\0" ... _char: typeof(_84) = *const {l136} i8
        // 2617: b"locsbanner\0" ... _char:   l136 = UNIQUE | NON_NULL, (empty)
        // 2617: b"locsbanner\0" ... st u8: typeof(_85) = *const {l138} u8
        // 2617: b"locsbanner\0" ... st u8:   l138 = UNIQUE | NON_NULL, (empty)
        // 2617: b"locsbanner\0": typeof(_86) = *const {l140} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2617: b"locsbanner\0":   l140 = UNIQUE | NON_NULL, (empty)
        // 2617: b"locsbanner\0": typeof(_87) = & {l142} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2617: b"locsbanner\0":   l142 = UNIQUE | NON_NULL, FIXED
        // 2617: b"locsbanner\0" ... st u8: typeof(_85 = move _86 as *const u8 (Pointer(ArrayToPointer))) = *const {l390} u8
        // 2617: b"locsbanner\0" ... st u8:   l390 = UNIQUE | NON_NULL, (empty)
        // 2617: b"locsbanner\0" ... _char: typeof(_84 = move _85 as *const i8 (Misc)) = *const {l391} i8
        // 2617: b"locsbanner\0" ... _char:   l391 = UNIQUE | NON_NULL, (empty)
        // 2617: b"locsbanner\0": typeof(_86 = &raw const (*_87)) = *const {l389} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2617: b"locsbanner\0":   l389 = UNIQUE | NON_NULL, (empty)
        // 2617: b"locsbanner\0": typeof(_87 = const b"locsbanner\x00") = & {l388} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2617: b"locsbanner\0":   l388 = UNIQUE | NON_NULL, (empty)
        (nparallel == 1 as libc::c_int) as libc::c_int,
        // 2618: nparallel: typeof(_91) = *mut {l147} i32
        // 2618: nparallel:   l147 = UNIQUE | NON_NULL, (empty)
    );
    lglsetopt(
        parallel.lgl,
        // 2621: parallel.lgl: typeof(_94) = *mut {l151} LGL
        // 2621: parallel.lgl:   l151 = UNIQUE | NON_NULL, (empty)
        // 2621: parallel: typeof(_95) = *mut {l153} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2621: parallel:   l153 = UNIQUE | NON_NULL, (empty)
        b"locsmaxeff\0" as *const u8 as *const libc::c_char,
        // 2622: b"locsmaxeff\0" ... _char: typeof(_96) = *const {l155} i8
        // 2622: b"locsmaxeff\0" ... _char:   l155 = UNIQUE | NON_NULL, (empty)
        // 2622: b"locsmaxeff\0" ... st u8: typeof(_97) = *const {l157} u8
        // 2622: b"locsmaxeff\0" ... st u8:   l157 = UNIQUE | NON_NULL, (empty)
        // 2622: b"locsmaxeff\0": typeof(_98) = *const {l159} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2622: b"locsmaxeff\0":   l159 = UNIQUE | NON_NULL, (empty)
        // 2622: b"locsmaxeff\0": typeof(_99) = & {l161} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2622: b"locsmaxeff\0":   l161 = UNIQUE | NON_NULL, FIXED
        // 2622: b"locsmaxeff\0" ... st u8: typeof(_97 = move _98 as *const u8 (Pointer(ArrayToPointer))) = *const {l394} u8
        // 2622: b"locsmaxeff\0" ... st u8:   l394 = UNIQUE | NON_NULL, (empty)
        // 2622: b"locsmaxeff\0": typeof(_98 = &raw const (*_99)) = *const {l393} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2622: b"locsmaxeff\0":   l393 = UNIQUE | NON_NULL, (empty)
        // 2622: b"locsmaxeff\0" ... _char: typeof(_96 = move _97 as *const i8 (Misc)) = *const {l395} i8
        // 2622: b"locsmaxeff\0" ... _char:   l395 = UNIQUE | NON_NULL, (empty)
        // 2622: b"locsmaxeff\0": typeof(_99 = const b"locsmaxeff\x00") = & {l392} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2622: b"locsmaxeff\0":   l392 = UNIQUE | NON_NULL, (empty)
        1000000 as libc::c_int,
    );
    lglsetopt(
        parallel.lgl,
        // 2626: parallel.lgl: typeof(_102) = *mut {l165} LGL
        // 2626: parallel.lgl:   l165 = UNIQUE | NON_NULL, (empty)
        // 2626: parallel: typeof(_103) = *mut {l167} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2626: parallel:   l167 = UNIQUE | NON_NULL, (empty)
        b"locsmineff\0" as *const u8 as *const libc::c_char,
        // 2627: b"locsmineff\0" ... _char: typeof(_104) = *const {l169} i8
        // 2627: b"locsmineff\0" ... _char:   l169 = UNIQUE | NON_NULL, (empty)
        // 2627: b"locsmineff\0" ... st u8: typeof(_105) = *const {l171} u8
        // 2627: b"locsmineff\0" ... st u8:   l171 = UNIQUE | NON_NULL, (empty)
        // 2627: b"locsmineff\0": typeof(_106) = *const {l173} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2627: b"locsmineff\0":   l173 = UNIQUE | NON_NULL, (empty)
        // 2627: b"locsmineff\0": typeof(_107) = & {l175} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2627: b"locsmineff\0":   l175 = UNIQUE | NON_NULL, FIXED
        // 2627: b"locsmineff\0": typeof(_106 = &raw const (*_107)) = *const {l397} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2627: b"locsmineff\0":   l397 = UNIQUE | NON_NULL, (empty)
        // 2627: b"locsmineff\0" ... st u8: typeof(_105 = move _106 as *const u8 (Pointer(ArrayToPointer))) = *const {l398} u8
        // 2627: b"locsmineff\0" ... st u8:   l398 = UNIQUE | NON_NULL, (empty)
        // 2627: b"locsmineff\0" ... _char: typeof(_104 = move _105 as *const i8 (Misc)) = *const {l399} i8
        // 2627: b"locsmineff\0" ... _char:   l399 = UNIQUE | NON_NULL, (empty)
        // 2627: b"locsmineff\0": typeof(_107 = const b"locsmineff\x00") = & {l396} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2627: b"locsmineff\0":   l396 = UNIQUE | NON_NULL, (empty)
        10000 as libc::c_int,
    );
    lglsetopt(
        parallel.lgl,
        // 2631: parallel.lgl: typeof(_110) = *mut {l179} LGL
        // 2631: parallel.lgl:   l179 = UNIQUE | NON_NULL, (empty)
        // 2631: parallel: typeof(_111) = *mut {l181} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2631: parallel:   l181 = UNIQUE | NON_NULL, (empty)
        b"locsreleff\0" as *const u8 as *const libc::c_char,
        // 2632: b"locsreleff\0" ... _char: typeof(_112) = *const {l183} i8
        // 2632: b"locsreleff\0" ... _char:   l183 = UNIQUE | NON_NULL, (empty)
        // 2632: b"locsreleff\0" ... st u8: typeof(_113) = *const {l185} u8
        // 2632: b"locsreleff\0" ... st u8:   l185 = UNIQUE | NON_NULL, (empty)
        // 2632: b"locsreleff\0": typeof(_114) = *const {l187} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2632: b"locsreleff\0":   l187 = UNIQUE | NON_NULL, (empty)
        // 2632: b"locsreleff\0": typeof(_115) = & {l189} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2632: b"locsreleff\0":   l189 = UNIQUE | NON_NULL, FIXED
        // 2632: b"locsreleff\0": typeof(_114 = &raw const (*_115)) = *const {l401} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2632: b"locsreleff\0":   l401 = UNIQUE | NON_NULL, (empty)
        // 2632: b"locsreleff\0" ... st u8: typeof(_113 = move _114 as *const u8 (Pointer(ArrayToPointer))) = *const {l402} u8
        // 2632: b"locsreleff\0" ... st u8:   l402 = UNIQUE | NON_NULL, (empty)
        // 2632: b"locsreleff\0" ... _char: typeof(_112 = move _113 as *const i8 (Misc)) = *const {l403} i8
        // 2632: b"locsreleff\0" ... _char:   l403 = UNIQUE | NON_NULL, (empty)
        // 2632: b"locsreleff\0": typeof(_115 = const b"locsreleff\x00") = & {l400} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 2632: b"locsreleff\0":   l400 = UNIQUE | NON_NULL, (empty)
        20 as libc::c_int,
    );
    lglsetopt(
        parallel.lgl,
        // 2636: parallel.lgl: typeof(_118) = *mut {l193} LGL
        // 2636: parallel.lgl:   l193 = UNIQUE | NON_NULL, (empty)
        // 2636: parallel: typeof(_119) = *mut {l195} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2636: parallel:   l195 = UNIQUE | NON_NULL, (empty)
        b"locsvared\0" as *const u8 as *const libc::c_char,
        // 2637: b"locsvared\0"  ... _char: typeof(_120) = *const {l197} i8
        // 2637: b"locsvared\0"  ... _char:   l197 = UNIQUE | NON_NULL, (empty)
        // 2637: b"locsvared\0"  ... st u8: typeof(_121) = *const {l199} u8
        // 2637: b"locsvared\0"  ... st u8:   l199 = UNIQUE | NON_NULL, (empty)
        // 2637: b"locsvared\0": typeof(_122) = *const {l201} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 2637: b"locsvared\0":   l201 = UNIQUE | NON_NULL, (empty)
        // 2637: b"locsvared\0": typeof(_123) = & {l203} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 2637: b"locsvared\0":   l203 = UNIQUE | NON_NULL, FIXED
        // 2637: b"locsvared\0"  ... st u8: typeof(_121 = move _122 as *const u8 (Pointer(ArrayToPointer))) = *const {l406} u8
        // 2637: b"locsvared\0"  ... st u8:   l406 = UNIQUE | NON_NULL, (empty)
        // 2637: b"locsvared\0": typeof(_122 = &raw const (*_123)) = *const {l405} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 2637: b"locsvared\0":   l405 = UNIQUE | NON_NULL, (empty)
        // 2637: b"locsvared\0": typeof(_123 = const b"locsvared\x00") = & {l404} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 2637: b"locsvared\0":   l404 = UNIQUE | NON_NULL, (empty)
        // 2637: b"locsvared\0"  ... _char: typeof(_120 = move _121 as *const i8 (Misc)) = *const {l407} i8
        // 2637: b"locsvared\0"  ... _char:   l407 = UNIQUE | NON_NULL, (empty)
        1000 as libc::c_int,
    );
    lglsetopt(
        parallel.lgl,
        // 2641: parallel.lgl: typeof(_126) = *mut {l207} LGL
        // 2641: parallel.lgl:   l207 = UNIQUE | NON_NULL, (empty)
        // 2641: parallel: typeof(_127) = *mut {l209} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2641: parallel:   l209 = UNIQUE | NON_NULL, (empty)
        b"locswait\0" as *const u8 as *const libc::c_char,
        // 2642: b"locswait\0" a ... _char: typeof(_128) = *const {l211} i8
        // 2642: b"locswait\0" a ... _char:   l211 = UNIQUE | NON_NULL, (empty)
        // 2642: b"locswait\0" a ... st u8: typeof(_129) = *const {l213} u8
        // 2642: b"locswait\0" a ... st u8:   l213 = UNIQUE | NON_NULL, (empty)
        // 2642: b"locswait\0": typeof(_130) = *const {l215} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 2642: b"locswait\0":   l215 = UNIQUE | NON_NULL, (empty)
        // 2642: b"locswait\0": typeof(_131) = & {l217} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 2642: b"locswait\0":   l217 = UNIQUE | NON_NULL, FIXED
        // 2642: b"locswait\0" a ... _char: typeof(_128 = move _129 as *const i8 (Misc)) = *const {l411} i8
        // 2642: b"locswait\0" a ... _char:   l411 = UNIQUE | NON_NULL, (empty)
        // 2642: b"locswait\0": typeof(_131 = const b"locswait\x00") = & {l408} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 2642: b"locswait\0":   l408 = UNIQUE | NON_NULL, (empty)
        // 2642: b"locswait\0": typeof(_130 = &raw const (*_131)) = *const {l409} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 2642: b"locswait\0":   l409 = UNIQUE | NON_NULL, (empty)
        // 2642: b"locswait\0" a ... st u8: typeof(_129 = move _130 as *const u8 (Pointer(ArrayToPointer))) = *const {l410} u8
        // 2642: b"locswait\0" a ... st u8:   l410 = UNIQUE | NON_NULL, (empty)
        0 as libc::c_int,
    );
    lglsetopt(
        parallel.lgl,
        // 2646: parallel.lgl: typeof(_134) = *mut {l221} LGL
        // 2646: parallel.lgl:   l221 = UNIQUE | NON_NULL, (empty)
        // 2646: parallel: typeof(_135) = *mut {l223} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2646: parallel:   l223 = UNIQUE | NON_NULL, (empty)
        b"block\0" as *const u8 as *const libc::c_char,
        // 2647: b"block\0" as * ... _char: typeof(_136) = *const {l225} i8
        // 2647: b"block\0" as * ... _char:   l225 = UNIQUE | NON_NULL, (empty)
        // 2647: b"block\0" as * ... st u8: typeof(_137) = *const {l227} u8
        // 2647: b"block\0" as * ... st u8:   l227 = UNIQUE | NON_NULL, (empty)
        // 2647: b"block\0": typeof(_138) = *const {l229} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 2647: b"block\0":   l229 = UNIQUE | NON_NULL, (empty)
        // 2647: b"block\0": typeof(_139) = & {l231} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 2647: b"block\0":   l231 = UNIQUE | NON_NULL, FIXED
        // 2647: b"block\0": typeof(_138 = &raw const (*_139)) = *const {l413} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 2647: b"block\0":   l413 = UNIQUE | NON_NULL, (empty)
        // 2647: b"block\0": typeof(_139 = const b"block\x00") = & {l412} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
        // 2647: b"block\0":   l412 = UNIQUE | NON_NULL, (empty)
        // 2647: b"block\0" as * ... _char: typeof(_136 = move _137 as *const i8 (Misc)) = *const {l415} i8
        // 2647: b"block\0" as * ... _char:   l415 = UNIQUE | NON_NULL, (empty)
        // 2647: b"block\0" as * ... st u8: typeof(_137 = move _138 as *const u8 (Pointer(ArrayToPointer))) = *const {l414} u8
        // 2647: b"block\0" as * ... st u8:   l414 = UNIQUE | NON_NULL, (empty)
        1 as libc::c_int,
    );
    lglsetopt(
        parallel.lgl,
        // 2651: parallel.lgl: typeof(_142) = *mut {l235} LGL
        // 2651: parallel.lgl:   l235 = UNIQUE | NON_NULL, (empty)
        // 2651: parallel: typeof(_143) = *mut {l237} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2651: parallel:   l237 = UNIQUE | NON_NULL, (empty)
        b"bca\0" as *const u8 as *const libc::c_char,
        // 2652: b"bca\0" as *co ... _char: typeof(_144) = *const {l239} i8
        // 2652: b"bca\0" as *co ... _char:   l239 = UNIQUE | NON_NULL, (empty)
        // 2652: b"bca\0" as *co ... st u8: typeof(_145) = *const {l241} u8
        // 2652: b"bca\0" as *co ... st u8:   l241 = UNIQUE | NON_NULL, (empty)
        // 2652: b"bca\0": typeof(_146) = *const {l243} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 2652: b"bca\0":   l243 = UNIQUE | NON_NULL, (empty)
        // 2652: b"bca\0": typeof(_147) = & {l245} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 2652: b"bca\0":   l245 = UNIQUE | NON_NULL, FIXED
        // 2652: b"bca\0": typeof(_146 = &raw const (*_147)) = *const {l417} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 2652: b"bca\0":   l417 = UNIQUE | NON_NULL, (empty)
        // 2652: b"bca\0" as *co ... st u8: typeof(_145 = move _146 as *const u8 (Pointer(ArrayToPointer))) = *const {l418} u8
        // 2652: b"bca\0" as *co ... st u8:   l418 = UNIQUE | NON_NULL, (empty)
        // 2652: b"bca\0": typeof(_147 = const b"bca\x00") = & {l416} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 2652: b"bca\0":   l416 = UNIQUE | NON_NULL, (empty)
        // 2652: b"bca\0" as *co ... _char: typeof(_144 = move _145 as *const i8 (Misc)) = *const {l419} i8
        // 2652: b"bca\0" as *co ... _char:   l419 = UNIQUE | NON_NULL, (empty)
        0 as libc::c_int,
    );
    lglseterm(
        parallel.lgl,
        // 2656: parallel.lgl: typeof(_150) = *mut {l249} LGL
        // 2656: parallel.lgl:   l249 = UNIQUE | NON_NULL, (empty)
        // 2656: parallel: typeof(_151) = *mut {l251} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2656: parallel:   l251 = UNIQUE | NON_NULL, (empty)
        Some(term_shim as unsafe extern "C" fn(*mut libc::c_void) -> libc::c_int),
        // 2657: Some(term as un ... _int): typeof(_152) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l253} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 2657: Some(term as un ... _int):   l253 = UNIQUE | NON_NULL, (empty)
        // 2657: term as unsafe  ... c_int: typeof(_153) = fn(*mut {l255} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
        // 2657: term as unsafe  ... c_int:   l255 = UNIQUE | NON_NULL, (empty)
        // 2657: term: typeof(_153 = term as unsafe extern "C" fn(*mut libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*mut {l420} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
        // 2657: term:   l420 = UNIQUE | NON_NULL, (empty)
        // 2657: Some(term as un ... _int): typeof(_152 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void) -> i32>::Some(move _153)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l421} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 2657: Some(term as un ... _int):   l421 = UNIQUE | NON_NULL, (empty)
        0 as *mut libc::c_void,
        // 2658: 0 as *mut libc: ... _void: typeof(_154) = *mut {l257} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2658: 0 as *mut libc: ... _void:   l257 = UNIQUE | NON_NULL, (empty)
        // 2658: 0 as *mut libc: ... _void: typeof(_154 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l422} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2658: 0 as *mut libc: ... _void:   l422 = UNIQUE | NON_NULL, (empty)
    );
    lglsetproduceunit(
        parallel.lgl,
        // 2661: parallel.lgl: typeof(_156) = *mut {l260} LGL
        // 2661: parallel.lgl:   l260 = UNIQUE | NON_NULL, (empty)
        // 2661: parallel: typeof(_157) = *mut {l262} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2661: parallel:   l262 = UNIQUE | NON_NULL, (empty)
        Some(produceunit as unsafe extern "C" fn(*mut libc::c_void, libc::c_int) -> ()),
        // 2662: Some(produceuni ... > ()): typeof(_158) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l264} DefId(2:5583 ~ core[480a]::ffi::c_void), i32) -> ()>
        // 2662: Some(produceuni ... > ()):   l264 = UNIQUE | NON_NULL, (empty)
        // 2662: produceunit as  ... -> (): typeof(_159) = fn(*mut {l266} DefId(2:5583 ~ core[480a]::ffi::c_void), i32) -> ()
        // 2662: produceunit as  ... -> ():   l266 = UNIQUE | NON_NULL, (empty)
        // 2662: Some(produceuni ... > ()): typeof(_158 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void, i32)>::Some(move _159)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l424} DefId(2:5583 ~ core[480a]::ffi::c_void), i32) -> ()>
        // 2662: Some(produceuni ... > ()):   l424 = UNIQUE | NON_NULL, (empty)
        // 2662: produceunit: typeof(_159 = produceunit as unsafe extern "C" fn(*mut libc::c_void, i32) (Pointer(ReifyFnPointer))) = fn(*mut {l423} DefId(2:5583 ~ core[480a]::ffi::c_void), i32) -> ()
        // 2662: produceunit:   l423 = UNIQUE | NON_NULL, (empty)
        0 as *mut libc::c_void,
        // 2663: 0 as *mut libc: ... _void: typeof(_160) = *mut {l268} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2663: 0 as *mut libc: ... _void:   l268 = UNIQUE | NON_NULL, (empty)
        // 2663: 0 as *mut libc: ... _void: typeof(_160 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l425} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2663: 0 as *mut libc: ... _void:   l425 = UNIQUE | NON_NULL, (empty)
    );
    lglsetconsumecls(
        parallel.lgl,
        // 2666: parallel.lgl: typeof(_162) = *mut {l271} LGL
        // 2666: parallel.lgl:   l271 = UNIQUE | NON_NULL, (empty)
        // 2666: parallel: typeof(_163) = *mut {l273} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2666: parallel:   l273 = UNIQUE | NON_NULL, (empty)
        Some(
        // 2667: Some( consumecl ... (), ): typeof(_164) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l275} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l276} *mut {l277} i32, *mut {l278} i32) -> ()>
        // 2667: Some( consumecl ... (), ):   l275 = UNIQUE | NON_NULL, (empty)
        // 2667: Some( consumecl ... (), ):   l276 = UNIQUE | NON_NULL, (empty)
        // 2667: Some( consumecl ... (), ):   l277 = UNIQUE | NON_NULL, (empty)
        // 2667: Some( consumecl ... (), ):   l278 = UNIQUE | NON_NULL, (empty)
        // 2667: Some( consumecl ... (), ): typeof(_164 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void, *mut *mut i32, *mut i32)>::Some(move _165)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l430} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l431} *mut {l432} i32, *mut {l433} i32) -> ()>
        // 2667: Some( consumecl ... (), ):   l430 = UNIQUE | NON_NULL, (empty)
        // 2667: Some( consumecl ... (), ):   l431 = UNIQUE | NON_NULL, (empty)
        // 2667: Some( consumecl ... (), ):   l432 = UNIQUE | NON_NULL, (empty)
        // 2667: Some( consumecl ... (), ):   l433 = UNIQUE | NON_NULL, (empty)
            consumecls
            // 2668: consumecls as u ... -> (): typeof(_165) = fn(*mut {l280} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l281} *mut {l282} i32, *mut {l283} i32) -> ()
            // 2668: consumecls as u ... -> ():   l280 = UNIQUE | NON_NULL, (empty)
            // 2668: consumecls as u ... -> ():   l281 = UNIQUE | NON_NULL, (empty)
            // 2668: consumecls as u ... -> ():   l282 = UNIQUE | NON_NULL, (empty)
            // 2668: consumecls as u ... -> ():   l283 = UNIQUE | NON_NULL, (empty)
            // 2668: consumecls: typeof(_165 = consumecls as unsafe extern "C" fn(*mut libc::c_void, *mut *mut i32, *mut i32) (Pointer(ReifyFnPointer))) = fn(*mut {l426} DefId(2:5583 ~ core[480a]::ffi::c_void), *mut {l427} *mut {l428} i32, *mut {l429} i32) -> ()
            // 2668: consumecls:   l426 = UNIQUE | NON_NULL, (empty)
            // 2668: consumecls:   l427 = UNIQUE | NON_NULL, (empty)
            // 2668: consumecls:   l428 = UNIQUE | NON_NULL, (empty)
            // 2668: consumecls:   l429 = UNIQUE | NON_NULL, (empty)
                as unsafe extern "C" fn(
                    *mut libc::c_void,
                    *mut *mut libc::c_int,
                    *mut libc::c_int,
                ) -> (),
        ),
        0 as *mut libc::c_void,
        // 2675: 0 as *mut libc: ... _void: typeof(_166) = *mut {l285} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2675: 0 as *mut libc: ... _void:   l285 = UNIQUE | NON_NULL, (empty)
        // 2675: 0 as *mut libc: ... _void: typeof(_166 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l434} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2675: 0 as *mut libc: ... _void:   l434 = UNIQUE | NON_NULL, (empty)
    );
    lglsetmsglock(
        parallel.lgl,
        // 2678: parallel.lgl: typeof(_168) = *mut {l288} LGL
        // 2678: parallel.lgl:   l288 = UNIQUE | NON_NULL, (empty)
        // 2678: parallel: typeof(_169) = *mut {l290} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2678: parallel:   l290 = UNIQUE | NON_NULL, (empty)
        ::core::mem::transmute::<
        // 2679: ::core::mem::tr ... sg))): typeof(_170) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l292} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> ()>
        // 2679: ::core::mem::tr ... sg))):   l292 = UNIQUE | NON_NULL, (empty)
            Option<unsafe extern "C" fn() -> ()>,
            Option<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
        >(Some(::core::mem::transmute::<
            unsafe extern "C" fn() -> (),
            unsafe extern "C" fn() -> (),
        >(lockmsg))),
        ::core::mem::transmute::<
        // 2686: ::core::mem::tr ... sg))): typeof(_174) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l297} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> ()>
        // 2686: ::core::mem::tr ... sg))):   l297 = UNIQUE | NON_NULL, (empty)
            Option<unsafe extern "C" fn() -> ()>,
            Option<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
        >(Some(::core::mem::transmute::<
            unsafe extern "C" fn() -> (),
            unsafe extern "C" fn() -> (),
        >(unlockmsg))),
        0 as *mut libc::c_void,
        // 2693: 0 as *mut libc: ... _void: typeof(_178) = *mut {l302} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2693: 0 as *mut libc: ... _void:   l302 = UNIQUE | NON_NULL, (empty)
        // 2693: 0 as *mut libc: ... _void: typeof(_178 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l435} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2693: 0 as *mut libc: ... _void:   l435 = UNIQUE | NON_NULL, (empty)
    );
    parallel.decisions = lglgetdecs(parallel.lgl);
    // 2695: parallel.lgl: typeof(_180) = *mut {l305} LGL
    // 2695: parallel.lgl:   l305 = UNIQUE | NON_NULL, (empty)
    // 2695: parallel: typeof(_181) = *mut {l307} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2695: parallel:   l307 = UNIQUE | NON_NULL, (empty)
    // 2695: parallel: typeof(_182) = *mut {l309} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2695: parallel:   l309 = UNIQUE | NON_NULL, (empty)
    parallel.conflicts = lglgetconfs(parallel.lgl);
    // 2696: parallel.lgl: typeof(_184) = *mut {l312} LGL
    // 2696: parallel.lgl:   l312 = UNIQUE | NON_NULL, (empty)
    // 2696: parallel: typeof(_185) = *mut {l314} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2696: parallel:   l314 = UNIQUE | NON_NULL, (empty)
    // 2696: parallel: typeof(_186) = *mut {l316} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2696: parallel:   l316 = UNIQUE | NON_NULL, (empty)
    parallel.propagations = lglgetprops(parallel.lgl);
    // 2697: parallel.lgl: typeof(_188) = *mut {l319} LGL
    // 2697: parallel.lgl:   l319 = UNIQUE | NON_NULL, (empty)
    // 2697: parallel: typeof(_189) = *mut {l321} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2697: parallel:   l321 = UNIQUE | NON_NULL, (empty)
    // 2697: parallel: typeof(_190) = *mut {l323} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2697: parallel:   l323 = UNIQUE | NON_NULL, (empty)
    lockdone();
    stop = 0 as libc::c_int;
    // 2699: stop: typeof(_193) = *mut {l327} i32
    // 2699: stop:   l327 = UNIQUE | NON_NULL, (empty)
    unlockdone();
    if pthread_create(
        &mut parallel.thread,
        // 2702: &mut parallel.thread: typeof(_197) = *mut {l332} u64
        // 2702: &mut parallel.thread:   l332 = UNIQUE | NON_NULL, (empty)
        // 2702: &mut parallel.thread: typeof(_198) = &mut {l334} u64
        // 2702: &mut parallel.thread:   l334 = UNIQUE | NON_NULL, (empty)
        // 2702: parallel: typeof(_199) = *mut {l336} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 2702: parallel:   l336 = UNIQUE | NON_NULL, (empty)
        // 2702: &mut parallel.thread: typeof(_197 = &raw mut (*_198)) = *mut {l437} u64
        // 2702: &mut parallel.thread:   l437 = UNIQUE | NON_NULL, (empty)
        // 2702: &mut parallel.thread: typeof(_198 = &mut ((*_199).8: u64)) = &mut {l436} u64
        // 2702: &mut parallel.thread:   l436 = UNIQUE | NON_NULL, (empty)
        0 as *const pthread_attr_t,
        // 2703: 0 as *const pth ... ttr_t: typeof(_200) = *const {l338} DefId(0:733 ~ treengeling[2d04]::pthread_attr_t)
        // 2703: 0 as *const pth ... ttr_t:   l338 = UNIQUE | NON_NULL, (empty)
        // 2703: 0 as *const pth ... ttr_t: typeof(_200 = const 0_usize as *const pthread_attr_t (PointerFromExposedAddress)) = *const {l438} DefId(0:733 ~ treengeling[2d04]::pthread_attr_t)
        // 2703: 0 as *const pth ... ttr_t:   l438 = UNIQUE | NON_NULL, (empty)
        Some(runparallel as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void),
        // 2704: Some(runparalle ... void): typeof(_201) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l340} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l341} DefId(2:5583 ~ core[480a]::ffi::c_void)>
        // 2704: Some(runparalle ... void):   l340 = UNIQUE | NON_NULL, (empty)
        // 2704: Some(runparalle ... void):   l341 = UNIQUE | NON_NULL, (empty)
        // 2704: runparallel as  ... _void: typeof(_202) = fn(*mut {l343} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l344} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2704: runparallel as  ... _void:   l343 = UNIQUE | NON_NULL, (empty)
        // 2704: runparallel as  ... _void:   l344 = UNIQUE | NON_NULL, (empty)
        // 2704: Some(runparalle ... void): typeof(_201 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>::Some(move _202)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l441} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l442} DefId(2:5583 ~ core[480a]::ffi::c_void)>
        // 2704: Some(runparalle ... void):   l441 = UNIQUE | NON_NULL, (empty)
        // 2704: Some(runparalle ... void):   l442 = UNIQUE | NON_NULL, (empty)
        // 2704: runparallel: typeof(_202 = runparallel as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void (Pointer(ReifyFnPointer))) = fn(*mut {l439} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l440} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2704: runparallel:   l439 = UNIQUE | NON_NULL, (empty)
        // 2704: runparallel:   l440 = UNIQUE | NON_NULL, (empty)
        0 as *mut libc::c_void,
        // 2705: 0 as *mut libc: ... _void: typeof(_203) = *mut {l346} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2705: 0 as *mut libc: ... _void:   l346 = UNIQUE | NON_NULL, (empty)
        // 2705: 0 as *mut libc: ... _void: typeof(_203 = const 0_usize as *mut libc::c_void (PointerFromExposedAddress)) = *mut {l443} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2705: 0 as *mut libc: ... _void:   l443 = UNIQUE | NON_NULL, (empty)
    ) != 0
    {
        err(
            b"failed to create thread for additional parallel solver instance\0" as *const u8
            // 2709: b"failed to cre ... _char: typeof(_205) = *const {l349} i8
            // 2709: b"failed to cre ... _char:   l349 = UNIQUE | NON_NULL, (empty)
            // 2709: b"failed to cre ... st u8: typeof(_206) = *const {l351} u8
            // 2709: b"failed to cre ... st u8:   l351 = UNIQUE | NON_NULL, (empty)
            // 2709: b"failed to cre ... ce\0": typeof(_207) = *const {l353} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000040)) }]
            // 2709: b"failed to cre ... ce\0":   l353 = UNIQUE | NON_NULL, (empty)
            // 2709: b"failed to cre ... ce\0": typeof(_208) = & {l355} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000040)) }]
            // 2709: b"failed to cre ... ce\0":   l355 = UNIQUE | NON_NULL, FIXED
            // 2709: b"failed to cre ... ce\0": typeof(_208 = const b"failed to create thread for additional parallel solver instance\x00") = & {l444} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000040)) }]
            // 2709: b"failed to cre ... ce\0":   l444 = UNIQUE | NON_NULL, (empty)
            // 2709: b"failed to cre ... ce\0": typeof(_207 = &raw const (*_208)) = *const {l445} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000040)) }]
            // 2709: b"failed to cre ... ce\0":   l445 = UNIQUE | NON_NULL, (empty)
            // 2709: b"failed to cre ... st u8: typeof(_206 = move _207 as *const u8 (Pointer(ArrayToPointer))) = *const {l446} u8
            // 2709: b"failed to cre ... st u8:   l446 = UNIQUE | NON_NULL, (empty)
            // 2709: b"failed to cre ... _char: typeof(_205 = move _206 as *const i8 (Misc)) = *const {l447} i8
            // 2709: b"failed to cre ... _char:   l447 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        );
    }
}
unsafe extern "C" fn joinparallel() -> libc::c_int {
    let mut res: libc::c_int = 0;
    lockdone();
    stop = 1 as libc::c_int;
    // 2717: stop: typeof(_5) = *mut {l5} i32
    // 2717: stop:   l5 = UNIQUE | NON_NULL, (empty)
    unlockdone();
    if pthread_join(parallel.thread, 0 as *mut *mut libc::c_void) != 0 {
    // 2719: parallel: typeof(_11) = *mut {l12} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2719: parallel:   l12 = UNIQUE | NON_NULL, (empty)
    // 2719: 0 as *mut *mut  ... _void: typeof(_12) = *mut {l14} *mut {l15} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2719: 0 as *mut *mut  ... _void:   l14 = UNIQUE | NON_NULL, (empty)
    // 2719: 0 as *mut *mut  ... _void:   l15 = UNIQUE | NON_NULL, (empty)
    // 2719: 0 as *mut *mut  ... _void: typeof(_12 = const 0_usize as *mut *mut libc::c_void (PointerFromExposedAddress)) = *mut {l39} *mut {l40} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2719: 0 as *mut *mut  ... _void:   l39 = UNIQUE | NON_NULL, (empty)
    // 2719: 0 as *mut *mut  ... _void:   l40 = UNIQUE | NON_NULL, (empty)
        err(
            b"failed to join additional parallel solver instance thread\0" as *const u8
            // 2721: b"failed to joi ... _char: typeof(_14) = *const {l18} i8
            // 2721: b"failed to joi ... _char:   l18 = UNIQUE | NON_NULL, (empty)
            // 2721: b"failed to joi ... st u8: typeof(_15) = *const {l20} u8
            // 2721: b"failed to joi ... st u8:   l20 = UNIQUE | NON_NULL, (empty)
            // 2721: b"failed to joi ... ad\0": typeof(_16) = *const {l22} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
            // 2721: b"failed to joi ... ad\0":   l22 = UNIQUE | NON_NULL, (empty)
            // 2721: b"failed to joi ... ad\0": typeof(_17) = & {l24} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
            // 2721: b"failed to joi ... ad\0":   l24 = UNIQUE | NON_NULL, FIXED
            // 2721: b"failed to joi ... ad\0": typeof(_16 = &raw const (*_17)) = *const {l42} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
            // 2721: b"failed to joi ... ad\0":   l42 = UNIQUE | NON_NULL, (empty)
            // 2721: b"failed to joi ... _char: typeof(_14 = move _15 as *const i8 (Misc)) = *const {l44} i8
            // 2721: b"failed to joi ... _char:   l44 = UNIQUE | NON_NULL, (empty)
            // 2721: b"failed to joi ... st u8: typeof(_15 = move _16 as *const u8 (Pointer(ArrayToPointer))) = *const {l43} u8
            // 2721: b"failed to joi ... st u8:   l43 = UNIQUE | NON_NULL, (empty)
            // 2721: b"failed to joi ... ad\0": typeof(_17 = const b"failed to join additional parallel solver instance thread\x00") = & {l41} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
            // 2721: b"failed to joi ... ad\0":   l41 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        );
    }
    res = parallel.res;
    // 2725: parallel: typeof(_19) = *mut {l27} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2725: parallel:   l27 = UNIQUE | NON_NULL, (empty)
    vrb(
        b"joined parallel solver instance with result %d\0" as *const u8 as *const libc::c_char,
        // 2727: b"joined parall ... _char: typeof(_21) = *const {l30} i8
        // 2727: b"joined parall ... _char:   l30 = UNIQUE | NON_NULL, (empty)
        // 2727: b"joined parall ... st u8: typeof(_22) = *const {l32} u8
        // 2727: b"joined parall ... st u8:   l32 = UNIQUE | NON_NULL, (empty)
        // 2727: b"joined parall ... %d\0": typeof(_23) = *const {l34} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
        // 2727: b"joined parall ... %d\0":   l34 = UNIQUE | NON_NULL, (empty)
        // 2727: b"joined parall ... %d\0": typeof(_24) = & {l36} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
        // 2727: b"joined parall ... %d\0":   l36 = UNIQUE | NON_NULL, FIXED
        // 2727: b"joined parall ... st u8: typeof(_22 = move _23 as *const u8 (Pointer(ArrayToPointer))) = *const {l47} u8
        // 2727: b"joined parall ... st u8:   l47 = UNIQUE | NON_NULL, (empty)
        // 2727: b"joined parall ... %d\0": typeof(_24 = const b"joined parallel solver instance with result %d\x00") = & {l45} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
        // 2727: b"joined parall ... %d\0":   l45 = UNIQUE | NON_NULL, (empty)
        // 2727: b"joined parall ... _char: typeof(_21 = move _22 as *const i8 (Misc)) = *const {l48} i8
        // 2727: b"joined parall ... _char:   l48 = UNIQUE | NON_NULL, (empty)
        // 2727: b"joined parall ... %d\0": typeof(_23 = &raw const (*_24)) = *const {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
        // 2727: b"joined parall ... %d\0":   l46 = UNIQUE | NON_NULL, (empty)
        res,
    );
    return res;
}
unsafe extern "C" fn releaseparallel() {
    let mut lgl: *mut LGL = 0 as *mut LGL;
    // 2733: mut lgl: typeof(_1) = *mut {l1} LGL
    // 2733: mut lgl:   l1 = UNIQUE | NON_NULL, (empty)
    // 2733: 0 as *mut LGL: typeof(_1 = const 0_usize as *mut LGL (PointerFromExposedAddress)) = *mut {l86} LGL
    // 2733: 0 as *mut LGL:   l86 = UNIQUE | NON_NULL, (empty)
    lockparstats();
    lgl = parallel.lgl;
    // 2735: parallel.lgl: typeof(_3) = *mut {l4} LGL
    // 2735: parallel.lgl:   l4 = UNIQUE | NON_NULL, (empty)
    // 2735: parallel: typeof(_4) = *mut {l6} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2735: parallel:   l6 = UNIQUE | NON_NULL, (empty)
    parallel.lgl = 0 as *mut LGL;
    // 2736: parallel: typeof(_5) = *mut {l8} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2736: parallel:   l8 = UNIQUE | NON_NULL, (empty)
    // 2736: parallel.lgl =  ... t LGL: typeof(((*_5).9: *mut LGL) = const 0_usize as *mut LGL (PointerFromExposedAddress)) = *mut {l87} LGL
    // 2736: parallel.lgl =  ... t LGL:   l87 = UNIQUE | NON_NULL, (empty)
    parallel.res = 0 as libc::c_int;
    // 2737: parallel: typeof(_7) = *mut {l11} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2737: parallel:   l11 = UNIQUE | NON_NULL, (empty)
    decisions += lglgetdecs(lgl) - parallel.decisions;
    // 2738: lgl: typeof(_10) = *mut {l15} LGL
    // 2738: lgl:   l15 = UNIQUE | NON_NULL, (empty)
    // 2738: parallel: typeof(_12) = *mut {l18} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2738: parallel:   l18 = UNIQUE | NON_NULL, (empty)
    // 2738: decisions: typeof(_14) = *mut {l21} i64
    // 2738: decisions:   l21 = UNIQUE | NON_NULL, (empty)
    conflicts += lglgetconfs(lgl) - parallel.conflicts;
    // 2739: lgl: typeof(_18) = *mut {l26} LGL
    // 2739: lgl:   l26 = UNIQUE | NON_NULL, (empty)
    // 2739: parallel: typeof(_20) = *mut {l29} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2739: parallel:   l29 = UNIQUE | NON_NULL, (empty)
    // 2739: conflicts: typeof(_22) = *mut {l32} i64
    // 2739: conflicts:   l32 = UNIQUE | NON_NULL, (empty)
    propagations += lglgetprops(lgl) - parallel.propagations;
    // 2740: lgl: typeof(_26) = *mut {l37} LGL
    // 2740: lgl:   l37 = UNIQUE | NON_NULL, (empty)
    // 2740: parallel: typeof(_28) = *mut {l40} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2740: parallel:   l40 = UNIQUE | NON_NULL, (empty)
    // 2740: propagations: typeof(_30) = *mut {l43} i64
    // 2740: propagations:   l43 = UNIQUE | NON_NULL, (empty)
    unlockparstats();
    if showstats != 0 {
    // 2742: showstats: typeof(_36) = *mut {l50} i32
    // 2742: showstats:   l50 = UNIQUE | NON_NULL, (empty)
        lglstats(lgl);
        // 2743: lgl: typeof(_38) = *mut {l53} LGL
        // 2743: lgl:   l53 = UNIQUE | NON_NULL, (empty)
    }
    lglrelease(lgl);
    // 2745: lgl: typeof(_40) = *mut {l56} LGL
    // 2745: lgl:   l56 = UNIQUE | NON_NULL, (empty)
    let mut BYTES: size_t = (nvars as libc::c_ulong)
    // 2746: nvars: typeof(_44) = *mut {l61} i32
    // 2746: nvars:   l61 = UNIQUE | NON_NULL, (empty)
        .wrapping_mul(::core::mem::size_of::<libc::c_int>() as libc::c_ulong);
    decmem(BYTES);
    free(parallel.units as *mut libc::c_void);
    // 2749: parallel.units  ... _void: typeof(_50) = *mut {l68} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2749: parallel.units  ... _void:   l68 = UNIQUE | NON_NULL, (empty)
    // 2749: parallel.units: typeof(_51) = *mut {l70} i32
    // 2749: parallel.units:   l70 = UNIQUE | NON_NULL, (empty)
    // 2749: parallel: typeof(_52) = *mut {l72} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2749: parallel:   l72 = UNIQUE | NON_NULL, (empty)
    // 2749: parallel.units  ... _void: typeof(_50 = move _51 as *mut libc::c_void (Misc)) = *mut {l88} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2749: parallel.units  ... _void:   l88 = UNIQUE | NON_NULL, (empty)
    parallel.nunits = 0 as libc::c_int;
    // 2750: parallel: typeof(_54) = *mut {l75} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 2750: parallel:   l75 = UNIQUE | NON_NULL, (empty)
    vrb(b"released parallel solver instance\0" as *const u8 as *const libc::c_char);
    // 2751: b"released para ... _char: typeof(_56) = *const {l78} i8
    // 2751: b"released para ... _char:   l78 = UNIQUE | NON_NULL, (empty)
    // 2751: b"released para ... st u8: typeof(_57) = *const {l80} u8
    // 2751: b"released para ... st u8:   l80 = UNIQUE | NON_NULL, (empty)
    // 2751: b"released para ... ce\0": typeof(_58) = *const {l82} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
    // 2751: b"released para ... ce\0":   l82 = UNIQUE | NON_NULL, (empty)
    // 2751: b"released para ... ce\0": typeof(_59) = & {l84} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
    // 2751: b"released para ... ce\0":   l84 = UNIQUE | NON_NULL, FIXED
    // 2751: b"released para ... _char: typeof(_56 = move _57 as *const i8 (Misc)) = *const {l92} i8
    // 2751: b"released para ... _char:   l92 = UNIQUE | NON_NULL, (empty)
    // 2751: b"released para ... st u8: typeof(_57 = move _58 as *const u8 (Pointer(ArrayToPointer))) = *const {l91} u8
    // 2751: b"released para ... st u8:   l91 = UNIQUE | NON_NULL, (empty)
    // 2751: b"released para ... ce\0": typeof(_58 = &raw const (*_59)) = *const {l90} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
    // 2751: b"released para ... ce\0":   l90 = UNIQUE | NON_NULL, (empty)
    // 2751: b"released para ... ce\0": typeof(_59 = const b"released parallel solver instance\x00") = & {l89} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
    // 2751: b"released para ... ce\0":   l89 = UNIQUE | NON_NULL, (empty)
}
static wbuf: [libc::c_char; 80] = [0; 80];
static wlen: libc::c_int = 0;
unsafe extern "C" fn wflush() {
    let mut i: libc::c_int = 0;
    fputc('v' as i32, stdout);
    // 2757: stdout: typeof(_4) = *mut {l4} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2757: stdout:   l4 = UNIQUE | NON_NULL, (empty)
    // 2757: stdout: typeof(_5) = *mut {l6} *mut {l7} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2757: stdout:   l6 = UNIQUE | NON_NULL, (empty)
    // 2757: stdout:   l7 = UNIQUE | NON_NULL, (empty)
    i = 0 as libc::c_int;
    while i < wlen {
    // 2759: wlen: typeof(_12) = *mut {l15} i32
    // 2759: wlen:   l15 = UNIQUE | NON_NULL, (empty)
        fputc(wbuf[i as usize] as libc::c_int, stdout);
        // 2760: wbuf: typeof(_16) = *mut {l20} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
        // 2760: wbuf:   l20 = UNIQUE | NON_NULL, (empty)
        // 2760: stdout: typeof(_21) = *mut {l26} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 2760: stdout:   l26 = UNIQUE | NON_NULL, (empty)
        // 2760: stdout: typeof(_22) = *mut {l28} *mut {l29} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 2760: stdout:   l28 = UNIQUE | NON_NULL, (empty)
        // 2760: stdout:   l29 = UNIQUE | NON_NULL, (empty)
        i += 1;
        i;
    }
    fputc('\n' as i32, stdout);
    // 2764: stdout: typeof(_30) = *mut {l38} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2764: stdout:   l38 = UNIQUE | NON_NULL, (empty)
    // 2764: stdout: typeof(_31) = *mut {l40} *mut {l41} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 2764: stdout:   l40 = UNIQUE | NON_NULL, (empty)
    // 2764: stdout:   l41 = UNIQUE | NON_NULL, (empty)
    wlen = 0 as libc::c_int;
    // 2765: wlen: typeof(_33) = *mut {l44} i32
    // 2765: wlen:   l44 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn wprint(mut lit: libc::c_int) {
    let mut str: [libc::c_char; 20] = [0; 20];
    let mut len: libc::c_int = 0;
    sprintf(
        str.as_mut_ptr(),
        // 2771: str.as_mut_ptr(): typeof(_5) = *mut {l5} i8
        // 2771: str.as_mut_ptr():   l5 = UNIQUE | NON_NULL, (empty)
        // 2771: str.as_mut_ptr(): typeof(_6) = &mut {l7} [i8]
        // 2771: str.as_mut_ptr():   l7 = UNIQUE | NON_NULL, FIXED
        // 2771: str.as_mut_ptr(): typeof(_7) = &mut {l9} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
        // 2771: str.as_mut_ptr():   l9 = UNIQUE | NON_NULL, (empty)
        // 2771: str.as_mut_ptr(): typeof(_7 = &mut _2) = &mut {l67} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
        // 2771: str.as_mut_ptr():   l67 = UNIQUE | NON_NULL, (empty)
        // 2771: str.as_mut_ptr(): typeof(_6 = move _7 as &mut [i8] (Pointer(Unsize))) = &mut {l68} [i8]
        // 2771: str.as_mut_ptr():   l68 = UNIQUE | NON_NULL, FIXED
        b" %d\0" as *const u8 as *const libc::c_char,
        // 2772: b" %d\0" as *co ... _char: typeof(_8) = *const {l11} i8
        // 2772: b" %d\0" as *co ... _char:   l11 = UNIQUE | NON_NULL, (empty)
        // 2772: b" %d\0" as *co ... st u8: typeof(_9) = *const {l13} u8
        // 2772: b" %d\0" as *co ... st u8:   l13 = UNIQUE | NON_NULL, (empty)
        // 2772: b" %d\0": typeof(_10) = *const {l15} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 2772: b" %d\0":   l15 = UNIQUE | NON_NULL, (empty)
        // 2772: b" %d\0": typeof(_11) = & {l17} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 2772: b" %d\0":   l17 = UNIQUE | NON_NULL, FIXED
        // 2772: b" %d\0" as *co ... st u8: typeof(_9 = move _10 as *const u8 (Pointer(ArrayToPointer))) = *const {l71} u8
        // 2772: b" %d\0" as *co ... st u8:   l71 = UNIQUE | NON_NULL, (empty)
        // 2772: b" %d\0" as *co ... _char: typeof(_8 = move _9 as *const i8 (Misc)) = *const {l72} i8
        // 2772: b" %d\0" as *co ... _char:   l72 = UNIQUE | NON_NULL, (empty)
        // 2772: b" %d\0": typeof(_10 = &raw const (*_11)) = *const {l70} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 2772: b" %d\0":   l70 = UNIQUE | NON_NULL, (empty)
        // 2772: b" %d\0": typeof(_11 = const b" %d\x00") = & {l69} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 2772: b" %d\0":   l69 = UNIQUE | NON_NULL, (empty)
        lit,
    );
    len = strlen(str.as_mut_ptr()) as libc::c_int;
    // 2775: str.as_mut_ptr(): typeof(_14) = *const {l21} i8
    // 2775: str.as_mut_ptr():   l21 = UNIQUE | NON_NULL, (empty)
    // 2775: str.as_mut_ptr(): typeof(_15) = *mut {l23} i8
    // 2775: str.as_mut_ptr():   l23 = UNIQUE | NON_NULL, (empty)
    // 2775: str.as_mut_ptr(): typeof(_16) = &mut {l25} [i8]
    // 2775: str.as_mut_ptr():   l25 = UNIQUE | NON_NULL, FIXED
    // 2775: str.as_mut_ptr(): typeof(_17) = &mut {l27} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
    // 2775: str.as_mut_ptr():   l27 = UNIQUE | NON_NULL, (empty)
    // 2775: str.as_mut_ptr(): typeof(_17 = &mut _2) = &mut {l73} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
    // 2775: str.as_mut_ptr():   l73 = UNIQUE | NON_NULL, (empty)
    // 2775: str.as_mut_ptr(): typeof(_14 = move _15 as *const i8 (Pointer(MutToConstPointer))) = *const {l75} i8
    // 2775: str.as_mut_ptr():   l75 = UNIQUE | NON_NULL, (empty)
    // 2775: str.as_mut_ptr(): typeof(_16 = move _17 as &mut [i8] (Pointer(Unsize))) = &mut {l74} [i8]
    // 2775: str.as_mut_ptr():   l74 = UNIQUE | NON_NULL, FIXED
    if wlen + len > 74 as libc::c_int {
    // 2776: wlen: typeof(_22) = *mut {l33} i32
    // 2776: wlen:   l33 = UNIQUE | NON_NULL, (empty)
        wflush();
    }
    strcpy(wbuf.as_mut_ptr().offset(wlen as isize), str.as_mut_ptr());
    // 2779: strcpy(wbuf.as_ ... tr()): typeof(_27) = *mut {l39} i8
    // 2779: strcpy(wbuf.as_ ... tr()):   l39 = UNIQUE | NON_NULL, (empty)
    // 2779: wbuf.as_mut_ptr ... size): typeof(_28) = *mut {l41} i8
    // 2779: wbuf.as_mut_ptr ... size):   l41 = UNIQUE | NON_NULL, (empty)
    // 2779: wbuf.as_mut_ptr(): typeof(_29) = *mut {l43} i8
    // 2779: wbuf.as_mut_ptr():   l43 = UNIQUE | NON_NULL, (empty)
    // 2779: wbuf.as_mut_ptr(): typeof(_30) = &mut {l45} [i8]
    // 2779: wbuf.as_mut_ptr():   l45 = UNIQUE | NON_NULL, FIXED
    // 2779: wbuf.as_mut_ptr(): typeof(_31) = &mut {l47} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
    // 2779: wbuf.as_mut_ptr():   l47 = UNIQUE | NON_NULL, (empty)
    // 2779: wbuf: typeof(_32) = *mut {l49} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
    // 2779: wbuf:   l49 = UNIQUE | NON_NULL, (empty)
    // 2779: wlen: typeof(_35) = *mut {l53} i32
    // 2779: wlen:   l53 = UNIQUE | NON_NULL, (empty)
    // 2779: str.as_mut_ptr(): typeof(_36) = *const {l55} i8
    // 2779: str.as_mut_ptr():   l55 = UNIQUE | NON_NULL, (empty)
    // 2779: str.as_mut_ptr(): typeof(_37) = *mut {l57} i8
    // 2779: str.as_mut_ptr():   l57 = UNIQUE | NON_NULL, (empty)
    // 2779: str.as_mut_ptr(): typeof(_38) = &mut {l59} [i8]
    // 2779: str.as_mut_ptr():   l59 = UNIQUE | NON_NULL, FIXED
    // 2779: str.as_mut_ptr(): typeof(_39) = &mut {l61} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
    // 2779: str.as_mut_ptr():   l61 = UNIQUE | NON_NULL, (empty)
    // 2779: wbuf.as_mut_ptr(): typeof(_30 = move _31 as &mut [i8] (Pointer(Unsize))) = &mut {l77} [i8]
    // 2779: wbuf.as_mut_ptr():   l77 = UNIQUE | NON_NULL, FIXED
    // 2779: str.as_mut_ptr(): typeof(_38 = move _39 as &mut [i8] (Pointer(Unsize))) = &mut {l79} [i8]
    // 2779: str.as_mut_ptr():   l79 = UNIQUE | NON_NULL, FIXED
    // 2779: str.as_mut_ptr(): typeof(_36 = move _37 as *const i8 (Pointer(MutToConstPointer))) = *const {l80} i8
    // 2779: str.as_mut_ptr():   l80 = UNIQUE | NON_NULL, (empty)
    // 2779: wbuf.as_mut_ptr(): typeof(_31 = &mut (*_32)) = &mut {l76} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
    // 2779: wbuf.as_mut_ptr():   l76 = UNIQUE | NON_NULL, (empty)
    // 2779: str.as_mut_ptr(): typeof(_39 = &mut _2) = &mut {l78} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
    // 2779: str.as_mut_ptr():   l78 = UNIQUE | NON_NULL, (empty)
    wlen += len;
    // 2780: wlen: typeof(_41) = *mut {l64} i32
    // 2780: wlen:   l64 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn witness(mut lgl: *mut LGL) {
// 2782: mut lgl: typeof(_1) = *mut {g64} LGL
// 2782: mut lgl:   g64 = UNIQUE | NON_NULL, FIXED
    let mut idx: libc::c_int = 0;
    let mut lit: libc::c_int = 0;
    idx = 1 as libc::c_int;
    while idx <= nvars {
    // 2786: nvars: typeof(_10) = *mut {l10} i32
    // 2786: nvars:   l10 = UNIQUE | NON_NULL, (empty)
        lit = if lglderef(lgl, idx) < 0 as libc::c_int {
        // 2787: lgl: typeof(_14) = *mut {l15} LGL
        // 2787: lgl:   l15 = UNIQUE | NON_NULL, (empty)
            -idx
        } else {
            idx
        };
        wprint(lit);
        idx += 1;
        idx;
    }
    wprint(0 as libc::c_int);
    if wlen != 0 {
    // 2797: wlen: typeof(_30) = *mut {l32} i32
    // 2797: wlen:   l32 = UNIQUE | NON_NULL, (empty)
        wflush();
    }
}
unsafe extern "C" fn nowfull() -> libc::c_int {
    return (fullint != 0 && round % fullint == 0) as libc::c_int;
    // 2802: fullint: typeof(_5) = *mut {l5} i32
    // 2802: fullint:   l5 = READ | UNIQUE | NON_NULL, (empty)
    // 2802: round: typeof(_9) = *mut {l10} i32
    // 2802: round:   l10 = READ | UNIQUE | NON_NULL, (empty)
    // 2802: fullint: typeof(_11) = *mut {l13} i32
    // 2802: fullint:   l13 = READ | UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn schedulejob(
    mut node: *mut Node,
    // 2805: mut node: typeof(_1) = *mut {g65} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2805: mut node:   g65 = UNIQUE | NON_NULL, FIXED
    mut fun: Option<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>,
    // 2806: mut fun: typeof(_2) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {g66} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {g67} DefId(2:5583 ~ core[480a]::ffi::c_void)>
    // 2806: mut fun:   g66 = UNIQUE | NON_NULL, FIXED
    // 2806: mut fun:   g67 = UNIQUE | NON_NULL, FIXED
    mut name: *const libc::c_char,
    // 2807: mut name: typeof(_3) = *const {g68} i8
    // 2807: mut name:   g68 = UNIQUE | NON_NULL, FIXED
    mut state: State,
) {
    let mut job: *mut Job = 0 as *mut Job;
    // 2810: mut job: typeof(_5) = *mut {l5} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2810: mut job:   l5 = READ | WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 2810: 0 as *mut Job: typeof(_5 = const 0_usize as *mut Job (PointerFromExposedAddress)) = *mut {l153} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2810: 0 as *mut Job:   l153 = READ | WRITE | UNIQUE | OFFSET_ADD, (empty)
    js.cnt += 1;
    // 2811: js: typeof(_6) = *mut {l7} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
    // 2811: js:   l7 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    js.cnt;
    // 2812: js: typeof(_9) = *mut {l11} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
    // 2812: js:   l11 = READ | UNIQUE | NON_NULL, (empty)
    let mut BYTES: size_t = (1 as libc::c_int as libc::c_ulong)
        .wrapping_mul(::core::mem::size_of::<Job>() as libc::c_ulong);
    job = malloc(BYTES) as *mut Job;
    // 2815: malloc(BYTES): typeof(_15) = *mut {l18} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2815: malloc(BYTES):   l18 = READ | WRITE | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 2815: job = malloc(BY ... t Job: typeof(_5 = move _15 as *mut Job (Misc)) = *mut {l154} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2815: job = malloc(BY ... t Job:   l154 = READ | WRITE | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    if job.is_null() {
    // 2816: job: typeof(_19) = *mut {l23} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2816: job:   l23 = UNIQUE, (empty)
        err(b"out of memory\0" as *const u8 as *const libc::c_char);
        // 2817: b"out of memory ... _char: typeof(_22) = *const {l27} i8
        // 2817: b"out of memory ... _char:   l27 = UNIQUE | NON_NULL, (empty)
        // 2817: b"out of memory ... st u8: typeof(_23) = *const {l29} u8
        // 2817: b"out of memory ... st u8:   l29 = UNIQUE | NON_NULL, (empty)
        // 2817: b"out of memory\0": typeof(_24) = *const {l31} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2817: b"out of memory\0":   l31 = UNIQUE | NON_NULL, (empty)
        // 2817: b"out of memory\0": typeof(_25) = & {l33} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2817: b"out of memory\0":   l33 = UNIQUE | NON_NULL, FIXED
        // 2817: b"out of memory ... _char: typeof(_22 = move _23 as *const i8 (Misc)) = *const {l158} i8
        // 2817: b"out of memory ... _char:   l158 = UNIQUE | NON_NULL, (empty)
        // 2817: b"out of memory\0": typeof(_25 = const b"out of memory\x00") = & {l155} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2817: b"out of memory\0":   l155 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 2817: b"out of memory\0": typeof(_24 = &raw const (*_25)) = *const {l156} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 2817: b"out of memory\0":   l156 = UNIQUE | NON_NULL, (empty)
        // 2817: b"out of memory ... st u8: typeof(_23 = move _24 as *const u8 (Pointer(ArrayToPointer))) = *const {l157} u8
        // 2817: b"out of memory ... st u8:   l157 = UNIQUE | NON_NULL, (empty)
        exit(1 as libc::c_int);
    }
    memset(job as *mut libc::c_void, 0 as libc::c_int, BYTES);
    // 2820: memset(job as * ... YTES): typeof(_28) = *mut {l37} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2820: memset(job as * ... YTES):   l37 = UNIQUE | NON_NULL, (empty)
    // 2820: job as *mut lib ... _void: typeof(_29) = *mut {l39} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2820: job as *mut lib ... _void:   l39 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 2820: job: typeof(_30) = *mut {l41} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2820: job:   l41 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    // 2820: job as *mut lib ... _void: typeof(_29 = move _30 as *mut libc::c_void (Misc)) = *mut {l159} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2820: job as *mut lib ... _void:   l159 = WRITE | UNIQUE | OFFSET_ADD, (empty)
    incmem(BYTES);
    (*job).node = node;
    // 2822: node: typeof(_35) = *mut {l47} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2822: node:   l47 = UNIQUE | NON_NULL, (empty)
    (*job).fun = fun;
    // 2823: fun: typeof(_36) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {g66} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {g67} DefId(2:5583 ~ core[480a]::ffi::c_void)>
    // 2823: fun:   g66 = UNIQUE | NON_NULL, FIXED
    // 2823: fun:   g67 = UNIQUE | NON_NULL, FIXED
    (*job).name = name;
    // 2824: name: typeof(_37) = *const {l50} i8
    // 2824: name:   l50 = UNIQUE | NON_NULL, (empty)
    (*job).state = state;
    (*job).pos = numjobs;
    // 2826: numjobs: typeof(_40) = *mut {l54} i32
    // 2826: numjobs:   l54 = READ | UNIQUE | NON_NULL, (empty)
    if sizejobs == numjobs {
    // 2827: sizejobs: typeof(_44) = *mut {l59} i32
    // 2827: sizejobs:   l59 = READ | UNIQUE | NON_NULL, (empty)
    // 2827: numjobs: typeof(_46) = *mut {l62} i32
    // 2827: numjobs:   l62 = READ | UNIQUE | NON_NULL, (empty)
        let mut NEW_SIZE: size_t = sizejobs as size_t;
        // 2828: sizejobs: typeof(_49) = *mut {l66} i32
        // 2828: sizejobs:   l66 = READ | UNIQUE | NON_NULL, (empty)
        let mut OLD_BYTES: size_t =
            NEW_SIZE.wrapping_mul(::core::mem::size_of::<*mut Job>() as libc::c_ulong);
        let mut NEW_BYTES: size_t = 0;
        if NEW_SIZE != 0 {
            NEW_SIZE = NEW_SIZE * 2 as libc::c_int as size_t;
        } else {
            NEW_SIZE = 1 as libc::c_int as size_t;
        }
        NEW_BYTES = NEW_SIZE.wrapping_mul(::core::mem::size_of::<*mut Job>() as libc::c_ulong);
        decmem(OLD_BYTES);
        jobs = realloc(jobs as *mut libc::c_void, NEW_BYTES) as *mut *mut Job;
        // 2839: realloc(jobs as ... YTES): typeof(_69) = *mut {l87} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2839: realloc(jobs as ... YTES):   l87 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
        // 2839: jobs as *mut li ... _void: typeof(_70) = *mut {l89} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2839: jobs as *mut li ... _void:   l89 = UNIQUE | FREE | NON_NULL, (empty)
        // 2839: jobs: typeof(_71) = *mut {l91} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2839: jobs:   l91 = UNIQUE | FREE | NON_NULL, (empty)
        // 2839: jobs:   g293 = READ | WRITE, CELL
        // 2839: jobs: typeof(_72) = *mut {l93} *mut {g292} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2839: jobs:   l93 = READ | UNIQUE | NON_NULL, (empty)
        // 2839: jobs:   g292 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
        // 2839: jobs:   g293 = READ | WRITE, CELL
        // 2839: jobs: typeof(_74) = *mut {l96} *mut {g292} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2839: jobs:   l96 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        // 2839: jobs:   g292 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
        // 2839: jobs:   g293 = READ | WRITE, CELL
        // 2839: jobs as *mut li ... _void: typeof(_70 = move _71 as *mut libc::c_void (Misc)) = *mut {l160} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2839: jobs as *mut li ... _void:   l160 = UNIQUE | FREE | NON_NULL, (empty)
        // 2839: jobs = realloc( ... t Job: typeof((*_74) = move _69 as *mut *mut Job (Misc)) = *mut {l161} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2839: jobs = realloc( ... t Job:   l161 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
        // 2839: jobs = realloc( ... t Job:   g293 = READ | WRITE, CELL
        if jobs.is_null() {
        // 2840: jobs: typeof(_77) = *mut {l100} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2840: jobs:   l100 = UNIQUE | NON_NULL, (empty)
        // 2840: jobs:   g293 = READ | WRITE, CELL
        // 2840: jobs: typeof(_78) = *mut {l102} *mut {g292} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2840: jobs:   l102 = READ | UNIQUE | NON_NULL, (empty)
        // 2840: jobs:   g292 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
        // 2840: jobs:   g293 = READ | WRITE, CELL
            err(b"out of memory\0" as *const u8 as *const libc::c_char);
            // 2841: b"out of memory ... _char: typeof(_81) = *const {l106} i8
            // 2841: b"out of memory ... _char:   l106 = UNIQUE | NON_NULL, (empty)
            // 2841: b"out of memory ... st u8: typeof(_82) = *const {l108} u8
            // 2841: b"out of memory ... st u8:   l108 = UNIQUE | NON_NULL, (empty)
            // 2841: b"out of memory\0": typeof(_83) = *const {l110} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2841: b"out of memory\0":   l110 = UNIQUE | NON_NULL, (empty)
            // 2841: b"out of memory\0": typeof(_84) = & {l112} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2841: b"out of memory\0":   l112 = UNIQUE | NON_NULL, FIXED
            // 2841: b"out of memory\0": typeof(_84 = const b"out of memory\x00") = & {l162} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2841: b"out of memory\0":   l162 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            // 2841: b"out of memory\0": typeof(_83 = &raw const (*_84)) = *const {l163} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 2841: b"out of memory\0":   l163 = UNIQUE | NON_NULL, (empty)
            // 2841: b"out of memory ... st u8: typeof(_82 = move _83 as *const u8 (Pointer(ArrayToPointer))) = *const {l164} u8
            // 2841: b"out of memory ... st u8:   l164 = UNIQUE | NON_NULL, (empty)
            // 2841: b"out of memory ... _char: typeof(_81 = move _82 as *const i8 (Misc)) = *const {l165} i8
            // 2841: b"out of memory ... _char:   l165 = UNIQUE | NON_NULL, (empty)
            exit(1 as libc::c_int);
        }
        incmem(NEW_BYTES);
        sizejobs = NEW_SIZE as libc::c_int;
        // 2845: sizejobs: typeof(_90) = *mut {l119} i32
        // 2845: sizejobs:   l119 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    }
    let fresh11 = numjobs;
    // 2847: numjobs: typeof(_92) = *mut {l122} i32
    // 2847: numjobs:   l122 = READ | UNIQUE | NON_NULL, (empty)
    numjobs = numjobs + 1;
    // 2848: numjobs: typeof(_94) = *mut {l125} i32
    // 2848: numjobs:   l125 = READ | UNIQUE | NON_NULL, (empty)
    // 2848: numjobs: typeof(_96) = *mut {l128} i32
    // 2848: numjobs:   l128 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    let ref mut fresh12 = *jobs.offset(fresh11 as isize);
    // 2849: ref mut fresh12: typeof(_97) = &mut {l130} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2849: ref mut fresh12:   l130 = READ | WRITE | UNIQUE | NON_NULL, FIXED
    // 2849: ref mut fresh12:   g293 = READ | WRITE, CELL
    // 2849: jobs.offset(fre ... size): typeof(_98) = *mut {l132} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2849: jobs.offset(fre ... size):   l132 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    // 2849: jobs.offset(fre ... size):   g293 = READ | WRITE, CELL
    // 2849: jobs: typeof(_99) = *mut {l134} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2849: jobs:   l134 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    // 2849: jobs:   g293 = READ | WRITE, CELL
    // 2849: jobs: typeof(_100) = *mut {l136} *mut {g292} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2849: jobs:   l136 = READ | UNIQUE | NON_NULL, (empty)
    // 2849: jobs:   g292 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
    // 2849: jobs:   g293 = READ | WRITE, CELL
    // 2849: ref mut fresh12: typeof(_97 = &mut (*_98)) = &mut {l166} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2849: ref mut fresh12:   l166 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    // 2849: ref mut fresh12:   g293 = READ | WRITE, CELL
    *fresh12 = job;
    // 2850: job: typeof(_103) = *mut {l140} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2850: job:   l140 = UNIQUE, (empty)
    jmsg(job, b"scheduled\0" as *const u8 as *const libc::c_char);
    // 2851: job: typeof(_105) = *mut {l143} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2851: job:   l143 = UNIQUE, (empty)
    // 2851: b"scheduled\0"  ... _char: typeof(_106) = *const {l145} i8
    // 2851: b"scheduled\0"  ... _char:   l145 = UNIQUE | NON_NULL, (empty)
    // 2851: b"scheduled\0"  ... st u8: typeof(_107) = *const {l147} u8
    // 2851: b"scheduled\0"  ... st u8:   l147 = UNIQUE | NON_NULL, (empty)
    // 2851: b"scheduled\0": typeof(_108) = *const {l149} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 2851: b"scheduled\0":   l149 = UNIQUE | NON_NULL, (empty)
    // 2851: b"scheduled\0": typeof(_109) = & {l151} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 2851: b"scheduled\0":   l151 = UNIQUE | NON_NULL, FIXED
    // 2851: b"scheduled\0"  ... st u8: typeof(_107 = move _108 as *const u8 (Pointer(ArrayToPointer))) = *const {l169} u8
    // 2851: b"scheduled\0"  ... st u8:   l169 = UNIQUE | NON_NULL, (empty)
    // 2851: b"scheduled\0": typeof(_108 = &raw const (*_109)) = *const {l168} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 2851: b"scheduled\0":   l168 = UNIQUE | NON_NULL, (empty)
    // 2851: b"scheduled\0"  ... _char: typeof(_106 = move _107 as *const i8 (Misc)) = *const {l170} i8
    // 2851: b"scheduled\0"  ... _char:   l170 = UNIQUE | NON_NULL, (empty)
    // 2851: b"scheduled\0": typeof(_109 = const b"scheduled\x00") = & {l167} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 2851: b"scheduled\0":   l167 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
}
unsafe extern "C" fn runjob(mut job: *mut Job) {
// 2853: mut job: typeof(_1) = *mut {g69} DefId(0:822 ~ treengeling[2d04]::Job)
// 2853: mut job:   g69 = (empty), CELL | FIXED
    let mut node: *mut Node = (*job).node;
    // 2854: mut node: typeof(_2) = *mut {l2} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2854: mut node:   l2 = UNIQUE | NON_NULL, (empty)
    jmsg(job, b"start\0" as *const u8 as *const libc::c_char);
    // 2855: job: typeof(_4) = *mut {l5} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2855: job:   l5 = UNIQUE | NON_NULL, (empty)
    // 2855: b"start\0" as * ... _char: typeof(_5) = *const {l7} i8
    // 2855: b"start\0" as * ... _char:   l7 = UNIQUE | NON_NULL, (empty)
    // 2855: b"start\0" as * ... st u8: typeof(_6) = *const {l9} u8
    // 2855: b"start\0" as * ... st u8:   l9 = UNIQUE | NON_NULL, (empty)
    // 2855: b"start\0": typeof(_7) = *const {l11} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
    // 2855: b"start\0":   l11 = UNIQUE | NON_NULL, (empty)
    // 2855: b"start\0": typeof(_8) = & {l13} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
    // 2855: b"start\0":   l13 = UNIQUE | NON_NULL, FIXED
    // 2855: b"start\0" as * ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l65} u8
    // 2855: b"start\0" as * ... st u8:   l65 = UNIQUE | NON_NULL, (empty)
    // 2855: b"start\0": typeof(_7 = &raw const (*_8)) = *const {l64} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
    // 2855: b"start\0":   l64 = UNIQUE | NON_NULL, (empty)
    // 2855: b"start\0" as * ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l66} i8
    // 2855: b"start\0" as * ... _char:   l66 = UNIQUE | NON_NULL, (empty)
    // 2855: b"start\0": typeof(_8 = const b"start\x00") = & {l63} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
    // 2855: b"start\0":   l63 = UNIQUE | NON_NULL, (empty)
    (*node).state = (*job).state;
    threads += 1;
    // 2857: threads: typeof(_10) = *mut {l16} i64
    // 2857: threads:   l16 = UNIQUE | NON_NULL, (empty)
    threads;
    // 2858: threads: typeof(_13) = *mut {l20} i64
    // 2858: threads:   l20 = UNIQUE | NON_NULL, (empty)
    if pthread_create(
        &mut (*job).thread,
        // 2860: &mut (*job).thread: typeof(_17) = *mut {l25} u64
        // 2860: &mut (*job).thread:   l25 = UNIQUE | NON_NULL, (empty)
        // 2860: &mut (*job).thread: typeof(_18) = &mut {l27} u64
        // 2860: &mut (*job).thread:   l27 = UNIQUE | NON_NULL, (empty)
        // 2860: &mut (*job).thread: typeof(_18 = &mut ((*_1).4: u64)) = &mut {l67} u64
        // 2860: &mut (*job).thread:   l67 = UNIQUE | NON_NULL, (empty)
        // 2860: &mut (*job).thread: typeof(_17 = &raw mut (*_18)) = *mut {l68} u64
        // 2860: &mut (*job).thread:   l68 = UNIQUE | NON_NULL, (empty)
        0 as *const pthread_attr_t,
        // 2861: 0 as *const pth ... ttr_t: typeof(_19) = *const {l29} DefId(0:733 ~ treengeling[2d04]::pthread_attr_t)
        // 2861: 0 as *const pth ... ttr_t:   l29 = UNIQUE | NON_NULL, (empty)
        // 2861: 0 as *const pth ... ttr_t: typeof(_19 = const 0_usize as *const pthread_attr_t (PointerFromExposedAddress)) = *const {l69} DefId(0:733 ~ treengeling[2d04]::pthread_attr_t)
        // 2861: 0 as *const pth ... ttr_t:   l69 = UNIQUE | NON_NULL, (empty)
        (*job).fun,
        // 2862: (*job).fun: typeof(_20) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l31} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l32} DefId(2:5583 ~ core[480a]::ffi::c_void)>
        // 2862: (*job).fun:   l31 = UNIQUE | NON_NULL, (empty)
        // 2862: (*job).fun:   l32 = UNIQUE | NON_NULL, (empty)
        node as *mut libc::c_void,
        // 2863: node as *mut li ... _void: typeof(_21) = *mut {l34} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2863: node as *mut li ... _void:   l34 = UNIQUE | NON_NULL, (empty)
        // 2863: node: typeof(_22) = *mut {l36} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2863: node:   l36 = UNIQUE | NON_NULL, (empty)
        // 2863: node as *mut li ... _void: typeof(_21 = move _22 as *mut libc::c_void (Misc)) = *mut {l70} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 2863: node as *mut li ... _void:   l70 = UNIQUE | NON_NULL, (empty)
    ) != 0
    {
        err(
            b"failed to create thread job %d %s [%d %lld]\0" as *const u8 as *const libc::c_char,
            // 2867: b"failed to cre ... _char: typeof(_24) = *const {l39} i8
            // 2867: b"failed to cre ... _char:   l39 = UNIQUE | NON_NULL, (empty)
            // 2867: b"failed to cre ... st u8: typeof(_25) = *const {l41} u8
            // 2867: b"failed to cre ... st u8:   l41 = UNIQUE | NON_NULL, (empty)
            // 2867: b"failed to cre ... d]\0": typeof(_26) = *const {l43} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 2867: b"failed to cre ... d]\0":   l43 = UNIQUE | NON_NULL, (empty)
            // 2867: b"failed to cre ... d]\0": typeof(_27) = & {l45} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 2867: b"failed to cre ... d]\0":   l45 = UNIQUE | NON_NULL, FIXED
            // 2867: b"failed to cre ... _char: typeof(_24 = move _25 as *const i8 (Misc)) = *const {l74} i8
            // 2867: b"failed to cre ... _char:   l74 = UNIQUE | NON_NULL, (empty)
            // 2867: b"failed to cre ... d]\0": typeof(_27 = const b"failed to create thread job %d %s [%d %lld]\x00") = & {l71} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 2867: b"failed to cre ... d]\0":   l71 = UNIQUE | NON_NULL, (empty)
            // 2867: b"failed to cre ... d]\0": typeof(_26 = &raw const (*_27)) = *const {l72} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 2867: b"failed to cre ... d]\0":   l72 = UNIQUE | NON_NULL, (empty)
            // 2867: b"failed to cre ... st u8: typeof(_25 = move _26 as *const u8 (Pointer(ArrayToPointer))) = *const {l73} u8
            // 2867: b"failed to cre ... st u8:   l73 = UNIQUE | NON_NULL, (empty)
            (*job).pos,
            (*job).name,
            // 2869: (*job).name: typeof(_29) = *const {l48} i8
            // 2869: (*job).name:   l48 = UNIQUE | NON_NULL, (empty)
            (*node).depth,
            (*node).id,
        );
    }
    jmsg(job, b"end\0" as *const u8 as *const libc::c_char);
    // 2874: job: typeof(_33) = *mut {l53} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2874: job:   l53 = UNIQUE | NON_NULL, (empty)
    // 2874: b"end\0" as *co ... _char: typeof(_34) = *const {l55} i8
    // 2874: b"end\0" as *co ... _char:   l55 = UNIQUE | NON_NULL, (empty)
    // 2874: b"end\0" as *co ... st u8: typeof(_35) = *const {l57} u8
    // 2874: b"end\0" as *co ... st u8:   l57 = UNIQUE | NON_NULL, (empty)
    // 2874: b"end\0": typeof(_36) = *const {l59} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 2874: b"end\0":   l59 = UNIQUE | NON_NULL, (empty)
    // 2874: b"end\0": typeof(_37) = & {l61} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 2874: b"end\0":   l61 = UNIQUE | NON_NULL, FIXED
    // 2874: b"end\0": typeof(_37 = const b"end\x00") = & {l75} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 2874: b"end\0":   l75 = UNIQUE | NON_NULL, (empty)
    // 2874: b"end\0" as *co ... st u8: typeof(_35 = move _36 as *const u8 (Pointer(ArrayToPointer))) = *const {l77} u8
    // 2874: b"end\0" as *co ... st u8:   l77 = UNIQUE | NON_NULL, (empty)
    // 2874: b"end\0" as *co ... _char: typeof(_34 = move _35 as *const i8 (Misc)) = *const {l78} i8
    // 2874: b"end\0" as *co ... _char:   l78 = UNIQUE | NON_NULL, (empty)
    // 2874: b"end\0": typeof(_36 = &raw const (*_37)) = *const {l76} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 2874: b"end\0":   l76 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn incworkers() {
    lockworkers();
    while numworkers >= maxworkers {
    // 2878: numworkers: typeof(_6) = *mut {l6} i32
    // 2878: numworkers:   l6 = UNIQUE | NON_NULL, (empty)
    // 2878: maxworkers: typeof(_8) = *mut {l9} i32
    // 2878: maxworkers:   l9 = UNIQUE | NON_NULL, (empty)
        lock.workers.waited += 1;
        // 2879: lock: typeof(_9) = *mut {l11} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 2879: lock:   l11 = UNIQUE | NON_NULL, (empty)
        lock.workers.waited;
        // 2880: lock: typeof(_12) = *mut {l15} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 2880: lock:   l15 = UNIQUE | NON_NULL, (empty)
        if pthread_cond_wait(&mut workerscond, &mut lock.workers.mutex) != 0 {
        // 2881: &mut workerscond: typeof(_16) = *mut {l20} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
        // 2881: &mut workerscond:   l20 = UNIQUE | NON_NULL, (empty)
        // 2881: &mut workerscond: typeof(_17) = &mut {l22} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
        // 2881: &mut workerscond:   l22 = UNIQUE | NON_NULL, (empty)
        // 2881: workerscond: typeof(_18) = *mut {l24} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
        // 2881: workerscond:   l24 = UNIQUE | NON_NULL, (empty)
        // 2881: &mut lock.worke ... mutex: typeof(_19) = *mut {l26} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
        // 2881: &mut lock.worke ... mutex:   l26 = UNIQUE | NON_NULL, (empty)
        // 2881: &mut lock.worke ... mutex: typeof(_20) = &mut {l28} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
        // 2881: &mut lock.worke ... mutex:   l28 = UNIQUE | NON_NULL, (empty)
        // 2881: lock: typeof(_21) = *mut {l30} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 2881: lock:   l30 = UNIQUE | NON_NULL, (empty)
        // 2881: &mut lock.worke ... mutex: typeof(_20 = &mut (((*_21).12: Lock).0: pthread_mutex_t)) = &mut {l84} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
        // 2881: &mut lock.worke ... mutex:   l84 = UNIQUE | NON_NULL, (empty)
        // 2881: &mut lock.worke ... mutex: typeof(_19 = &raw mut (*_20)) = *mut {l85} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
        // 2881: &mut lock.worke ... mutex:   l85 = UNIQUE | NON_NULL, (empty)
        // 2881: &mut workerscond: typeof(_17 = &mut (*_18)) = &mut {l82} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
        // 2881: &mut workerscond:   l82 = UNIQUE | NON_NULL, (empty)
        // 2881: &mut workerscond: typeof(_16 = &raw mut (*_17)) = *mut {l83} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
        // 2881: &mut workerscond:   l83 = UNIQUE | NON_NULL, (empty)
            err(
                b"failed to wait on decrease of the number of workers\0" as *const u8
                // 2883: b"failed to wai ... _char: typeof(_23) = *const {l33} i8
                // 2883: b"failed to wai ... _char:   l33 = UNIQUE | NON_NULL, (empty)
                // 2883: b"failed to wai ... st u8: typeof(_24) = *const {l35} u8
                // 2883: b"failed to wai ... st u8:   l35 = UNIQUE | NON_NULL, (empty)
                // 2883: b"failed to wai ... rs\0": typeof(_25) = *const {l37} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                // 2883: b"failed to wai ... rs\0":   l37 = UNIQUE | NON_NULL, (empty)
                // 2883: b"failed to wai ... rs\0": typeof(_26) = & {l39} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                // 2883: b"failed to wai ... rs\0":   l39 = UNIQUE | NON_NULL, FIXED
                // 2883: b"failed to wai ... st u8: typeof(_24 = move _25 as *const u8 (Pointer(ArrayToPointer))) = *const {l88} u8
                // 2883: b"failed to wai ... st u8:   l88 = UNIQUE | NON_NULL, (empty)
                // 2883: b"failed to wai ... rs\0": typeof(_26 = const b"failed to wait on decrease of the number of workers\x00") = & {l86} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                // 2883: b"failed to wai ... rs\0":   l86 = UNIQUE | NON_NULL, (empty)
                // 2883: b"failed to wai ... rs\0": typeof(_25 = &raw const (*_26)) = *const {l87} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                // 2883: b"failed to wai ... rs\0":   l87 = UNIQUE | NON_NULL, (empty)
                // 2883: b"failed to wai ... _char: typeof(_23 = move _24 as *const i8 (Misc)) = *const {l89} i8
                // 2883: b"failed to wai ... _char:   l89 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
            );
        }
        lock.workers.waited -= 1;
        // 2887: lock: typeof(_27) = *mut {l41} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 2887: lock:   l41 = UNIQUE | NON_NULL, (empty)
        lock.workers.waited;
        // 2888: lock: typeof(_30) = *mut {l45} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
        // 2888: lock:   l45 = UNIQUE | NON_NULL, (empty)
    }
    numworkers += 1;
    // 2890: numworkers: typeof(_34) = *mut {l50} i32
    // 2890: numworkers:   l50 = UNIQUE | NON_NULL, (empty)
    numworkers;
    // 2891: numworkers: typeof(_37) = *mut {l54} i32
    // 2891: numworkers:   l54 = UNIQUE | NON_NULL, (empty)
    if numworkers > maxnumworkers {
    // 2892: numworkers: typeof(_41) = *mut {l59} i32
    // 2892: numworkers:   l59 = UNIQUE | NON_NULL, (empty)
    // 2892: maxnumworkers: typeof(_43) = *mut {l62} i32
    // 2892: maxnumworkers:   l62 = UNIQUE | NON_NULL, (empty)
        maxnumworkers = numworkers;
        // 2893: numworkers: typeof(_45) = *mut {l65} i32
        // 2893: numworkers:   l65 = UNIQUE | NON_NULL, (empty)
        // 2893: maxnumworkers: typeof(_46) = *mut {l67} i32
        // 2893: maxnumworkers:   l67 = UNIQUE | NON_NULL, (empty)
    }
    vrb(
        b"number of workers increased to %d\0" as *const u8 as *const libc::c_char,
        // 2896: b"number of wor ... _char: typeof(_48) = *const {l70} i8
        // 2896: b"number of wor ... _char:   l70 = UNIQUE | NON_NULL, (empty)
        // 2896: b"number of wor ... st u8: typeof(_49) = *const {l72} u8
        // 2896: b"number of wor ... st u8:   l72 = UNIQUE | NON_NULL, (empty)
        // 2896: b"number of wor ... %d\0": typeof(_50) = *const {l74} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
        // 2896: b"number of wor ... %d\0":   l74 = UNIQUE | NON_NULL, (empty)
        // 2896: b"number of wor ... %d\0": typeof(_51) = & {l76} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
        // 2896: b"number of wor ... %d\0":   l76 = UNIQUE | NON_NULL, FIXED
        // 2896: b"number of wor ... %d\0": typeof(_50 = &raw const (*_51)) = *const {l91} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
        // 2896: b"number of wor ... %d\0":   l91 = UNIQUE | NON_NULL, (empty)
        // 2896: b"number of wor ... st u8: typeof(_49 = move _50 as *const u8 (Pointer(ArrayToPointer))) = *const {l92} u8
        // 2896: b"number of wor ... st u8:   l92 = UNIQUE | NON_NULL, (empty)
        // 2896: b"number of wor ... %d\0": typeof(_51 = const b"number of workers increased to %d\x00") = & {l90} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
        // 2896: b"number of wor ... %d\0":   l90 = UNIQUE | NON_NULL, (empty)
        // 2896: b"number of wor ... _char: typeof(_48 = move _49 as *const i8 (Misc)) = *const {l93} i8
        // 2896: b"number of wor ... _char:   l93 = UNIQUE | NON_NULL, (empty)
        numworkers,
        // 2897: numworkers: typeof(_53) = *mut {l79} i32
        // 2897: numworkers:   l79 = UNIQUE | NON_NULL, (empty)
    );
    unlockworkers();
}
unsafe extern "C" fn decworkers() {
    lockworkers();
    numworkers -= 1;
    // 2903: numworkers: typeof(_2) = *mut {l2} i32
    // 2903: numworkers:   l2 = UNIQUE | NON_NULL, (empty)
    numworkers;
    // 2904: numworkers: typeof(_5) = *mut {l6} i32
    // 2904: numworkers:   l6 = UNIQUE | NON_NULL, (empty)
    vrb(
        b"number of workers decreased to %d\0" as *const u8 as *const libc::c_char,
        // 2906: b"number of wor ... _char: typeof(_7) = *const {l9} i8
        // 2906: b"number of wor ... _char:   l9 = UNIQUE | NON_NULL, (empty)
        // 2906: b"number of wor ... st u8: typeof(_8) = *const {l11} u8
        // 2906: b"number of wor ... st u8:   l11 = UNIQUE | NON_NULL, (empty)
        // 2906: b"number of wor ... %d\0": typeof(_9) = *const {l13} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
        // 2906: b"number of wor ... %d\0":   l13 = UNIQUE | NON_NULL, (empty)
        // 2906: b"number of wor ... %d\0": typeof(_10) = & {l15} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
        // 2906: b"number of wor ... %d\0":   l15 = UNIQUE | NON_NULL, FIXED
        // 2906: b"number of wor ... %d\0": typeof(_9 = &raw const (*_10)) = *const {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
        // 2906: b"number of wor ... %d\0":   l40 = UNIQUE | NON_NULL, (empty)
        // 2906: b"number of wor ... st u8: typeof(_8 = move _9 as *const u8 (Pointer(ArrayToPointer))) = *const {l41} u8
        // 2906: b"number of wor ... st u8:   l41 = UNIQUE | NON_NULL, (empty)
        // 2906: b"number of wor ... _char: typeof(_7 = move _8 as *const i8 (Misc)) = *const {l42} i8
        // 2906: b"number of wor ... _char:   l42 = UNIQUE | NON_NULL, (empty)
        // 2906: b"number of wor ... %d\0": typeof(_10 = const b"number of workers decreased to %d\x00") = & {l39} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
        // 2906: b"number of wor ... %d\0":   l39 = UNIQUE | NON_NULL, (empty)
        numworkers,
        // 2907: numworkers: typeof(_12) = *mut {l18} i32
        // 2907: numworkers:   l18 = UNIQUE | NON_NULL, (empty)
    );
    if pthread_cond_signal(&mut workerscond) != 0 {
    // 2909: &mut workerscond: typeof(_16) = *mut {l23} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 2909: &mut workerscond:   l23 = UNIQUE | NON_NULL, (empty)
    // 2909: &mut workerscond: typeof(_17) = &mut {l25} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 2909: &mut workerscond:   l25 = UNIQUE | NON_NULL, (empty)
    // 2909: workerscond: typeof(_18) = *mut {l27} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 2909: workerscond:   l27 = UNIQUE | NON_NULL, (empty)
    // 2909: &mut workerscond: typeof(_16 = &raw mut (*_17)) = *mut {l44} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 2909: &mut workerscond:   l44 = UNIQUE | NON_NULL, (empty)
    // 2909: &mut workerscond: typeof(_17 = &mut (*_18)) = &mut {l43} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 2909: &mut workerscond:   l43 = UNIQUE | NON_NULL, (empty)
        err(
            b"failed to signal decrease of the number of workers\0" as *const u8
            // 2911: b"failed to sig ... _char: typeof(_20) = *const {l30} i8
            // 2911: b"failed to sig ... _char:   l30 = UNIQUE | NON_NULL, (empty)
            // 2911: b"failed to sig ... st u8: typeof(_21) = *const {l32} u8
            // 2911: b"failed to sig ... st u8:   l32 = UNIQUE | NON_NULL, (empty)
            // 2911: b"failed to sig ... rs\0": typeof(_22) = *const {l34} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 2911: b"failed to sig ... rs\0":   l34 = UNIQUE | NON_NULL, (empty)
            // 2911: b"failed to sig ... rs\0": typeof(_23) = & {l36} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 2911: b"failed to sig ... rs\0":   l36 = UNIQUE | NON_NULL, FIXED
            // 2911: b"failed to sig ... rs\0": typeof(_23 = const b"failed to signal decrease of the number of workers\x00") = & {l45} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 2911: b"failed to sig ... rs\0":   l45 = UNIQUE | NON_NULL, (empty)
            // 2911: b"failed to sig ... st u8: typeof(_21 = move _22 as *const u8 (Pointer(ArrayToPointer))) = *const {l47} u8
            // 2911: b"failed to sig ... st u8:   l47 = UNIQUE | NON_NULL, (empty)
            // 2911: b"failed to sig ... _char: typeof(_20 = move _21 as *const i8 (Misc)) = *const {l48} i8
            // 2911: b"failed to sig ... _char:   l48 = UNIQUE | NON_NULL, (empty)
            // 2911: b"failed to sig ... rs\0": typeof(_22 = &raw const (*_23)) = *const {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 2911: b"failed to sig ... rs\0":   l46 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        );
    }
    unlockworkers();
}
unsafe extern "C" fn nodebytes(mut n: *mut Node) -> size_t {
// 2917: mut n: typeof(_1) = *mut {g70} DefId(0:777 ~ treengeling[2d04]::Node)
// 2917: mut n:   g70 = (empty), FIXED
    return lglbytes((*n).lgl);
    // 2918: (*n).lgl: typeof(_3) = *mut {l3} LGL
    // 2918: (*n).lgl:   l3 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn nodevars(mut n: *mut Node) -> size_t {
// 2920: mut n: typeof(_1) = *mut {g71} DefId(0:777 ~ treengeling[2d04]::Node)
// 2920: mut n:   g71 = (empty), FIXED
    return lglnvars((*n).lgl) as size_t;
    // 2921: (*n).lgl: typeof(_4) = *mut {l4} LGL
    // 2921: (*n).lgl:   l4 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn cmpnodes<'h0,'h1,'h2,'h3,'h4,'h5>(
    mut m: &'h0 (Node<'h1,'h2>),
    // 2924: mut m: typeof(_1) = *mut {g72} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2924: mut m:   g72 = READ | UNIQUE | NON_NULL, (empty)
    mut n: &'h3 (Node<'h4,'h5>),
    // 2925: mut n: typeof(_2) = *mut {g73} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2925: mut n:   g73 = READ | UNIQUE | NON_NULL, (empty)
    mut dir: libc::c_int,
) -> libc::c_int {
    let mut res: libc::c_int = 0;
    let mut skipm: libc::c_int = skipnode(core::ptr::addr_of!(*(m)).cast_mut());
    // 2929: m: typeof(_7) = *mut {l7} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2929: m:   l7 = UNIQUE | NON_NULL, (empty)
    let mut skipn: libc::c_int = skipnode(core::ptr::addr_of!(*(n)).cast_mut());
    // 2930: n: typeof(_9) = *mut {l10} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2930: n:   l10 = UNIQUE | NON_NULL, (empty)
    res = skipm - skipn;
    if res != 0 {
        return res;
    }
    if skipn == 0 && skipm == 0 && {
        res = (nodevars(core::ptr::addr_of!(*(m)).cast_mut())).wrapping_sub(nodevars(core::ptr::addr_of!(*(n)).cast_mut())) as libc::c_int;
        // 2936: m: typeof(_27) = *mut {l29} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2936: m:   l29 = UNIQUE | NON_NULL, (empty)
        // 2936: n: typeof(_29) = *mut {l32} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2936: n:   l32 = UNIQUE | NON_NULL, (empty)
        res != 0
    } {
        return dir * res;
    }
    res = (*n).depth - (*m).depth;
    if res != 0 {
        return res;
    }
    if (*m).id > (*n).id {
        return -(1 as libc::c_int);
    }
    if (*m).id < (*n).id {
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe fn cmpnodes_shim(arg0: *mut Node, arg1: *mut Node, arg2: libc::c_int) -> libc::c_int {
    {
    let safe_arg0 = &*arg0.cast_const();
    let safe_arg1 = &*arg1.cast_const();
    let safe_arg2 = arg2;
    let safe_result = cmpnodes(safe_arg0,safe_arg1,safe_arg2);
    let result = safe_result;
    result
}
}

unsafe extern "C" fn cmpjobs4qsort(
    mut p: *const libc::c_void,
    // 2954: mut p: typeof(_1) = *const {g74} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2954: mut p:   g74 = READ | UNIQUE | NON_NULL, FIXED
    mut q: *const libc::c_void,
    // 2955: mut q: typeof(_2) = *const {g75} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2955: mut q:   g75 = READ | UNIQUE | NON_NULL, FIXED
) -> libc::c_int {
    let mut j: *mut Job = *(p as *mut *mut Job);
    // 2957: mut j: typeof(_4) = *mut {l4} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2957: mut j:   l4 = READ | UNIQUE | NON_NULL, (empty)
    // 2957: (p as *mut *mut Job): typeof(_5) = *mut {l6} *mut {l7} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2957: (p as *mut *mut Job):   l6 = READ | UNIQUE | NON_NULL, (empty)
    // 2957: (p as *mut *mut Job):   l7 = READ | UNIQUE | NON_NULL, (empty)
    // 2957: p: typeof(_6) = *const {l9} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2957: p:   l9 = READ | UNIQUE | NON_NULL, (empty)
    // 2957: (p as *mut *mut Job): typeof(_5 = move _6 as *mut *mut Job (Misc)) = *mut {l25} *mut {l7} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2957: (p as *mut *mut Job):   l25 = READ | UNIQUE | NON_NULL, (empty)
    // 2957: (p as *mut *mut Job):   l7 = READ | UNIQUE | NON_NULL, (empty)
    let mut k: *mut Job = *(q as *mut *mut Job);
    // 2958: mut k: typeof(_7) = *mut {l11} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2958: mut k:   l11 = READ | UNIQUE | NON_NULL, (empty)
    // 2958: (q as *mut *mut Job): typeof(_8) = *mut {l13} *mut {l14} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2958: (q as *mut *mut Job):   l13 = READ | UNIQUE | NON_NULL, (empty)
    // 2958: (q as *mut *mut Job):   l14 = READ | UNIQUE | NON_NULL, (empty)
    // 2958: q: typeof(_9) = *const {l16} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 2958: q:   l16 = READ | UNIQUE | NON_NULL, (empty)
    // 2958: (q as *mut *mut Job): typeof(_8 = move _9 as *mut *mut Job (Misc)) = *mut {l26} *mut {l14} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2958: (q as *mut *mut Job):   l26 = READ | UNIQUE | NON_NULL, (empty)
    // 2958: (q as *mut *mut Job):   l14 = READ | UNIQUE | NON_NULL, (empty)
    return cmpnodes_shim((*j).node, (*k).node, -(1 as libc::c_int));
    // 2959: (*j).node: typeof(_10) = *mut {l18} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2959: (*j).node:   l18 = READ | UNIQUE | NON_NULL, (empty)
    // 2959: (*k).node: typeof(_11) = *mut {l20} DefId(0:777 ~ treengeling[2d04]::Node)
    // 2959: (*k).node:   l20 = READ | UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn fixjobspos() {
    let mut job: *mut Job = 0 as *mut Job;
    // 2962: mut job: typeof(_1) = *mut {l1} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2962: mut job:   l1 = READ | WRITE, CELL
    // 2962: 0 as *mut Job: typeof(_1 = const 0_usize as *mut Job (PointerFromExposedAddress)) = *mut {l27} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2962: 0 as *mut Job:   l27 = READ | WRITE | UNIQUE, (empty)
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while i < numjobs {
    // 2965: numjobs: typeof(_8) = *mut {l9} i32
    // 2965: numjobs:   l9 = READ | UNIQUE | NON_NULL, (empty)
        job = *jobs.offset(i as isize);
        // 2966: *jobs.offset(i  ... size): typeof(_9) = *mut {l11} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2966: *jobs.offset(i  ... size):   l11 = READ | WRITE, CELL
        // 2966: jobs.offset(i a ... size): typeof(_10) = *mut {l13} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2966: jobs.offset(i a ... size):   l13 = READ | UNIQUE | NON_NULL, (empty)
        // 2966: jobs.offset(i a ... size):   g293 = READ | WRITE, CELL
        // 2966: jobs: typeof(_11) = *mut {l15} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2966: jobs:   l15 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
        // 2966: jobs:   g293 = READ | WRITE, CELL
        // 2966: jobs: typeof(_12) = *mut {l17} *mut {g292} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2966: jobs:   l17 = READ | UNIQUE | NON_NULL, (empty)
        // 2966: jobs:   g292 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
        // 2966: jobs:   g293 = READ | WRITE, CELL
        (*job).pos = i;
        i += 1;
        i;
    }
}
#[no_mangle]
pub unsafe extern "C" fn bytes2mb(mut bytes: size_t) -> libc::c_int {
    let mut res: size_t = bytes;
    res >>= 20 as libc::c_int;
    if res > 2147483647 as libc::c_int as size_t {
        res = 2147483647 as libc::c_int as size_t;
    }
    return res as libc::c_int;
}
unsafe extern "C" fn printnode(mut prefix: *const libc::c_char, mut node: *mut Node) {
// 2981: mut prefix: typeof(_1) = *const {g76} i8
// 2981: mut prefix:   g76 = UNIQUE | NON_NULL, FIXED
// 2981: mut node: typeof(_2) = *mut {g77} DefId(0:777 ~ treengeling[2d04]::Node)
// 2981: mut node:   g77 = READ, CELL | FIXED
    msg(
        b"  %s:  node[%d] = [%d %lld]  (%d vars, %d MB)\0" as *const u8 as *const libc::c_char,
        // 2983: b" %s: node[%d] ... _char: typeof(_4) = *const {l4} i8
        // 2983: b" %s: node[%d] ... _char:   l4 = UNIQUE | NON_NULL, (empty)
        // 2983: b" %s: node[%d] ... st u8: typeof(_5) = *const {l6} u8
        // 2983: b" %s: node[%d] ... st u8:   l6 = UNIQUE | NON_NULL, (empty)
        // 2983: b" %s: node[%d] ... B)\0": typeof(_6) = *const {l8} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
        // 2983: b" %s: node[%d] ... B)\0":   l8 = UNIQUE | NON_NULL, (empty)
        // 2983: b" %s: node[%d] ... B)\0": typeof(_7) = & {l10} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
        // 2983: b" %s: node[%d] ... B)\0":   l10 = UNIQUE | NON_NULL, FIXED
        // 2983: b" %s: node[%d] ... st u8: typeof(_5 = move _6 as *const u8 (Pointer(ArrayToPointer))) = *const {l26} u8
        // 2983: b" %s: node[%d] ... st u8:   l26 = UNIQUE | NON_NULL, (empty)
        // 2983: b" %s: node[%d] ... B)\0": typeof(_6 = &raw const (*_7)) = *const {l25} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
        // 2983: b" %s: node[%d] ... B)\0":   l25 = UNIQUE | NON_NULL, (empty)
        // 2983: b" %s: node[%d] ... _char: typeof(_4 = move _5 as *const i8 (Misc)) = *const {l27} i8
        // 2983: b" %s: node[%d] ... _char:   l27 = UNIQUE | NON_NULL, (empty)
        // 2983: b" %s: node[%d] ... B)\0": typeof(_7 = const b"  %s:  node[%d] = [%d %lld]  (%d vars, %d MB)\x00") = & {l24} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
        // 2983: b" %s: node[%d] ... B)\0":   l24 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        prefix,
        // 2984: prefix: typeof(_8) = *const {l12} i8
        // 2984: prefix:   l12 = UNIQUE | NON_NULL, (empty)
        (*node).pos,
        (*node).depth,
        (*node).id as libc::c_longlong,
        nodevars(node),
        // 2988: node: typeof(_13) = *mut {l18} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2988: node:   l18 = (empty), (empty)
        bytes2mb(nodebytes(node)),
        // 2989: node: typeof(_16) = *mut {l22} DefId(0:777 ~ treengeling[2d04]::Node)
        // 2989: node:   l22 = (empty), (empty)
    );
}
unsafe extern "C" fn printjobs() {
    let mut str: [libc::c_char; 80] = [0; 80];
    let mut job: *mut Job = 0 as *mut Job;
    // 2994: mut job: typeof(_2) = *mut {l2} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2994: mut job:   l2 = UNIQUE | NON_NULL, (empty)
    // 2994: 0 as *mut Job: typeof(_2 = const 0_usize as *mut Job (PointerFromExposedAddress)) = *mut {l80} DefId(0:822 ~ treengeling[2d04]::Job)
    // 2994: 0 as *mut Job:   l80 = UNIQUE | NON_NULL, (empty)
    let mut i: libc::c_int = 0;
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 2996: b"\0" as *const ... _char: typeof(_5) = *const {l6} i8
    // 2996: b"\0" as *const ... _char:   l6 = UNIQUE | NON_NULL, (empty)
    // 2996: b"\0" as *const u8: typeof(_6) = *const {l8} u8
    // 2996: b"\0" as *const u8:   l8 = UNIQUE | NON_NULL, (empty)
    // 2996: b"\0": typeof(_7) = *const {l10} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 2996: b"\0":   l10 = UNIQUE | NON_NULL, (empty)
    // 2996: b"\0": typeof(_8) = & {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 2996: b"\0":   l12 = UNIQUE | NON_NULL, FIXED
    // 2996: b"\0" as *const ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l84} i8
    // 2996: b"\0" as *const ... _char:   l84 = UNIQUE | NON_NULL, (empty)
    // 2996: b"\0" as *const u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l83} u8
    // 2996: b"\0" as *const u8:   l83 = UNIQUE | NON_NULL, (empty)
    // 2996: b"\0": typeof(_7 = &raw const (*_8)) = *const {l82} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 2996: b"\0":   l82 = UNIQUE | NON_NULL, (empty)
    // 2996: b"\0": typeof(_8 = const b"\x00") = & {l81} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 2996: b"\0":   l81 = UNIQUE | NON_NULL, (empty)
    i = 0 as libc::c_int;
    while i < numjobs {
    // 2998: numjobs: typeof(_15) = *mut {l20} i32
    // 2998: numjobs:   l20 = UNIQUE | NON_NULL, (empty)
        job = *jobs.offset(i as isize);
        // 2999: *jobs.offset(i  ... size): typeof(_16) = *mut {l22} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2999: *jobs.offset(i  ... size):   l22 = UNIQUE | NON_NULL, (empty)
        // 2999: jobs.offset(i a ... size): typeof(_17) = *mut {l24} *mut {l25} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2999: jobs.offset(i a ... size):   l24 = UNIQUE | NON_NULL, (empty)
        // 2999: jobs.offset(i a ... size):   l25 = UNIQUE | NON_NULL, (empty)
        // 2999: jobs: typeof(_18) = *mut {l27} *mut {l28} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2999: jobs:   l27 = UNIQUE | NON_NULL, (empty)
        // 2999: jobs:   l28 = UNIQUE | NON_NULL, (empty)
        // 2999: jobs: typeof(_19) = *mut {l30} *mut {l31} *mut {l32} DefId(0:822 ~ treengeling[2d04]::Job)
        // 2999: jobs:   l30 = UNIQUE | NON_NULL, (empty)
        // 2999: jobs:   l31 = UNIQUE | NON_NULL, (empty)
        // 2999: jobs:   l32 = UNIQUE | NON_NULL, (empty)
        sprintf(
            str.as_mut_ptr(),
            // 3001: str.as_mut_ptr(): typeof(_23) = *mut {l37} i8
            // 3001: str.as_mut_ptr():   l37 = UNIQUE | NON_NULL, (empty)
            // 3001: str.as_mut_ptr(): typeof(_24) = &mut {l39} [i8]
            // 3001: str.as_mut_ptr():   l39 = UNIQUE | NON_NULL, FIXED
            // 3001: str.as_mut_ptr(): typeof(_25) = &mut {l41} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
            // 3001: str.as_mut_ptr():   l41 = UNIQUE | NON_NULL, (empty)
            // 3001: str.as_mut_ptr(): typeof(_24 = move _25 as &mut [i8] (Pointer(Unsize))) = &mut {l86} [i8]
            // 3001: str.as_mut_ptr():   l86 = UNIQUE | NON_NULL, FIXED
            // 3001: str.as_mut_ptr(): typeof(_25 = &mut _1) = &mut {l85} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
            // 3001: str.as_mut_ptr():   l85 = UNIQUE | NON_NULL, (empty)
            b"job[%d] round %d\0" as *const u8 as *const libc::c_char,
            // 3002: b"job[%d] round ... _char: typeof(_26) = *const {l43} i8
            // 3002: b"job[%d] round ... _char:   l43 = UNIQUE | NON_NULL, (empty)
            // 3002: b"job[%d] round ... st u8: typeof(_27) = *const {l45} u8
            // 3002: b"job[%d] round ... st u8:   l45 = UNIQUE | NON_NULL, (empty)
            // 3002: b"job[%d] round ... %d\0": typeof(_28) = *const {l47} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 3002: b"job[%d] round ... %d\0":   l47 = UNIQUE | NON_NULL, (empty)
            // 3002: b"job[%d] round ... %d\0": typeof(_29) = & {l49} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 3002: b"job[%d] round ... %d\0":   l49 = UNIQUE | NON_NULL, FIXED
            // 3002: b"job[%d] round ... st u8: typeof(_27 = move _28 as *const u8 (Pointer(ArrayToPointer))) = *const {l89} u8
            // 3002: b"job[%d] round ... st u8:   l89 = UNIQUE | NON_NULL, (empty)
            // 3002: b"job[%d] round ... _char: typeof(_26 = move _27 as *const i8 (Misc)) = *const {l90} i8
            // 3002: b"job[%d] round ... _char:   l90 = UNIQUE | NON_NULL, (empty)
            // 3002: b"job[%d] round ... %d\0": typeof(_29 = const b"job[%d] round %d\x00") = & {l87} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 3002: b"job[%d] round ... %d\0":   l87 = UNIQUE | NON_NULL, (empty)
            // 3002: b"job[%d] round ... %d\0": typeof(_28 = &raw const (*_29)) = *const {l88} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 3002: b"job[%d] round ... %d\0":   l88 = UNIQUE | NON_NULL, (empty)
            i,
            round,
            // 3004: round: typeof(_32) = *mut {l53} i32
            // 3004: round:   l53 = UNIQUE | NON_NULL, (empty)
        );
        printnode(str.as_mut_ptr(), (*job).node);
        // 3006: str.as_mut_ptr(): typeof(_34) = *const {l56} i8
        // 3006: str.as_mut_ptr():   l56 = UNIQUE | NON_NULL, (empty)
        // 3006: str.as_mut_ptr(): typeof(_35) = *mut {l58} i8
        // 3006: str.as_mut_ptr():   l58 = UNIQUE | NON_NULL, (empty)
        // 3006: str.as_mut_ptr(): typeof(_36) = &mut {l60} [i8]
        // 3006: str.as_mut_ptr():   l60 = UNIQUE | NON_NULL, FIXED
        // 3006: str.as_mut_ptr(): typeof(_37) = &mut {l62} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
        // 3006: str.as_mut_ptr():   l62 = UNIQUE | NON_NULL, (empty)
        // 3006: (*job).node: typeof(_38) = *mut {l64} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3006: (*job).node:   l64 = UNIQUE | NON_NULL, (empty)
        // 3006: str.as_mut_ptr(): typeof(_36 = move _37 as &mut [i8] (Pointer(Unsize))) = &mut {l92} [i8]
        // 3006: str.as_mut_ptr():   l92 = UNIQUE | NON_NULL, FIXED
        // 3006: str.as_mut_ptr(): typeof(_34 = move _35 as *const i8 (Pointer(MutToConstPointer))) = *const {l93} i8
        // 3006: str.as_mut_ptr():   l93 = UNIQUE | NON_NULL, (empty)
        // 3006: str.as_mut_ptr(): typeof(_37 = &mut _1) = &mut {l91} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
        // 3006: str.as_mut_ptr():   l91 = UNIQUE | NON_NULL, (empty)
        i += 1;
        i;
    }
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 3010: b"\0" as *const ... _char: typeof(_45) = *const {l72} i8
    // 3010: b"\0" as *const ... _char:   l72 = UNIQUE | NON_NULL, (empty)
    // 3010: b"\0" as *const u8: typeof(_46) = *const {l74} u8
    // 3010: b"\0" as *const u8:   l74 = UNIQUE | NON_NULL, (empty)
    // 3010: b"\0": typeof(_47) = *const {l76} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3010: b"\0":   l76 = UNIQUE | NON_NULL, (empty)
    // 3010: b"\0": typeof(_48) = & {l78} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3010: b"\0":   l78 = UNIQUE | NON_NULL, FIXED
    // 3010: b"\0": typeof(_47 = &raw const (*_48)) = *const {l95} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3010: b"\0":   l95 = UNIQUE | NON_NULL, (empty)
    // 3010: b"\0" as *const ... _char: typeof(_45 = move _46 as *const i8 (Misc)) = *const {l97} i8
    // 3010: b"\0" as *const ... _char:   l97 = UNIQUE | NON_NULL, (empty)
    // 3010: b"\0" as *const u8: typeof(_46 = move _47 as *const u8 (Pointer(ArrayToPointer))) = *const {l96} u8
    // 3010: b"\0" as *const u8:   l96 = UNIQUE | NON_NULL, (empty)
    // 3010: b"\0": typeof(_48 = const b"\x00") = & {l94} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3010: b"\0":   l94 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn sortjobs() {
    qsort(
        jobs as *mut libc::c_void,
        // 3014: jobs as *mut li ... _void: typeof(_2) = *mut {l2} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3014: jobs as *mut li ... _void:   l2 = UNIQUE | NON_NULL, (empty)
        // 3014: jobs: typeof(_3) = *mut {l4} *mut {l5} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3014: jobs:   l4 = UNIQUE | NON_NULL, (empty)
        // 3014: jobs:   l5 = UNIQUE | NON_NULL, (empty)
        // 3014: jobs: typeof(_4) = *mut {l7} *mut {l8} *mut {l9} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3014: jobs:   l7 = UNIQUE | NON_NULL, (empty)
        // 3014: jobs:   l8 = UNIQUE | NON_NULL, (empty)
        // 3014: jobs:   l9 = UNIQUE | NON_NULL, (empty)
        // 3014: jobs as *mut li ... _void: typeof(_2 = move _3 as *mut libc::c_void (Misc)) = *mut {l29} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3014: jobs as *mut li ... _void:   l29 = UNIQUE | NON_NULL, (empty)
        numjobs as size_t,
        // 3015: numjobs: typeof(_7) = *mut {l13} i32
        // 3015: numjobs:   l13 = UNIQUE | NON_NULL, (empty)
        ::core::mem::size_of::<*mut Job>() as libc::c_ulong,
        Some(
        // 3017: Some( cmpjobs4q ... nt, ): typeof(_10) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l17} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l18} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3017: Some( cmpjobs4q ... nt, ):   l17 = UNIQUE | NON_NULL, (empty)
        // 3017: Some( cmpjobs4q ... nt, ):   l18 = UNIQUE | NON_NULL, (empty)
        // 3017: Some( cmpjobs4q ... nt, ): typeof(_10 = std::option::Option::<unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32>::Some(move _11)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l32} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l33} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3017: Some( cmpjobs4q ... nt, ):   l32 = UNIQUE | NON_NULL, (empty)
        // 3017: Some( cmpjobs4q ... nt, ):   l33 = UNIQUE | NON_NULL, (empty)
            cmpjobs4qsort
            // 3018: cmpjobs4qsort a ... c_int: typeof(_11) = fn(*const {l20} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l21} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 3018: cmpjobs4qsort a ... c_int:   l20 = UNIQUE | NON_NULL, (empty)
            // 3018: cmpjobs4qsort a ... c_int:   l21 = UNIQUE | NON_NULL, (empty)
            // 3018: cmpjobs4qsort: typeof(_11 = cmpjobs4qsort as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*const {l30} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l31} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 3018: cmpjobs4qsort:   l30 = UNIQUE | NON_NULL, (empty)
            // 3018: cmpjobs4qsort:   l31 = UNIQUE | NON_NULL, (empty)
                as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> libc::c_int,
        ),
    );
    fixjobspos();
    if verbose != 0 {
    // 3023: verbose: typeof(_15) = *mut {l26} i32
    // 3023: verbose:   l26 = UNIQUE | NON_NULL, (empty)
        printjobs();
    }
}
unsafe extern "C" fn runjobs() {
    let mut job: *mut Job = 0 as *mut Job;
    // 3028: mut job: typeof(_1) = *mut {l1} DefId(0:822 ~ treengeling[2d04]::Job)
    // 3028: mut job:   l1 = (empty), CELL
    // 3028: 0 as *mut Job: typeof(_1 = const 0_usize as *mut Job (PointerFromExposedAddress)) = *mut {l59} DefId(0:822 ~ treengeling[2d04]::Job)
    // 3028: 0 as *mut Job:   l59 = UNIQUE, CELL
    let mut i: libc::c_int = 0;
    sortjobs();
    vrb(
        b"running %d jobs\0" as *const u8 as *const libc::c_char,
        // 3032: b"running %d jo ... _char: typeof(_5) = *const {l6} i8
        // 3032: b"running %d jo ... _char:   l6 = UNIQUE | NON_NULL, (empty)
        // 3032: b"running %d jo ... st u8: typeof(_6) = *const {l8} u8
        // 3032: b"running %d jo ... st u8:   l8 = UNIQUE | NON_NULL, (empty)
        // 3032: b"running %d jobs\0": typeof(_7) = *const {l10} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000010)) }]
        // 3032: b"running %d jobs\0":   l10 = UNIQUE | NON_NULL, (empty)
        // 3032: b"running %d jobs\0": typeof(_8) = & {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000010)) }]
        // 3032: b"running %d jobs\0":   l12 = UNIQUE | NON_NULL, FIXED
        // 3032: b"running %d jo ... st u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l62} u8
        // 3032: b"running %d jo ... st u8:   l62 = UNIQUE | NON_NULL, (empty)
        // 3032: b"running %d jo ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l63} i8
        // 3032: b"running %d jo ... _char:   l63 = UNIQUE | NON_NULL, (empty)
        // 3032: b"running %d jobs\0": typeof(_8 = const b"running %d jobs\x00") = & {l60} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000010)) }]
        // 3032: b"running %d jobs\0":   l60 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 3032: b"running %d jobs\0": typeof(_7 = &raw const (*_8)) = *const {l61} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000010)) }]
        // 3032: b"running %d jobs\0":   l61 = UNIQUE | NON_NULL, (empty)
        numjobs,
        // 3033: numjobs: typeof(_10) = *mut {l15} i32
        // 3033: numjobs:   l15 = READ | UNIQUE | NON_NULL, (empty)
    );
    numworkers = 0 as libc::c_int;
    // 3035: numworkers: typeof(_12) = *mut {l18} i32
    // 3035: numworkers:   l18 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    i = 0 as libc::c_int;
    while i < numjobs {
    // 3037: numjobs: typeof(_19) = *mut {l26} i32
    // 3037: numjobs:   l26 = READ | UNIQUE | NON_NULL, (empty)
        incworkers();
        job = *jobs.offset(i as isize);
        // 3039: *jobs.offset(i  ... size): typeof(_21) = *mut {l29} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3039: *jobs.offset(i  ... size):   l29 = (empty), CELL
        // 3039: jobs.offset(i a ... size): typeof(_22) = *mut {l31} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3039: jobs.offset(i a ... size):   l31 = READ | UNIQUE | NON_NULL, (empty)
        // 3039: jobs.offset(i a ... size):   g293 = READ | WRITE, CELL
        // 3039: jobs: typeof(_23) = *mut {l33} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3039: jobs:   l33 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
        // 3039: jobs:   g293 = READ | WRITE, CELL
        // 3039: jobs: typeof(_24) = *mut {l35} *mut {g292} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3039: jobs:   l35 = READ | UNIQUE | NON_NULL, (empty)
        // 3039: jobs:   g292 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
        // 3039: jobs:   g293 = READ | WRITE, CELL
        runjob(job);
        // 3040: job: typeof(_28) = *mut {l40} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3040: job:   l40 = (empty), CELL
        i += 1;
        i;
    }
    vrb(
        b"started running %d jobs\0" as *const u8 as *const libc::c_char,
        // 3045: b"started runni ... _char: typeof(_35) = *const {l48} i8
        // 3045: b"started runni ... _char:   l48 = UNIQUE | NON_NULL, (empty)
        // 3045: b"started runni ... st u8: typeof(_36) = *const {l50} u8
        // 3045: b"started runni ... st u8:   l50 = UNIQUE | NON_NULL, (empty)
        // 3045: b"started runni ... bs\0": typeof(_37) = *const {l52} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 3045: b"started runni ... bs\0":   l52 = UNIQUE | NON_NULL, (empty)
        // 3045: b"started runni ... bs\0": typeof(_38) = & {l54} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 3045: b"started runni ... bs\0":   l54 = UNIQUE | NON_NULL, FIXED
        // 3045: b"started runni ... _char: typeof(_35 = move _36 as *const i8 (Misc)) = *const {l67} i8
        // 3045: b"started runni ... _char:   l67 = UNIQUE | NON_NULL, (empty)
        // 3045: b"started runni ... st u8: typeof(_36 = move _37 as *const u8 (Pointer(ArrayToPointer))) = *const {l66} u8
        // 3045: b"started runni ... st u8:   l66 = UNIQUE | NON_NULL, (empty)
        // 3045: b"started runni ... bs\0": typeof(_37 = &raw const (*_38)) = *const {l65} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 3045: b"started runni ... bs\0":   l65 = UNIQUE | NON_NULL, (empty)
        // 3045: b"started runni ... bs\0": typeof(_38 = const b"started running %d jobs\x00") = & {l64} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 3045: b"started runni ... bs\0":   l64 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        numjobs,
        // 3046: numjobs: typeof(_40) = *mut {l57} i32
        // 3046: numjobs:   l57 = READ | UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn joinjob(mut job: *mut Job) {
// 3049: mut job: typeof(_1) = *mut {g78} DefId(0:822 ~ treengeling[2d04]::Job)
// 3049: mut job:   g78 = (empty), CELL | FIXED
    let mut node: *mut Node = (*job).node;
    // 3050: mut node: typeof(_2) = *mut {l2} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3050: mut node:   l2 = UNIQUE | NON_NULL, (empty)
    if (*node).state as libc::c_uint == SEARCH as libc::c_int as libc::c_uint {
        mmsg(b"join search\0" as *const u8 as *const libc::c_char, node);
        // 3052: b"join search\0 ... _char: typeof(_9) = *const {l10} i8
        // 3052: b"join search\0 ... _char:   l10 = UNIQUE | NON_NULL, (empty)
        // 3052: b"join search\0 ... st u8: typeof(_10) = *const {l12} u8
        // 3052: b"join search\0 ... st u8:   l12 = UNIQUE | NON_NULL, (empty)
        // 3052: b"join search\0": typeof(_11) = *const {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 3052: b"join search\0":   l14 = UNIQUE | NON_NULL, (empty)
        // 3052: b"join search\0": typeof(_12) = & {l16} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 3052: b"join search\0":   l16 = UNIQUE | NON_NULL, FIXED
        // 3052: node: typeof(_13) = *mut {l18} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3052: node:   l18 = UNIQUE | NON_NULL, (empty)
        // 3052: b"join search\0 ... _char: typeof(_9 = move _10 as *const i8 (Misc)) = *const {l137} i8
        // 3052: b"join search\0 ... _char:   l137 = UNIQUE | NON_NULL, (empty)
        // 3052: b"join search\0": typeof(_12 = const b"join search\x00") = & {l134} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 3052: b"join search\0":   l134 = UNIQUE | NON_NULL, (empty)
        // 3052: b"join search\0 ... st u8: typeof(_10 = move _11 as *const u8 (Pointer(ArrayToPointer))) = *const {l136} u8
        // 3052: b"join search\0 ... st u8:   l136 = UNIQUE | NON_NULL, (empty)
        // 3052: b"join search\0": typeof(_11 = &raw const (*_12)) = *const {l135} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 3052: b"join search\0":   l135 = UNIQUE | NON_NULL, (empty)
    } else if (*node).state as libc::c_uint == SIMP as libc::c_int as libc::c_uint {
        mmsg(b"join simp\0" as *const u8 as *const libc::c_char, node);
        // 3054: b"join simp\0"  ... _char: typeof(_19) = *const {l25} i8
        // 3054: b"join simp\0"  ... _char:   l25 = UNIQUE | NON_NULL, (empty)
        // 3054: b"join simp\0"  ... st u8: typeof(_20) = *const {l27} u8
        // 3054: b"join simp\0"  ... st u8:   l27 = UNIQUE | NON_NULL, (empty)
        // 3054: b"join simp\0": typeof(_21) = *const {l29} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3054: b"join simp\0":   l29 = UNIQUE | NON_NULL, (empty)
        // 3054: b"join simp\0": typeof(_22) = & {l31} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3054: b"join simp\0":   l31 = UNIQUE | NON_NULL, FIXED
        // 3054: node: typeof(_23) = *mut {l33} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3054: node:   l33 = UNIQUE | NON_NULL, (empty)
        // 3054: b"join simp\0": typeof(_21 = &raw const (*_22)) = *const {l139} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3054: b"join simp\0":   l139 = UNIQUE | NON_NULL, (empty)
        // 3054: b"join simp\0"  ... st u8: typeof(_20 = move _21 as *const u8 (Pointer(ArrayToPointer))) = *const {l140} u8
        // 3054: b"join simp\0"  ... st u8:   l140 = UNIQUE | NON_NULL, (empty)
        // 3054: b"join simp\0"  ... _char: typeof(_19 = move _20 as *const i8 (Misc)) = *const {l141} i8
        // 3054: b"join simp\0"  ... _char:   l141 = UNIQUE | NON_NULL, (empty)
        // 3054: b"join simp\0": typeof(_22 = const b"join simp\x00") = & {l138} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3054: b"join simp\0":   l138 = UNIQUE | NON_NULL, (empty)
    } else if (*node).state as libc::c_uint == LKHD as libc::c_int as libc::c_uint {
        mmsg(b"join simp\0" as *const u8 as *const libc::c_char, node);
        // 3056: b"join simp\0"  ... _char: typeof(_29) = *const {l40} i8
        // 3056: b"join simp\0"  ... _char:   l40 = UNIQUE | NON_NULL, (empty)
        // 3056: b"join simp\0"  ... st u8: typeof(_30) = *const {l42} u8
        // 3056: b"join simp\0"  ... st u8:   l42 = UNIQUE | NON_NULL, (empty)
        // 3056: b"join simp\0": typeof(_31) = *const {l44} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3056: b"join simp\0":   l44 = UNIQUE | NON_NULL, (empty)
        // 3056: b"join simp\0": typeof(_32) = & {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3056: b"join simp\0":   l46 = UNIQUE | NON_NULL, FIXED
        // 3056: node: typeof(_33) = *mut {l48} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3056: node:   l48 = UNIQUE | NON_NULL, (empty)
        // 3056: b"join simp\0": typeof(_32 = const b"join simp\x00") = & {l142} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3056: b"join simp\0":   l142 = UNIQUE | NON_NULL, (empty)
        // 3056: b"join simp\0"  ... _char: typeof(_29 = move _30 as *const i8 (Misc)) = *const {l145} i8
        // 3056: b"join simp\0"  ... _char:   l145 = UNIQUE | NON_NULL, (empty)
        // 3056: b"join simp\0"  ... st u8: typeof(_30 = move _31 as *const u8 (Pointer(ArrayToPointer))) = *const {l144} u8
        // 3056: b"join simp\0"  ... st u8:   l144 = UNIQUE | NON_NULL, (empty)
        // 3056: b"join simp\0": typeof(_31 = &raw const (*_32)) = *const {l143} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3056: b"join simp\0":   l143 = UNIQUE | NON_NULL, (empty)
    } else {
        mmsg(b"join split\0" as *const u8 as *const libc::c_char, node);
        // 3058: b"join split\0" ... _char: typeof(_35) = *const {l51} i8
        // 3058: b"join split\0" ... _char:   l51 = UNIQUE | NON_NULL, (empty)
        // 3058: b"join split\0" ... st u8: typeof(_36) = *const {l53} u8
        // 3058: b"join split\0" ... st u8:   l53 = UNIQUE | NON_NULL, (empty)
        // 3058: b"join split\0": typeof(_37) = *const {l55} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 3058: b"join split\0":   l55 = UNIQUE | NON_NULL, (empty)
        // 3058: b"join split\0": typeof(_38) = & {l57} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 3058: b"join split\0":   l57 = UNIQUE | NON_NULL, FIXED
        // 3058: node: typeof(_39) = *mut {l59} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3058: node:   l59 = UNIQUE | NON_NULL, (empty)
        // 3058: b"join split\0" ... _char: typeof(_35 = move _36 as *const i8 (Misc)) = *const {l149} i8
        // 3058: b"join split\0" ... _char:   l149 = UNIQUE | NON_NULL, (empty)
        // 3058: b"join split\0" ... st u8: typeof(_36 = move _37 as *const u8 (Pointer(ArrayToPointer))) = *const {l148} u8
        // 3058: b"join split\0" ... st u8:   l148 = UNIQUE | NON_NULL, (empty)
        // 3058: b"join split\0": typeof(_37 = &raw const (*_38)) = *const {l147} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 3058: b"join split\0":   l147 = UNIQUE | NON_NULL, (empty)
        // 3058: b"join split\0": typeof(_38 = const b"join split\x00") = & {l146} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
        // 3058: b"join split\0":   l146 = UNIQUE | NON_NULL, (empty)
    }
    if pthread_join((*job).thread, 0 as *mut *mut libc::c_void) != 0 {
    // 3060: 0 as *mut *mut  ... _void: typeof(_44) = *mut {l65} *mut {l66} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3060: 0 as *mut *mut  ... _void:   l65 = UNIQUE | NON_NULL, (empty)
    // 3060: 0 as *mut *mut  ... _void:   l66 = UNIQUE | NON_NULL, (empty)
    // 3060: 0 as *mut *mut  ... _void: typeof(_44 = const 0_usize as *mut *mut libc::c_void (PointerFromExposedAddress)) = *mut {l150} *mut {l151} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3060: 0 as *mut *mut  ... _void:   l150 = UNIQUE | NON_NULL, (empty)
    // 3060: 0 as *mut *mut  ... _void:   l151 = UNIQUE | NON_NULL, (empty)
        err(b"failed to join thread\0" as *const u8 as *const libc::c_char);
        // 3061: b"failed to joi ... _char: typeof(_46) = *const {l69} i8
        // 3061: b"failed to joi ... _char:   l69 = UNIQUE | NON_NULL, (empty)
        // 3061: b"failed to joi ... st u8: typeof(_47) = *const {l71} u8
        // 3061: b"failed to joi ... st u8:   l71 = UNIQUE | NON_NULL, (empty)
        // 3061: b"failed to joi ... ad\0": typeof(_48) = *const {l73} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
        // 3061: b"failed to joi ... ad\0":   l73 = UNIQUE | NON_NULL, (empty)
        // 3061: b"failed to joi ... ad\0": typeof(_49) = & {l75} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
        // 3061: b"failed to joi ... ad\0":   l75 = UNIQUE | NON_NULL, FIXED
        // 3061: b"failed to joi ... ad\0": typeof(_49 = const b"failed to join thread\x00") = & {l152} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
        // 3061: b"failed to joi ... ad\0":   l152 = UNIQUE | NON_NULL, (empty)
        // 3061: b"failed to joi ... st u8: typeof(_47 = move _48 as *const u8 (Pointer(ArrayToPointer))) = *const {l154} u8
        // 3061: b"failed to joi ... st u8:   l154 = UNIQUE | NON_NULL, (empty)
        // 3061: b"failed to joi ... ad\0": typeof(_48 = &raw const (*_49)) = *const {l153} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000016)) }]
        // 3061: b"failed to joi ... ad\0":   l153 = UNIQUE | NON_NULL, (empty)
        // 3061: b"failed to joi ... _char: typeof(_46 = move _47 as *const i8 (Misc)) = *const {l155} i8
        // 3061: b"failed to joi ... _char:   l155 = UNIQUE | NON_NULL, (empty)
    }
    (*node).state = READY;
    if (*node).res == 20 as libc::c_int {
        mmsg(b"unsatisfiable\0" as *const u8 as *const libc::c_char, node);
        // 3065: b"unsatisfiable ... _char: typeof(_55) = *const {l82} i8
        // 3065: b"unsatisfiable ... _char:   l82 = UNIQUE | NON_NULL, (empty)
        // 3065: b"unsatisfiable ... st u8: typeof(_56) = *const {l84} u8
        // 3065: b"unsatisfiable ... st u8:   l84 = UNIQUE | NON_NULL, (empty)
        // 3065: b"unsatisfiable\0": typeof(_57) = *const {l86} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 3065: b"unsatisfiable\0":   l86 = UNIQUE | NON_NULL, (empty)
        // 3065: b"unsatisfiable\0": typeof(_58) = & {l88} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 3065: b"unsatisfiable\0":   l88 = UNIQUE | NON_NULL, FIXED
        // 3065: node: typeof(_59) = *mut {l90} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3065: node:   l90 = UNIQUE | NON_NULL, (empty)
        // 3065: b"unsatisfiable ... st u8: typeof(_56 = move _57 as *const u8 (Pointer(ArrayToPointer))) = *const {l158} u8
        // 3065: b"unsatisfiable ... st u8:   l158 = UNIQUE | NON_NULL, (empty)
        // 3065: b"unsatisfiable\0": typeof(_57 = &raw const (*_58)) = *const {l157} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 3065: b"unsatisfiable\0":   l157 = UNIQUE | NON_NULL, (empty)
        // 3065: b"unsatisfiable\0": typeof(_58 = const b"unsatisfiable\x00") = & {l156} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 3065: b"unsatisfiable\0":   l156 = UNIQUE | NON_NULL, (empty)
        // 3065: b"unsatisfiable ... _char: typeof(_55 = move _56 as *const i8 (Misc)) = *const {l159} i8
        // 3065: b"unsatisfiable ... _char:   l159 = UNIQUE | NON_NULL, (empty)
    } else if (*node).res == 10 as libc::c_int {
        lockdone();
        mmsg(b"satisfiable\0" as *const u8 as *const libc::c_char, node);
        // 3068: b"satisfiable\0 ... _char: typeof(_65) = *const {l97} i8
        // 3068: b"satisfiable\0 ... _char:   l97 = UNIQUE | NON_NULL, (empty)
        // 3068: b"satisfiable\0 ... st u8: typeof(_66) = *const {l99} u8
        // 3068: b"satisfiable\0 ... st u8:   l99 = UNIQUE | NON_NULL, (empty)
        // 3068: b"satisfiable\0": typeof(_67) = *const {l101} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 3068: b"satisfiable\0":   l101 = UNIQUE | NON_NULL, (empty)
        // 3068: b"satisfiable\0": typeof(_68) = & {l103} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 3068: b"satisfiable\0":   l103 = UNIQUE | NON_NULL, FIXED
        // 3068: node: typeof(_69) = *mut {l105} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3068: node:   l105 = UNIQUE | NON_NULL, (empty)
        // 3068: b"satisfiable\0 ... st u8: typeof(_66 = move _67 as *const u8 (Pointer(ArrayToPointer))) = *const {l162} u8
        // 3068: b"satisfiable\0 ... st u8:   l162 = UNIQUE | NON_NULL, (empty)
        // 3068: b"satisfiable\0": typeof(_67 = &raw const (*_68)) = *const {l161} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 3068: b"satisfiable\0":   l161 = UNIQUE | NON_NULL, (empty)
        // 3068: b"satisfiable\0 ... _char: typeof(_65 = move _66 as *const i8 (Misc)) = *const {l163} i8
        // 3068: b"satisfiable\0 ... _char:   l163 = UNIQUE | NON_NULL, (empty)
        // 3068: b"satisfiable\0": typeof(_68 = const b"satisfiable\x00") = & {l160} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 3068: b"satisfiable\0":   l160 = UNIQUE | NON_NULL, (empty)
        done = 10 as libc::c_int;
        // 3069: done: typeof(_71) = *mut {l108} i32
        // 3069: done:   l108 = UNIQUE | NON_NULL, (empty)
        unlockdone();
    } else {
        mmsg(b"unknown\0" as *const u8 as *const libc::c_char, node);
        // 3072: b"unknown\0" as ... _char: typeof(_74) = *const {l112} i8
        // 3072: b"unknown\0" as ... _char:   l112 = UNIQUE | NON_NULL, (empty)
        // 3072: b"unknown\0" as ... st u8: typeof(_75) = *const {l114} u8
        // 3072: b"unknown\0" as ... st u8:   l114 = UNIQUE | NON_NULL, (empty)
        // 3072: b"unknown\0": typeof(_76) = *const {l116} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 3072: b"unknown\0":   l116 = UNIQUE | NON_NULL, (empty)
        // 3072: b"unknown\0": typeof(_77) = & {l118} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 3072: b"unknown\0":   l118 = UNIQUE | NON_NULL, FIXED
        // 3072: node: typeof(_78) = *mut {l120} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3072: node:   l120 = UNIQUE | NON_NULL, (empty)
        // 3072: b"unknown\0" as ... _char: typeof(_74 = move _75 as *const i8 (Misc)) = *const {l167} i8
        // 3072: b"unknown\0" as ... _char:   l167 = UNIQUE | NON_NULL, (empty)
        // 3072: b"unknown\0" as ... st u8: typeof(_75 = move _76 as *const u8 (Pointer(ArrayToPointer))) = *const {l166} u8
        // 3072: b"unknown\0" as ... st u8:   l166 = UNIQUE | NON_NULL, (empty)
        // 3072: b"unknown\0": typeof(_77 = const b"unknown\x00") = & {l164} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 3072: b"unknown\0":   l164 = UNIQUE | NON_NULL, (empty)
        // 3072: b"unknown\0": typeof(_76 = &raw const (*_77)) = *const {l165} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 3072: b"unknown\0":   l165 = UNIQUE | NON_NULL, (empty)
    }
    let mut BYTES: size_t = (1 as libc::c_int as libc::c_ulong)
        .wrapping_mul(::core::mem::size_of::<Job>() as libc::c_ulong);
    decmem(BYTES);
    free(job as *mut libc::c_void);
    // 3077: job as *mut lib ... _void: typeof(_87) = *mut {l130} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3077: job as *mut lib ... _void:   l130 = UNIQUE | NON_NULL, (empty)
    // 3077: job: typeof(_88) = *mut {l132} DefId(0:822 ~ treengeling[2d04]::Job)
    // 3077: job:   l132 = UNIQUE | NON_NULL, (empty)
    // 3077: job as *mut lib ... _void: typeof(_87 = move _88 as *mut libc::c_void (Misc)) = *mut {l168} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3077: job as *mut lib ... _void:   l168 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn joinjobs() {
    let mut i: libc::c_int = 0;
    vrb(
        b"joining %d jobs in round %d\0" as *const u8 as *const libc::c_char,
        // 3082: b"joining %d jo ... _char: typeof(_3) = *const {l3} i8
        // 3082: b"joining %d jo ... _char:   l3 = UNIQUE | NON_NULL, (empty)
        // 3082: b"joining %d jo ... st u8: typeof(_4) = *const {l5} u8
        // 3082: b"joining %d jo ... st u8:   l5 = UNIQUE | NON_NULL, (empty)
        // 3082: b"joining %d jo ... %d\0": typeof(_5) = *const {l7} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 3082: b"joining %d jo ... %d\0":   l7 = UNIQUE | NON_NULL, (empty)
        // 3082: b"joining %d jo ... %d\0": typeof(_6) = & {l9} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 3082: b"joining %d jo ... %d\0":   l9 = UNIQUE | NON_NULL, FIXED
        // 3082: b"joining %d jo ... _char: typeof(_3 = move _4 as *const i8 (Misc)) = *const {l62} i8
        // 3082: b"joining %d jo ... _char:   l62 = UNIQUE | NON_NULL, (empty)
        // 3082: b"joining %d jo ... st u8: typeof(_4 = move _5 as *const u8 (Pointer(ArrayToPointer))) = *const {l61} u8
        // 3082: b"joining %d jo ... st u8:   l61 = UNIQUE | NON_NULL, (empty)
        // 3082: b"joining %d jo ... %d\0": typeof(_6 = const b"joining %d jobs in round %d\x00") = & {l59} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 3082: b"joining %d jo ... %d\0":   l59 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 3082: b"joining %d jo ... %d\0": typeof(_5 = &raw const (*_6)) = *const {l60} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 3082: b"joining %d jo ... %d\0":   l60 = UNIQUE | NON_NULL, (empty)
        numjobs,
        // 3083: numjobs: typeof(_8) = *mut {l12} i32
        // 3083: numjobs:   l12 = READ | UNIQUE | NON_NULL, (empty)
        round,
        // 3084: round: typeof(_10) = *mut {l15} i32
        // 3084: round:   l15 = READ | UNIQUE | NON_NULL, (empty)
    );
    i = 0 as libc::c_int;
    while i < numjobs {
    // 3087: numjobs: typeof(_17) = *mut {l23} i32
    // 3087: numjobs:   l23 = READ | UNIQUE | NON_NULL, (empty)
        joinjob(*jobs.offset(i as isize));
        // 3088: *jobs.offset(i  ... size): typeof(_19) = *mut {l26} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3088: *jobs.offset(i  ... size):   l26 = (empty), CELL
        // 3088: jobs.offset(i a ... size): typeof(_20) = *mut {l28} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3088: jobs.offset(i a ... size):   l28 = READ | UNIQUE | NON_NULL, (empty)
        // 3088: jobs.offset(i a ... size):   g293 = READ | WRITE, CELL
        // 3088: jobs: typeof(_21) = *mut {l30} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3088: jobs:   l30 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
        // 3088: jobs:   g293 = READ | WRITE, CELL
        // 3088: jobs: typeof(_22) = *mut {l32} *mut {g292} *mut {g293} DefId(0:822 ~ treengeling[2d04]::Job)
        // 3088: jobs:   l32 = READ | UNIQUE | NON_NULL, (empty)
        // 3088: jobs:   g292 = READ | WRITE | UNIQUE | OFFSET_ADD | OFFSET_SUB | FREE | NON_NULL, (empty)
        // 3088: jobs:   g293 = READ | WRITE, CELL
        i += 1;
        i;
    }
    vrb(
        b"finished joining %d nodes in round %d\0" as *const u8 as *const libc::c_char,
        // 3093: b"finished join ... _char: typeof(_31) = *const {l42} i8
        // 3093: b"finished join ... _char:   l42 = UNIQUE | NON_NULL, (empty)
        // 3093: b"finished join ... st u8: typeof(_32) = *const {l44} u8
        // 3093: b"finished join ... st u8:   l44 = UNIQUE | NON_NULL, (empty)
        // 3093: b"finished join ... %d\0": typeof(_33) = *const {l46} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
        // 3093: b"finished join ... %d\0":   l46 = UNIQUE | NON_NULL, (empty)
        // 3093: b"finished join ... %d\0": typeof(_34) = & {l48} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
        // 3093: b"finished join ... %d\0":   l48 = UNIQUE | NON_NULL, FIXED
        // 3093: b"finished join ... %d\0": typeof(_34 = const b"finished joining %d nodes in round %d\x00") = & {l63} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
        // 3093: b"finished join ... %d\0":   l63 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 3093: b"finished join ... st u8: typeof(_32 = move _33 as *const u8 (Pointer(ArrayToPointer))) = *const {l65} u8
        // 3093: b"finished join ... st u8:   l65 = UNIQUE | NON_NULL, (empty)
        // 3093: b"finished join ... _char: typeof(_31 = move _32 as *const i8 (Misc)) = *const {l66} i8
        // 3093: b"finished join ... _char:   l66 = UNIQUE | NON_NULL, (empty)
        // 3093: b"finished join ... %d\0": typeof(_33 = &raw const (*_34)) = *const {l64} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
        // 3093: b"finished join ... %d\0":   l64 = UNIQUE | NON_NULL, (empty)
        numjobs,
        // 3094: numjobs: typeof(_36) = *mut {l51} i32
        // 3094: numjobs:   l51 = READ | UNIQUE | NON_NULL, (empty)
        round,
        // 3095: round: typeof(_38) = *mut {l54} i32
        // 3095: round:   l54 = READ | UNIQUE | NON_NULL, (empty)
    );
    numjobs = 0 as libc::c_int;
    // 3097: numjobs: typeof(_40) = *mut {l57} i32
    // 3097: numjobs:   l57 = READ | WRITE | UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn incmpnodes(
    mut p: *const libc::c_void,
    // 3100: mut p: typeof(_1) = *const {g79} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3100: mut p:   g79 = READ | UNIQUE | NON_NULL, FIXED
    mut q: *const libc::c_void,
    // 3101: mut q: typeof(_2) = *const {g80} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3101: mut q:   g80 = READ | UNIQUE | NON_NULL, FIXED
) -> libc::c_int {
    return cmpnodes_shim(
        *(p as *mut *mut Node),
        // 3104: *(p as *mut *mu ... Node): typeof(_4) = *mut {l4} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3104: *(p as *mut *mu ... Node):   l4 = READ | UNIQUE | NON_NULL, (empty)
        // 3104: (p as *mut *mut ... Node): typeof(_5) = *mut {l6} *mut {l7} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3104: (p as *mut *mut ... Node):   l6 = READ | UNIQUE | NON_NULL, (empty)
        // 3104: (p as *mut *mut ... Node):   l7 = READ | UNIQUE | NON_NULL, (empty)
        // 3104: p: typeof(_6) = *const {l9} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3104: p:   l9 = READ | UNIQUE | NON_NULL, (empty)
        // 3104: (p as *mut *mut ... Node): typeof(_5 = move _6 as *mut *mut Node (Misc)) = *mut {l19} *mut {l7} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3104: (p as *mut *mut ... Node):   l19 = READ | UNIQUE | NON_NULL, (empty)
        // 3104: (p as *mut *mut ... Node):   l7 = READ | UNIQUE | NON_NULL, (empty)
        *(q as *mut *mut Node),
        // 3105: *(q as *mut *mu ... Node): typeof(_7) = *mut {l11} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3105: *(q as *mut *mu ... Node):   l11 = READ | UNIQUE | NON_NULL, (empty)
        // 3105: (q as *mut *mut ... Node): typeof(_8) = *mut {l13} *mut {l14} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3105: (q as *mut *mut ... Node):   l13 = READ | UNIQUE | NON_NULL, (empty)
        // 3105: (q as *mut *mut ... Node):   l14 = READ | UNIQUE | NON_NULL, (empty)
        // 3105: q: typeof(_9) = *const {l16} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3105: q:   l16 = READ | UNIQUE | NON_NULL, (empty)
        // 3105: (q as *mut *mut ... Node): typeof(_8 = move _9 as *mut *mut Node (Misc)) = *mut {l20} *mut {l14} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3105: (q as *mut *mut ... Node):   l20 = READ | UNIQUE | NON_NULL, (empty)
        // 3105: (q as *mut *mut ... Node):   l14 = READ | UNIQUE | NON_NULL, (empty)
        1 as libc::c_int,
    );
}
unsafe extern "C" fn decmpnodes(
    mut p: *const libc::c_void,
    // 3110: mut p: typeof(_1) = *const {g81} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3110: mut p:   g81 = READ | UNIQUE | NON_NULL, FIXED
    mut q: *const libc::c_void,
    // 3111: mut q: typeof(_2) = *const {g82} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3111: mut q:   g82 = READ | UNIQUE | NON_NULL, FIXED
) -> libc::c_int {
    return cmpnodes_shim(
        *(p as *mut *mut Node),
        // 3114: *(p as *mut *mu ... Node): typeof(_4) = *mut {l4} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3114: *(p as *mut *mu ... Node):   l4 = READ | UNIQUE | NON_NULL, (empty)
        // 3114: (p as *mut *mut ... Node): typeof(_5) = *mut {l6} *mut {l7} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3114: (p as *mut *mut ... Node):   l6 = READ | UNIQUE | NON_NULL, (empty)
        // 3114: (p as *mut *mut ... Node):   l7 = READ | UNIQUE | NON_NULL, (empty)
        // 3114: p: typeof(_6) = *const {l9} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3114: p:   l9 = READ | UNIQUE | NON_NULL, (empty)
        // 3114: (p as *mut *mut ... Node): typeof(_5 = move _6 as *mut *mut Node (Misc)) = *mut {l21} *mut {l7} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3114: (p as *mut *mut ... Node):   l21 = READ | UNIQUE | NON_NULL, (empty)
        // 3114: (p as *mut *mut ... Node):   l7 = READ | UNIQUE | NON_NULL, (empty)
        *(q as *mut *mut Node),
        // 3115: *(q as *mut *mu ... Node): typeof(_7) = *mut {l11} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3115: *(q as *mut *mu ... Node):   l11 = READ | UNIQUE | NON_NULL, (empty)
        // 3115: (q as *mut *mut ... Node): typeof(_8) = *mut {l13} *mut {l14} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3115: (q as *mut *mut ... Node):   l13 = READ | UNIQUE | NON_NULL, (empty)
        // 3115: (q as *mut *mut ... Node):   l14 = READ | UNIQUE | NON_NULL, (empty)
        // 3115: q: typeof(_9) = *const {l16} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3115: q:   l16 = READ | UNIQUE | NON_NULL, (empty)
        // 3115: (q as *mut *mut ... Node): typeof(_8 = move _9 as *mut *mut Node (Misc)) = *mut {l22} *mut {l14} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3115: (q as *mut *mut ... Node):   l22 = READ | UNIQUE | NON_NULL, (empty)
        // 3115: (q as *mut *mut ... Node):   l14 = READ | UNIQUE | NON_NULL, (empty)
        -(1 as libc::c_int),
    );
}
unsafe extern "C" fn printnodes<'h0>(mut prefix: &'h0 (libc::c_char)) {
// 3119: mut prefix: typeof(_1) = *const {g83} i8
// 3119: mut prefix:   g83 = UNIQUE | NON_NULL, (empty)
    let mut node: core::option::Option<&core::cell::Cell<(Node)>> = None;
    // 3120: mut node: typeof(_2) = *mut {l2} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3120: mut node:   l2 = READ, CELL
    // 3120: 0 as *mut Node: typeof(_2 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l57} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3120: 0 as *mut Node:   l57 = READ | UNIQUE, CELL
    let mut i: libc::c_int = 0;
    msg(core::ptr::addr_of!(*(&*(b"\0") as *const u8 as *const libc::c_char)));
    // 3122: b"\0" as *const ... _char: typeof(_5) = *const {l6} i8
    // 3122: b"\0" as *const ... _char:   l6 = UNIQUE | NON_NULL, (empty)
    // 3122: b"\0" as *const u8: typeof(_6) = *const {l8} u8
    // 3122: b"\0" as *const u8:   l8 = UNIQUE | NON_NULL, (empty)
    // 3122: b"\0": typeof(_7) = *const {l10} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3122: b"\0":   l10 = UNIQUE | NON_NULL, (empty)
    // 3122: b"\0": typeof(_8) = & {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3122: b"\0":   l12 = UNIQUE | NON_NULL, FIXED
    // 3122: b"\0": typeof(_7 = &raw const (*_8)) = *const {l59} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3122: b"\0":   l59 = UNIQUE | NON_NULL, (empty)
    // 3122: b"\0": typeof(_8 = const b"\x00") = & {l58} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3122: b"\0":   l58 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 3122: b"\0" as *const ... _char: typeof(_5 = move _6 as *const i8 (Misc)) = *const {l61} i8
    // 3122: b"\0" as *const ... _char:   l61 = UNIQUE | NON_NULL, (empty)
    // 3122: b"\0" as *const u8: typeof(_6 = move _7 as *const u8 (Pointer(ArrayToPointer))) = *const {l60} u8
    // 3122: b"\0" as *const u8:   l60 = UNIQUE | NON_NULL, (empty)
    i = 0 as libc::c_int;
    while i < numnodes {
    // 3124: numnodes: typeof(_15) = *mut {l20} i32
    // 3124: numnodes:   l20 = READ | UNIQUE | NON_NULL, (empty)
        node = std::option::Option::Some((*&(&(nodes)[((i as isize) as usize) ..])[0]));
        // 3125: *nodes.offset(i ... size): typeof(_16) = *mut {l22} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3125: *nodes.offset(i ... size):   l22 = READ | NON_NULL, CELL
        // 3125: nodes.offset(i  ... size): typeof(_17) = *mut {l24} *mut {g276} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3125: nodes.offset(i  ... size):   l24 = READ | UNIQUE | NON_NULL, (empty)
        // 3125: nodes.offset(i  ... size):   g276 = READ | WRITE | NON_NULL, CELL
        // 3125: nodes: typeof(_18) = *mut {l26} *mut {g276} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3125: nodes:   l26 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
        // 3125: nodes:   g276 = READ | WRITE | NON_NULL, CELL
        // 3125: nodes: typeof(_19) = *mut {l28} *mut {g275} *mut {g276} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3125: nodes:   l28 = READ | UNIQUE | NON_NULL, (empty)
        // 3125: nodes:   g275 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
        // 3125: nodes:   g276 = READ | WRITE | NON_NULL, CELL
        if !(skipnode((node).unwrap().as_ptr()) != 0) {
        // 3126: node: typeof(_26) = *mut {l36} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3126: node:   l36 = (empty), CELL
            printnode(core::ptr::addr_of!(*(prefix)), (node).unwrap().as_ptr());
            // 3127: prefix: typeof(_28) = *const {l39} i8
            // 3127: prefix:   l39 = UNIQUE | NON_NULL, (empty)
            // 3127: node: typeof(_29) = *mut {l41} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3127: node:   l41 = READ, CELL
        }
        i += 1;
        i;
    }
    msg(core::ptr::addr_of!(*(&*(b"\0") as *const u8 as *const libc::c_char)));
    // 3132: b"\0" as *const ... _char: typeof(_36) = *const {l49} i8
    // 3132: b"\0" as *const ... _char:   l49 = UNIQUE | NON_NULL, (empty)
    // 3132: b"\0" as *const u8: typeof(_37) = *const {l51} u8
    // 3132: b"\0" as *const u8:   l51 = UNIQUE | NON_NULL, (empty)
    // 3132: b"\0": typeof(_38) = *const {l53} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3132: b"\0":   l53 = UNIQUE | NON_NULL, (empty)
    // 3132: b"\0": typeof(_39) = & {l55} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3132: b"\0":   l55 = UNIQUE | NON_NULL, FIXED
    // 3132: b"\0" as *const u8: typeof(_37 = move _38 as *const u8 (Pointer(ArrayToPointer))) = *const {l64} u8
    // 3132: b"\0" as *const u8:   l64 = UNIQUE | NON_NULL, (empty)
    // 3132: b"\0": typeof(_39 = const b"\x00") = & {l62} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3132: b"\0":   l62 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 3132: b"\0" as *const ... _char: typeof(_36 = move _37 as *const i8 (Misc)) = *const {l65} i8
    // 3132: b"\0" as *const ... _char:   l65 = UNIQUE | NON_NULL, (empty)
    // 3132: b"\0": typeof(_38 = &raw const (*_39)) = *const {l63} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 3132: b"\0":   l63 = UNIQUE | NON_NULL, (empty)
}
unsafe fn printnodes_shim(arg0: *const libc::c_char) {
    {
    let safe_arg0 = &*arg0;
    let safe_result = printnodes(safe_arg0);
    let result = safe_result;
    result
}
}

unsafe extern "C" fn fixnodespos() {
    let mut node: *mut Node = 0 as *mut Node;
    // 3135: mut node: typeof(_1) = *mut {l1} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3135: mut node:   l1 = READ | WRITE, CELL
    // 3135: 0 as *mut Node: typeof(_1 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l27} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3135: 0 as *mut Node:   l27 = READ | WRITE | UNIQUE, (empty)
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while i < numnodes {
    // 3138: numnodes: typeof(_8) = *mut {l9} i32
    // 3138: numnodes:   l9 = READ | UNIQUE | NON_NULL, (empty)
        node = *nodes.offset(i as isize);
        // 3139: *nodes.offset(i ... size): typeof(_9) = *mut {l11} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3139: *nodes.offset(i ... size):   l11 = READ | WRITE | NON_NULL, CELL
        // 3139: nodes.offset(i  ... size): typeof(_10) = *mut {l13} *mut {g276} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3139: nodes.offset(i  ... size):   l13 = READ | UNIQUE | NON_NULL, (empty)
        // 3139: nodes.offset(i  ... size):   g276 = READ | WRITE | NON_NULL, CELL
        // 3139: nodes: typeof(_11) = *mut {l15} *mut {g276} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3139: nodes:   l15 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
        // 3139: nodes:   g276 = READ | WRITE | NON_NULL, CELL
        // 3139: nodes: typeof(_12) = *mut {l17} *mut {g275} *mut {g276} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3139: nodes:   l17 = READ | UNIQUE | NON_NULL, (empty)
        // 3139: nodes:   g275 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
        // 3139: nodes:   g276 = READ | WRITE | NON_NULL, CELL
        (*node).pos = i;
        i += 1;
        i;
    }
}
unsafe extern "C" fn sortnodes(
    mut name: *const libc::c_char,
    // 3146: mut name: typeof(_1) = *const {g84} i8
    // 3146: mut name:   g84 = UNIQUE | NON_NULL, FIXED
    mut cmp: Option<unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> libc::c_int>,
    // 3147: mut cmp: typeof(_2) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {g85} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {g86} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
    // 3147: mut cmp:   g85 = UNIQUE | NON_NULL, FIXED
    // 3147: mut cmp:   g86 = UNIQUE | NON_NULL, FIXED
) {
    let mut prefix: [libc::c_char; 80] = [0; 80];
    qsort(
        nodes as *mut libc::c_void,
        // 3151: nodes as *mut l ... _void: typeof(_5) = *mut {l5} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3151: nodes as *mut l ... _void:   l5 = UNIQUE | NON_NULL, (empty)
        // 3151: nodes: typeof(_6) = *mut {l7} *mut {l8} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3151: nodes:   l7 = UNIQUE | NON_NULL, (empty)
        // 3151: nodes:   l8 = UNIQUE | NON_NULL, (empty)
        // 3151: nodes: typeof(_7) = *mut {l10} *mut {l11} *mut {l12} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3151: nodes:   l10 = UNIQUE | NON_NULL, (empty)
        // 3151: nodes:   l11 = UNIQUE | NON_NULL, (empty)
        // 3151: nodes:   l12 = UNIQUE | NON_NULL, (empty)
        // 3151: nodes as *mut l ... _void: typeof(_5 = move _6 as *mut libc::c_void (Misc)) = *mut {l59} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3151: nodes as *mut l ... _void:   l59 = UNIQUE | NON_NULL, (empty)
        numnodes as size_t,
        // 3152: numnodes: typeof(_10) = *mut {l16} i32
        // 3152: numnodes:   l16 = UNIQUE | NON_NULL, (empty)
        ::core::mem::size_of::<*mut Node>() as libc::c_ulong,
        cmp,
        // 3154: cmp: typeof(_13) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l20} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l21} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3154: cmp:   l20 = UNIQUE | NON_NULL, (empty)
        // 3154: cmp:   l21 = UNIQUE | NON_NULL, (empty)
    );
    fixnodespos();
    if verbose == 0 {
    // 3157: verbose: typeof(_18) = *mut {l27} i32
    // 3157: verbose:   l27 = UNIQUE | NON_NULL, (empty)
        return;
    }
    sprintf(
        prefix.as_mut_ptr(),
        // 3161: prefix.as_mut_ptr(): typeof(_21) = *mut {l31} i8
        // 3161: prefix.as_mut_ptr():   l31 = UNIQUE | NON_NULL, (empty)
        // 3161: prefix.as_mut_ptr(): typeof(_22) = &mut {l33} [i8]
        // 3161: prefix.as_mut_ptr():   l33 = UNIQUE | NON_NULL, FIXED
        // 3161: prefix.as_mut_ptr(): typeof(_23) = &mut {l35} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
        // 3161: prefix.as_mut_ptr():   l35 = UNIQUE | NON_NULL, (empty)
        // 3161: prefix.as_mut_ptr(): typeof(_22 = move _23 as &mut [i8] (Pointer(Unsize))) = &mut {l61} [i8]
        // 3161: prefix.as_mut_ptr():   l61 = UNIQUE | NON_NULL, FIXED
        // 3161: prefix.as_mut_ptr(): typeof(_23 = &mut _3) = &mut {l60} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
        // 3161: prefix.as_mut_ptr():   l60 = UNIQUE | NON_NULL, (empty)
        b"%s(%d) sorted\0" as *const u8 as *const libc::c_char,
        // 3162: b"%s(%d) sorted ... _char: typeof(_24) = *const {l37} i8
        // 3162: b"%s(%d) sorted ... _char:   l37 = UNIQUE | NON_NULL, (empty)
        // 3162: b"%s(%d) sorted ... st u8: typeof(_25) = *const {l39} u8
        // 3162: b"%s(%d) sorted ... st u8:   l39 = UNIQUE | NON_NULL, (empty)
        // 3162: b"%s(%d) sorted\0": typeof(_26) = *const {l41} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 3162: b"%s(%d) sorted\0":   l41 = UNIQUE | NON_NULL, (empty)
        // 3162: b"%s(%d) sorted\0": typeof(_27) = & {l43} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 3162: b"%s(%d) sorted\0":   l43 = UNIQUE | NON_NULL, FIXED
        // 3162: b"%s(%d) sorted\0": typeof(_26 = &raw const (*_27)) = *const {l63} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 3162: b"%s(%d) sorted\0":   l63 = UNIQUE | NON_NULL, (empty)
        // 3162: b"%s(%d) sorted\0": typeof(_27 = const b"%s(%d) sorted\x00") = & {l62} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
        // 3162: b"%s(%d) sorted\0":   l62 = UNIQUE | NON_NULL, (empty)
        // 3162: b"%s(%d) sorted ... st u8: typeof(_25 = move _26 as *const u8 (Pointer(ArrayToPointer))) = *const {l64} u8
        // 3162: b"%s(%d) sorted ... st u8:   l64 = UNIQUE | NON_NULL, (empty)
        // 3162: b"%s(%d) sorted ... _char: typeof(_24 = move _25 as *const i8 (Misc)) = *const {l65} i8
        // 3162: b"%s(%d) sorted ... _char:   l65 = UNIQUE | NON_NULL, (empty)
        name,
        // 3163: name: typeof(_28) = *const {l45} i8
        // 3163: name:   l45 = UNIQUE | NON_NULL, (empty)
        round,
        // 3164: round: typeof(_30) = *mut {l48} i32
        // 3164: round:   l48 = UNIQUE | NON_NULL, (empty)
    );
    printnodes_shim(prefix.as_mut_ptr());
    // 3166: prefix.as_mut_ptr(): typeof(_32) = *const {l51} i8
    // 3166: prefix.as_mut_ptr():   l51 = UNIQUE | NON_NULL, (empty)
    // 3166: prefix.as_mut_ptr(): typeof(_33) = *mut {l53} i8
    // 3166: prefix.as_mut_ptr():   l53 = UNIQUE | NON_NULL, (empty)
    // 3166: prefix.as_mut_ptr(): typeof(_34) = &mut {l55} [i8]
    // 3166: prefix.as_mut_ptr():   l55 = UNIQUE | NON_NULL, FIXED
    // 3166: prefix.as_mut_ptr(): typeof(_35) = &mut {l57} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
    // 3166: prefix.as_mut_ptr():   l57 = UNIQUE | NON_NULL, (empty)
    // 3166: prefix.as_mut_ptr(): typeof(_32 = move _33 as *const i8 (Pointer(MutToConstPointer))) = *const {l68} i8
    // 3166: prefix.as_mut_ptr():   l68 = UNIQUE | NON_NULL, (empty)
    // 3166: prefix.as_mut_ptr(): typeof(_35 = &mut _3) = &mut {l66} [i8; Const { ty: usize, kind: Value(Leaf(0x0000000000000050)) }]
    // 3166: prefix.as_mut_ptr():   l66 = UNIQUE | NON_NULL, (empty)
    // 3166: prefix.as_mut_ptr(): typeof(_34 = move _35 as &mut [i8] (Pointer(Unsize))) = &mut {l67} [i8]
    // 3166: prefix.as_mut_ptr():   l67 = UNIQUE | NON_NULL, FIXED
}
unsafe extern "C" fn simpnode(mut voidptr: *mut libc::c_void) -> *mut libc::c_void {
// 3168: *mut libc::c_void: typeof(_0) = *mut {g88} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 3168: *mut libc::c_void:   g88 = UNIQUE | NON_NULL, FIXED
// 3168: mut voidptr: typeof(_1) = *mut {g87} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 3168: mut voidptr:   g87 = UNIQUE | NON_NULL, FIXED
    let mut node: *mut Node = voidptr as *mut Node;
    // 3169: mut node: typeof(_3) = *mut {l3} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3169: mut node:   l3 = UNIQUE | NON_NULL, (empty)
    // 3169: voidptr: typeof(_4) = *mut {l5} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3169: voidptr:   l5 = UNIQUE | NON_NULL, (empty)
    // 3169: voidptr as *mut Node: typeof(_3 = move _4 as *mut Node (Misc)) = *mut {l64} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3169: voidptr as *mut Node:   l64 = UNIQUE | NON_NULL, (empty)
    nmsg(node, b"simp\0" as *const u8 as *const libc::c_char);
    // 3170: node: typeof(_6) = *mut {l8} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3170: node:   l8 = UNIQUE | NON_NULL, (empty)
    // 3170: b"simp\0" as *c ... _char: typeof(_7) = *const {l10} i8
    // 3170: b"simp\0" as *c ... _char:   l10 = UNIQUE | NON_NULL, (empty)
    // 3170: b"simp\0" as *c ... st u8: typeof(_8) = *const {l12} u8
    // 3170: b"simp\0" as *c ... st u8:   l12 = UNIQUE | NON_NULL, (empty)
    // 3170: b"simp\0": typeof(_9) = *const {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 3170: b"simp\0":   l14 = UNIQUE | NON_NULL, (empty)
    // 3170: b"simp\0": typeof(_10) = & {l16} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 3170: b"simp\0":   l16 = UNIQUE | NON_NULL, FIXED
    // 3170: b"simp\0" as *c ... _char: typeof(_7 = move _8 as *const i8 (Misc)) = *const {l68} i8
    // 3170: b"simp\0" as *c ... _char:   l68 = UNIQUE | NON_NULL, (empty)
    // 3170: b"simp\0": typeof(_9 = &raw const (*_10)) = *const {l66} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 3170: b"simp\0":   l66 = UNIQUE | NON_NULL, (empty)
    // 3170: b"simp\0" as *c ... st u8: typeof(_8 = move _9 as *const u8 (Pointer(ArrayToPointer))) = *const {l67} u8
    // 3170: b"simp\0" as *c ... st u8:   l67 = UNIQUE | NON_NULL, (empty)
    // 3170: b"simp\0": typeof(_10 = const b"simp\x00") = & {l65} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 3170: b"simp\0":   l65 = UNIQUE | NON_NULL, (empty)
    (*node).res = lglsimp((*node).lgl, 1 as libc::c_int);
    // 3171: (*node).lgl: typeof(_12) = *mut {l19} LGL
    // 3171: (*node).lgl:   l19 = UNIQUE | NON_NULL, (empty)
    (*node).simplified = 1 as libc::c_int;
    nmsg(
        node,
        // 3174: node: typeof(_16) = *mut {l24} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3174: node:   l24 = UNIQUE | NON_NULL, (empty)
        b"simp result %d\0" as *const u8 as *const libc::c_char,
        // 3175: b"simp result % ... _char: typeof(_17) = *const {l26} i8
        // 3175: b"simp result % ... _char:   l26 = UNIQUE | NON_NULL, (empty)
        // 3175: b"simp result % ... st u8: typeof(_18) = *const {l28} u8
        // 3175: b"simp result % ... st u8:   l28 = UNIQUE | NON_NULL, (empty)
        // 3175: b"simp result %d\0": typeof(_19) = *const {l30} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 3175: b"simp result %d\0":   l30 = UNIQUE | NON_NULL, (empty)
        // 3175: b"simp result %d\0": typeof(_20) = & {l32} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 3175: b"simp result %d\0":   l32 = UNIQUE | NON_NULL, FIXED
        // 3175: b"simp result %d\0": typeof(_19 = &raw const (*_20)) = *const {l70} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 3175: b"simp result %d\0":   l70 = UNIQUE | NON_NULL, (empty)
        // 3175: b"simp result %d\0": typeof(_20 = const b"simp result %d\x00") = & {l69} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 3175: b"simp result %d\0":   l69 = UNIQUE | NON_NULL, (empty)
        // 3175: b"simp result % ... st u8: typeof(_18 = move _19 as *const u8 (Pointer(ArrayToPointer))) = *const {l71} u8
        // 3175: b"simp result % ... st u8:   l71 = UNIQUE | NON_NULL, (empty)
        // 3175: b"simp result % ... _char: typeof(_17 = move _18 as *const i8 (Misc)) = *const {l72} i8
        // 3175: b"simp result % ... _char:   l72 = UNIQUE | NON_NULL, (empty)
        (*node).res,
    );
    if (*node).res == 10 as libc::c_int {
        lockdone();
        done = 10 as libc::c_int;
        // 3180: done: typeof(_28) = *mut {l41} i32
        // 3180: done:   l41 = UNIQUE | NON_NULL, (empty)
        unlockdone();
    } else if (*node).res == 20 as libc::c_int {
        locksimplified();
        simplified += 1;
        // 3184: simplified: typeof(_34) = *mut {l48} i32
        // 3184: simplified:   l48 = UNIQUE | NON_NULL, (empty)
        simplified;
        // 3185: simplified: typeof(_37) = *mut {l52} i32
        // 3185: simplified:   l52 = UNIQUE | NON_NULL, (empty)
        sumsimplified += 1;
        // 3186: sumsimplified: typeof(_38) = *mut {l54} i64
        // 3186: sumsimplified:   l54 = UNIQUE | NON_NULL, (empty)
        sumsimplified;
        // 3187: sumsimplified: typeof(_41) = *mut {l58} i64
        // 3187: sumsimplified:   l58 = UNIQUE | NON_NULL, (empty)
        unlocksimplified();
    }
    decworkers();
    return node as *mut libc::c_void;
    // 3191: node: typeof(_44) = *mut {l62} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3191: node:   l62 = UNIQUE | NON_NULL, (empty)
    // 3191: node as *mut li ... _void: typeof(_0 = move _44 as *mut libc::c_void (Misc)) = *mut {l73} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3191: node as *mut li ... _void:   l73 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn simp() {
    let mut node: *mut Node = 0 as *mut Node;
    // 3194: mut node: typeof(_1) = *mut {l1} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3194: mut node:   l1 = UNIQUE | NON_NULL, (empty)
    // 3194: 0 as *mut Node: typeof(_1 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l170} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3194: 0 as *mut Node:   l170 = UNIQUE | NON_NULL, (empty)
    let mut i: libc::c_int = 0;
    let mut l: libc::c_int = 0;
    if nosimp != 0 {
    // 3197: nosimp: typeof(_7) = *mut {l8} i32
    // 3197: nosimp:   l8 = UNIQUE | NON_NULL, (empty)
        return;
    }
    startimer_shim(&mut wct.simp);
    // 3200: &mut wct.simp: typeof(_10) = *mut {l12} f64
    // 3200: &mut wct.simp:   l12 = UNIQUE | NON_NULL, (empty)
    // 3200: &mut wct.simp: typeof(_11) = &mut {l14} f64
    // 3200: &mut wct.simp:   l14 = UNIQUE | NON_NULL, (empty)
    // 3200: wct: typeof(_12) = *mut {l16} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
    // 3200: wct:   l16 = UNIQUE | NON_NULL, (empty)
    // 3200: &mut wct.simp: typeof(_10 = &raw mut (*_11)) = *mut {l172} f64
    // 3200: &mut wct.simp:   l172 = UNIQUE | NON_NULL, (empty)
    // 3200: &mut wct.simp: typeof(_11 = &mut ((*_12).1: f64)) = &mut {l171} f64
    // 3200: &mut wct.simp:   l171 = UNIQUE | NON_NULL, (empty)
    startphase(b"simp\0" as *const u8 as *const libc::c_char);
    // 3201: b"simp\0" as *c ... _char: typeof(_14) = *const {l19} i8
    // 3201: b"simp\0" as *c ... _char:   l19 = UNIQUE | NON_NULL, (empty)
    // 3201: b"simp\0" as *c ... st u8: typeof(_15) = *const {l21} u8
    // 3201: b"simp\0" as *c ... st u8:   l21 = UNIQUE | NON_NULL, (empty)
    // 3201: b"simp\0": typeof(_16) = *const {l23} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 3201: b"simp\0":   l23 = UNIQUE | NON_NULL, (empty)
    // 3201: b"simp\0": typeof(_17) = & {l25} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 3201: b"simp\0":   l25 = UNIQUE | NON_NULL, FIXED
    // 3201: b"simp\0" as *c ... st u8: typeof(_15 = move _16 as *const u8 (Pointer(ArrayToPointer))) = *const {l175} u8
    // 3201: b"simp\0" as *c ... st u8:   l175 = UNIQUE | NON_NULL, (empty)
    // 3201: b"simp\0": typeof(_17 = const b"simp\x00") = & {l173} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 3201: b"simp\0":   l173 = UNIQUE | NON_NULL, (empty)
    // 3201: b"simp\0" as *c ... _char: typeof(_14 = move _15 as *const i8 (Misc)) = *const {l176} i8
    // 3201: b"simp\0" as *c ... _char:   l176 = UNIQUE | NON_NULL, (empty)
    // 3201: b"simp\0": typeof(_16 = &raw const (*_17)) = *const {l174} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 3201: b"simp\0":   l174 = UNIQUE | NON_NULL, (empty)
    sortnodes(
        b"simp\0" as *const u8 as *const libc::c_char,
        // 3203: b"simp\0" as *c ... _char: typeof(_19) = *const {l28} i8
        // 3203: b"simp\0" as *c ... _char:   l28 = UNIQUE | NON_NULL, (empty)
        // 3203: b"simp\0" as *c ... st u8: typeof(_20) = *const {l30} u8
        // 3203: b"simp\0" as *c ... st u8:   l30 = UNIQUE | NON_NULL, (empty)
        // 3203: b"simp\0": typeof(_21) = *const {l32} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3203: b"simp\0":   l32 = UNIQUE | NON_NULL, (empty)
        // 3203: b"simp\0": typeof(_22) = & {l34} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3203: b"simp\0":   l34 = UNIQUE | NON_NULL, FIXED
        // 3203: b"simp\0" as *c ... st u8: typeof(_20 = move _21 as *const u8 (Pointer(ArrayToPointer))) = *const {l179} u8
        // 3203: b"simp\0" as *c ... st u8:   l179 = UNIQUE | NON_NULL, (empty)
        // 3203: b"simp\0": typeof(_22 = const b"simp\x00") = & {l177} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3203: b"simp\0":   l177 = UNIQUE | NON_NULL, (empty)
        // 3203: b"simp\0" as *c ... _char: typeof(_19 = move _20 as *const i8 (Misc)) = *const {l180} i8
        // 3203: b"simp\0" as *c ... _char:   l180 = UNIQUE | NON_NULL, (empty)
        // 3203: b"simp\0": typeof(_21 = &raw const (*_22)) = *const {l178} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3203: b"simp\0":   l178 = UNIQUE | NON_NULL, (empty)
        Some(
        // 3204: Some( incmpnode ... nt, ): typeof(_23) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l36} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l37} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3204: Some( incmpnode ... nt, ):   l36 = UNIQUE | NON_NULL, (empty)
        // 3204: Some( incmpnode ... nt, ):   l37 = UNIQUE | NON_NULL, (empty)
        // 3204: Some( incmpnode ... nt, ): typeof(_23 = std::option::Option::<unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32>::Some(move _24)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l183} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l184} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3204: Some( incmpnode ... nt, ):   l183 = UNIQUE | NON_NULL, (empty)
        // 3204: Some( incmpnode ... nt, ):   l184 = UNIQUE | NON_NULL, (empty)
            incmpnodes
            // 3205: incmpnodes as u ... c_int: typeof(_24) = fn(*const {l39} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l40} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 3205: incmpnodes as u ... c_int:   l39 = UNIQUE | NON_NULL, (empty)
            // 3205: incmpnodes as u ... c_int:   l40 = UNIQUE | NON_NULL, (empty)
            // 3205: incmpnodes: typeof(_24 = incmpnodes as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*const {l181} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l182} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 3205: incmpnodes:   l181 = UNIQUE | NON_NULL, (empty)
            // 3205: incmpnodes:   l182 = UNIQUE | NON_NULL, (empty)
                as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> libc::c_int,
        ),
    );
    l = maxactive;
    // 3209: maxactive: typeof(_26) = *mut {l43} i32
    // 3209: maxactive:   l43 = UNIQUE | NON_NULL, (empty)
    if nowfull() != 0 {
        l *= 4 as libc::c_int;
    }
    if l > numnodes {
    // 3213: numnodes: typeof(_36) = *mut {l54} i32
    // 3213: numnodes:   l54 = UNIQUE | NON_NULL, (empty)
        l = numnodes;
        // 3214: numnodes: typeof(_38) = *mut {l57} i32
        // 3214: numnodes:   l57 = UNIQUE | NON_NULL, (empty)
    }
    msg(
        b" %d simplify  %d out of %d nodes %.0f%%\0" as *const u8 as *const libc::c_char,
        // 3217: b" %d simplify  ... _char: typeof(_40) = *const {l60} i8
        // 3217: b" %d simplify  ... _char:   l60 = UNIQUE | NON_NULL, (empty)
        // 3217: b" %d simplify  ... st u8: typeof(_41) = *const {l62} u8
        // 3217: b" %d simplify  ... st u8:   l62 = UNIQUE | NON_NULL, (empty)
        // 3217: b" %d simplify  ... %%\0": typeof(_42) = *const {l64} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 3217: b" %d simplify  ... %%\0":   l64 = UNIQUE | NON_NULL, (empty)
        // 3217: b" %d simplify  ... %%\0": typeof(_43) = & {l66} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 3217: b" %d simplify  ... %%\0":   l66 = UNIQUE | NON_NULL, FIXED
        // 3217: b" %d simplify  ... %%\0": typeof(_42 = &raw const (*_43)) = *const {l186} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 3217: b" %d simplify  ... %%\0":   l186 = UNIQUE | NON_NULL, (empty)
        // 3217: b" %d simplify  ... st u8: typeof(_41 = move _42 as *const u8 (Pointer(ArrayToPointer))) = *const {l187} u8
        // 3217: b" %d simplify  ... st u8:   l187 = UNIQUE | NON_NULL, (empty)
        // 3217: b" %d simplify  ... _char: typeof(_40 = move _41 as *const i8 (Misc)) = *const {l188} i8
        // 3217: b" %d simplify  ... _char:   l188 = UNIQUE | NON_NULL, (empty)
        // 3217: b" %d simplify  ... %%\0": typeof(_43 = const b" %d simplify  %d out of %d nodes %.0f%%\x00") = & {l185} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 3217: b" %d simplify  ... %%\0":   l185 = UNIQUE | NON_NULL, (empty)
        round,
        // 3218: round: typeof(_45) = *mut {l69} i32
        // 3218: round:   l69 = UNIQUE | NON_NULL, (empty)
        l,
        numnodes,
        // 3220: numnodes: typeof(_48) = *mut {l73} i32
        // 3220: numnodes:   l73 = UNIQUE | NON_NULL, (empty)
        pcnt(l as libc::c_double, numnodes as libc::c_double),
        // 3221: numnodes: typeof(_54) = *mut {l80} i32
        // 3221: numnodes:   l80 = UNIQUE | NON_NULL, (empty)
    );
    i = 0 as libc::c_int;
    while i < numnodes && numjobs < l {
    // 3224: numnodes: typeof(_62) = *mut {l89} i32
    // 3224: numnodes:   l89 = UNIQUE | NON_NULL, (empty)
    // 3224: numjobs: typeof(_65) = *mut {l93} i32
    // 3224: numjobs:   l93 = UNIQUE | NON_NULL, (empty)
        node = *nodes.offset(i as isize);
        // 3225: *nodes.offset(i ... size): typeof(_67) = *mut {l96} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3225: *nodes.offset(i ... size):   l96 = UNIQUE | NON_NULL, (empty)
        // 3225: nodes.offset(i  ... size): typeof(_68) = *mut {l98} *mut {l99} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3225: nodes.offset(i  ... size):   l98 = UNIQUE | NON_NULL, (empty)
        // 3225: nodes.offset(i  ... size):   l99 = UNIQUE | NON_NULL, (empty)
        // 3225: nodes: typeof(_69) = *mut {l101} *mut {l102} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3225: nodes:   l101 = UNIQUE | NON_NULL, (empty)
        // 3225: nodes:   l102 = UNIQUE | NON_NULL, (empty)
        // 3225: nodes: typeof(_70) = *mut {l104} *mut {l105} *mut {l106} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3225: nodes:   l104 = UNIQUE | NON_NULL, (empty)
        // 3225: nodes:   l105 = UNIQUE | NON_NULL, (empty)
        // 3225: nodes:   l106 = UNIQUE | NON_NULL, (empty)
        if !(skipnode(node) != 0) {
        // 3226: node: typeof(_77) = *mut {l114} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3226: node:   l114 = UNIQUE | NON_NULL, (empty)
            if !(forcesimp == 0 && (*node).simplified != 0) {
            // 3227: forcesimp: typeof(_82) = *mut {l120} i32
            // 3227: forcesimp:   l120 = UNIQUE | NON_NULL, (empty)
                js.simp += 1;
                // 3228: js: typeof(_85) = *mut {l124} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
                // 3228: js:   l124 = UNIQUE | NON_NULL, (empty)
                js.simp;
                // 3229: js: typeof(_88) = *mut {l128} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
                // 3229: js:   l128 = UNIQUE | NON_NULL, (empty)
                schedulejob(
                    node,
                    // 3231: node: typeof(_90) = *mut {l131} DefId(0:777 ~ treengeling[2d04]::Node)
                    // 3231: node:   l131 = UNIQUE | NON_NULL, (empty)
                    Some(simpnode as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void),
                    // 3232: Some(simpnode a ... void): typeof(_91) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l133} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l134} DefId(2:5583 ~ core[480a]::ffi::c_void)>
                    // 3232: Some(simpnode a ... void):   l133 = UNIQUE | NON_NULL, (empty)
                    // 3232: Some(simpnode a ... void):   l134 = UNIQUE | NON_NULL, (empty)
                    // 3232: simpnode as uns ... _void: typeof(_92) = fn(*mut {l136} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l137} DefId(2:5583 ~ core[480a]::ffi::c_void)
                    // 3232: simpnode as uns ... _void:   l136 = UNIQUE | NON_NULL, (empty)
                    // 3232: simpnode as uns ... _void:   l137 = UNIQUE | NON_NULL, (empty)
                    // 3232: Some(simpnode a ... void): typeof(_91 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>::Some(move _92)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l191} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l192} DefId(2:5583 ~ core[480a]::ffi::c_void)>
                    // 3232: Some(simpnode a ... void):   l191 = UNIQUE | NON_NULL, (empty)
                    // 3232: Some(simpnode a ... void):   l192 = UNIQUE | NON_NULL, (empty)
                    // 3232: simpnode: typeof(_92 = simpnode as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void (Pointer(ReifyFnPointer))) = fn(*mut {l189} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l190} DefId(2:5583 ~ core[480a]::ffi::c_void)
                    // 3232: simpnode:   l189 = UNIQUE | NON_NULL, (empty)
                    // 3232: simpnode:   l190 = UNIQUE | NON_NULL, (empty)
                    b"simp\0" as *const u8 as *const libc::c_char,
                    // 3233: b"simp\0" as *c ... _char: typeof(_93) = *const {l139} i8
                    // 3233: b"simp\0" as *c ... _char:   l139 = UNIQUE | NON_NULL, (empty)
                    // 3233: b"simp\0" as *c ... st u8: typeof(_94) = *const {l141} u8
                    // 3233: b"simp\0" as *c ... st u8:   l141 = UNIQUE | NON_NULL, (empty)
                    // 3233: b"simp\0": typeof(_95) = *const {l143} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
                    // 3233: b"simp\0":   l143 = UNIQUE | NON_NULL, (empty)
                    // 3233: b"simp\0": typeof(_96) = & {l145} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
                    // 3233: b"simp\0":   l145 = UNIQUE | NON_NULL, FIXED
                    // 3233: b"simp\0" as *c ... st u8: typeof(_94 = move _95 as *const u8 (Pointer(ArrayToPointer))) = *const {l195} u8
                    // 3233: b"simp\0" as *c ... st u8:   l195 = UNIQUE | NON_NULL, (empty)
                    // 3233: b"simp\0" as *c ... _char: typeof(_93 = move _94 as *const i8 (Misc)) = *const {l196} i8
                    // 3233: b"simp\0" as *c ... _char:   l196 = UNIQUE | NON_NULL, (empty)
                    // 3233: b"simp\0": typeof(_95 = &raw const (*_96)) = *const {l194} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
                    // 3233: b"simp\0":   l194 = UNIQUE | NON_NULL, (empty)
                    // 3233: b"simp\0": typeof(_96 = const b"simp\x00") = & {l193} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
                    // 3233: b"simp\0":   l193 = UNIQUE | NON_NULL, (empty)
                    SIMP,
                );
            }
        }
        i += 1;
        i;
    }
    vrb(
        b"scheduled %d simplification jobs in round %d\0" as *const u8 as *const libc::c_char,
        // 3242: b"scheduled %d  ... _char: typeof(_103) = *const {l153} i8
        // 3242: b"scheduled %d  ... _char:   l153 = UNIQUE | NON_NULL, (empty)
        // 3242: b"scheduled %d  ... st u8: typeof(_104) = *const {l155} u8
        // 3242: b"scheduled %d  ... st u8:   l155 = UNIQUE | NON_NULL, (empty)
        // 3242: b"scheduled %d  ... %d\0": typeof(_105) = *const {l157} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 3242: b"scheduled %d  ... %d\0":   l157 = UNIQUE | NON_NULL, (empty)
        // 3242: b"scheduled %d  ... %d\0": typeof(_106) = & {l159} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 3242: b"scheduled %d  ... %d\0":   l159 = UNIQUE | NON_NULL, FIXED
        // 3242: b"scheduled %d  ... _char: typeof(_103 = move _104 as *const i8 (Misc)) = *const {l200} i8
        // 3242: b"scheduled %d  ... _char:   l200 = UNIQUE | NON_NULL, (empty)
        // 3242: b"scheduled %d  ... %d\0": typeof(_105 = &raw const (*_106)) = *const {l198} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 3242: b"scheduled %d  ... %d\0":   l198 = UNIQUE | NON_NULL, (empty)
        // 3242: b"scheduled %d  ... %d\0": typeof(_106 = const b"scheduled %d simplification jobs in round %d\x00") = & {l197} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 3242: b"scheduled %d  ... %d\0":   l197 = UNIQUE | NON_NULL, (empty)
        // 3242: b"scheduled %d  ... st u8: typeof(_104 = move _105 as *const u8 (Pointer(ArrayToPointer))) = *const {l199} u8
        // 3242: b"scheduled %d  ... st u8:   l199 = UNIQUE | NON_NULL, (empty)
        numjobs,
        // 3243: numjobs: typeof(_108) = *mut {l162} i32
        // 3243: numjobs:   l162 = UNIQUE | NON_NULL, (empty)
        round,
        // 3244: round: typeof(_110) = *mut {l165} i32
        // 3244: round:   l165 = UNIQUE | NON_NULL, (empty)
    );
    runjobs();
    joinjobs();
    stoptimer();
}
#[no_mangle]
pub unsafe extern "C" fn mysrand(mut seed: libc::c_ulonglong) {
    let mut z: libc::c_uint = (seed >> 32 as libc::c_int) as libc::c_uint;
    let mut w: libc::c_uint = seed as libc::c_uint;
    if z == 0 {
        z = !z;
    }
    if w == 0 {
        w = !w;
    }
    rng.z = z;
    // 3260: rng: typeof(_18) = *mut {l18} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
    // 3260: rng:   l18 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    rng.w = w;
    // 3261: rng: typeof(_20) = *mut {l21} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
    // 3261: rng:   l21 = READ | WRITE | UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn myrand() -> libc::c_uint {
    let mut res: libc::c_uint = 0;
    rng.z = (36969 as libc::c_int as libc::c_uint)
    // 3265: rng: typeof(_17) = *mut {l19} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
    // 3265: rng:   l19 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        .wrapping_mul(&*(rng).z & 65535 as libc::c_int as libc::c_uint)
        // 3266: rng: typeof(_9) = *mut {l9} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
        // 3266: rng:   l9 = READ | UNIQUE | NON_NULL, (empty)
        .wrapping_add(&*(rng).z >> 16 as libc::c_int);
        // 3267: rng: typeof(_14) = *mut {l15} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
        // 3267: rng:   l15 = READ | UNIQUE | NON_NULL, (empty)
    rng.w = (18000 as libc::c_int as libc::c_uint)
    // 3268: rng: typeof(_32) = *mut {l37} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
    // 3268: rng:   l37 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        .wrapping_mul(&*(rng).w & 65535 as libc::c_int as libc::c_uint)
        // 3269: rng: typeof(_24) = *mut {l27} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
        // 3269: rng:   l27 = READ | UNIQUE | NON_NULL, (empty)
        .wrapping_add(&*(rng).w >> 16 as libc::c_int);
        // 3270: rng: typeof(_29) = *mut {l33} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
        // 3270: rng:   l33 = READ | UNIQUE | NON_NULL, (empty)
    res = (&*(rng).z << 16 as libc::c_int).wrapping_add(&*(rng).w);
    // 3271: rng: typeof(_36) = *mut {l42} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
    // 3271: rng:   l42 = READ | UNIQUE | NON_NULL, (empty)
    // 3271: rng: typeof(_40) = *mut {l47} DefId(0:872 ~ treengeling[2d04]::C2RustUnnamed_7)
    // 3271: rng:   l47 = READ | UNIQUE | NON_NULL, (empty)
    return res;
}
unsafe extern "C" fn myrandmod(mut mod_0: libc::c_uint) -> libc::c_uint {
    let mut res: libc::c_uint = 0;
    if mod_0 <= 1 as libc::c_int as libc::c_uint {
        return 0 as libc::c_int as libc::c_uint;
    }
    res = myrand();
    res = res.wrapping_rem(mod_0);
    return res;
}
unsafe extern "C" fn lookaheadnode(mut voidptr: *mut libc::c_void) -> *mut libc::c_void {
// 3283: *mut libc::c_void: typeof(_0) = *mut {g90} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 3283: *mut libc::c_void:   g90 = UNIQUE | NON_NULL, FIXED
// 3283: mut voidptr: typeof(_1) = *mut {g89} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 3283: mut voidptr:   g89 = UNIQUE | NON_NULL, FIXED
    let mut oldvars: libc::c_int = 0;
    let mut newvars: libc::c_int = 0;
    let mut redpermille: libc::c_int = 0;
    let mut node: *mut Node = voidptr as *mut Node;
    // 3287: mut node: typeof(_6) = *mut {l6} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3287: mut node:   l6 = UNIQUE | NON_NULL, (empty)
    // 3287: voidptr: typeof(_7) = *mut {l8} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3287: voidptr:   l8 = UNIQUE | NON_NULL, (empty)
    // 3287: voidptr as *mut Node: typeof(_6 = move _7 as *mut Node (Misc)) = *mut {l211} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3287: voidptr as *mut Node:   l211 = UNIQUE | NON_NULL, (empty)
    oldvars = lglnvars((*node).lgl);
    // 3288: (*node).lgl: typeof(_9) = *mut {l11} LGL
    // 3288: (*node).lgl:   l11 = UNIQUE | NON_NULL, (empty)
    if (*node).depth <= treelookdepth {
    // 3289: treelookdepth: typeof(_14) = *mut {l17} i32
    // 3289: treelookdepth:   l17 = UNIQUE | NON_NULL, (empty)
        nmsg(
            node,
            // 3291: node: typeof(_16) = *mut {l20} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3291: node:   l20 = UNIQUE | NON_NULL, (empty)
            b"tree-based look-ahead at depth %d\0" as *const u8 as *const libc::c_char,
            // 3292: b"tree-based lo ... _char: typeof(_17) = *const {l22} i8
            // 3292: b"tree-based lo ... _char:   l22 = UNIQUE | NON_NULL, (empty)
            // 3292: b"tree-based lo ... st u8: typeof(_18) = *const {l24} u8
            // 3292: b"tree-based lo ... st u8:   l24 = UNIQUE | NON_NULL, (empty)
            // 3292: b"tree-based lo ... %d\0": typeof(_19) = *const {l26} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
            // 3292: b"tree-based lo ... %d\0":   l26 = UNIQUE | NON_NULL, (empty)
            // 3292: b"tree-based lo ... %d\0": typeof(_20) = & {l28} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
            // 3292: b"tree-based lo ... %d\0":   l28 = UNIQUE | NON_NULL, FIXED
            // 3292: b"tree-based lo ... st u8: typeof(_18 = move _19 as *const u8 (Pointer(ArrayToPointer))) = *const {l214} u8
            // 3292: b"tree-based lo ... st u8:   l214 = UNIQUE | NON_NULL, (empty)
            // 3292: b"tree-based lo ... _char: typeof(_17 = move _18 as *const i8 (Misc)) = *const {l215} i8
            // 3292: b"tree-based lo ... _char:   l215 = UNIQUE | NON_NULL, (empty)
            // 3292: b"tree-based lo ... %d\0": typeof(_20 = const b"tree-based look-ahead at depth %d\x00") = & {l212} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
            // 3292: b"tree-based lo ... %d\0":   l212 = UNIQUE | NON_NULL, (empty)
            // 3292: b"tree-based lo ... %d\0": typeof(_19 = &raw const (*_20)) = *const {l213} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
            // 3292: b"tree-based lo ... %d\0":   l213 = UNIQUE | NON_NULL, (empty)
            (*node).depth,
        );
        lglsetopt(
            (*node).lgl,
            // 3296: (*node).lgl: typeof(_23) = *mut {l32} LGL
            // 3296: (*node).lgl:   l32 = UNIQUE | NON_NULL, (empty)
            b"lkhd\0" as *const u8 as *const libc::c_char,
            // 3297: b"lkhd\0" as *c ... _char: typeof(_24) = *const {l34} i8
            // 3297: b"lkhd\0" as *c ... _char:   l34 = UNIQUE | NON_NULL, (empty)
            // 3297: b"lkhd\0" as *c ... st u8: typeof(_25) = *const {l36} u8
            // 3297: b"lkhd\0" as *c ... st u8:   l36 = UNIQUE | NON_NULL, (empty)
            // 3297: b"lkhd\0": typeof(_26) = *const {l38} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3297: b"lkhd\0":   l38 = UNIQUE | NON_NULL, (empty)
            // 3297: b"lkhd\0": typeof(_27) = & {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3297: b"lkhd\0":   l40 = UNIQUE | NON_NULL, FIXED
            // 3297: b"lkhd\0": typeof(_27 = const b"lkhd\x00") = & {l216} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3297: b"lkhd\0":   l216 = UNIQUE | NON_NULL, (empty)
            // 3297: b"lkhd\0" as *c ... _char: typeof(_24 = move _25 as *const i8 (Misc)) = *const {l219} i8
            // 3297: b"lkhd\0" as *c ... _char:   l219 = UNIQUE | NON_NULL, (empty)
            // 3297: b"lkhd\0": typeof(_26 = &raw const (*_27)) = *const {l217} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3297: b"lkhd\0":   l217 = UNIQUE | NON_NULL, (empty)
            // 3297: b"lkhd\0" as *c ... st u8: typeof(_25 = move _26 as *const u8 (Pointer(ArrayToPointer))) = *const {l218} u8
            // 3297: b"lkhd\0" as *c ... st u8:   l218 = UNIQUE | NON_NULL, (empty)
            2 as libc::c_int,
        );
        ::core::intrinsics::atomic_xadd_seqcst(&mut treelkhd, 1 as libc::c_int as int64_t);
        // 3300: &mut treelkhd: typeof(_30) = *mut {l44} i64
        // 3300: &mut treelkhd:   l44 = UNIQUE | NON_NULL, (empty)
        // 3300: &mut treelkhd: typeof(_31) = &mut {l46} i64
        // 3300: &mut treelkhd:   l46 = UNIQUE | NON_NULL, (empty)
        // 3300: treelkhd: typeof(_32) = *mut {l48} i64
        // 3300: treelkhd:   l48 = UNIQUE | NON_NULL, (empty)
        // 3300: &mut treelkhd: typeof(_30 = &raw mut (*_31)) = *mut {l221} i64
        // 3300: &mut treelkhd:   l221 = UNIQUE | NON_NULL, (empty)
        // 3300: &mut treelkhd: typeof(_31 = &mut (*_32)) = &mut {l220} i64
        // 3300: &mut treelkhd:   l220 = UNIQUE | NON_NULL, (empty)
    } else if locslkhd != 0 {
    // 3301: locslkhd: typeof(_37) = *mut {l54} i32
    // 3301: locslkhd:   l54 = UNIQUE | NON_NULL, (empty)
        nmsg(
            node,
            // 3303: node: typeof(_39) = *mut {l57} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3303: node:   l57 = UNIQUE | NON_NULL, (empty)
            b"local-search based look-ahead at depth %d\0" as *const u8 as *const libc::c_char,
            // 3304: b"local-search  ... _char: typeof(_40) = *const {l59} i8
            // 3304: b"local-search  ... _char:   l59 = UNIQUE | NON_NULL, (empty)
            // 3304: b"local-search  ... st u8: typeof(_41) = *const {l61} u8
            // 3304: b"local-search  ... st u8:   l61 = UNIQUE | NON_NULL, (empty)
            // 3304: b"local-search  ... %d\0": typeof(_42) = *const {l63} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 3304: b"local-search  ... %d\0":   l63 = UNIQUE | NON_NULL, (empty)
            // 3304: b"local-search  ... %d\0": typeof(_43) = & {l65} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 3304: b"local-search  ... %d\0":   l65 = UNIQUE | NON_NULL, FIXED
            // 3304: b"local-search  ... st u8: typeof(_41 = move _42 as *const u8 (Pointer(ArrayToPointer))) = *const {l224} u8
            // 3304: b"local-search  ... st u8:   l224 = UNIQUE | NON_NULL, (empty)
            // 3304: b"local-search  ... %d\0": typeof(_42 = &raw const (*_43)) = *const {l223} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 3304: b"local-search  ... %d\0":   l223 = UNIQUE | NON_NULL, (empty)
            // 3304: b"local-search  ... %d\0": typeof(_43 = const b"local-search based look-ahead at depth %d\x00") = & {l222} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 3304: b"local-search  ... %d\0":   l222 = UNIQUE | NON_NULL, (empty)
            // 3304: b"local-search  ... _char: typeof(_40 = move _41 as *const i8 (Misc)) = *const {l225} i8
            // 3304: b"local-search  ... _char:   l225 = UNIQUE | NON_NULL, (empty)
            (*node).depth,
        );
        lglsetopt(
            (*node).lgl,
            // 3308: (*node).lgl: typeof(_46) = *mut {l69} LGL
            // 3308: (*node).lgl:   l69 = UNIQUE | NON_NULL, (empty)
            b"lkhd\0" as *const u8 as *const libc::c_char,
            // 3309: b"lkhd\0" as *c ... _char: typeof(_47) = *const {l71} i8
            // 3309: b"lkhd\0" as *c ... _char:   l71 = UNIQUE | NON_NULL, (empty)
            // 3309: b"lkhd\0" as *c ... st u8: typeof(_48) = *const {l73} u8
            // 3309: b"lkhd\0" as *c ... st u8:   l73 = UNIQUE | NON_NULL, (empty)
            // 3309: b"lkhd\0": typeof(_49) = *const {l75} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3309: b"lkhd\0":   l75 = UNIQUE | NON_NULL, (empty)
            // 3309: b"lkhd\0": typeof(_50) = & {l77} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3309: b"lkhd\0":   l77 = UNIQUE | NON_NULL, FIXED
            // 3309: b"lkhd\0": typeof(_50 = const b"lkhd\x00") = & {l226} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3309: b"lkhd\0":   l226 = UNIQUE | NON_NULL, (empty)
            // 3309: b"lkhd\0": typeof(_49 = &raw const (*_50)) = *const {l227} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3309: b"lkhd\0":   l227 = UNIQUE | NON_NULL, (empty)
            // 3309: b"lkhd\0" as *c ... _char: typeof(_47 = move _48 as *const i8 (Misc)) = *const {l229} i8
            // 3309: b"lkhd\0" as *c ... _char:   l229 = UNIQUE | NON_NULL, (empty)
            // 3309: b"lkhd\0" as *c ... st u8: typeof(_48 = move _49 as *const u8 (Pointer(ArrayToPointer))) = *const {l228} u8
            // 3309: b"lkhd\0" as *c ... st u8:   l228 = UNIQUE | NON_NULL, (empty)
            -(1 as libc::c_int),
        );
    } else if relevancelkhd != 0 {
    // 3312: relevancelkhd: typeof(_56) = *mut {l84} i32
    // 3312: relevancelkhd:   l84 = UNIQUE | NON_NULL, (empty)
        nmsg(
            node,
            // 3314: node: typeof(_58) = *mut {l87} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3314: node:   l87 = UNIQUE | NON_NULL, (empty)
            b"relevance based look-ahead at depth %d\0" as *const u8 as *const libc::c_char,
            // 3315: b"relevance bas ... _char: typeof(_59) = *const {l89} i8
            // 3315: b"relevance bas ... _char:   l89 = UNIQUE | NON_NULL, (empty)
            // 3315: b"relevance bas ... st u8: typeof(_60) = *const {l91} u8
            // 3315: b"relevance bas ... st u8:   l91 = UNIQUE | NON_NULL, (empty)
            // 3315: b"relevance bas ... %d\0": typeof(_61) = *const {l93} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 3315: b"relevance bas ... %d\0":   l93 = UNIQUE | NON_NULL, (empty)
            // 3315: b"relevance bas ... %d\0": typeof(_62) = & {l95} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 3315: b"relevance bas ... %d\0":   l95 = UNIQUE | NON_NULL, FIXED
            // 3315: b"relevance bas ... %d\0": typeof(_61 = &raw const (*_62)) = *const {l231} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 3315: b"relevance bas ... %d\0":   l231 = UNIQUE | NON_NULL, (empty)
            // 3315: b"relevance bas ... %d\0": typeof(_62 = const b"relevance based look-ahead at depth %d\x00") = & {l230} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 3315: b"relevance bas ... %d\0":   l230 = UNIQUE | NON_NULL, (empty)
            // 3315: b"relevance bas ... st u8: typeof(_60 = move _61 as *const u8 (Pointer(ArrayToPointer))) = *const {l232} u8
            // 3315: b"relevance bas ... st u8:   l232 = UNIQUE | NON_NULL, (empty)
            // 3315: b"relevance bas ... _char: typeof(_59 = move _60 as *const i8 (Misc)) = *const {l233} i8
            // 3315: b"relevance bas ... _char:   l233 = UNIQUE | NON_NULL, (empty)
            (*node).depth,
        );
        lglsetopt(
            (*node).lgl,
            // 3319: (*node).lgl: typeof(_65) = *mut {l99} LGL
            // 3319: (*node).lgl:   l99 = UNIQUE | NON_NULL, (empty)
            b"lkhd\0" as *const u8 as *const libc::c_char,
            // 3320: b"lkhd\0" as *c ... _char: typeof(_66) = *const {l101} i8
            // 3320: b"lkhd\0" as *c ... _char:   l101 = UNIQUE | NON_NULL, (empty)
            // 3320: b"lkhd\0" as *c ... st u8: typeof(_67) = *const {l103} u8
            // 3320: b"lkhd\0" as *c ... st u8:   l103 = UNIQUE | NON_NULL, (empty)
            // 3320: b"lkhd\0": typeof(_68) = *const {l105} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3320: b"lkhd\0":   l105 = UNIQUE | NON_NULL, (empty)
            // 3320: b"lkhd\0": typeof(_69) = & {l107} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3320: b"lkhd\0":   l107 = UNIQUE | NON_NULL, FIXED
            // 3320: b"lkhd\0" as *c ... st u8: typeof(_67 = move _68 as *const u8 (Pointer(ArrayToPointer))) = *const {l236} u8
            // 3320: b"lkhd\0" as *c ... st u8:   l236 = UNIQUE | NON_NULL, (empty)
            // 3320: b"lkhd\0": typeof(_69 = const b"lkhd\x00") = & {l234} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3320: b"lkhd\0":   l234 = UNIQUE | NON_NULL, (empty)
            // 3320: b"lkhd\0" as *c ... _char: typeof(_66 = move _67 as *const i8 (Misc)) = *const {l237} i8
            // 3320: b"lkhd\0" as *c ... _char:   l237 = UNIQUE | NON_NULL, (empty)
            // 3320: b"lkhd\0": typeof(_68 = &raw const (*_69)) = *const {l235} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3320: b"lkhd\0":   l235 = UNIQUE | NON_NULL, (empty)
            4 as libc::c_int,
        );
    } else {
        nmsg(
            node,
            // 3325: node: typeof(_72) = *mut {l111} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3325: node:   l111 = UNIQUE | NON_NULL, (empty)
            b"JWH based look-ahead at depth %d\0" as *const u8 as *const libc::c_char,
            // 3326: b"JWH based loo ... _char: typeof(_73) = *const {l113} i8
            // 3326: b"JWH based loo ... _char:   l113 = UNIQUE | NON_NULL, (empty)
            // 3326: b"JWH based loo ... st u8: typeof(_74) = *const {l115} u8
            // 3326: b"JWH based loo ... st u8:   l115 = UNIQUE | NON_NULL, (empty)
            // 3326: b"JWH based loo ... %d\0": typeof(_75) = *const {l117} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 3326: b"JWH based loo ... %d\0":   l117 = UNIQUE | NON_NULL, (empty)
            // 3326: b"JWH based loo ... %d\0": typeof(_76) = & {l119} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 3326: b"JWH based loo ... %d\0":   l119 = UNIQUE | NON_NULL, FIXED
            // 3326: b"JWH based loo ... %d\0": typeof(_75 = &raw const (*_76)) = *const {l239} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 3326: b"JWH based loo ... %d\0":   l239 = UNIQUE | NON_NULL, (empty)
            // 3326: b"JWH based loo ... st u8: typeof(_74 = move _75 as *const u8 (Pointer(ArrayToPointer))) = *const {l240} u8
            // 3326: b"JWH based loo ... st u8:   l240 = UNIQUE | NON_NULL, (empty)
            // 3326: b"JWH based loo ... %d\0": typeof(_76 = const b"JWH based look-ahead at depth %d\x00") = & {l238} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 3326: b"JWH based loo ... %d\0":   l238 = UNIQUE | NON_NULL, (empty)
            // 3326: b"JWH based loo ... _char: typeof(_73 = move _74 as *const i8 (Misc)) = *const {l241} i8
            // 3326: b"JWH based loo ... _char:   l241 = UNIQUE | NON_NULL, (empty)
            (*node).depth,
        );
        lglsetopt(
            (*node).lgl,
            // 3330: (*node).lgl: typeof(_79) = *mut {l123} LGL
            // 3330: (*node).lgl:   l123 = UNIQUE | NON_NULL, (empty)
            b"lkhd\0" as *const u8 as *const libc::c_char,
            // 3331: b"lkhd\0" as *c ... _char: typeof(_80) = *const {l125} i8
            // 3331: b"lkhd\0" as *c ... _char:   l125 = UNIQUE | NON_NULL, (empty)
            // 3331: b"lkhd\0" as *c ... st u8: typeof(_81) = *const {l127} u8
            // 3331: b"lkhd\0" as *c ... st u8:   l127 = UNIQUE | NON_NULL, (empty)
            // 3331: b"lkhd\0": typeof(_82) = *const {l129} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3331: b"lkhd\0":   l129 = UNIQUE | NON_NULL, (empty)
            // 3331: b"lkhd\0": typeof(_83) = & {l131} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3331: b"lkhd\0":   l131 = UNIQUE | NON_NULL, FIXED
            // 3331: b"lkhd\0" as *c ... _char: typeof(_80 = move _81 as *const i8 (Misc)) = *const {l245} i8
            // 3331: b"lkhd\0" as *c ... _char:   l245 = UNIQUE | NON_NULL, (empty)
            // 3331: b"lkhd\0": typeof(_83 = const b"lkhd\x00") = & {l242} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3331: b"lkhd\0":   l242 = UNIQUE | NON_NULL, (empty)
            // 3331: b"lkhd\0": typeof(_82 = &raw const (*_83)) = *const {l243} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 3331: b"lkhd\0":   l243 = UNIQUE | NON_NULL, (empty)
            // 3331: b"lkhd\0" as *c ... st u8: typeof(_81 = move _82 as *const u8 (Pointer(ArrayToPointer))) = *const {l244} u8
            // 3331: b"lkhd\0" as *c ... st u8:   l244 = UNIQUE | NON_NULL, (empty)
            1 as libc::c_int,
        );
        lglsetopt(
            (*node).lgl,
            // 3335: (*node).lgl: typeof(_86) = *mut {l135} LGL
            // 3335: (*node).lgl:   l135 = UNIQUE | NON_NULL, (empty)
            b"jwhred\0" as *const u8 as *const libc::c_char,
            // 3336: b"jwhred\0" as  ... _char: typeof(_87) = *const {l137} i8
            // 3336: b"jwhred\0" as  ... _char:   l137 = UNIQUE | NON_NULL, (empty)
            // 3336: b"jwhred\0" as  ... st u8: typeof(_88) = *const {l139} u8
            // 3336: b"jwhred\0" as  ... st u8:   l139 = UNIQUE | NON_NULL, (empty)
            // 3336: b"jwhred\0": typeof(_89) = *const {l141} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 3336: b"jwhred\0":   l141 = UNIQUE | NON_NULL, (empty)
            // 3336: b"jwhred\0": typeof(_90) = & {l143} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 3336: b"jwhred\0":   l143 = UNIQUE | NON_NULL, FIXED
            // 3336: b"jwhred\0" as  ... st u8: typeof(_88 = move _89 as *const u8 (Pointer(ArrayToPointer))) = *const {l248} u8
            // 3336: b"jwhred\0" as  ... st u8:   l248 = UNIQUE | NON_NULL, (empty)
            // 3336: b"jwhred\0": typeof(_89 = &raw const (*_90)) = *const {l247} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 3336: b"jwhred\0":   l247 = UNIQUE | NON_NULL, (empty)
            // 3336: b"jwhred\0" as  ... _char: typeof(_87 = move _88 as *const i8 (Misc)) = *const {l249} i8
            // 3336: b"jwhred\0" as  ... _char:   l249 = UNIQUE | NON_NULL, (empty)
            // 3336: b"jwhred\0": typeof(_90 = const b"jwhred\x00") = & {l246} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 3336: b"jwhred\0":   l246 = UNIQUE | NON_NULL, (empty)
            0 as libc::c_int,
        );
    }
    ::core::intrinsics::atomic_xadd_seqcst(&mut totalkhd, 1 as libc::c_int as int64_t);
    // 3340: &mut totalkhd: typeof(_93) = *mut {l147} i64
    // 3340: &mut totalkhd:   l147 = UNIQUE | NON_NULL, (empty)
    // 3340: &mut totalkhd: typeof(_94) = &mut {l149} i64
    // 3340: &mut totalkhd:   l149 = UNIQUE | NON_NULL, (empty)
    // 3340: totalkhd: typeof(_95) = *mut {l151} i64
    // 3340: totalkhd:   l151 = UNIQUE | NON_NULL, (empty)
    // 3340: &mut totalkhd: typeof(_94 = &mut (*_95)) = &mut {l250} i64
    // 3340: &mut totalkhd:   l250 = UNIQUE | NON_NULL, (empty)
    // 3340: &mut totalkhd: typeof(_93 = &raw mut (*_94)) = *mut {l251} i64
    // 3340: &mut totalkhd:   l251 = UNIQUE | NON_NULL, (empty)
    (*node).lookahead = lglookahead((*node).lgl);
    // 3341: (*node).lgl: typeof(_99) = *mut {l156} LGL
    // 3341: (*node).lgl:   l156 = UNIQUE | NON_NULL, (empty)
    nmsg(
        node,
        // 3343: node: typeof(_101) = *mut {l159} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3343: node:   l159 = UNIQUE | NON_NULL, (empty)
        b"lookahead literal %d\0" as *const u8 as *const libc::c_char,
        // 3344: b"lookahead lit ... _char: typeof(_102) = *const {l161} i8
        // 3344: b"lookahead lit ... _char:   l161 = UNIQUE | NON_NULL, (empty)
        // 3344: b"lookahead lit ... st u8: typeof(_103) = *const {l163} u8
        // 3344: b"lookahead lit ... st u8:   l163 = UNIQUE | NON_NULL, (empty)
        // 3344: b"lookahead lit ... %d\0": typeof(_104) = *const {l165} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3344: b"lookahead lit ... %d\0":   l165 = UNIQUE | NON_NULL, (empty)
        // 3344: b"lookahead lit ... %d\0": typeof(_105) = & {l167} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3344: b"lookahead lit ... %d\0":   l167 = UNIQUE | NON_NULL, FIXED
        // 3344: b"lookahead lit ... _char: typeof(_102 = move _103 as *const i8 (Misc)) = *const {l255} i8
        // 3344: b"lookahead lit ... _char:   l255 = UNIQUE | NON_NULL, (empty)
        // 3344: b"lookahead lit ... %d\0": typeof(_105 = const b"lookahead literal %d\x00") = & {l252} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3344: b"lookahead lit ... %d\0":   l252 = UNIQUE | NON_NULL, (empty)
        // 3344: b"lookahead lit ... %d\0": typeof(_104 = &raw const (*_105)) = *const {l253} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3344: b"lookahead lit ... %d\0":   l253 = UNIQUE | NON_NULL, (empty)
        // 3344: b"lookahead lit ... st u8: typeof(_103 = move _104 as *const u8 (Pointer(ArrayToPointer))) = *const {l254} u8
        // 3344: b"lookahead lit ... st u8:   l254 = UNIQUE | NON_NULL, (empty)
        (*node).lookahead,
    );
    newvars = lglnvars((*node).lgl);
    // 3347: (*node).lgl: typeof(_108) = *mut {l171} LGL
    // 3347: (*node).lgl:   l171 = UNIQUE | NON_NULL, (empty)
    if oldvars == 0 {
        redpermille = 0 as libc::c_int;
    } else {
        redpermille = (1000 as libc::c_longlong * (oldvars - newvars) as libc::c_longlong
            / oldvars as libc::c_longlong) as libc::c_int;
    }
    nmsg(
        node,
        // 3355: node: typeof(_129) = *mut {l193} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3355: node:   l193 = UNIQUE | NON_NULL, (empty)
        b"lookahead reduced %d variables to %d variables %.1f%%\0" as *const u8
        // 3356: b"lookahead red ... _char: typeof(_130) = *const {l195} i8
        // 3356: b"lookahead red ... _char:   l195 = UNIQUE | NON_NULL, (empty)
        // 3356: b"lookahead red ... st u8: typeof(_131) = *const {l197} u8
        // 3356: b"lookahead red ... st u8:   l197 = UNIQUE | NON_NULL, (empty)
        // 3356: b"lookahead red ... %%\0": typeof(_132) = *const {l199} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 3356: b"lookahead red ... %%\0":   l199 = UNIQUE | NON_NULL, (empty)
        // 3356: b"lookahead red ... %%\0": typeof(_133) = & {l201} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 3356: b"lookahead red ... %%\0":   l201 = UNIQUE | NON_NULL, FIXED
        // 3356: b"lookahead red ... _char: typeof(_130 = move _131 as *const i8 (Misc)) = *const {l259} i8
        // 3356: b"lookahead red ... _char:   l259 = UNIQUE | NON_NULL, (empty)
        // 3356: b"lookahead red ... st u8: typeof(_131 = move _132 as *const u8 (Pointer(ArrayToPointer))) = *const {l258} u8
        // 3356: b"lookahead red ... st u8:   l258 = UNIQUE | NON_NULL, (empty)
        // 3356: b"lookahead red ... %%\0": typeof(_132 = &raw const (*_133)) = *const {l257} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 3356: b"lookahead red ... %%\0":   l257 = UNIQUE | NON_NULL, (empty)
        // 3356: b"lookahead red ... %%\0": typeof(_133 = const b"lookahead reduced %d variables to %d variables %.1f%%\x00") = & {l256} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 3356: b"lookahead red ... %%\0":   l256 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        oldvars,
        newvars,
        redpermille as libc::c_double / 10.0f64,
    );
    decworkers();
    return node as *mut libc::c_void;
    // 3363: node: typeof(_140) = *mut {l209} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3363: node:   l209 = UNIQUE | NON_NULL, (empty)
    // 3363: node as *mut li ... _void: typeof(_0 = move _140 as *mut libc::c_void (Misc)) = *mut {l260} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3363: node as *mut li ... _void:   l260 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn firstlkhd() -> libc::c_int {
    let mut numactive: libc::c_int = if maxactive > numnodes {
    // 3366: maxactive: typeof(_5) = *mut {l5} i32
    // 3366: maxactive:   l5 = UNIQUE | NON_NULL, (empty)
    // 3366: numnodes: typeof(_7) = *mut {l8} i32
    // 3366: numnodes:   l8 = UNIQUE | NON_NULL, (empty)
        numnodes
        // 3367: numnodes: typeof(_8) = *mut {l10} i32
        // 3367: numnodes:   l10 = UNIQUE | NON_NULL, (empty)
    } else {
        maxactive
        // 3369: maxactive: typeof(_9) = *mut {l12} i32
        // 3369: maxactive:   l12 = UNIQUE | NON_NULL, (empty)
    };
    numtosplit = (numactive * branches + 99 as libc::c_int) / 100 as libc::c_int;
    // 3371: branches: typeof(_14) = *mut {l18} i32
    // 3371: branches:   l18 = UNIQUE | NON_NULL, (empty)
    // 3371: numtosplit: typeof(_23) = *mut {l28} i32
    // 3371: numtosplit:   l28 = UNIQUE | NON_NULL, (empty)
    if numnodes < maxactive {
    // 3372: numnodes: typeof(_27) = *mut {l33} i32
    // 3372: numnodes:   l33 = UNIQUE | NON_NULL, (empty)
    // 3372: maxactive: typeof(_29) = *mut {l36} i32
    // 3372: maxactive:   l36 = UNIQUE | NON_NULL, (empty)
        let mut delta: libc::c_int = maxactive - numnodes;
        // 3373: maxactive: typeof(_32) = *mut {l40} i32
        // 3373: maxactive:   l40 = UNIQUE | NON_NULL, (empty)
        // 3373: numnodes: typeof(_34) = *mut {l43} i32
        // 3373: numnodes:   l43 = UNIQUE | NON_NULL, (empty)
        if numtosplit <= delta {
        // 3374: numtosplit: typeof(_39) = *mut {l49} i32
        // 3374: numtosplit:   l49 = UNIQUE | NON_NULL, (empty)
            numtosplit = delta;
            // 3375: numtosplit: typeof(_42) = *mut {l53} i32
            // 3375: numtosplit:   l53 = UNIQUE | NON_NULL, (empty)
        }
        if numtosplit > numnodes {
        // 3377: numtosplit: typeof(_45) = *mut {l57} i32
        // 3377: numtosplit:   l57 = UNIQUE | NON_NULL, (empty)
        // 3377: numnodes: typeof(_47) = *mut {l60} i32
        // 3377: numnodes:   l60 = UNIQUE | NON_NULL, (empty)
            numtosplit = numnodes;
            // 3378: numnodes: typeof(_49) = *mut {l63} i32
            // 3378: numnodes:   l63 = UNIQUE | NON_NULL, (empty)
            // 3378: numtosplit: typeof(_50) = *mut {l65} i32
            // 3378: numtosplit:   l65 = UNIQUE | NON_NULL, (empty)
        }
    }
    if asymmetric != 0 {
    // 3381: asymmetric: typeof(_54) = *mut {l70} i32
    // 3381: asymmetric:   l70 = UNIQUE | NON_NULL, (empty)
        lastosplit = numactive - 1 as libc::c_int;
        // 3382: lastosplit: typeof(_58) = *mut {l75} i32
        // 3382: lastosplit:   l75 = UNIQUE | NON_NULL, (empty)
        firstosplit = lastosplit - numtosplit + 1 as libc::c_int;
        // 3383: lastosplit: typeof(_61) = *mut {l79} i32
        // 3383: lastosplit:   l79 = UNIQUE | NON_NULL, (empty)
        // 3383: numtosplit: typeof(_63) = *mut {l82} i32
        // 3383: numtosplit:   l82 = UNIQUE | NON_NULL, (empty)
        // 3383: firstosplit: typeof(_67) = *mut {l87} i32
        // 3383: firstosplit:   l87 = UNIQUE | NON_NULL, (empty)
    } else {
        firstosplit = 0 as libc::c_int;
        // 3385: firstosplit: typeof(_69) = *mut {l90} i32
        // 3385: firstosplit:   l90 = UNIQUE | NON_NULL, (empty)
        lastosplit = numtosplit - 1 as libc::c_int;
        // 3386: numtosplit: typeof(_71) = *mut {l93} i32
        // 3386: numtosplit:   l93 = UNIQUE | NON_NULL, (empty)
        // 3386: lastosplit: typeof(_74) = *mut {l97} i32
        // 3386: lastosplit:   l97 = UNIQUE | NON_NULL, (empty)
        if numtosplit > numnodes {
        // 3387: numtosplit: typeof(_77) = *mut {l101} i32
        // 3387: numtosplit:   l101 = UNIQUE | NON_NULL, (empty)
        // 3387: numnodes: typeof(_79) = *mut {l104} i32
        // 3387: numnodes:   l104 = UNIQUE | NON_NULL, (empty)
            lastosplit = numnodes - 1 as libc::c_int;
            // 3388: numnodes: typeof(_81) = *mut {l107} i32
            // 3388: numnodes:   l107 = UNIQUE | NON_NULL, (empty)
            // 3388: lastosplit: typeof(_84) = *mut {l111} i32
            // 3388: lastosplit:   l111 = UNIQUE | NON_NULL, (empty)
        }
    }
    msg(
        b" %d lookahead %d out of %d nodes %.0f%% on nodes [%d..%d]\0" as *const u8
        // 3392: b" %d lookahead ... _char: typeof(_86) = *const {l114} i8
        // 3392: b" %d lookahead ... _char:   l114 = UNIQUE | NON_NULL, (empty)
        // 3392: b" %d lookahead ... st u8: typeof(_87) = *const {l116} u8
        // 3392: b" %d lookahead ... st u8:   l116 = UNIQUE | NON_NULL, (empty)
        // 3392: b" %d lookahead ... d]\0": typeof(_88) = *const {l118} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
        // 3392: b" %d lookahead ... d]\0":   l118 = UNIQUE | NON_NULL, (empty)
        // 3392: b" %d lookahead ... d]\0": typeof(_89) = & {l120} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
        // 3392: b" %d lookahead ... d]\0":   l120 = UNIQUE | NON_NULL, FIXED
        // 3392: b" %d lookahead ... d]\0": typeof(_89 = const b" %d lookahead %d out of %d nodes %.0f%% on nodes [%d..%d]\x00") = & {l154} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
        // 3392: b" %d lookahead ... d]\0":   l154 = UNIQUE | NON_NULL, (empty)
        // 3392: b" %d lookahead ... _char: typeof(_86 = move _87 as *const i8 (Misc)) = *const {l157} i8
        // 3392: b" %d lookahead ... _char:   l157 = UNIQUE | NON_NULL, (empty)
        // 3392: b" %d lookahead ... d]\0": typeof(_88 = &raw const (*_89)) = *const {l155} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003a)) }]
        // 3392: b" %d lookahead ... d]\0":   l155 = UNIQUE | NON_NULL, (empty)
        // 3392: b" %d lookahead ... st u8: typeof(_87 = move _88 as *const u8 (Pointer(ArrayToPointer))) = *const {l156} u8
        // 3392: b" %d lookahead ... st u8:   l156 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        round,
        // 3394: round: typeof(_91) = *mut {l123} i32
        // 3394: round:   l123 = UNIQUE | NON_NULL, (empty)
        numtosplit,
        // 3395: numtosplit: typeof(_93) = *mut {l126} i32
        // 3395: numtosplit:   l126 = UNIQUE | NON_NULL, (empty)
        numnodes,
        // 3396: numnodes: typeof(_95) = *mut {l129} i32
        // 3396: numnodes:   l129 = UNIQUE | NON_NULL, (empty)
        pcnt(numtosplit as libc::c_double, numnodes as libc::c_double),
        // 3397: numtosplit: typeof(_99) = *mut {l134} i32
        // 3397: numtosplit:   l134 = UNIQUE | NON_NULL, (empty)
        // 3397: numnodes: typeof(_102) = *mut {l138} i32
        // 3397: numnodes:   l138 = UNIQUE | NON_NULL, (empty)
        firstosplit,
        // 3398: firstosplit: typeof(_104) = *mut {l141} i32
        // 3398: firstosplit:   l141 = UNIQUE | NON_NULL, (empty)
        lastosplit,
        // 3399: lastosplit: typeof(_106) = *mut {l144} i32
        // 3399: lastosplit:   l144 = UNIQUE | NON_NULL, (empty)
    );
    fflush(stdout);
    // 3401: stdout: typeof(_108) = *mut {l147} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 3401: stdout:   l147 = UNIQUE | NON_NULL, (empty)
    // 3401: stdout: typeof(_109) = *mut {l149} *mut {l150} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 3401: stdout:   l149 = UNIQUE | NON_NULL, (empty)
    // 3401: stdout:   l150 = UNIQUE | NON_NULL, (empty)
    return firstosplit;
    // 3402: firstosplit: typeof(_110) = *mut {l152} i32
    // 3402: firstosplit:   l152 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn donelkhd(mut i: libc::c_int) -> libc::c_int {
    return (i > lastosplit) as libc::c_int;
    // 3405: lastosplit: typeof(_6) = *mut {l6} i32
    // 3405: lastosplit:   l6 = READ | UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn nextlkhd(mut i: libc::c_int) -> libc::c_int {
    return i + 1 as libc::c_int;
}
unsafe extern "C" fn lookahead() {
    let mut sumbytes: size_t = currentbytes;
    // 3411: currentbytes: typeof(_2) = *mut {l2} u64
    // 3411: currentbytes:   l2 = UNIQUE | NON_NULL, (empty)
    let mut expected: size_t = 0;
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut node: *mut Node = 0 as *mut Node;
    // 3416: mut node: typeof(_7) = *mut {l8} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3416: mut node:   l8 = UNIQUE | NON_NULL, (empty)
    // 3416: 0 as *mut Node: typeof(_7 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l352} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3416: 0 as *mut Node:   l352 = UNIQUE | NON_NULL, (empty)
    startimer_shim(&mut wct.lkhd);
    // 3417: &mut wct.lkhd: typeof(_9) = *mut {l11} f64
    // 3417: &mut wct.lkhd:   l11 = UNIQUE | NON_NULL, (empty)
    // 3417: &mut wct.lkhd: typeof(_10) = &mut {l13} f64
    // 3417: &mut wct.lkhd:   l13 = UNIQUE | NON_NULL, (empty)
    // 3417: wct: typeof(_11) = *mut {l15} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
    // 3417: wct:   l15 = UNIQUE | NON_NULL, (empty)
    // 3417: &mut wct.lkhd: typeof(_9 = &raw mut (*_10)) = *mut {l354} f64
    // 3417: &mut wct.lkhd:   l354 = UNIQUE | NON_NULL, (empty)
    // 3417: &mut wct.lkhd: typeof(_10 = &mut ((*_11).2: f64)) = &mut {l353} f64
    // 3417: &mut wct.lkhd:   l353 = UNIQUE | NON_NULL, (empty)
    i = 0 as libc::c_int;
    while i < numnodes {
    // 3419: numnodes: typeof(_18) = *mut {l23} i32
    // 3419: numnodes:   l23 = UNIQUE | NON_NULL, (empty)
        node = *nodes.offset(i as isize);
        // 3420: *nodes.offset(i ... size): typeof(_19) = *mut {l25} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3420: *nodes.offset(i ... size):   l25 = UNIQUE | NON_NULL, (empty)
        // 3420: nodes.offset(i  ... size): typeof(_20) = *mut {l27} *mut {l28} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3420: nodes.offset(i  ... size):   l27 = UNIQUE | NON_NULL, (empty)
        // 3420: nodes.offset(i  ... size):   l28 = UNIQUE | NON_NULL, (empty)
        // 3420: nodes: typeof(_21) = *mut {l30} *mut {l31} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3420: nodes:   l30 = UNIQUE | NON_NULL, (empty)
        // 3420: nodes:   l31 = UNIQUE | NON_NULL, (empty)
        // 3420: nodes: typeof(_22) = *mut {l33} *mut {l34} *mut {l35} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3420: nodes:   l33 = UNIQUE | NON_NULL, (empty)
        // 3420: nodes:   l34 = UNIQUE | NON_NULL, (empty)
        // 3420: nodes:   l35 = UNIQUE | NON_NULL, (empty)
        (*node).lookahead = 0 as libc::c_int;
        i += 1;
        i;
    }
    startphase(b"lookahead\0" as *const u8 as *const libc::c_char);
    // 3425: b"lookahead\0"  ... _char: typeof(_32) = *const {l46} i8
    // 3425: b"lookahead\0"  ... _char:   l46 = UNIQUE | NON_NULL, (empty)
    // 3425: b"lookahead\0"  ... st u8: typeof(_33) = *const {l48} u8
    // 3425: b"lookahead\0"  ... st u8:   l48 = UNIQUE | NON_NULL, (empty)
    // 3425: b"lookahead\0": typeof(_34) = *const {l50} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 3425: b"lookahead\0":   l50 = UNIQUE | NON_NULL, (empty)
    // 3425: b"lookahead\0": typeof(_35) = & {l52} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 3425: b"lookahead\0":   l52 = UNIQUE | NON_NULL, FIXED
    // 3425: b"lookahead\0": typeof(_35 = const b"lookahead\x00") = & {l355} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 3425: b"lookahead\0":   l355 = UNIQUE | NON_NULL, (empty)
    // 3425: b"lookahead\0"  ... _char: typeof(_32 = move _33 as *const i8 (Misc)) = *const {l358} i8
    // 3425: b"lookahead\0"  ... _char:   l358 = UNIQUE | NON_NULL, (empty)
    // 3425: b"lookahead\0": typeof(_34 = &raw const (*_35)) = *const {l356} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 3425: b"lookahead\0":   l356 = UNIQUE | NON_NULL, (empty)
    // 3425: b"lookahead\0"  ... st u8: typeof(_33 = move _34 as *const u8 (Pointer(ArrayToPointer))) = *const {l357} u8
    // 3425: b"lookahead\0"  ... st u8:   l357 = UNIQUE | NON_NULL, (empty)
    sortnodes(
        b"lookahead\0" as *const u8 as *const libc::c_char,
        // 3427: b"lookahead\0"  ... _char: typeof(_37) = *const {l55} i8
        // 3427: b"lookahead\0"  ... _char:   l55 = UNIQUE | NON_NULL, (empty)
        // 3427: b"lookahead\0"  ... st u8: typeof(_38) = *const {l57} u8
        // 3427: b"lookahead\0"  ... st u8:   l57 = UNIQUE | NON_NULL, (empty)
        // 3427: b"lookahead\0": typeof(_39) = *const {l59} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3427: b"lookahead\0":   l59 = UNIQUE | NON_NULL, (empty)
        // 3427: b"lookahead\0": typeof(_40) = & {l61} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3427: b"lookahead\0":   l61 = UNIQUE | NON_NULL, FIXED
        // 3427: b"lookahead\0": typeof(_39 = &raw const (*_40)) = *const {l360} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3427: b"lookahead\0":   l360 = UNIQUE | NON_NULL, (empty)
        // 3427: b"lookahead\0": typeof(_40 = const b"lookahead\x00") = & {l359} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 3427: b"lookahead\0":   l359 = UNIQUE | NON_NULL, (empty)
        // 3427: b"lookahead\0"  ... st u8: typeof(_38 = move _39 as *const u8 (Pointer(ArrayToPointer))) = *const {l361} u8
        // 3427: b"lookahead\0"  ... st u8:   l361 = UNIQUE | NON_NULL, (empty)
        // 3427: b"lookahead\0"  ... _char: typeof(_37 = move _38 as *const i8 (Misc)) = *const {l362} i8
        // 3427: b"lookahead\0"  ... _char:   l362 = UNIQUE | NON_NULL, (empty)
        if balance != 0 {
        // 3428: if balance != 0 ... , ) }: typeof(_41) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l63} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l64} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3428: if balance != 0 ... , ) }:   l63 = UNIQUE | NON_NULL, (empty)
        // 3428: if balance != 0 ... , ) }:   l64 = UNIQUE | NON_NULL, (empty)
        // 3428: balance: typeof(_44) = *mut {l68} i32
        // 3428: balance:   l68 = UNIQUE | NON_NULL, (empty)
            Some(
            // 3429: Some( decmpnode ... nt, ): typeof(_41 = std::option::Option::<unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32>::Some(move _45)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l365} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l366} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
            // 3429: Some( decmpnode ... nt, ):   l365 = UNIQUE | NON_NULL, (empty)
            // 3429: Some( decmpnode ... nt, ):   l366 = UNIQUE | NON_NULL, (empty)
                decmpnodes
                // 3430: decmpnodes as u ... c_int: typeof(_45) = fn(*const {l70} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l71} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
                // 3430: decmpnodes as u ... c_int:   l70 = UNIQUE | NON_NULL, (empty)
                // 3430: decmpnodes as u ... c_int:   l71 = UNIQUE | NON_NULL, (empty)
                // 3430: decmpnodes: typeof(_45 = decmpnodes as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*const {l363} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l364} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
                // 3430: decmpnodes:   l363 = UNIQUE | NON_NULL, (empty)
                // 3430: decmpnodes:   l364 = UNIQUE | NON_NULL, (empty)
                    as unsafe extern "C" fn(
                        *const libc::c_void,
                        *const libc::c_void,
                    ) -> libc::c_int,
            )
        } else {
            Some(
            // 3437: Some( incmpnode ... nt, ): typeof(_41 = std::option::Option::<unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32>::Some(move _46)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l369} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l370} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
            // 3437: Some( incmpnode ... nt, ):   l369 = UNIQUE | NON_NULL, (empty)
            // 3437: Some( incmpnode ... nt, ):   l370 = UNIQUE | NON_NULL, (empty)
                incmpnodes
                // 3438: incmpnodes as u ... c_int: typeof(_46) = fn(*const {l73} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l74} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
                // 3438: incmpnodes as u ... c_int:   l73 = UNIQUE | NON_NULL, (empty)
                // 3438: incmpnodes as u ... c_int:   l74 = UNIQUE | NON_NULL, (empty)
                // 3438: incmpnodes: typeof(_46 = incmpnodes as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*const {l367} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l368} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
                // 3438: incmpnodes:   l367 = UNIQUE | NON_NULL, (empty)
                // 3438: incmpnodes:   l368 = UNIQUE | NON_NULL, (empty)
                    as unsafe extern "C" fn(
                        *const libc::c_void,
                        *const libc::c_void,
                    ) -> libc::c_int,
            )
        },
    );
    if randswap != 0 {
    // 3446: randswap: typeof(_50) = *mut {l79} i32
    // 3446: randswap:   l79 = UNIQUE | NON_NULL, (empty)
        vrb(
            b"swapping %d random node pairs\0" as *const u8 as *const libc::c_char,
            // 3448: b"swapping %d r ... _char: typeof(_52) = *const {l82} i8
            // 3448: b"swapping %d r ... _char:   l82 = UNIQUE | NON_NULL, (empty)
            // 3448: b"swapping %d r ... st u8: typeof(_53) = *const {l84} u8
            // 3448: b"swapping %d r ... st u8:   l84 = UNIQUE | NON_NULL, (empty)
            // 3448: b"swapping %d r ... rs\0": typeof(_54) = *const {l86} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 3448: b"swapping %d r ... rs\0":   l86 = UNIQUE | NON_NULL, (empty)
            // 3448: b"swapping %d r ... rs\0": typeof(_55) = & {l88} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 3448: b"swapping %d r ... rs\0":   l88 = UNIQUE | NON_NULL, FIXED
            // 3448: b"swapping %d r ... rs\0": typeof(_54 = &raw const (*_55)) = *const {l372} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 3448: b"swapping %d r ... rs\0":   l372 = UNIQUE | NON_NULL, (empty)
            // 3448: b"swapping %d r ... st u8: typeof(_53 = move _54 as *const u8 (Pointer(ArrayToPointer))) = *const {l373} u8
            // 3448: b"swapping %d r ... st u8:   l373 = UNIQUE | NON_NULL, (empty)
            // 3448: b"swapping %d r ... _char: typeof(_52 = move _53 as *const i8 (Misc)) = *const {l374} i8
            // 3448: b"swapping %d r ... _char:   l374 = UNIQUE | NON_NULL, (empty)
            // 3448: b"swapping %d r ... rs\0": typeof(_55 = const b"swapping %d random node pairs\x00") = & {l371} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 3448: b"swapping %d r ... rs\0":   l371 = UNIQUE | NON_NULL, (empty)
            randswap,
            // 3449: randswap: typeof(_57) = *mut {l91} i32
            // 3449: randswap:   l91 = UNIQUE | NON_NULL, (empty)
        );
        k = 0 as libc::c_int;
        while k < randswap {
        // 3452: randswap: typeof(_63) = *mut {l98} i32
        // 3452: randswap:   l98 = UNIQUE | NON_NULL, (empty)
            i = myrandmod(numnodes as libc::c_uint) as libc::c_int;
            // 3453: numnodes: typeof(_67) = *mut {l103} i32
            // 3453: numnodes:   l103 = UNIQUE | NON_NULL, (empty)
            j = myrandmod(numnodes as libc::c_uint) as libc::c_int;
            // 3454: numnodes: typeof(_71) = *mut {l108} i32
            // 3454: numnodes:   l108 = UNIQUE | NON_NULL, (empty)
            vrb(
                b"swapping nodes %d and %d\0" as *const u8 as *const libc::c_char,
                // 3456: b"swapping node ... _char: typeof(_73) = *const {l111} i8
                // 3456: b"swapping node ... _char:   l111 = UNIQUE | NON_NULL, (empty)
                // 3456: b"swapping node ... st u8: typeof(_74) = *const {l113} u8
                // 3456: b"swapping node ... st u8:   l113 = UNIQUE | NON_NULL, (empty)
                // 3456: b"swapping node ... %d\0": typeof(_75) = *const {l115} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 3456: b"swapping node ... %d\0":   l115 = UNIQUE | NON_NULL, (empty)
                // 3456: b"swapping node ... %d\0": typeof(_76) = & {l117} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 3456: b"swapping node ... %d\0":   l117 = UNIQUE | NON_NULL, FIXED
                // 3456: b"swapping node ... %d\0": typeof(_76 = const b"swapping nodes %d and %d\x00") = & {l375} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 3456: b"swapping node ... %d\0":   l375 = UNIQUE | NON_NULL, (empty)
                // 3456: b"swapping node ... _char: typeof(_73 = move _74 as *const i8 (Misc)) = *const {l378} i8
                // 3456: b"swapping node ... _char:   l378 = UNIQUE | NON_NULL, (empty)
                // 3456: b"swapping node ... st u8: typeof(_74 = move _75 as *const u8 (Pointer(ArrayToPointer))) = *const {l377} u8
                // 3456: b"swapping node ... st u8:   l377 = UNIQUE | NON_NULL, (empty)
                // 3456: b"swapping node ... %d\0": typeof(_75 = &raw const (*_76)) = *const {l376} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 3456: b"swapping node ... %d\0":   l376 = UNIQUE | NON_NULL, (empty)
                i,
                j,
            );
            node = *nodes.offset(i as isize);
            // 3460: *nodes.offset(i ... size): typeof(_79) = *mut {l121} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3460: *nodes.offset(i ... size):   l121 = UNIQUE | NON_NULL, (empty)
            // 3460: nodes.offset(i  ... size): typeof(_80) = *mut {l123} *mut {l124} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3460: nodes.offset(i  ... size):   l123 = UNIQUE | NON_NULL, (empty)
            // 3460: nodes.offset(i  ... size):   l124 = UNIQUE | NON_NULL, (empty)
            // 3460: nodes: typeof(_81) = *mut {l126} *mut {l127} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3460: nodes:   l126 = UNIQUE | NON_NULL, (empty)
            // 3460: nodes:   l127 = UNIQUE | NON_NULL, (empty)
            // 3460: nodes: typeof(_82) = *mut {l129} *mut {l130} *mut {l131} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3460: nodes:   l129 = UNIQUE | NON_NULL, (empty)
            // 3460: nodes:   l130 = UNIQUE | NON_NULL, (empty)
            // 3460: nodes:   l131 = UNIQUE | NON_NULL, (empty)
            let ref mut fresh13 = *nodes.offset(i as isize);
            // 3461: ref mut fresh13: typeof(_85) = &mut {l135} *mut {l136} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3461: ref mut fresh13:   l135 = UNIQUE | NON_NULL, FIXED
            // 3461: ref mut fresh13:   l136 = UNIQUE | NON_NULL, (empty)
            // 3461: nodes.offset(i  ... size): typeof(_86) = *mut {l138} *mut {l139} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3461: nodes.offset(i  ... size):   l138 = UNIQUE | NON_NULL, (empty)
            // 3461: nodes.offset(i  ... size):   l139 = UNIQUE | NON_NULL, (empty)
            // 3461: nodes: typeof(_87) = *mut {l141} *mut {l142} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3461: nodes:   l141 = UNIQUE | NON_NULL, (empty)
            // 3461: nodes:   l142 = UNIQUE | NON_NULL, (empty)
            // 3461: nodes: typeof(_88) = *mut {l144} *mut {l145} *mut {l146} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3461: nodes:   l144 = UNIQUE | NON_NULL, (empty)
            // 3461: nodes:   l145 = UNIQUE | NON_NULL, (empty)
            // 3461: nodes:   l146 = UNIQUE | NON_NULL, (empty)
            // 3461: ref mut fresh13: typeof(_85 = &mut (*_86)) = &mut {l379} *mut {l380} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3461: ref mut fresh13:   l379 = UNIQUE | NON_NULL, (empty)
            // 3461: ref mut fresh13:   l380 = UNIQUE | NON_NULL, (empty)
            *fresh13 = *nodes.offset(j as isize);
            // 3462: *nodes.offset(j ... size): typeof(_91) = *mut {l150} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3462: *nodes.offset(j ... size):   l150 = UNIQUE | NON_NULL, (empty)
            // 3462: nodes.offset(j  ... size): typeof(_92) = *mut {l152} *mut {l153} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3462: nodes.offset(j  ... size):   l152 = UNIQUE | NON_NULL, (empty)
            // 3462: nodes.offset(j  ... size):   l153 = UNIQUE | NON_NULL, (empty)
            // 3462: nodes: typeof(_93) = *mut {l155} *mut {l156} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3462: nodes:   l155 = UNIQUE | NON_NULL, (empty)
            // 3462: nodes:   l156 = UNIQUE | NON_NULL, (empty)
            // 3462: nodes: typeof(_94) = *mut {l158} *mut {l159} *mut {l160} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3462: nodes:   l158 = UNIQUE | NON_NULL, (empty)
            // 3462: nodes:   l159 = UNIQUE | NON_NULL, (empty)
            // 3462: nodes:   l160 = UNIQUE | NON_NULL, (empty)
            let ref mut fresh14 = *nodes.offset(j as isize);
            // 3463: ref mut fresh14: typeof(_97) = &mut {l164} *mut {l165} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3463: ref mut fresh14:   l164 = UNIQUE | NON_NULL, FIXED
            // 3463: ref mut fresh14:   l165 = UNIQUE | NON_NULL, (empty)
            // 3463: nodes.offset(j  ... size): typeof(_98) = *mut {l167} *mut {l168} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3463: nodes.offset(j  ... size):   l167 = UNIQUE | NON_NULL, (empty)
            // 3463: nodes.offset(j  ... size):   l168 = UNIQUE | NON_NULL, (empty)
            // 3463: nodes: typeof(_99) = *mut {l170} *mut {l171} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3463: nodes:   l170 = UNIQUE | NON_NULL, (empty)
            // 3463: nodes:   l171 = UNIQUE | NON_NULL, (empty)
            // 3463: nodes: typeof(_100) = *mut {l173} *mut {l174} *mut {l175} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3463: nodes:   l173 = UNIQUE | NON_NULL, (empty)
            // 3463: nodes:   l174 = UNIQUE | NON_NULL, (empty)
            // 3463: nodes:   l175 = UNIQUE | NON_NULL, (empty)
            // 3463: ref mut fresh14: typeof(_97 = &mut (*_98)) = &mut {l381} *mut {l382} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3463: ref mut fresh14:   l381 = UNIQUE | NON_NULL, (empty)
            // 3463: ref mut fresh14:   l382 = UNIQUE | NON_NULL, (empty)
            *fresh14 = node;
            // 3464: node: typeof(_103) = *mut {l179} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3464: node:   l179 = UNIQUE | NON_NULL, (empty)
            k += 1;
            k;
        }
        fixnodespos();
    }
    vrb(
        b"starting lookahead round %d\0" as *const u8 as *const libc::c_char,
        // 3471: b"starting look ... _char: typeof(_111) = *const {l188} i8
        // 3471: b"starting look ... _char:   l188 = UNIQUE | NON_NULL, (empty)
        // 3471: b"starting look ... st u8: typeof(_112) = *const {l190} u8
        // 3471: b"starting look ... st u8:   l190 = UNIQUE | NON_NULL, (empty)
        // 3471: b"starting look ... %d\0": typeof(_113) = *const {l192} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 3471: b"starting look ... %d\0":   l192 = UNIQUE | NON_NULL, (empty)
        // 3471: b"starting look ... %d\0": typeof(_114) = & {l194} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 3471: b"starting look ... %d\0":   l194 = UNIQUE | NON_NULL, FIXED
        // 3471: b"starting look ... %d\0": typeof(_114 = const b"starting lookahead round %d\x00") = & {l383} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 3471: b"starting look ... %d\0":   l383 = UNIQUE | NON_NULL, (empty)
        // 3471: b"starting look ... st u8: typeof(_112 = move _113 as *const u8 (Pointer(ArrayToPointer))) = *const {l385} u8
        // 3471: b"starting look ... st u8:   l385 = UNIQUE | NON_NULL, (empty)
        // 3471: b"starting look ... %d\0": typeof(_113 = &raw const (*_114)) = *const {l384} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
        // 3471: b"starting look ... %d\0":   l384 = UNIQUE | NON_NULL, (empty)
        // 3471: b"starting look ... _char: typeof(_111 = move _112 as *const i8 (Misc)) = *const {l386} i8
        // 3471: b"starting look ... _char:   l386 = UNIQUE | NON_NULL, (empty)
        round,
        // 3472: round: typeof(_116) = *mut {l197} i32
        // 3472: round:   l197 = UNIQUE | NON_NULL, (empty)
    );
    i = firstlkhd();
    while donelkhd(i) == 0 {
        node = *nodes.offset(i as isize);
        // 3476: *nodes.offset(i ... size): typeof(_122) = *mut {l204} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3476: *nodes.offset(i ... size):   l204 = UNIQUE | NON_NULL, (empty)
        // 3476: nodes.offset(i  ... size): typeof(_123) = *mut {l206} *mut {l207} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3476: nodes.offset(i  ... size):   l206 = UNIQUE | NON_NULL, (empty)
        // 3476: nodes.offset(i  ... size):   l207 = UNIQUE | NON_NULL, (empty)
        // 3476: nodes: typeof(_124) = *mut {l209} *mut {l210} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3476: nodes:   l209 = UNIQUE | NON_NULL, (empty)
        // 3476: nodes:   l210 = UNIQUE | NON_NULL, (empty)
        // 3476: nodes: typeof(_125) = *mut {l212} *mut {l213} *mut {l214} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3476: nodes:   l212 = UNIQUE | NON_NULL, (empty)
        // 3476: nodes:   l213 = UNIQUE | NON_NULL, (empty)
        // 3476: nodes:   l214 = UNIQUE | NON_NULL, (empty)
        expected = nodebytes(node);
        // 3477: node: typeof(_129) = *mut {l219} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3477: node:   l219 = UNIQUE | NON_NULL, (empty)
        nmsg(
            node,
            // 3479: node: typeof(_131) = *mut {l222} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3479: node:   l222 = UNIQUE | NON_NULL, (empty)
            b"cloning might add %d MB\0" as *const u8 as *const libc::c_char,
            // 3480: b"cloning might ... _char: typeof(_132) = *const {l224} i8
            // 3480: b"cloning might ... _char:   l224 = UNIQUE | NON_NULL, (empty)
            // 3480: b"cloning might ... st u8: typeof(_133) = *const {l226} u8
            // 3480: b"cloning might ... st u8:   l226 = UNIQUE | NON_NULL, (empty)
            // 3480: b"cloning might ... MB\0": typeof(_134) = *const {l228} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 3480: b"cloning might ... MB\0":   l228 = UNIQUE | NON_NULL, (empty)
            // 3480: b"cloning might ... MB\0": typeof(_135) = & {l230} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 3480: b"cloning might ... MB\0":   l230 = UNIQUE | NON_NULL, FIXED
            // 3480: b"cloning might ... _char: typeof(_132 = move _133 as *const i8 (Misc)) = *const {l390} i8
            // 3480: b"cloning might ... _char:   l390 = UNIQUE | NON_NULL, (empty)
            // 3480: b"cloning might ... st u8: typeof(_133 = move _134 as *const u8 (Pointer(ArrayToPointer))) = *const {l389} u8
            // 3480: b"cloning might ... st u8:   l389 = UNIQUE | NON_NULL, (empty)
            // 3480: b"cloning might ... MB\0": typeof(_134 = &raw const (*_135)) = *const {l388} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 3480: b"cloning might ... MB\0":   l388 = UNIQUE | NON_NULL, (empty)
            // 3480: b"cloning might ... MB\0": typeof(_135 = const b"cloning might add %d MB\x00") = & {l387} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 3480: b"cloning might ... MB\0":   l387 = UNIQUE | NON_NULL, (empty)
            bytes2mb(expected),
        );
        nmsg(
            node,
            // 3484: node: typeof(_139) = *mut {l235} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3484: node:   l235 = UNIQUE | NON_NULL, (empty)
            b"plus already scheduled %d MB gives %d MB\0" as *const u8 as *const libc::c_char,
            // 3485: b"plus already  ... _char: typeof(_140) = *const {l237} i8
            // 3485: b"plus already  ... _char:   l237 = UNIQUE | NON_NULL, (empty)
            // 3485: b"plus already  ... st u8: typeof(_141) = *const {l239} u8
            // 3485: b"plus already  ... st u8:   l239 = UNIQUE | NON_NULL, (empty)
            // 3485: b"plus already  ... MB\0": typeof(_142) = *const {l241} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
            // 3485: b"plus already  ... MB\0":   l241 = UNIQUE | NON_NULL, (empty)
            // 3485: b"plus already  ... MB\0": typeof(_143) = & {l243} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
            // 3485: b"plus already  ... MB\0":   l243 = UNIQUE | NON_NULL, FIXED
            // 3485: b"plus already  ... MB\0": typeof(_143 = const b"plus already scheduled %d MB gives %d MB\x00") = & {l391} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
            // 3485: b"plus already  ... MB\0":   l391 = UNIQUE | NON_NULL, (empty)
            // 3485: b"plus already  ... MB\0": typeof(_142 = &raw const (*_143)) = *const {l392} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000029)) }]
            // 3485: b"plus already  ... MB\0":   l392 = UNIQUE | NON_NULL, (empty)
            // 3485: b"plus already  ... _char: typeof(_140 = move _141 as *const i8 (Misc)) = *const {l394} i8
            // 3485: b"plus already  ... _char:   l394 = UNIQUE | NON_NULL, (empty)
            // 3485: b"plus already  ... st u8: typeof(_141 = move _142 as *const u8 (Pointer(ArrayToPointer))) = *const {l393} u8
            // 3485: b"plus already  ... st u8:   l393 = UNIQUE | NON_NULL, (empty)
            bytes2mb(sumbytes),
            bytes2mb(expected.wrapping_add(sumbytes)),
        );
        if sumbytes.wrapping_add(expected) > softlimbytes {
        // 3489: softlimbytes: typeof(_156) = *mut {l257} u64
        // 3489: softlimbytes:   l257 = UNIQUE | NON_NULL, (empty)
            vrb(
                b"resulting size %d MB exceeds soft memory limit %d MB\0" as *const u8
                // 3491: b"resulting siz ... _char: typeof(_158) = *const {l260} i8
                // 3491: b"resulting siz ... _char:   l260 = UNIQUE | NON_NULL, (empty)
                // 3491: b"resulting siz ... st u8: typeof(_159) = *const {l262} u8
                // 3491: b"resulting siz ... st u8:   l262 = UNIQUE | NON_NULL, (empty)
                // 3491: b"resulting siz ... MB\0": typeof(_160) = *const {l264} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
                // 3491: b"resulting siz ... MB\0":   l264 = UNIQUE | NON_NULL, (empty)
                // 3491: b"resulting siz ... MB\0": typeof(_161) = & {l266} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
                // 3491: b"resulting siz ... MB\0":   l266 = UNIQUE | NON_NULL, FIXED
                // 3491: b"resulting siz ... _char: typeof(_158 = move _159 as *const i8 (Misc)) = *const {l398} i8
                // 3491: b"resulting siz ... _char:   l398 = UNIQUE | NON_NULL, (empty)
                // 3491: b"resulting siz ... MB\0": typeof(_161 = const b"resulting size %d MB exceeds soft memory limit %d MB\x00") = & {l395} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
                // 3491: b"resulting siz ... MB\0":   l395 = UNIQUE | NON_NULL, (empty)
                // 3491: b"resulting siz ... st u8: typeof(_159 = move _160 as *const u8 (Pointer(ArrayToPointer))) = *const {l397} u8
                // 3491: b"resulting siz ... st u8:   l397 = UNIQUE | NON_NULL, (empty)
                // 3491: b"resulting siz ... MB\0": typeof(_160 = &raw const (*_161)) = *const {l396} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
                // 3491: b"resulting siz ... MB\0":   l396 = UNIQUE | NON_NULL, (empty)
                    as *const libc::c_char,
                bytes2mb(sumbytes.wrapping_add(expected)),
                bytes2mb(softlimbytes),
                // 3494: softlimbytes: typeof(_168) = *mut {l274} u64
                // 3494: softlimbytes:   l274 = UNIQUE | NON_NULL, (empty)
            );
            if splitlimbytes == 0 || splitlimbytes > sumbytes {
            // 3496: splitlimbytes: typeof(_172) = *mut {l279} u64
            // 3496: splitlimbytes:   l279 = UNIQUE | NON_NULL, (empty)
            // 3496: splitlimbytes: typeof(_175) = *mut {l283} u64
            // 3496: splitlimbytes:   l283 = UNIQUE | NON_NULL, (empty)
                splitlimbytes = sumbytes;
                // 3497: splitlimbytes: typeof(_178) = *mut {l287} u64
                // 3497: splitlimbytes:   l287 = UNIQUE | NON_NULL, (empty)
            }
        } else {
            sumbytes = sumbytes.wrapping_add(expected);
            js.lkhd += 1;
            // 3501: js: typeof(_182) = *mut {l292} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
            // 3501: js:   l292 = UNIQUE | NON_NULL, (empty)
            js.lkhd;
            // 3502: js: typeof(_185) = *mut {l296} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
            // 3502: js:   l296 = UNIQUE | NON_NULL, (empty)
            schedulejob(
                node,
                // 3504: node: typeof(_187) = *mut {l299} DefId(0:777 ~ treengeling[2d04]::Node)
                // 3504: node:   l299 = UNIQUE | NON_NULL, (empty)
                Some(lookaheadnode as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void),
                // 3505: Some(lookaheadn ... void): typeof(_188) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l301} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l302} DefId(2:5583 ~ core[480a]::ffi::c_void)>
                // 3505: Some(lookaheadn ... void):   l301 = UNIQUE | NON_NULL, (empty)
                // 3505: Some(lookaheadn ... void):   l302 = UNIQUE | NON_NULL, (empty)
                // 3505: lookaheadnode a ... _void: typeof(_189) = fn(*mut {l304} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l305} DefId(2:5583 ~ core[480a]::ffi::c_void)
                // 3505: lookaheadnode a ... _void:   l304 = UNIQUE | NON_NULL, (empty)
                // 3505: lookaheadnode a ... _void:   l305 = UNIQUE | NON_NULL, (empty)
                // 3505: Some(lookaheadn ... void): typeof(_188 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>::Some(move _189)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l401} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l402} DefId(2:5583 ~ core[480a]::ffi::c_void)>
                // 3505: Some(lookaheadn ... void):   l401 = UNIQUE | NON_NULL, (empty)
                // 3505: Some(lookaheadn ... void):   l402 = UNIQUE | NON_NULL, (empty)
                // 3505: lookaheadnode: typeof(_189 = lookaheadnode as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void (Pointer(ReifyFnPointer))) = fn(*mut {l399} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l400} DefId(2:5583 ~ core[480a]::ffi::c_void)
                // 3505: lookaheadnode:   l399 = UNIQUE | NON_NULL, (empty)
                // 3505: lookaheadnode:   l400 = UNIQUE | NON_NULL, (empty)
                b"lookahead\0" as *const u8 as *const libc::c_char,
                // 3506: b"lookahead\0"  ... _char: typeof(_190) = *const {l307} i8
                // 3506: b"lookahead\0"  ... _char:   l307 = UNIQUE | NON_NULL, (empty)
                // 3506: b"lookahead\0"  ... st u8: typeof(_191) = *const {l309} u8
                // 3506: b"lookahead\0"  ... st u8:   l309 = UNIQUE | NON_NULL, (empty)
                // 3506: b"lookahead\0": typeof(_192) = *const {l311} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
                // 3506: b"lookahead\0":   l311 = UNIQUE | NON_NULL, (empty)
                // 3506: b"lookahead\0": typeof(_193) = & {l313} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
                // 3506: b"lookahead\0":   l313 = UNIQUE | NON_NULL, FIXED
                // 3506: b"lookahead\0": typeof(_193 = const b"lookahead\x00") = & {l403} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
                // 3506: b"lookahead\0":   l403 = UNIQUE | NON_NULL, (empty)
                // 3506: b"lookahead\0"  ... _char: typeof(_190 = move _191 as *const i8 (Misc)) = *const {l406} i8
                // 3506: b"lookahead\0"  ... _char:   l406 = UNIQUE | NON_NULL, (empty)
                // 3506: b"lookahead\0"  ... st u8: typeof(_191 = move _192 as *const u8 (Pointer(ArrayToPointer))) = *const {l405} u8
                // 3506: b"lookahead\0"  ... st u8:   l405 = UNIQUE | NON_NULL, (empty)
                // 3506: b"lookahead\0": typeof(_192 = &raw const (*_193)) = *const {l404} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
                // 3506: b"lookahead\0":   l404 = UNIQUE | NON_NULL, (empty)
                LKHD,
            );
        }
        i = nextlkhd(i);
    }
    vrb(
        b"final size is expected not to exceed %d MB\0" as *const u8 as *const libc::c_char,
        // 3513: b"final size is ... _char: typeof(_200) = *const {l321} i8
        // 3513: b"final size is ... _char:   l321 = UNIQUE | NON_NULL, (empty)
        // 3513: b"final size is ... st u8: typeof(_201) = *const {l323} u8
        // 3513: b"final size is ... st u8:   l323 = UNIQUE | NON_NULL, (empty)
        // 3513: b"final size is ... MB\0": typeof(_202) = *const {l325} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002b)) }]
        // 3513: b"final size is ... MB\0":   l325 = UNIQUE | NON_NULL, (empty)
        // 3513: b"final size is ... MB\0": typeof(_203) = & {l327} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002b)) }]
        // 3513: b"final size is ... MB\0":   l327 = UNIQUE | NON_NULL, FIXED
        // 3513: b"final size is ... _char: typeof(_200 = move _201 as *const i8 (Misc)) = *const {l410} i8
        // 3513: b"final size is ... _char:   l410 = UNIQUE | NON_NULL, (empty)
        // 3513: b"final size is ... MB\0": typeof(_202 = &raw const (*_203)) = *const {l408} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002b)) }]
        // 3513: b"final size is ... MB\0":   l408 = UNIQUE | NON_NULL, (empty)
        // 3513: b"final size is ... MB\0": typeof(_203 = const b"final size is expected not to exceed %d MB\x00") = & {l407} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002b)) }]
        // 3513: b"final size is ... MB\0":   l407 = UNIQUE | NON_NULL, (empty)
        // 3513: b"final size is ... st u8: typeof(_201 = move _202 as *const u8 (Pointer(ArrayToPointer))) = *const {l409} u8
        // 3513: b"final size is ... st u8:   l409 = UNIQUE | NON_NULL, (empty)
        bytes2mb(sumbytes),
    );
    vrb(
        b"scheduled %d lookahead jobs out of %d in round %d\0" as *const u8 as *const libc::c_char,
        // 3517: b"scheduled %d  ... _char: typeof(_207) = *const {l332} i8
        // 3517: b"scheduled %d  ... _char:   l332 = UNIQUE | NON_NULL, (empty)
        // 3517: b"scheduled %d  ... st u8: typeof(_208) = *const {l334} u8
        // 3517: b"scheduled %d  ... st u8:   l334 = UNIQUE | NON_NULL, (empty)
        // 3517: b"scheduled %d  ... %d\0": typeof(_209) = *const {l336} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 3517: b"scheduled %d  ... %d\0":   l336 = UNIQUE | NON_NULL, (empty)
        // 3517: b"scheduled %d  ... %d\0": typeof(_210) = & {l338} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 3517: b"scheduled %d  ... %d\0":   l338 = UNIQUE | NON_NULL, FIXED
        // 3517: b"scheduled %d  ... _char: typeof(_207 = move _208 as *const i8 (Misc)) = *const {l414} i8
        // 3517: b"scheduled %d  ... _char:   l414 = UNIQUE | NON_NULL, (empty)
        // 3517: b"scheduled %d  ... %d\0": typeof(_210 = const b"scheduled %d lookahead jobs out of %d in round %d\x00") = & {l411} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 3517: b"scheduled %d  ... %d\0":   l411 = UNIQUE | NON_NULL, (empty)
        // 3517: b"scheduled %d  ... st u8: typeof(_208 = move _209 as *const u8 (Pointer(ArrayToPointer))) = *const {l413} u8
        // 3517: b"scheduled %d  ... st u8:   l413 = UNIQUE | NON_NULL, (empty)
        // 3517: b"scheduled %d  ... %d\0": typeof(_209 = &raw const (*_210)) = *const {l412} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 3517: b"scheduled %d  ... %d\0":   l412 = UNIQUE | NON_NULL, (empty)
        numjobs,
        // 3518: numjobs: typeof(_212) = *mut {l341} i32
        // 3518: numjobs:   l341 = UNIQUE | NON_NULL, (empty)
        numnodes,
        // 3519: numnodes: typeof(_214) = *mut {l344} i32
        // 3519: numnodes:   l344 = UNIQUE | NON_NULL, (empty)
        round,
        // 3520: round: typeof(_216) = *mut {l347} i32
        // 3520: round:   l347 = UNIQUE | NON_NULL, (empty)
    );
    runjobs();
    joinjobs();
    stoptimer();
}
unsafe extern "C" fn splitnode(mut voidptr: *mut libc::c_void) -> *mut libc::c_void {
// 3526: *mut libc::c_void: typeof(_0) = *mut {g92} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 3526: *mut libc::c_void:   g92 = UNIQUE | NON_NULL, FIXED
// 3526: mut voidptr: typeof(_1) = *mut {g91} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 3526: mut voidptr:   g91 = UNIQUE | NON_NULL, FIXED
    let mut node: *mut Node = voidptr as *mut Node;
    // 3527: mut node: typeof(_3) = *mut {l3} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3527: mut node:   l3 = UNIQUE | NON_NULL, (empty)
    // 3527: voidptr: typeof(_4) = *mut {l5} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3527: voidptr:   l5 = UNIQUE | NON_NULL, (empty)
    // 3527: voidptr as *mut Node: typeof(_3 = move _4 as *mut Node (Misc)) = *mut {l114} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3527: voidptr as *mut Node:   l114 = UNIQUE | NON_NULL, (empty)
    let mut child: *mut Node = 0 as *mut Node;
    // 3528: mut child: typeof(_5) = *mut {l7} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3528: mut child:   l7 = UNIQUE | NON_NULL, (empty)
    // 3528: 0 as *mut Node: typeof(_5 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l115} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3528: 0 as *mut Node:   l115 = UNIQUE | NON_NULL, (empty)
    child = newnode(node, -(*node).lookahead);
    // 3529: newnode(node, - ... head): typeof(_6) = *mut {l9} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3529: newnode(node, - ... head):   l9 = UNIQUE | NON_NULL, (empty)
    // 3529: node: typeof(_7) = *mut {l11} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3529: node:   l11 = UNIQUE | NON_NULL, (empty)
    addint_shim(&mut (*node).cube, (*node).lookahead);
    // 3530: &mut (*node).cube: typeof(_12) = *mut {l17} *mut {l18} i32
    // 3530: &mut (*node).cube:   l17 = UNIQUE | NON_NULL, (empty)
    // 3530: &mut (*node).cube:   l18 = UNIQUE | NON_NULL, (empty)
    // 3530: &mut (*node).cube: typeof(_13) = &mut {l20} *mut {l21} i32
    // 3530: &mut (*node).cube:   l20 = UNIQUE | NON_NULL, (empty)
    // 3530: &mut (*node).cube:   l21 = UNIQUE | NON_NULL, (empty)
    // 3530: &mut (*node).cube: typeof(_13 = &mut ((*_3).11: *mut i32)) = &mut {l116} *mut {l117} i32
    // 3530: &mut (*node).cube:   l116 = UNIQUE | NON_NULL, (empty)
    // 3530: &mut (*node).cube:   l117 = UNIQUE | NON_NULL, (empty)
    // 3530: &mut (*node).cube: typeof(_12 = &raw mut (*_13)) = *mut {l118} *mut {l119} i32
    // 3530: &mut (*node).cube:   l118 = UNIQUE | NON_NULL, (empty)
    // 3530: &mut (*node).cube:   l119 = UNIQUE | NON_NULL, (empty)
    cubemsg(node, b"extended\0" as *const u8 as *const libc::c_char);
    // 3531: node: typeof(_16) = *mut {l25} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3531: node:   l25 = UNIQUE | NON_NULL, (empty)
    // 3531: b"extended\0" a ... _char: typeof(_17) = *const {l27} i8
    // 3531: b"extended\0" a ... _char:   l27 = UNIQUE | NON_NULL, (empty)
    // 3531: b"extended\0" a ... st u8: typeof(_18) = *const {l29} u8
    // 3531: b"extended\0" a ... st u8:   l29 = UNIQUE | NON_NULL, (empty)
    // 3531: b"extended\0": typeof(_19) = *const {l31} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
    // 3531: b"extended\0":   l31 = UNIQUE | NON_NULL, (empty)
    // 3531: b"extended\0": typeof(_20) = & {l33} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
    // 3531: b"extended\0":   l33 = UNIQUE | NON_NULL, FIXED
    // 3531: b"extended\0": typeof(_20 = const b"extended\x00") = & {l120} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
    // 3531: b"extended\0":   l120 = UNIQUE | NON_NULL, (empty)
    // 3531: b"extended\0": typeof(_19 = &raw const (*_20)) = *const {l121} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
    // 3531: b"extended\0":   l121 = UNIQUE | NON_NULL, (empty)
    // 3531: b"extended\0" a ... st u8: typeof(_18 = move _19 as *const u8 (Pointer(ArrayToPointer))) = *const {l122} u8
    // 3531: b"extended\0" a ... st u8:   l122 = UNIQUE | NON_NULL, (empty)
    // 3531: b"extended\0" a ... _char: typeof(_17 = move _18 as *const i8 (Misc)) = *const {l123} i8
    // 3531: b"extended\0" a ... _char:   l123 = UNIQUE | NON_NULL, (empty)
    lgladd((*node).lgl, (*node).lookahead);
    // 3532: (*node).lgl: typeof(_22) = *mut {l36} LGL
    // 3532: (*node).lgl:   l36 = UNIQUE | NON_NULL, (empty)
    lgladd((*node).lgl, 0 as libc::c_int);
    // 3533: (*node).lgl: typeof(_25) = *mut {l40} LGL
    // 3533: (*node).lgl:   l40 = UNIQUE | NON_NULL, (empty)
    nmsg(
        node,
        // 3535: node: typeof(_28) = *mut {l44} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3535: node:   l44 = UNIQUE | NON_NULL, (empty)
        b"light simplification\0" as *const u8 as *const libc::c_char,
        // 3536: b"light simplif ... _char: typeof(_29) = *const {l46} i8
        // 3536: b"light simplif ... _char:   l46 = UNIQUE | NON_NULL, (empty)
        // 3536: b"light simplif ... st u8: typeof(_30) = *const {l48} u8
        // 3536: b"light simplif ... st u8:   l48 = UNIQUE | NON_NULL, (empty)
        // 3536: b"light simplif ... on\0": typeof(_31) = *const {l50} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3536: b"light simplif ... on\0":   l50 = UNIQUE | NON_NULL, (empty)
        // 3536: b"light simplif ... on\0": typeof(_32) = & {l52} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3536: b"light simplif ... on\0":   l52 = UNIQUE | NON_NULL, FIXED
        // 3536: b"light simplif ... st u8: typeof(_30 = move _31 as *const u8 (Pointer(ArrayToPointer))) = *const {l126} u8
        // 3536: b"light simplif ... st u8:   l126 = UNIQUE | NON_NULL, (empty)
        // 3536: b"light simplif ... _char: typeof(_29 = move _30 as *const i8 (Misc)) = *const {l127} i8
        // 3536: b"light simplif ... _char:   l127 = UNIQUE | NON_NULL, (empty)
        // 3536: b"light simplif ... on\0": typeof(_31 = &raw const (*_32)) = *const {l125} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3536: b"light simplif ... on\0":   l125 = UNIQUE | NON_NULL, (empty)
        // 3536: b"light simplif ... on\0": typeof(_32 = const b"light simplification\x00") = & {l124} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3536: b"light simplif ... on\0":   l124 = UNIQUE | NON_NULL, (empty)
    );
    lglsimp((*node).lgl, 0 as libc::c_int);
    // 3538: (*node).lgl: typeof(_34) = *mut {l55} LGL
    // 3538: (*node).lgl:   l55 = UNIQUE | NON_NULL, (empty)
    if reducecache != 0 {
    // 3539: reducecache: typeof(_39) = *mut {l61} i32
    // 3539: reducecache:   l61 = UNIQUE | NON_NULL, (empty)
        nmsg(
            child,
            // 3541: child: typeof(_41) = *mut {l64} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3541: child:   l64 = UNIQUE | NON_NULL, (empty)
            b"reducing cache\0" as *const u8 as *const libc::c_char,
            // 3542: b"reducing cach ... _char: typeof(_42) = *const {l66} i8
            // 3542: b"reducing cach ... _char:   l66 = UNIQUE | NON_NULL, (empty)
            // 3542: b"reducing cach ... st u8: typeof(_43) = *const {l68} u8
            // 3542: b"reducing cach ... st u8:   l68 = UNIQUE | NON_NULL, (empty)
            // 3542: b"reducing cache\0": typeof(_44) = *const {l70} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
            // 3542: b"reducing cache\0":   l70 = UNIQUE | NON_NULL, (empty)
            // 3542: b"reducing cache\0": typeof(_45) = & {l72} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
            // 3542: b"reducing cache\0":   l72 = UNIQUE | NON_NULL, FIXED
            // 3542: b"reducing cach ... st u8: typeof(_43 = move _44 as *const u8 (Pointer(ArrayToPointer))) = *const {l130} u8
            // 3542: b"reducing cach ... st u8:   l130 = UNIQUE | NON_NULL, (empty)
            // 3542: b"reducing cache\0": typeof(_44 = &raw const (*_45)) = *const {l129} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
            // 3542: b"reducing cache\0":   l129 = UNIQUE | NON_NULL, (empty)
            // 3542: b"reducing cach ... _char: typeof(_42 = move _43 as *const i8 (Misc)) = *const {l131} i8
            // 3542: b"reducing cach ... _char:   l131 = UNIQUE | NON_NULL, (empty)
            // 3542: b"reducing cache\0": typeof(_45 = const b"reducing cache\x00") = & {l128} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
            // 3542: b"reducing cache\0":   l128 = UNIQUE | NON_NULL, (empty)
        );
        lglreducecache((*child).lgl);
        // 3544: (*child).lgl: typeof(_47) = *mut {l75} LGL
        // 3544: (*child).lgl:   l75 = UNIQUE | NON_NULL, (empty)
        lglreducecache((*node).lgl);
        // 3545: (*node).lgl: typeof(_49) = *mut {l78} LGL
        // 3545: (*node).lgl:   l78 = UNIQUE | NON_NULL, (empty)
    }
    nmsg(
        child,
        // 3548: child: typeof(_51) = *mut {l81} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3548: child:   l81 = UNIQUE | NON_NULL, (empty)
        b"light simplification\0" as *const u8 as *const libc::c_char,
        // 3549: b"light simplif ... _char: typeof(_52) = *const {l83} i8
        // 3549: b"light simplif ... _char:   l83 = UNIQUE | NON_NULL, (empty)
        // 3549: b"light simplif ... st u8: typeof(_53) = *const {l85} u8
        // 3549: b"light simplif ... st u8:   l85 = UNIQUE | NON_NULL, (empty)
        // 3549: b"light simplif ... on\0": typeof(_54) = *const {l87} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3549: b"light simplif ... on\0":   l87 = UNIQUE | NON_NULL, (empty)
        // 3549: b"light simplif ... on\0": typeof(_55) = & {l89} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3549: b"light simplif ... on\0":   l89 = UNIQUE | NON_NULL, FIXED
        // 3549: b"light simplif ... on\0": typeof(_54 = &raw const (*_55)) = *const {l133} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3549: b"light simplif ... on\0":   l133 = UNIQUE | NON_NULL, (empty)
        // 3549: b"light simplif ... _char: typeof(_52 = move _53 as *const i8 (Misc)) = *const {l135} i8
        // 3549: b"light simplif ... _char:   l135 = UNIQUE | NON_NULL, (empty)
        // 3549: b"light simplif ... on\0": typeof(_55 = const b"light simplification\x00") = & {l132} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000015)) }]
        // 3549: b"light simplif ... on\0":   l132 = UNIQUE | NON_NULL, (empty)
        // 3549: b"light simplif ... st u8: typeof(_53 = move _54 as *const u8 (Pointer(ArrayToPointer))) = *const {l134} u8
        // 3549: b"light simplif ... st u8:   l134 = UNIQUE | NON_NULL, (empty)
    );
    lglsimp((*child).lgl, 0 as libc::c_int);
    // 3551: (*child).lgl: typeof(_57) = *mut {l92} LGL
    // 3551: (*child).lgl:   l92 = UNIQUE | NON_NULL, (empty)
    nmsg(
        node,
        // 3553: node: typeof(_60) = *mut {l96} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3553: node:   l96 = UNIQUE | NON_NULL, (empty)
        b"cloned and lightly simplified node and child\0" as *const u8 as *const libc::c_char,
        // 3554: b"cloned and li ... _char: typeof(_61) = *const {l98} i8
        // 3554: b"cloned and li ... _char:   l98 = UNIQUE | NON_NULL, (empty)
        // 3554: b"cloned and li ... st u8: typeof(_62) = *const {l100} u8
        // 3554: b"cloned and li ... st u8:   l100 = UNIQUE | NON_NULL, (empty)
        // 3554: b"cloned and li ... ld\0": typeof(_63) = *const {l102} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 3554: b"cloned and li ... ld\0":   l102 = UNIQUE | NON_NULL, (empty)
        // 3554: b"cloned and li ... ld\0": typeof(_64) = & {l104} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 3554: b"cloned and li ... ld\0":   l104 = UNIQUE | NON_NULL, FIXED
        // 3554: b"cloned and li ... st u8: typeof(_62 = move _63 as *const u8 (Pointer(ArrayToPointer))) = *const {l138} u8
        // 3554: b"cloned and li ... st u8:   l138 = UNIQUE | NON_NULL, (empty)
        // 3554: b"cloned and li ... _char: typeof(_61 = move _62 as *const i8 (Misc)) = *const {l139} i8
        // 3554: b"cloned and li ... _char:   l139 = UNIQUE | NON_NULL, (empty)
        // 3554: b"cloned and li ... ld\0": typeof(_63 = &raw const (*_64)) = *const {l137} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 3554: b"cloned and li ... ld\0":   l137 = UNIQUE | NON_NULL, (empty)
        // 3554: b"cloned and li ... ld\0": typeof(_64 = const b"cloned and lightly simplified node and child\x00") = & {l136} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 3554: b"cloned and li ... ld\0":   l136 = UNIQUE | NON_NULL, (empty)
    );
    (*node).simplified = 0 as libc::c_int;
    (*child).simplified = (*node).simplified;
    decworkers();
    splitsuccessful = 1 as libc::c_int;
    // 3559: splitsuccessful: typeof(_69) = *mut {l110} i32
    // 3559: splitsuccessful:   l110 = UNIQUE | NON_NULL, (empty)
    return node as *mut libc::c_void;
    // 3560: node: typeof(_70) = *mut {l112} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3560: node:   l112 = UNIQUE | NON_NULL, (empty)
    // 3560: node as *mut li ... _void: typeof(_0 = move _70 as *mut libc::c_void (Misc)) = *mut {l140} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3560: node as *mut li ... _void:   l140 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn split() {
    let mut i: libc::c_int = 0;
    let mut tosplit: libc::c_int = 0 as libc::c_int;
    let mut found: libc::c_int = 0 as libc::c_int;
    let mut node: *mut Node = 0 as *mut Node;
    // 3566: mut node: typeof(_4) = *mut {l4} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3566: mut node:   l4 = UNIQUE | NON_NULL, (empty)
    // 3566: 0 as *mut Node: typeof(_4 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l160} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3566: 0 as *mut Node:   l160 = UNIQUE | NON_NULL, (empty)
    startimer_shim(&mut wct.split);
    // 3567: &mut wct.split: typeof(_6) = *mut {l7} f64
    // 3567: &mut wct.split:   l7 = UNIQUE | NON_NULL, (empty)
    // 3567: &mut wct.split: typeof(_7) = &mut {l9} f64
    // 3567: &mut wct.split:   l9 = UNIQUE | NON_NULL, (empty)
    // 3567: wct: typeof(_8) = *mut {l11} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
    // 3567: wct:   l11 = UNIQUE | NON_NULL, (empty)
    // 3567: &mut wct.split: typeof(_6 = &raw mut (*_7)) = *mut {l162} f64
    // 3567: &mut wct.split:   l162 = UNIQUE | NON_NULL, (empty)
    // 3567: &mut wct.split: typeof(_7 = &mut ((*_8).3: f64)) = &mut {l161} f64
    // 3567: &mut wct.split:   l161 = UNIQUE | NON_NULL, (empty)
    startphase(b"split\0" as *const u8 as *const libc::c_char);
    // 3568: b"split\0" as * ... _char: typeof(_10) = *const {l14} i8
    // 3568: b"split\0" as * ... _char:   l14 = UNIQUE | NON_NULL, (empty)
    // 3568: b"split\0" as * ... st u8: typeof(_11) = *const {l16} u8
    // 3568: b"split\0" as * ... st u8:   l16 = UNIQUE | NON_NULL, (empty)
    // 3568: b"split\0": typeof(_12) = *const {l18} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
    // 3568: b"split\0":   l18 = UNIQUE | NON_NULL, (empty)
    // 3568: b"split\0": typeof(_13) = & {l20} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
    // 3568: b"split\0":   l20 = UNIQUE | NON_NULL, FIXED
    // 3568: b"split\0" as * ... st u8: typeof(_11 = move _12 as *const u8 (Pointer(ArrayToPointer))) = *const {l165} u8
    // 3568: b"split\0" as * ... st u8:   l165 = UNIQUE | NON_NULL, (empty)
    // 3568: b"split\0" as * ... _char: typeof(_10 = move _11 as *const i8 (Misc)) = *const {l166} i8
    // 3568: b"split\0" as * ... _char:   l166 = UNIQUE | NON_NULL, (empty)
    // 3568: b"split\0": typeof(_12 = &raw const (*_13)) = *const {l164} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
    // 3568: b"split\0":   l164 = UNIQUE | NON_NULL, (empty)
    // 3568: b"split\0": typeof(_13 = const b"split\x00") = & {l163} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
    // 3568: b"split\0":   l163 = UNIQUE | NON_NULL, (empty)
    splitsuccessful = 0 as libc::c_int;
    // 3569: splitsuccessful: typeof(_15) = *mut {l23} i32
    // 3569: splitsuccessful:   l23 = UNIQUE | NON_NULL, (empty)
    i = 0 as libc::c_int;
    while i < numnodes {
    // 3571: numnodes: typeof(_22) = *mut {l31} i32
    // 3571: numnodes:   l31 = UNIQUE | NON_NULL, (empty)
        node = *nodes.offset(i as isize);
        // 3572: *nodes.offset(i ... size): typeof(_23) = *mut {l33} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3572: *nodes.offset(i ... size):   l33 = UNIQUE | NON_NULL, (empty)
        // 3572: nodes.offset(i  ... size): typeof(_24) = *mut {l35} *mut {l36} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3572: nodes.offset(i  ... size):   l35 = UNIQUE | NON_NULL, (empty)
        // 3572: nodes.offset(i  ... size):   l36 = UNIQUE | NON_NULL, (empty)
        // 3572: nodes: typeof(_25) = *mut {l38} *mut {l39} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3572: nodes:   l38 = UNIQUE | NON_NULL, (empty)
        // 3572: nodes:   l39 = UNIQUE | NON_NULL, (empty)
        // 3572: nodes: typeof(_26) = *mut {l41} *mut {l42} *mut {l43} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3572: nodes:   l41 = UNIQUE | NON_NULL, (empty)
        // 3572: nodes:   l42 = UNIQUE | NON_NULL, (empty)
        // 3572: nodes:   l43 = UNIQUE | NON_NULL, (empty)
        tosplit += ((*node).lookahead != 0 as libc::c_int) as libc::c_int;
        i += 1;
        i;
    }
    msg(
        b" %d splitting %d out of %d nodes %.0f%%\0" as *const u8 as *const libc::c_char,
        // 3578: b" %d splitting ... _char: typeof(_40) = *const {l58} i8
        // 3578: b" %d splitting ... _char:   l58 = UNIQUE | NON_NULL, (empty)
        // 3578: b" %d splitting ... st u8: typeof(_41) = *const {l60} u8
        // 3578: b" %d splitting ... st u8:   l60 = UNIQUE | NON_NULL, (empty)
        // 3578: b" %d splitting ... %%\0": typeof(_42) = *const {l62} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 3578: b" %d splitting ... %%\0":   l62 = UNIQUE | NON_NULL, (empty)
        // 3578: b" %d splitting ... %%\0": typeof(_43) = & {l64} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 3578: b" %d splitting ... %%\0":   l64 = UNIQUE | NON_NULL, FIXED
        // 3578: b" %d splitting ... st u8: typeof(_41 = move _42 as *const u8 (Pointer(ArrayToPointer))) = *const {l169} u8
        // 3578: b" %d splitting ... st u8:   l169 = UNIQUE | NON_NULL, (empty)
        // 3578: b" %d splitting ... %%\0": typeof(_42 = &raw const (*_43)) = *const {l168} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 3578: b" %d splitting ... %%\0":   l168 = UNIQUE | NON_NULL, (empty)
        // 3578: b" %d splitting ... %%\0": typeof(_43 = const b" %d splitting %d out of %d nodes %.0f%%\x00") = & {l167} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 3578: b" %d splitting ... %%\0":   l167 = UNIQUE | NON_NULL, (empty)
        // 3578: b" %d splitting ... _char: typeof(_40 = move _41 as *const i8 (Misc)) = *const {l170} i8
        // 3578: b" %d splitting ... _char:   l170 = UNIQUE | NON_NULL, (empty)
        round,
        // 3579: round: typeof(_45) = *mut {l67} i32
        // 3579: round:   l67 = UNIQUE | NON_NULL, (empty)
        tosplit,
        numnodes,
        // 3581: numnodes: typeof(_48) = *mut {l71} i32
        // 3581: numnodes:   l71 = UNIQUE | NON_NULL, (empty)
        pcnt(tosplit as libc::c_double, numnodes as libc::c_double),
        // 3582: numnodes: typeof(_54) = *mut {l78} i32
        // 3582: numnodes:   l78 = UNIQUE | NON_NULL, (empty)
    );
    i = 0 as libc::c_int;
    while i < numnodes {
    // 3585: numnodes: typeof(_60) = *mut {l85} i32
    // 3585: numnodes:   l85 = UNIQUE | NON_NULL, (empty)
        node = *nodes.offset(i as isize);
        // 3586: *nodes.offset(i ... size): typeof(_61) = *mut {l87} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3586: *nodes.offset(i ... size):   l87 = UNIQUE | NON_NULL, (empty)
        // 3586: nodes.offset(i  ... size): typeof(_62) = *mut {l89} *mut {l90} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3586: nodes.offset(i  ... size):   l89 = UNIQUE | NON_NULL, (empty)
        // 3586: nodes.offset(i  ... size):   l90 = UNIQUE | NON_NULL, (empty)
        // 3586: nodes: typeof(_63) = *mut {l92} *mut {l93} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3586: nodes:   l92 = UNIQUE | NON_NULL, (empty)
        // 3586: nodes:   l93 = UNIQUE | NON_NULL, (empty)
        // 3586: nodes: typeof(_64) = *mut {l95} *mut {l96} *mut {l97} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3586: nodes:   l95 = UNIQUE | NON_NULL, (empty)
        // 3586: nodes:   l96 = UNIQUE | NON_NULL, (empty)
        // 3586: nodes:   l97 = UNIQUE | NON_NULL, (empty)
        if !(skipnode(node) != 0) {
        // 3587: node: typeof(_71) = *mut {l105} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3587: node:   l105 = UNIQUE | NON_NULL, (empty)
            found += 1;
            found;
            if !((*node).lookahead == 0) {
                js.split += 1;
                // 3591: js: typeof(_77) = *mut {l112} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
                // 3591: js:   l112 = UNIQUE | NON_NULL, (empty)
                js.split;
                // 3592: js: typeof(_80) = *mut {l116} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
                // 3592: js:   l116 = UNIQUE | NON_NULL, (empty)
                schedulejob(
                    node,
                    // 3594: node: typeof(_82) = *mut {l119} DefId(0:777 ~ treengeling[2d04]::Node)
                    // 3594: node:   l119 = UNIQUE | NON_NULL, (empty)
                    Some(splitnode as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void),
                    // 3595: Some(splitnode  ... void): typeof(_83) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l121} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l122} DefId(2:5583 ~ core[480a]::ffi::c_void)>
                    // 3595: Some(splitnode  ... void):   l121 = UNIQUE | NON_NULL, (empty)
                    // 3595: Some(splitnode  ... void):   l122 = UNIQUE | NON_NULL, (empty)
                    // 3595: splitnode as un ... _void: typeof(_84) = fn(*mut {l124} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l125} DefId(2:5583 ~ core[480a]::ffi::c_void)
                    // 3595: splitnode as un ... _void:   l124 = UNIQUE | NON_NULL, (empty)
                    // 3595: splitnode as un ... _void:   l125 = UNIQUE | NON_NULL, (empty)
                    // 3595: splitnode: typeof(_84 = splitnode as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void (Pointer(ReifyFnPointer))) = fn(*mut {l171} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l172} DefId(2:5583 ~ core[480a]::ffi::c_void)
                    // 3595: splitnode:   l171 = UNIQUE | NON_NULL, (empty)
                    // 3595: splitnode:   l172 = UNIQUE | NON_NULL, (empty)
                    // 3595: Some(splitnode  ... void): typeof(_83 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>::Some(move _84)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l173} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l174} DefId(2:5583 ~ core[480a]::ffi::c_void)>
                    // 3595: Some(splitnode  ... void):   l173 = UNIQUE | NON_NULL, (empty)
                    // 3595: Some(splitnode  ... void):   l174 = UNIQUE | NON_NULL, (empty)
                    b"split\0" as *const u8 as *const libc::c_char,
                    // 3596: b"split\0" as * ... _char: typeof(_85) = *const {l127} i8
                    // 3596: b"split\0" as * ... _char:   l127 = UNIQUE | NON_NULL, (empty)
                    // 3596: b"split\0" as * ... st u8: typeof(_86) = *const {l129} u8
                    // 3596: b"split\0" as * ... st u8:   l129 = UNIQUE | NON_NULL, (empty)
                    // 3596: b"split\0": typeof(_87) = *const {l131} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
                    // 3596: b"split\0":   l131 = UNIQUE | NON_NULL, (empty)
                    // 3596: b"split\0": typeof(_88) = & {l133} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
                    // 3596: b"split\0":   l133 = UNIQUE | NON_NULL, FIXED
                    // 3596: b"split\0": typeof(_88 = const b"split\x00") = & {l175} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
                    // 3596: b"split\0":   l175 = UNIQUE | NON_NULL, (empty)
                    // 3596: b"split\0" as * ... st u8: typeof(_86 = move _87 as *const u8 (Pointer(ArrayToPointer))) = *const {l177} u8
                    // 3596: b"split\0" as * ... st u8:   l177 = UNIQUE | NON_NULL, (empty)
                    // 3596: b"split\0": typeof(_87 = &raw const (*_88)) = *const {l176} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
                    // 3596: b"split\0":   l176 = UNIQUE | NON_NULL, (empty)
                    // 3596: b"split\0" as * ... _char: typeof(_85 = move _86 as *const i8 (Misc)) = *const {l178} i8
                    // 3596: b"split\0" as * ... _char:   l178 = UNIQUE | NON_NULL, (empty)
                    SPLIT,
                );
            }
        }
        i += 1;
        i;
    }
    vrb(
        b"scheduled %d cloning jobs for %d / %d nodes in round %d\0" as *const u8
        // 3605: b"scheduled %d  ... _char: typeof(_95) = *const {l141} i8
        // 3605: b"scheduled %d  ... _char:   l141 = UNIQUE | NON_NULL, (empty)
        // 3605: b"scheduled %d  ... st u8: typeof(_96) = *const {l143} u8
        // 3605: b"scheduled %d  ... st u8:   l143 = UNIQUE | NON_NULL, (empty)
        // 3605: b"scheduled %d  ... %d\0": typeof(_97) = *const {l145} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 3605: b"scheduled %d  ... %d\0":   l145 = UNIQUE | NON_NULL, (empty)
        // 3605: b"scheduled %d  ... %d\0": typeof(_98) = & {l147} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 3605: b"scheduled %d  ... %d\0":   l147 = UNIQUE | NON_NULL, FIXED
        // 3605: b"scheduled %d  ... %d\0": typeof(_98 = const b"scheduled %d cloning jobs for %d / %d nodes in round %d\x00") = & {l179} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 3605: b"scheduled %d  ... %d\0":   l179 = UNIQUE | NON_NULL, (empty)
        // 3605: b"scheduled %d  ... st u8: typeof(_96 = move _97 as *const u8 (Pointer(ArrayToPointer))) = *const {l181} u8
        // 3605: b"scheduled %d  ... st u8:   l181 = UNIQUE | NON_NULL, (empty)
        // 3605: b"scheduled %d  ... _char: typeof(_95 = move _96 as *const i8 (Misc)) = *const {l182} i8
        // 3605: b"scheduled %d  ... _char:   l182 = UNIQUE | NON_NULL, (empty)
        // 3605: b"scheduled %d  ... %d\0": typeof(_97 = &raw const (*_98)) = *const {l180} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 3605: b"scheduled %d  ... %d\0":   l180 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        numjobs,
        // 3607: numjobs: typeof(_100) = *mut {l150} i32
        // 3607: numjobs:   l150 = UNIQUE | NON_NULL, (empty)
        tosplit,
        found,
        round,
        // 3610: round: typeof(_104) = *mut {l155} i32
        // 3610: round:   l155 = UNIQUE | NON_NULL, (empty)
    );
    runjobs();
    joinjobs();
    stoptimer();
}
unsafe extern "C" fn varspan(
    mut minvarsptr: *mut libc::c_int,
    // 3617: mut minvarsptr: typeof(_1) = *mut {g93} i32
    // 3617: mut minvarsptr:   g93 = UNIQUE | NON_NULL, FIXED
    mut actvarsptr: *mut libc::c_int,
    // 3618: mut actvarsptr: typeof(_2) = *mut {g94} i32
    // 3618: mut actvarsptr:   g94 = UNIQUE | NON_NULL, FIXED
    mut maxvarsptr: *mut libc::c_int,
    // 3619: mut maxvarsptr: typeof(_3) = *mut {g95} i32
    // 3619: mut maxvarsptr:   g95 = UNIQUE | NON_NULL, FIXED
) {
    let mut i: libc::c_int = 0;
    let mut minvars: libc::c_int = 0;
    let mut actvars: libc::c_int = 0;
    let mut maxvars: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    sortnodes(
        b"varspan\0" as *const u8 as *const libc::c_char,
        // 3627: b"varspan\0" as ... _char: typeof(_10) = *const {l10} i8
        // 3627: b"varspan\0" as ... _char:   l10 = UNIQUE | NON_NULL, (empty)
        // 3627: b"varspan\0" as ... st u8: typeof(_11) = *const {l12} u8
        // 3627: b"varspan\0" as ... st u8:   l12 = UNIQUE | NON_NULL, (empty)
        // 3627: b"varspan\0": typeof(_12) = *const {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 3627: b"varspan\0":   l14 = UNIQUE | NON_NULL, (empty)
        // 3627: b"varspan\0": typeof(_13) = & {l16} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 3627: b"varspan\0":   l16 = UNIQUE | NON_NULL, FIXED
        // 3627: b"varspan\0" as ... st u8: typeof(_11 = move _12 as *const u8 (Pointer(ArrayToPointer))) = *const {l188} u8
        // 3627: b"varspan\0" as ... st u8:   l188 = UNIQUE | NON_NULL, (empty)
        // 3627: b"varspan\0": typeof(_12 = &raw const (*_13)) = *const {l187} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 3627: b"varspan\0":   l187 = UNIQUE | NON_NULL, (empty)
        // 3627: b"varspan\0" as ... _char: typeof(_10 = move _11 as *const i8 (Misc)) = *const {l189} i8
        // 3627: b"varspan\0" as ... _char:   l189 = UNIQUE | NON_NULL, (empty)
        // 3627: b"varspan\0": typeof(_13 = const b"varspan\x00") = & {l186} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 3627: b"varspan\0":   l186 = UNIQUE | NON_NULL, (empty)
        Some(
        // 3628: Some( incmpnode ... nt, ): typeof(_14) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l18} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l19} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3628: Some( incmpnode ... nt, ):   l18 = UNIQUE | NON_NULL, (empty)
        // 3628: Some( incmpnode ... nt, ):   l19 = UNIQUE | NON_NULL, (empty)
        // 3628: Some( incmpnode ... nt, ): typeof(_14 = std::option::Option::<unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32>::Some(move _15)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l192} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l193} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3628: Some( incmpnode ... nt, ):   l192 = UNIQUE | NON_NULL, (empty)
        // 3628: Some( incmpnode ... nt, ):   l193 = UNIQUE | NON_NULL, (empty)
            incmpnodes
            // 3629: incmpnodes as u ... c_int: typeof(_15) = fn(*const {l21} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l22} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 3629: incmpnodes as u ... c_int:   l21 = UNIQUE | NON_NULL, (empty)
            // 3629: incmpnodes as u ... c_int:   l22 = UNIQUE | NON_NULL, (empty)
            // 3629: incmpnodes: typeof(_15 = incmpnodes as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*const {l190} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l191} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 3629: incmpnodes:   l190 = UNIQUE | NON_NULL, (empty)
            // 3629: incmpnodes:   l191 = UNIQUE | NON_NULL, (empty)
                as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> libc::c_int,
        ),
    );
    i = 0 as libc::c_int;
    while i < numnodes {
    // 3634: numnodes: typeof(_22) = *mut {l30} i32
    // 3634: numnodes:   l30 = UNIQUE | NON_NULL, (empty)
        if skipnode(*nodes.offset(i as isize)) == 0 {
        // 3635: *nodes.offset(i ... size): typeof(_26) = *mut {l35} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3635: *nodes.offset(i ... size):   l35 = UNIQUE | NON_NULL, (empty)
        // 3635: nodes.offset(i  ... size): typeof(_27) = *mut {l37} *mut {l38} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3635: nodes.offset(i  ... size):   l37 = UNIQUE | NON_NULL, (empty)
        // 3635: nodes.offset(i  ... size):   l38 = UNIQUE | NON_NULL, (empty)
        // 3635: nodes: typeof(_28) = *mut {l40} *mut {l41} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3635: nodes:   l40 = UNIQUE | NON_NULL, (empty)
        // 3635: nodes:   l41 = UNIQUE | NON_NULL, (empty)
        // 3635: nodes: typeof(_29) = *mut {l43} *mut {l44} *mut {l45} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3635: nodes:   l43 = UNIQUE | NON_NULL, (empty)
        // 3635: nodes:   l44 = UNIQUE | NON_NULL, (empty)
        // 3635: nodes:   l45 = UNIQUE | NON_NULL, (empty)
            break;
        }
        i += 1;
        i;
    }
    minvars = if i < numnodes {
    // 3641: numnodes: typeof(_42) = *mut {l59} i32
    // 3641: numnodes:   l59 = UNIQUE | NON_NULL, (empty)
        lglnvars((**nodes.offset(i as isize)).lgl)
        // 3642: (**nodes.offset ... ).lgl: typeof(_43) = *mut {l61} LGL
        // 3642: (**nodes.offset ... ).lgl:   l61 = UNIQUE | NON_NULL, (empty)
        // 3642: nodes.offset(i  ... size): typeof(_44) = *mut {l63} *mut {l64} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3642: nodes.offset(i  ... size):   l63 = UNIQUE | NON_NULL, (empty)
        // 3642: nodes.offset(i  ... size):   l64 = UNIQUE | NON_NULL, (empty)
        // 3642: nodes: typeof(_45) = *mut {l66} *mut {l67} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3642: nodes:   l66 = UNIQUE | NON_NULL, (empty)
        // 3642: nodes:   l67 = UNIQUE | NON_NULL, (empty)
        // 3642: nodes: typeof(_46) = *mut {l69} *mut {l70} *mut {l71} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3642: nodes:   l69 = UNIQUE | NON_NULL, (empty)
        // 3642: nodes:   l70 = UNIQUE | NON_NULL, (empty)
        // 3642: nodes:   l71 = UNIQUE | NON_NULL, (empty)
    } else {
        0 as libc::c_int
    };
    i = numnodes - 1 as libc::c_int;
    // 3646: numnodes: typeof(_50) = *mut {l76} i32
    // 3646: numnodes:   l76 = UNIQUE | NON_NULL, (empty)
    while i >= 0 as libc::c_int {
        if skipnode(*nodes.offset(i as isize)) == 0 {
        // 3648: *nodes.offset(i ... size): typeof(_60) = *mut {l87} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3648: *nodes.offset(i ... size):   l87 = UNIQUE | NON_NULL, (empty)
        // 3648: nodes.offset(i  ... size): typeof(_61) = *mut {l89} *mut {l90} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3648: nodes.offset(i  ... size):   l89 = UNIQUE | NON_NULL, (empty)
        // 3648: nodes.offset(i  ... size):   l90 = UNIQUE | NON_NULL, (empty)
        // 3648: nodes: typeof(_62) = *mut {l92} *mut {l93} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3648: nodes:   l92 = UNIQUE | NON_NULL, (empty)
        // 3648: nodes:   l93 = UNIQUE | NON_NULL, (empty)
        // 3648: nodes: typeof(_63) = *mut {l95} *mut {l96} *mut {l97} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3648: nodes:   l95 = UNIQUE | NON_NULL, (empty)
        // 3648: nodes:   l96 = UNIQUE | NON_NULL, (empty)
        // 3648: nodes:   l97 = UNIQUE | NON_NULL, (empty)
            break;
        }
        i -= 1;
        i;
    }
    maxvars = if i < 0 as libc::c_int {
        0 as libc::c_int
    } else {
        lglnvars((**nodes.offset(i as isize)).lgl)
        // 3657: (**nodes.offset ... ).lgl: typeof(_76) = *mut {l111} LGL
        // 3657: (**nodes.offset ... ).lgl:   l111 = UNIQUE | NON_NULL, (empty)
        // 3657: nodes.offset(i  ... size): typeof(_77) = *mut {l113} *mut {l114} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3657: nodes.offset(i  ... size):   l113 = UNIQUE | NON_NULL, (empty)
        // 3657: nodes.offset(i  ... size):   l114 = UNIQUE | NON_NULL, (empty)
        // 3657: nodes: typeof(_78) = *mut {l116} *mut {l117} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3657: nodes:   l116 = UNIQUE | NON_NULL, (empty)
        // 3657: nodes:   l117 = UNIQUE | NON_NULL, (empty)
        // 3657: nodes: typeof(_79) = *mut {l119} *mut {l120} *mut {l121} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3657: nodes:   l119 = UNIQUE | NON_NULL, (empty)
        // 3657: nodes:   l120 = UNIQUE | NON_NULL, (empty)
        // 3657: nodes:   l121 = UNIQUE | NON_NULL, (empty)
    };
    j = 0 as libc::c_int;
    i = 0 as libc::c_int;
    while i < numnodes {
    // 3661: numnodes: typeof(_88) = *mut {l131} i32
    // 3661: numnodes:   l131 = UNIQUE | NON_NULL, (empty)
        if skipnode(*nodes.offset(i as isize)) == 0 && {
        // 3662: *nodes.offset(i ... size): typeof(_93) = *mut {l137} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3662: *nodes.offset(i ... size):   l137 = UNIQUE | NON_NULL, (empty)
        // 3662: nodes.offset(i  ... size): typeof(_94) = *mut {l139} *mut {l140} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3662: nodes.offset(i  ... size):   l139 = UNIQUE | NON_NULL, (empty)
        // 3662: nodes.offset(i  ... size):   l140 = UNIQUE | NON_NULL, (empty)
        // 3662: nodes: typeof(_95) = *mut {l142} *mut {l143} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3662: nodes:   l142 = UNIQUE | NON_NULL, (empty)
        // 3662: nodes:   l143 = UNIQUE | NON_NULL, (empty)
        // 3662: nodes: typeof(_96) = *mut {l145} *mut {l146} *mut {l147} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3662: nodes:   l145 = UNIQUE | NON_NULL, (empty)
        // 3662: nodes:   l146 = UNIQUE | NON_NULL, (empty)
        // 3662: nodes:   l147 = UNIQUE | NON_NULL, (empty)
            j += 1;
            j == maxactive
            // 3664: maxactive: typeof(_103) = *mut {l155} i32
            // 3664: maxactive:   l155 = UNIQUE | NON_NULL, (empty)
        } {
            break;
        }
        i += 1;
        i;
    }
    actvars = if j == maxactive {
    // 3671: maxactive: typeof(_114) = *mut {l167} i32
    // 3671: maxactive:   l167 = UNIQUE | NON_NULL, (empty)
        lglnvars((**nodes.offset(i as isize)).lgl)
        // 3672: (**nodes.offset ... ).lgl: typeof(_115) = *mut {l169} LGL
        // 3672: (**nodes.offset ... ).lgl:   l169 = UNIQUE | NON_NULL, (empty)
        // 3672: nodes.offset(i  ... size): typeof(_116) = *mut {l171} *mut {l172} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3672: nodes.offset(i  ... size):   l171 = UNIQUE | NON_NULL, (empty)
        // 3672: nodes.offset(i  ... size):   l172 = UNIQUE | NON_NULL, (empty)
        // 3672: nodes: typeof(_117) = *mut {l174} *mut {l175} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3672: nodes:   l174 = UNIQUE | NON_NULL, (empty)
        // 3672: nodes:   l175 = UNIQUE | NON_NULL, (empty)
        // 3672: nodes: typeof(_118) = *mut {l177} *mut {l178} *mut {l179} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3672: nodes:   l177 = UNIQUE | NON_NULL, (empty)
        // 3672: nodes:   l178 = UNIQUE | NON_NULL, (empty)
        // 3672: nodes:   l179 = UNIQUE | NON_NULL, (empty)
    } else {
        maxvars
    };
    *minvarsptr = minvars;
    *actvarsptr = actvars;
    *maxvarsptr = maxvars;
}
unsafe extern "C" fn report() {
    let mut minvars: libc::c_int = 0;
    let mut maxvars: libc::c_int = 0;
    let mut actvars: libc::c_int = 0;
    let mut isfull: libc::c_int = nowfull();
    let mut t: libc::c_double = getime();
    let mut m: libc::c_double = 0.;
    lockmem();
    m = currentbytes as libc::c_double
    // 3688: currentbytes: typeof(_10) = *mut {l10} u64
    // 3688: currentbytes:   l10 = READ | UNIQUE | NON_NULL, (empty)
        / ((1 as libc::c_int) << 20 as libc::c_int) as libc::c_double;
    unlockmem();
    varspan(&mut minvars, &mut actvars, &mut maxvars);
    // 3691: &mut minvars: typeof(_18) = *mut {l19} i32
    // 3691: &mut minvars:   l19 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut minvars: typeof(_19) = &mut {l21} i32
    // 3691: &mut minvars:   l21 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut actvars: typeof(_20) = *mut {l23} i32
    // 3691: &mut actvars:   l23 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut actvars: typeof(_21) = &mut {l25} i32
    // 3691: &mut actvars:   l25 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut maxvars: typeof(_22) = *mut {l27} i32
    // 3691: &mut maxvars:   l27 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut maxvars: typeof(_23) = &mut {l29} i32
    // 3691: &mut maxvars:   l29 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut minvars: typeof(_18 = &raw mut (*_19)) = *mut {l70} i32
    // 3691: &mut minvars:   l70 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut maxvars: typeof(_23 = &mut _2) = &mut {l73} i32
    // 3691: &mut maxvars:   l73 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut actvars: typeof(_21 = &mut _3) = &mut {l71} i32
    // 3691: &mut actvars:   l71 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut minvars: typeof(_19 = &mut _1) = &mut {l69} i32
    // 3691: &mut minvars:   l69 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut maxvars: typeof(_22 = &raw mut (*_23)) = *mut {l74} i32
    // 3691: &mut maxvars:   l74 = UNIQUE | NON_NULL, (empty)
    // 3691: &mut actvars: typeof(_20 = &raw mut (*_21)) = *mut {l72} i32
    // 3691: &mut actvars:   l72 = UNIQUE | NON_NULL, (empty)
    msg(
        b"%c%d %lld%c %.1f sec, %.0f MB, %d nodes +%d -%d s%d, vars[%d..%d..%d]\0" as *const u8
        // 3693: b"%c%d %lld%c % ... _char: typeof(_25) = *const {l32} i8
        // 3693: b"%c%d %lld%c % ... _char:   l32 = UNIQUE | NON_NULL, (empty)
        // 3693: b"%c%d %lld%c % ... st u8: typeof(_26) = *const {l34} u8
        // 3693: b"%c%d %lld%c % ... st u8:   l34 = UNIQUE | NON_NULL, (empty)
        // 3693: b"%c%d %lld%c % ... d]\0": typeof(_27) = *const {l36} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000046)) }]
        // 3693: b"%c%d %lld%c % ... d]\0":   l36 = UNIQUE | NON_NULL, (empty)
        // 3693: b"%c%d %lld%c % ... d]\0": typeof(_28) = & {l38} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000046)) }]
        // 3693: b"%c%d %lld%c % ... d]\0":   l38 = UNIQUE | NON_NULL, FIXED
        // 3693: b"%c%d %lld%c % ... st u8: typeof(_26 = move _27 as *const u8 (Pointer(ArrayToPointer))) = *const {l77} u8
        // 3693: b"%c%d %lld%c % ... st u8:   l77 = UNIQUE | NON_NULL, (empty)
        // 3693: b"%c%d %lld%c % ... _char: typeof(_25 = move _26 as *const i8 (Misc)) = *const {l78} i8
        // 3693: b"%c%d %lld%c % ... _char:   l78 = UNIQUE | NON_NULL, (empty)
        // 3693: b"%c%d %lld%c % ... d]\0": typeof(_27 = &raw const (*_28)) = *const {l76} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000046)) }]
        // 3693: b"%c%d %lld%c % ... d]\0":   l76 = UNIQUE | NON_NULL, (empty)
        // 3693: b"%c%d %lld%c % ... d]\0": typeof(_28 = const b"%c%d %lld%c %.1f sec, %.0f MB, %d nodes +%d -%d s%d, vars[%d..%d..%d]\x00") = & {l75} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000046)) }]
        // 3693: b"%c%d %lld%c % ... d]\0":   l75 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            as *const libc::c_char,
        if isfull != 0 { '[' as i32 } else { '(' as i32 },
        round,
        // 3696: round: typeof(_33) = *mut {l44} i32
        // 3696: round:   l44 = READ | UNIQUE | NON_NULL, (empty)
        ids as libc::c_longlong,
        // 3697: ids: typeof(_35) = *mut {l47} i64
        // 3697: ids:   l47 = READ | UNIQUE | NON_NULL, (empty)
        if isfull != 0 { ']' as i32 } else { ')' as i32 },
        t,
        m,
        numnodes,
        // 3701: numnodes: typeof(_42) = *mut {l55} i32
        // 3701: numnodes:   l55 = READ | UNIQUE | NON_NULL, (empty)
        added,
        // 3702: added: typeof(_44) = *mut {l58} i32
        // 3702: added:   l58 = READ | UNIQUE | NON_NULL, (empty)
        deleted,
        // 3703: deleted: typeof(_46) = *mut {l61} i32
        // 3703: deleted:   l61 = READ | UNIQUE | NON_NULL, (empty)
        simplified,
        // 3704: simplified: typeof(_48) = *mut {l64} i32
        // 3704: simplified:   l64 = READ | UNIQUE | NON_NULL, (empty)
        minvars,
        actvars,
        maxvars,
    );
}
static lopts: [Opt; 3] = [
    {
        let mut init = Opt {
            name: b"restartint\0" as *const u8 as *const libc::c_char,
            val: 4 as libc::c_int,
        };
        init
    },
    {
        let mut init = Opt {
            name: b"restartint\0" as *const u8 as *const libc::c_char,
            val: 1000 as libc::c_int,
        };
        init
    },
    {
        let mut init = Opt {
            name: b"phase\0" as *const u8 as *const libc::c_char,
            val: -(1 as libc::c_int),
        };
        init
    },
];
static mut nopts: libc::c_int = 0;
unsafe extern "C" fn hashtwo64(
    mut a: libc::c_ulonglong,
    mut b: libc::c_ulonglong,
) -> libc::c_ulonglong {
    return (123369937 as libc::c_ulonglong)
        .wrapping_mul(a)
        .wrapping_add((4443739543 as libc::c_long as libc::c_ulonglong).wrapping_mul(b))
        .wrapping_add(346961 as libc::c_int as libc::c_ulonglong);
}
unsafe extern "C" fn setopts(mut node: *mut Node) {
// 3743: mut node: typeof(_1) = *mut {g96} DefId(0:777 ~ treengeling[2d04]::Node)
// 3743: mut node:   g96 = UNIQUE | NON_NULL, FIXED
    let mut r: libc::c_ulonglong =
        hashtwo64((*node).id as libc::c_ulonglong, round as libc::c_ulonglong);
        // 3745: round: typeof(_7) = *mut {l7} i32
        // 3745: round:   l7 = UNIQUE | NON_NULL, (empty)
    let mut def: libc::c_int =
        (r.wrapping_rem(2 as libc::c_int as libc::c_ulonglong) == 0) as libc::c_int;
    let mut newval: libc::c_int = 0;
    let mut first: libc::c_int = 0;
    let mut lgl: *mut LGL = (*node).lgl;
    // 3750: mut lgl: typeof(_16) = *mut {l17} LGL
    // 3750: mut lgl:   l17 = UNIQUE | NON_NULL, (empty)
    let mut o: *mut Opt = 0 as *mut Opt;
    // 3751: mut o: typeof(_17) = *mut {l19} DefId(0:895 ~ treengeling[2d04]::Opt)
    // 3751: mut o:   l19 = UNIQUE | NON_NULL, (empty)
    // 3751: 0 as *mut Opt: typeof(_17 = const 0_usize as *mut Opt (PointerFromExposedAddress)) = *mut {l269} DefId(0:895 ~ treengeling[2d04]::Opt)
    // 3751: 0 as *mut Opt:   l269 = UNIQUE | NON_NULL, (empty)
    lockopts();
    let fresh15 = opts.set;
    // 3753: opts: typeof(_20) = *mut {l23} DefId(0:857 ~ treengeling[2d04]::C2RustUnnamed_5)
    // 3753: opts:   l23 = UNIQUE | NON_NULL, (empty)
    opts.set = opts.set + 1;
    // 3754: opts: typeof(_22) = *mut {l26} DefId(0:857 ~ treengeling[2d04]::C2RustUnnamed_5)
    // 3754: opts:   l26 = UNIQUE | NON_NULL, (empty)
    // 3754: opts: typeof(_24) = *mut {l29} DefId(0:857 ~ treengeling[2d04]::C2RustUnnamed_5)
    // 3754: opts:   l29 = UNIQUE | NON_NULL, (empty)
    first = (fresh15 == 0) as libc::c_int;
    if def != 0 {
        opts.def += 1;
        // 3757: opts: typeof(_30) = *mut {l36} DefId(0:857 ~ treengeling[2d04]::C2RustUnnamed_5)
        // 3757: opts:   l36 = UNIQUE | NON_NULL, (empty)
        opts.def;
        // 3758: opts: typeof(_33) = *mut {l40} DefId(0:857 ~ treengeling[2d04]::C2RustUnnamed_5)
        // 3758: opts:   l40 = UNIQUE | NON_NULL, (empty)
    }
    unlockopts();
    if first != 0 {
        msg(b"\0" as *const u8 as *const libc::c_char);
        // 3762: b"\0" as *const ... _char: typeof(_39) = *const {l47} i8
        // 3762: b"\0" as *const ... _char:   l47 = UNIQUE | NON_NULL, (empty)
        // 3762: b"\0" as *const u8: typeof(_40) = *const {l49} u8
        // 3762: b"\0" as *const u8:   l49 = UNIQUE | NON_NULL, (empty)
        // 3762: b"\0": typeof(_41) = *const {l51} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3762: b"\0":   l51 = UNIQUE | NON_NULL, (empty)
        // 3762: b"\0": typeof(_42) = & {l53} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3762: b"\0":   l53 = UNIQUE | NON_NULL, FIXED
        // 3762: b"\0" as *const ... _char: typeof(_39 = move _40 as *const i8 (Misc)) = *const {l273} i8
        // 3762: b"\0" as *const ... _char:   l273 = UNIQUE | NON_NULL, (empty)
        // 3762: b"\0": typeof(_41 = &raw const (*_42)) = *const {l271} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3762: b"\0":   l271 = UNIQUE | NON_NULL, (empty)
        // 3762: b"\0" as *const u8: typeof(_40 = move _41 as *const u8 (Pointer(ArrayToPointer))) = *const {l272} u8
        // 3762: b"\0" as *const u8:   l272 = UNIQUE | NON_NULL, (empty)
        // 3762: b"\0": typeof(_42 = const b"\x00") = & {l270} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3762: b"\0":   l270 = UNIQUE | NON_NULL, (empty)
        msg(
            b"using %d options for portfolio solving:\0" as *const u8 as *const libc::c_char,
            // 3764: b"using %d opti ... _char: typeof(_44) = *const {l56} i8
            // 3764: b"using %d opti ... _char:   l56 = UNIQUE | NON_NULL, (empty)
            // 3764: b"using %d opti ... st u8: typeof(_45) = *const {l58} u8
            // 3764: b"using %d opti ... st u8:   l58 = UNIQUE | NON_NULL, (empty)
            // 3764: b"using %d opti ... g:\0": typeof(_46) = *const {l60} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
            // 3764: b"using %d opti ... g:\0":   l60 = UNIQUE | NON_NULL, (empty)
            // 3764: b"using %d opti ... g:\0": typeof(_47) = & {l62} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
            // 3764: b"using %d opti ... g:\0":   l62 = UNIQUE | NON_NULL, FIXED
            // 3764: b"using %d opti ... g:\0": typeof(_47 = const b"using %d options for portfolio solving:\x00") = & {l274} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
            // 3764: b"using %d opti ... g:\0":   l274 = UNIQUE | NON_NULL, (empty)
            // 3764: b"using %d opti ... _char: typeof(_44 = move _45 as *const i8 (Misc)) = *const {l277} i8
            // 3764: b"using %d opti ... _char:   l277 = UNIQUE | NON_NULL, (empty)
            // 3764: b"using %d opti ... st u8: typeof(_45 = move _46 as *const u8 (Pointer(ArrayToPointer))) = *const {l276} u8
            // 3764: b"using %d opti ... st u8:   l276 = UNIQUE | NON_NULL, (empty)
            // 3764: b"using %d opti ... g:\0": typeof(_46 = &raw const (*_47)) = *const {l275} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
            // 3764: b"using %d opti ... g:\0":   l275 = UNIQUE | NON_NULL, (empty)
            nopts,
            // 3765: nopts: typeof(_49) = *mut {l65} i32
            // 3765: nopts:   l65 = UNIQUE | NON_NULL, (empty)
        );
        msg(b"\0" as *const u8 as *const libc::c_char);
        // 3767: b"\0" as *const ... _char: typeof(_51) = *const {l68} i8
        // 3767: b"\0" as *const ... _char:   l68 = UNIQUE | NON_NULL, (empty)
        // 3767: b"\0" as *const u8: typeof(_52) = *const {l70} u8
        // 3767: b"\0" as *const u8:   l70 = UNIQUE | NON_NULL, (empty)
        // 3767: b"\0": typeof(_53) = *const {l72} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3767: b"\0":   l72 = UNIQUE | NON_NULL, (empty)
        // 3767: b"\0": typeof(_54) = & {l74} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3767: b"\0":   l74 = UNIQUE | NON_NULL, FIXED
        // 3767: b"\0": typeof(_54 = const b"\x00") = & {l278} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3767: b"\0":   l278 = UNIQUE | NON_NULL, (empty)
        // 3767: b"\0": typeof(_53 = &raw const (*_54)) = *const {l279} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3767: b"\0":   l279 = UNIQUE | NON_NULL, (empty)
        // 3767: b"\0" as *const ... _char: typeof(_51 = move _52 as *const i8 (Misc)) = *const {l281} i8
        // 3767: b"\0" as *const ... _char:   l281 = UNIQUE | NON_NULL, (empty)
        // 3767: b"\0" as *const u8: typeof(_52 = move _53 as *const u8 (Pointer(ArrayToPointer))) = *const {l280} u8
        // 3767: b"\0" as *const u8:   l280 = UNIQUE | NON_NULL, (empty)
        o = lopts.as_mut_ptr();
        // 3768: lopts.as_mut_ptr(): typeof(_55) = *mut {l76} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3768: lopts.as_mut_ptr():   l76 = UNIQUE | NON_NULL, (empty)
        // 3768: lopts.as_mut_ptr(): typeof(_56) = &mut {l78} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3768: lopts.as_mut_ptr():   l78 = UNIQUE | NON_NULL, FIXED
        // 3768: lopts.as_mut_ptr(): typeof(_57) = &mut {l80} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3768: lopts.as_mut_ptr():   l80 = UNIQUE | NON_NULL, (empty)
        // 3768: lopts: typeof(_58) = *mut {l82} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3768: lopts:   l82 = UNIQUE | NON_NULL, (empty)
        // 3768: lopts.as_mut_ptr(): typeof(_57 = &mut (*_58)) = &mut {l282} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3768: lopts.as_mut_ptr():   l282 = UNIQUE | NON_NULL, (empty)
        // 3768: lopts.as_mut_ptr(): typeof(_56 = move _57 as &mut [Opt] (Pointer(Unsize))) = &mut {l283} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3768: lopts.as_mut_ptr():   l283 = UNIQUE | NON_NULL, FIXED
        while o < lopts.as_mut_ptr().offset(nopts as isize) {
        // 3769: o: typeof(_62) = *mut {l87} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3769: o:   l87 = UNIQUE | NON_NULL, (empty)
        // 3769: lopts.as_mut_pt ... size): typeof(_63) = *mut {l89} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3769: lopts.as_mut_pt ... size):   l89 = UNIQUE | NON_NULL, (empty)
        // 3769: lopts.as_mut_ptr(): typeof(_64) = *mut {l91} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3769: lopts.as_mut_ptr():   l91 = UNIQUE | NON_NULL, (empty)
        // 3769: lopts.as_mut_ptr(): typeof(_65) = &mut {l93} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3769: lopts.as_mut_ptr():   l93 = UNIQUE | NON_NULL, FIXED
        // 3769: lopts.as_mut_ptr(): typeof(_66) = &mut {l95} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3769: lopts.as_mut_ptr():   l95 = UNIQUE | NON_NULL, (empty)
        // 3769: lopts: typeof(_67) = *mut {l97} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3769: lopts:   l97 = UNIQUE | NON_NULL, (empty)
        // 3769: nopts: typeof(_70) = *mut {l101} i32
        // 3769: nopts:   l101 = UNIQUE | NON_NULL, (empty)
        // 3769: lopts.as_mut_ptr(): typeof(_65 = move _66 as &mut [Opt] (Pointer(Unsize))) = &mut {l285} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3769: lopts.as_mut_ptr():   l285 = UNIQUE | NON_NULL, FIXED
        // 3769: lopts.as_mut_ptr(): typeof(_66 = &mut (*_67)) = &mut {l284} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3769: lopts.as_mut_ptr():   l284 = UNIQUE | NON_NULL, (empty)
            msg(
                b"  --%s=%d\0" as *const u8 as *const libc::c_char,
                // 3771: b" --%s=%d\0" a ... _char: typeof(_72) = *const {l104} i8
                // 3771: b" --%s=%d\0" a ... _char:   l104 = UNIQUE | NON_NULL, (empty)
                // 3771: b" --%s=%d\0" a ... st u8: typeof(_73) = *const {l106} u8
                // 3771: b" --%s=%d\0" a ... st u8:   l106 = UNIQUE | NON_NULL, (empty)
                // 3771: b" --%s=%d\0": typeof(_74) = *const {l108} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
                // 3771: b" --%s=%d\0":   l108 = UNIQUE | NON_NULL, (empty)
                // 3771: b" --%s=%d\0": typeof(_75) = & {l110} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
                // 3771: b" --%s=%d\0":   l110 = UNIQUE | NON_NULL, FIXED
                // 3771: b" --%s=%d\0" a ... _char: typeof(_72 = move _73 as *const i8 (Misc)) = *const {l289} i8
                // 3771: b" --%s=%d\0" a ... _char:   l289 = UNIQUE | NON_NULL, (empty)
                // 3771: b" --%s=%d\0" a ... st u8: typeof(_73 = move _74 as *const u8 (Pointer(ArrayToPointer))) = *const {l288} u8
                // 3771: b" --%s=%d\0" a ... st u8:   l288 = UNIQUE | NON_NULL, (empty)
                // 3771: b" --%s=%d\0": typeof(_75 = const b"  --%s=%d\x00") = & {l286} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
                // 3771: b" --%s=%d\0":   l286 = UNIQUE | NON_NULL, (empty)
                // 3771: b" --%s=%d\0": typeof(_74 = &raw const (*_75)) = *const {l287} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
                // 3771: b" --%s=%d\0":   l287 = UNIQUE | NON_NULL, (empty)
                (*o).name,
                // 3772: (*o).name: typeof(_76) = *const {l112} i8
                // 3772: (*o).name:   l112 = UNIQUE | NON_NULL, (empty)
                (*o).val,
            );
            o = o.offset(1);
            // 3775: o.offset(1): typeof(_78) = *mut {l115} DefId(0:895 ~ treengeling[2d04]::Opt)
            // 3775: o.offset(1):   l115 = UNIQUE | NON_NULL, (empty)
            // 3775: o: typeof(_79) = *mut {l117} DefId(0:895 ~ treengeling[2d04]::Opt)
            // 3775: o:   l117 = UNIQUE | NON_NULL, (empty)
            o;
            // 3776: o: typeof(_80) = *mut {l119} DefId(0:895 ~ treengeling[2d04]::Opt)
            // 3776: o:   l119 = UNIQUE | NON_NULL, (empty)
        }
        msg(b"\0" as *const u8 as *const libc::c_char);
        // 3778: b"\0" as *const ... _char: typeof(_85) = *const {l125} i8
        // 3778: b"\0" as *const ... _char:   l125 = UNIQUE | NON_NULL, (empty)
        // 3778: b"\0" as *const u8: typeof(_86) = *const {l127} u8
        // 3778: b"\0" as *const u8:   l127 = UNIQUE | NON_NULL, (empty)
        // 3778: b"\0": typeof(_87) = *const {l129} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3778: b"\0":   l129 = UNIQUE | NON_NULL, (empty)
        // 3778: b"\0": typeof(_88) = & {l131} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3778: b"\0":   l131 = UNIQUE | NON_NULL, FIXED
        // 3778: b"\0" as *const u8: typeof(_86 = move _87 as *const u8 (Pointer(ArrayToPointer))) = *const {l292} u8
        // 3778: b"\0" as *const u8:   l292 = UNIQUE | NON_NULL, (empty)
        // 3778: b"\0": typeof(_87 = &raw const (*_88)) = *const {l291} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3778: b"\0":   l291 = UNIQUE | NON_NULL, (empty)
        // 3778: b"\0" as *const ... _char: typeof(_85 = move _86 as *const i8 (Misc)) = *const {l293} i8
        // 3778: b"\0" as *const ... _char:   l293 = UNIQUE | NON_NULL, (empty)
        // 3778: b"\0": typeof(_88 = const b"\x00") = & {l290} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 3778: b"\0":   l290 = UNIQUE | NON_NULL, (empty)
    }
    if def != 0 {
        o = lopts.as_mut_ptr();
        // 3781: lopts.as_mut_ptr(): typeof(_92) = *mut {l136} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3781: lopts.as_mut_ptr():   l136 = UNIQUE | NON_NULL, (empty)
        // 3781: lopts.as_mut_ptr(): typeof(_93) = &mut {l138} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3781: lopts.as_mut_ptr():   l138 = UNIQUE | NON_NULL, FIXED
        // 3781: lopts.as_mut_ptr(): typeof(_94) = &mut {l140} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3781: lopts.as_mut_ptr():   l140 = UNIQUE | NON_NULL, (empty)
        // 3781: lopts: typeof(_95) = *mut {l142} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3781: lopts:   l142 = UNIQUE | NON_NULL, (empty)
        // 3781: lopts.as_mut_ptr(): typeof(_93 = move _94 as &mut [Opt] (Pointer(Unsize))) = &mut {l295} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3781: lopts.as_mut_ptr():   l295 = UNIQUE | NON_NULL, FIXED
        // 3781: lopts.as_mut_ptr(): typeof(_94 = &mut (*_95)) = &mut {l294} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3781: lopts.as_mut_ptr():   l294 = UNIQUE | NON_NULL, (empty)
        while o < lopts.as_mut_ptr().offset(nopts as isize) {
        // 3782: o: typeof(_97) = *mut {l145} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3782: o:   l145 = UNIQUE | NON_NULL, (empty)
        // 3782: lopts.as_mut_pt ... size): typeof(_98) = *mut {l147} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3782: lopts.as_mut_pt ... size):   l147 = UNIQUE | NON_NULL, (empty)
        // 3782: lopts.as_mut_ptr(): typeof(_99) = *mut {l149} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3782: lopts.as_mut_ptr():   l149 = UNIQUE | NON_NULL, (empty)
        // 3782: lopts.as_mut_ptr(): typeof(_100) = &mut {l151} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3782: lopts.as_mut_ptr():   l151 = UNIQUE | NON_NULL, FIXED
        // 3782: lopts.as_mut_ptr(): typeof(_101) = &mut {l153} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3782: lopts.as_mut_ptr():   l153 = UNIQUE | NON_NULL, (empty)
        // 3782: lopts: typeof(_102) = *mut {l155} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3782: lopts:   l155 = UNIQUE | NON_NULL, (empty)
        // 3782: nopts: typeof(_105) = *mut {l159} i32
        // 3782: nopts:   l159 = UNIQUE | NON_NULL, (empty)
        // 3782: lopts.as_mut_ptr(): typeof(_101 = &mut (*_102)) = &mut {l296} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3782: lopts.as_mut_ptr():   l296 = UNIQUE | NON_NULL, (empty)
        // 3782: lopts.as_mut_ptr(): typeof(_100 = move _101 as &mut [Opt] (Pointer(Unsize))) = &mut {l297} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3782: lopts.as_mut_ptr():   l297 = UNIQUE | NON_NULL, FIXED
            newval = lgldefopt(lgl, (*o).name);
            // 3783: lgl: typeof(_107) = *mut {l162} LGL
            // 3783: lgl:   l162 = UNIQUE | NON_NULL, (empty)
            // 3783: (*o).name: typeof(_108) = *const {l164} i8
            // 3783: (*o).name:   l164 = UNIQUE | NON_NULL, (empty)
            if !(lglgetopt(lgl, (*o).name) == newval) {
            // 3784: lgl: typeof(_113) = *mut {l170} LGL
            // 3784: lgl:   l170 = UNIQUE | NON_NULL, (empty)
            // 3784: (*o).name: typeof(_114) = *const {l172} i8
            // 3784: (*o).name:   l172 = UNIQUE | NON_NULL, (empty)
                nmsg(
                    node,
                    // 3786: node: typeof(_117) = *mut {l176} DefId(0:777 ~ treengeling[2d04]::Node)
                    // 3786: node:   l176 = UNIQUE | NON_NULL, (empty)
                    b"resetting option --%s=%d (default)\0" as *const u8 as *const libc::c_char,
                    // 3787: b"resetting opt ... _char: typeof(_118) = *const {l178} i8
                    // 3787: b"resetting opt ... _char:   l178 = UNIQUE | NON_NULL, (empty)
                    // 3787: b"resetting opt ... st u8: typeof(_119) = *const {l180} u8
                    // 3787: b"resetting opt ... st u8:   l180 = UNIQUE | NON_NULL, (empty)
                    // 3787: b"resetting opt ... t)\0": typeof(_120) = *const {l182} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
                    // 3787: b"resetting opt ... t)\0":   l182 = UNIQUE | NON_NULL, (empty)
                    // 3787: b"resetting opt ... t)\0": typeof(_121) = & {l184} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
                    // 3787: b"resetting opt ... t)\0":   l184 = UNIQUE | NON_NULL, FIXED
                    // 3787: b"resetting opt ... t)\0": typeof(_121 = const b"resetting option --%s=%d (default)\x00") = & {l298} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
                    // 3787: b"resetting opt ... t)\0":   l298 = UNIQUE | NON_NULL, (empty)
                    // 3787: b"resetting opt ... t)\0": typeof(_120 = &raw const (*_121)) = *const {l299} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
                    // 3787: b"resetting opt ... t)\0":   l299 = UNIQUE | NON_NULL, (empty)
                    // 3787: b"resetting opt ... st u8: typeof(_119 = move _120 as *const u8 (Pointer(ArrayToPointer))) = *const {l300} u8
                    // 3787: b"resetting opt ... st u8:   l300 = UNIQUE | NON_NULL, (empty)
                    // 3787: b"resetting opt ... _char: typeof(_118 = move _119 as *const i8 (Misc)) = *const {l301} i8
                    // 3787: b"resetting opt ... _char:   l301 = UNIQUE | NON_NULL, (empty)
                    (*o).name,
                    // 3788: (*o).name: typeof(_122) = *const {l186} i8
                    // 3788: (*o).name:   l186 = UNIQUE | NON_NULL, (empty)
                    newval,
                );
                lglsetopt(lgl, (*o).name, newval);
                // 3791: lgl: typeof(_125) = *mut {l190} LGL
                // 3791: lgl:   l190 = UNIQUE | NON_NULL, (empty)
                // 3791: (*o).name: typeof(_126) = *const {l192} i8
                // 3791: (*o).name:   l192 = UNIQUE | NON_NULL, (empty)
            }
            o = o.offset(1);
            // 3793: o.offset(1): typeof(_128) = *mut {l195} DefId(0:895 ~ treengeling[2d04]::Opt)
            // 3793: o.offset(1):   l195 = UNIQUE | NON_NULL, (empty)
            // 3793: o: typeof(_129) = *mut {l197} DefId(0:895 ~ treengeling[2d04]::Opt)
            // 3793: o:   l197 = UNIQUE | NON_NULL, (empty)
            o;
            // 3794: o: typeof(_130) = *mut {l199} DefId(0:895 ~ treengeling[2d04]::Opt)
            // 3794: o:   l199 = UNIQUE | NON_NULL, (empty)
        }
    } else {
        o = lopts
        // 3797: lopts .as_mut_p ... size): typeof(_134) = *mut {l204} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3797: lopts .as_mut_p ... size):   l204 = UNIQUE | NON_NULL, (empty)
        // 3797: lopts .as_mut_ptr(): typeof(_135) = *mut {l206} DefId(0:895 ~ treengeling[2d04]::Opt)
        // 3797: lopts .as_mut_ptr():   l206 = UNIQUE | NON_NULL, (empty)
        // 3797: lopts .as_mut_ptr(): typeof(_136) = &mut {l208} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3797: lopts .as_mut_ptr():   l208 = UNIQUE | NON_NULL, FIXED
        // 3797: lopts .as_mut_ptr(): typeof(_137) = &mut {l210} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3797: lopts .as_mut_ptr():   l210 = UNIQUE | NON_NULL, (empty)
        // 3797: lopts: typeof(_138) = *mut {l212} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3797: lopts:   l212 = UNIQUE | NON_NULL, (empty)
        // 3797: lopts .as_mut_ptr(): typeof(_136 = move _137 as &mut [Opt] (Pointer(Unsize))) = &mut {l303} [DefId(0:895 ~ treengeling[2d04]::Opt)]
        // 3797: lopts .as_mut_ptr():   l303 = UNIQUE | NON_NULL, FIXED
        // 3797: lopts .as_mut_ptr(): typeof(_137 = &mut (*_138)) = &mut {l302} [DefId(0:895 ~ treengeling[2d04]::Opt); Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 3797: lopts .as_mut_ptr():   l302 = UNIQUE | NON_NULL, (empty)
            .as_mut_ptr()
            .offset(r.wrapping_rem(nopts as libc::c_ulonglong) as isize);
            // 3799: nopts: typeof(_144) = *mut {l219} i32
            // 3799: nopts:   l219 = UNIQUE | NON_NULL, (empty)
        nmsg(
            node,
            // 3801: node: typeof(_146) = *mut {l222} DefId(0:777 ~ treengeling[2d04]::Node)
            // 3801: node:   l222 = UNIQUE | NON_NULL, (empty)
            b"setting option --%s=%d%s\0" as *const u8 as *const libc::c_char,
            // 3802: b"setting optio ... _char: typeof(_147) = *const {l224} i8
            // 3802: b"setting optio ... _char:   l224 = UNIQUE | NON_NULL, (empty)
            // 3802: b"setting optio ... st u8: typeof(_148) = *const {l226} u8
            // 3802: b"setting optio ... st u8:   l226 = UNIQUE | NON_NULL, (empty)
            // 3802: b"setting optio ... %s\0": typeof(_149) = *const {l228} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
            // 3802: b"setting optio ... %s\0":   l228 = UNIQUE | NON_NULL, (empty)
            // 3802: b"setting optio ... %s\0": typeof(_150) = & {l230} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
            // 3802: b"setting optio ... %s\0":   l230 = UNIQUE | NON_NULL, FIXED
            // 3802: b"setting optio ... %s\0": typeof(_150 = const b"setting option --%s=%d%s\x00") = & {l304} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
            // 3802: b"setting optio ... %s\0":   l304 = UNIQUE | NON_NULL, (empty)
            // 3802: b"setting optio ... %s\0": typeof(_149 = &raw const (*_150)) = *const {l305} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
            // 3802: b"setting optio ... %s\0":   l305 = UNIQUE | NON_NULL, (empty)
            // 3802: b"setting optio ... st u8: typeof(_148 = move _149 as *const u8 (Pointer(ArrayToPointer))) = *const {l306} u8
            // 3802: b"setting optio ... st u8:   l306 = UNIQUE | NON_NULL, (empty)
            // 3802: b"setting optio ... _char: typeof(_147 = move _148 as *const i8 (Misc)) = *const {l307} i8
            // 3802: b"setting optio ... _char:   l307 = UNIQUE | NON_NULL, (empty)
            (*o).name,
            // 3803: (*o).name: typeof(_151) = *const {l232} i8
            // 3803: (*o).name:   l232 = UNIQUE | NON_NULL, (empty)
            (*o).val,
            if def != 0 {
            // 3805: if def != 0 { b ... har }: typeof(_153) = *const {l235} i8
            // 3805: if def != 0 { b ... har }:   l235 = UNIQUE | NON_NULL, (empty)
                b" (default)\0" as *const u8 as *const libc::c_char
                // 3806: b" (default)\0" ... st u8: typeof(_156) = *const {l239} u8
                // 3806: b" (default)\0" ... st u8:   l239 = UNIQUE | NON_NULL, (empty)
                // 3806: b" (default)\0": typeof(_157) = *const {l241} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
                // 3806: b" (default)\0":   l241 = UNIQUE | NON_NULL, (empty)
                // 3806: b" (default)\0": typeof(_158) = & {l243} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
                // 3806: b" (default)\0":   l243 = UNIQUE | NON_NULL, FIXED
                // 3806: b" (default)\0": typeof(_157 = &raw const (*_158)) = *const {l309} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
                // 3806: b" (default)\0":   l309 = UNIQUE | NON_NULL, (empty)
                // 3806: b" (default)\0": typeof(_158 = const b" (default)\x00") = & {l308} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
                // 3806: b" (default)\0":   l308 = UNIQUE | NON_NULL, (empty)
                // 3806: b" (default)\0" ... _char: typeof(_153 = move _156 as *const i8 (Misc)) = *const {l311} i8
                // 3806: b" (default)\0" ... _char:   l311 = UNIQUE | NON_NULL, (empty)
                // 3806: b" (default)\0" ... st u8: typeof(_156 = move _157 as *const u8 (Pointer(ArrayToPointer))) = *const {l310} u8
                // 3806: b" (default)\0" ... st u8:   l310 = UNIQUE | NON_NULL, (empty)
            } else {
                b"\0" as *const u8 as *const libc::c_char
                // 3808: b"\0" as *const u8: typeof(_159) = *const {l245} u8
                // 3808: b"\0" as *const u8:   l245 = UNIQUE | NON_NULL, (empty)
                // 3808: b"\0": typeof(_160) = *const {l247} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
                // 3808: b"\0":   l247 = UNIQUE | NON_NULL, (empty)
                // 3808: b"\0": typeof(_161) = & {l249} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
                // 3808: b"\0":   l249 = UNIQUE | NON_NULL, FIXED
                // 3808: b"\0" as *const u8: typeof(_159 = move _160 as *const u8 (Pointer(ArrayToPointer))) = *const {l314} u8
                // 3808: b"\0" as *const u8:   l314 = UNIQUE | NON_NULL, (empty)
                // 3808: b"\0" as *const ... _char: typeof(_153 = move _159 as *const i8 (Misc)) = *const {l315} i8
                // 3808: b"\0" as *const ... _char:   l315 = UNIQUE | NON_NULL, (empty)
                // 3808: b"\0": typeof(_160 = &raw const (*_161)) = *const {l313} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
                // 3808: b"\0":   l313 = UNIQUE | NON_NULL, (empty)
                // 3808: b"\0": typeof(_161 = const b"\x00") = & {l312} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
                // 3808: b"\0":   l312 = UNIQUE | NON_NULL, (empty)
            },
        );
        lglsetopt(lgl, (*o).name, (*o).val);
        // 3811: lgl: typeof(_163) = *mut {l252} LGL
        // 3811: lgl:   l252 = UNIQUE | NON_NULL, (empty)
        // 3811: (*o).name: typeof(_164) = *const {l254} i8
        // 3811: (*o).name:   l254 = UNIQUE | NON_NULL, (empty)
        lglsetopt(lgl, b"seed\0" as *const u8 as *const libc::c_char, def);
        // 3812: lgl: typeof(_167) = *mut {l258} LGL
        // 3812: lgl:   l258 = UNIQUE | NON_NULL, (empty)
        // 3812: b"seed\0" as *c ... _char: typeof(_168) = *const {l260} i8
        // 3812: b"seed\0" as *c ... _char:   l260 = UNIQUE | NON_NULL, (empty)
        // 3812: b"seed\0" as *c ... st u8: typeof(_169) = *const {l262} u8
        // 3812: b"seed\0" as *c ... st u8:   l262 = UNIQUE | NON_NULL, (empty)
        // 3812: b"seed\0": typeof(_170) = *const {l264} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3812: b"seed\0":   l264 = UNIQUE | NON_NULL, (empty)
        // 3812: b"seed\0": typeof(_171) = & {l266} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3812: b"seed\0":   l266 = UNIQUE | NON_NULL, FIXED
        // 3812: b"seed\0" as *c ... _char: typeof(_168 = move _169 as *const i8 (Misc)) = *const {l319} i8
        // 3812: b"seed\0" as *c ... _char:   l319 = UNIQUE | NON_NULL, (empty)
        // 3812: b"seed\0": typeof(_170 = &raw const (*_171)) = *const {l317} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3812: b"seed\0":   l317 = UNIQUE | NON_NULL, (empty)
        // 3812: b"seed\0" as *c ... st u8: typeof(_169 = move _170 as *const u8 (Pointer(ArrayToPointer))) = *const {l318} u8
        // 3812: b"seed\0" as *c ... st u8:   l318 = UNIQUE | NON_NULL, (empty)
        // 3812: b"seed\0": typeof(_171 = const b"seed\x00") = & {l316} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3812: b"seed\0":   l316 = UNIQUE | NON_NULL, (empty)
    };
}
unsafe extern "C" fn searchnode(mut voidptr: *mut libc::c_void) -> *mut libc::c_void {
// 3815: *mut libc::c_void: typeof(_0) = *mut {g98} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 3815: *mut libc::c_void:   g98 = UNIQUE | NON_NULL, FIXED
// 3815: mut voidptr: typeof(_1) = *mut {g97} DefId(2:5583 ~ core[480a]::ffi::c_void)
// 3815: mut voidptr:   g97 = UNIQUE | NON_NULL, FIXED
    let mut node: *mut Node = voidptr as *mut Node;
    // 3816: mut node: typeof(_3) = *mut {l3} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3816: mut node:   l3 = UNIQUE | NON_NULL, (empty)
    // 3816: voidptr: typeof(_4) = *mut {l5} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3816: voidptr:   l5 = UNIQUE | NON_NULL, (empty)
    // 3816: voidptr as *mut Node: typeof(_3 = move _4 as *mut Node (Misc)) = *mut {l169} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3816: voidptr as *mut Node:   l169 = UNIQUE | NON_NULL, (empty)
    let mut oldconfs: int64_t = lglgetconfs((*node).lgl);
    // 3817: (*node).lgl: typeof(_6) = *mut {l8} LGL
    // 3817: (*node).lgl:   l8 = UNIQUE | NON_NULL, (empty)
    let mut deltaconfs: int64_t = 0;
    if portfolio != 0 {
    // 3819: portfolio: typeof(_11) = *mut {l14} i32
    // 3819: portfolio:   l14 = UNIQUE | NON_NULL, (empty)
        setopts(node);
        // 3820: node: typeof(_13) = *mut {l17} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3820: node:   l17 = UNIQUE | NON_NULL, (empty)
    }
    nmsg(
        node,
        // 3823: node: typeof(_15) = *mut {l20} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3823: node:   l20 = UNIQUE | NON_NULL, (empty)
        b"search for %d conflicts\0" as *const u8 as *const libc::c_char,
        // 3824: b"search for %d ... _char: typeof(_16) = *const {l22} i8
        // 3824: b"search for %d ... _char:   l22 = UNIQUE | NON_NULL, (empty)
        // 3824: b"search for %d ... st u8: typeof(_17) = *const {l24} u8
        // 3824: b"search for %d ... st u8:   l24 = UNIQUE | NON_NULL, (empty)
        // 3824: b"search for %d ... ts\0": typeof(_18) = *const {l26} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 3824: b"search for %d ... ts\0":   l26 = UNIQUE | NON_NULL, (empty)
        // 3824: b"search for %d ... ts\0": typeof(_19) = & {l28} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 3824: b"search for %d ... ts\0":   l28 = UNIQUE | NON_NULL, FIXED
        // 3824: b"search for %d ... _char: typeof(_16 = move _17 as *const i8 (Misc)) = *const {l173} i8
        // 3824: b"search for %d ... _char:   l173 = UNIQUE | NON_NULL, (empty)
        // 3824: b"search for %d ... ts\0": typeof(_19 = const b"search for %d conflicts\x00") = & {l170} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 3824: b"search for %d ... ts\0":   l170 = UNIQUE | NON_NULL, (empty)
        // 3824: b"search for %d ... ts\0": typeof(_18 = &raw const (*_19)) = *const {l171} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 3824: b"search for %d ... ts\0":   l171 = UNIQUE | NON_NULL, (empty)
        // 3824: b"search for %d ... st u8: typeof(_17 = move _18 as *const u8 (Pointer(ArrayToPointer))) = *const {l172} u8
        // 3824: b"search for %d ... st u8:   l172 = UNIQUE | NON_NULL, (empty)
        thisclim,
        // 3825: thisclim: typeof(_21) = *mut {l31} i32
        // 3825: thisclim:   l31 = UNIQUE | NON_NULL, (empty)
    );
    lglsetopt(
        (*node).lgl,
        // 3828: (*node).lgl: typeof(_23) = *mut {l34} LGL
        // 3828: (*node).lgl:   l34 = UNIQUE | NON_NULL, (empty)
        b"clim\0" as *const u8 as *const libc::c_char,
        // 3829: b"clim\0" as *c ... _char: typeof(_24) = *const {l36} i8
        // 3829: b"clim\0" as *c ... _char:   l36 = UNIQUE | NON_NULL, (empty)
        // 3829: b"clim\0" as *c ... st u8: typeof(_25) = *const {l38} u8
        // 3829: b"clim\0" as *c ... st u8:   l38 = UNIQUE | NON_NULL, (empty)
        // 3829: b"clim\0": typeof(_26) = *const {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3829: b"clim\0":   l40 = UNIQUE | NON_NULL, (empty)
        // 3829: b"clim\0": typeof(_27) = & {l42} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3829: b"clim\0":   l42 = UNIQUE | NON_NULL, FIXED
        // 3829: b"clim\0" as *c ... st u8: typeof(_25 = move _26 as *const u8 (Pointer(ArrayToPointer))) = *const {l176} u8
        // 3829: b"clim\0" as *c ... st u8:   l176 = UNIQUE | NON_NULL, (empty)
        // 3829: b"clim\0": typeof(_27 = const b"clim\x00") = & {l174} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3829: b"clim\0":   l174 = UNIQUE | NON_NULL, (empty)
        // 3829: b"clim\0" as *c ... _char: typeof(_24 = move _25 as *const i8 (Misc)) = *const {l177} i8
        // 3829: b"clim\0" as *c ... _char:   l177 = UNIQUE | NON_NULL, (empty)
        // 3829: b"clim\0": typeof(_26 = &raw const (*_27)) = *const {l175} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
        // 3829: b"clim\0":   l175 = UNIQUE | NON_NULL, (empty)
        thisclim,
        // 3830: thisclim: typeof(_29) = *mut {l45} i32
        // 3830: thisclim:   l45 = UNIQUE | NON_NULL, (empty)
    );
    (*node).res = lglsat((*node).lgl);
    // 3832: (*node).lgl: typeof(_31) = *mut {l48} LGL
    // 3832: (*node).lgl:   l48 = UNIQUE | NON_NULL, (empty)
    (*node).simplified = 0 as libc::c_int;
    nmsg(
        node,
        // 3835: node: typeof(_34) = *mut {l52} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3835: node:   l52 = UNIQUE | NON_NULL, (empty)
        b"search result %d\0" as *const u8 as *const libc::c_char,
        // 3836: b"search result ... _char: typeof(_35) = *const {l54} i8
        // 3836: b"search result ... _char:   l54 = UNIQUE | NON_NULL, (empty)
        // 3836: b"search result ... st u8: typeof(_36) = *const {l56} u8
        // 3836: b"search result ... st u8:   l56 = UNIQUE | NON_NULL, (empty)
        // 3836: b"search result ... %d\0": typeof(_37) = *const {l58} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 3836: b"search result ... %d\0":   l58 = UNIQUE | NON_NULL, (empty)
        // 3836: b"search result ... %d\0": typeof(_38) = & {l60} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 3836: b"search result ... %d\0":   l60 = UNIQUE | NON_NULL, FIXED
        // 3836: b"search result ... %d\0": typeof(_38 = const b"search result %d\x00") = & {l178} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 3836: b"search result ... %d\0":   l178 = UNIQUE | NON_NULL, (empty)
        // 3836: b"search result ... %d\0": typeof(_37 = &raw const (*_38)) = *const {l179} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 3836: b"search result ... %d\0":   l179 = UNIQUE | NON_NULL, (empty)
        // 3836: b"search result ... _char: typeof(_35 = move _36 as *const i8 (Misc)) = *const {l181} i8
        // 3836: b"search result ... _char:   l181 = UNIQUE | NON_NULL, (empty)
        // 3836: b"search result ... st u8: typeof(_36 = move _37 as *const u8 (Pointer(ArrayToPointer))) = *const {l180} u8
        // 3836: b"search result ... st u8:   l180 = UNIQUE | NON_NULL, (empty)
        (*node).res,
    );
    if (*node).res == 10 as libc::c_int {
        lockdone();
        done = 10 as libc::c_int;
        // 3841: done: typeof(_46) = *mut {l69} i32
        // 3841: done:   l69 = UNIQUE | NON_NULL, (empty)
        unlockdone();
    }
    decworkers();
    lockconfs();
    deltaconfs = lglgetconfs((*node).lgl) - oldconfs;
    // 3846: (*node).lgl: typeof(_51) = *mut {l75} LGL
    // 3846: (*node).lgl:   l75 = UNIQUE | NON_NULL, (empty)
    if sizeconfstack == numconfstack {
    // 3847: sizeconfstack: typeof(_57) = *mut {l82} i32
    // 3847: sizeconfstack:   l82 = UNIQUE | NON_NULL, (empty)
    // 3847: numconfstack: typeof(_59) = *mut {l85} i32
    // 3847: numconfstack:   l85 = UNIQUE | NON_NULL, (empty)
        let mut NEW_SIZE: size_t = sizeconfstack as size_t;
        // 3848: sizeconfstack: typeof(_62) = *mut {l89} i32
        // 3848: sizeconfstack:   l89 = UNIQUE | NON_NULL, (empty)
        let mut OLD_BYTES: size_t =
            NEW_SIZE.wrapping_mul(::core::mem::size_of::<int64_t>() as libc::c_ulong);
        let mut NEW_BYTES: size_t = 0;
        if NEW_SIZE != 0 {
            NEW_SIZE = NEW_SIZE * 2 as libc::c_int as size_t;
        } else {
            NEW_SIZE = 1 as libc::c_int as size_t;
        }
        NEW_BYTES = NEW_SIZE.wrapping_mul(::core::mem::size_of::<int64_t>() as libc::c_ulong);
        decmem(OLD_BYTES);
        confstack = realloc(confstack as *mut libc::c_void, NEW_BYTES) as *mut int64_t;
        // 3859: realloc(confsta ... YTES): typeof(_82) = *mut {l110} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3859: realloc(confsta ... YTES):   l110 = UNIQUE | NON_NULL, (empty)
        // 3859: confstack as *m ... _void: typeof(_83) = *mut {l112} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3859: confstack as *m ... _void:   l112 = UNIQUE | NON_NULL, (empty)
        // 3859: confstack: typeof(_84) = *mut {l114} i64
        // 3859: confstack:   l114 = UNIQUE | NON_NULL, (empty)
        // 3859: confstack: typeof(_85) = *mut {l116} *mut {l117} i64
        // 3859: confstack:   l116 = UNIQUE | NON_NULL, (empty)
        // 3859: confstack:   l117 = UNIQUE | NON_NULL, (empty)
        // 3859: confstack: typeof(_87) = *mut {l120} *mut {l121} i64
        // 3859: confstack:   l120 = UNIQUE | NON_NULL, (empty)
        // 3859: confstack:   l121 = UNIQUE | NON_NULL, (empty)
        // 3859: confstack = rea ... t64_t: typeof((*_87) = move _82 as *mut i64 (Misc)) = *mut {l183} i64
        // 3859: confstack = rea ... t64_t:   l183 = UNIQUE | NON_NULL, (empty)
        // 3859: confstack as *m ... _void: typeof(_83 = move _84 as *mut libc::c_void (Misc)) = *mut {l182} DefId(2:5583 ~ core[480a]::ffi::c_void)
        // 3859: confstack as *m ... _void:   l182 = UNIQUE | NON_NULL, (empty)
        if confstack.is_null() {
        // 3860: confstack: typeof(_90) = *mut {l125} i64
        // 3860: confstack:   l125 = UNIQUE | NON_NULL, (empty)
        // 3860: confstack: typeof(_91) = *mut {l127} *mut {l128} i64
        // 3860: confstack:   l127 = UNIQUE | NON_NULL, (empty)
        // 3860: confstack:   l128 = UNIQUE | NON_NULL, (empty)
            err(b"out of memory\0" as *const u8 as *const libc::c_char);
            // 3861: b"out of memory ... _char: typeof(_94) = *const {l132} i8
            // 3861: b"out of memory ... _char:   l132 = UNIQUE | NON_NULL, (empty)
            // 3861: b"out of memory ... st u8: typeof(_95) = *const {l134} u8
            // 3861: b"out of memory ... st u8:   l134 = UNIQUE | NON_NULL, (empty)
            // 3861: b"out of memory\0": typeof(_96) = *const {l136} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 3861: b"out of memory\0":   l136 = UNIQUE | NON_NULL, (empty)
            // 3861: b"out of memory\0": typeof(_97) = & {l138} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 3861: b"out of memory\0":   l138 = UNIQUE | NON_NULL, FIXED
            // 3861: b"out of memory ... _char: typeof(_94 = move _95 as *const i8 (Misc)) = *const {l187} i8
            // 3861: b"out of memory ... _char:   l187 = UNIQUE | NON_NULL, (empty)
            // 3861: b"out of memory\0": typeof(_96 = &raw const (*_97)) = *const {l185} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 3861: b"out of memory\0":   l185 = UNIQUE | NON_NULL, (empty)
            // 3861: b"out of memory ... st u8: typeof(_95 = move _96 as *const u8 (Pointer(ArrayToPointer))) = *const {l186} u8
            // 3861: b"out of memory ... st u8:   l186 = UNIQUE | NON_NULL, (empty)
            // 3861: b"out of memory\0": typeof(_97 = const b"out of memory\x00") = & {l184} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 3861: b"out of memory\0":   l184 = UNIQUE | NON_NULL, (empty)
            exit(1 as libc::c_int);
        }
        incmem(NEW_BYTES);
        sizeconfstack = NEW_SIZE as libc::c_int;
        // 3865: sizeconfstack: typeof(_103) = *mut {l145} i32
        // 3865: sizeconfstack:   l145 = UNIQUE | NON_NULL, (empty)
    }
    let fresh16 = numconfstack;
    // 3867: numconfstack: typeof(_105) = *mut {l148} i32
    // 3867: numconfstack:   l148 = UNIQUE | NON_NULL, (empty)
    numconfstack = numconfstack + 1;
    // 3868: numconfstack: typeof(_107) = *mut {l151} i32
    // 3868: numconfstack:   l151 = UNIQUE | NON_NULL, (empty)
    // 3868: numconfstack: typeof(_109) = *mut {l154} i32
    // 3868: numconfstack:   l154 = UNIQUE | NON_NULL, (empty)
    *confstack.offset(fresh16 as isize) = deltaconfs;
    // 3869: confstack.offse ... size): typeof(_111) = *mut {l157} i64
    // 3869: confstack.offse ... size):   l157 = UNIQUE | NON_NULL, (empty)
    // 3869: confstack: typeof(_112) = *mut {l159} i64
    // 3869: confstack:   l159 = UNIQUE | NON_NULL, (empty)
    // 3869: confstack: typeof(_113) = *mut {l161} *mut {l162} i64
    // 3869: confstack:   l161 = UNIQUE | NON_NULL, (empty)
    // 3869: confstack:   l162 = UNIQUE | NON_NULL, (empty)
    unlockconfs();
    return node as *mut libc::c_void;
    // 3871: node: typeof(_117) = *mut {l167} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3871: node:   l167 = UNIQUE | NON_NULL, (empty)
    // 3871: node as *mut li ... _void: typeof(_0 = move _117 as *mut libc::c_void (Misc)) = *mut {l188} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3871: node as *mut li ... _void:   l188 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn cmpint64<'h0,'h1>(
    mut p: &'h0 i64,
    // 3874: mut p: typeof(_1) = *const {g99} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3874: mut p:   g99 = READ | UNIQUE | NON_NULL, (empty)
    mut q: &'h1 i64,
    // 3875: mut q: typeof(_2) = *const {g100} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3875: mut q:   g100 = READ | UNIQUE | NON_NULL, (empty)
) -> libc::c_int {
    let mut a: int64_t = *(p);
    // 3877: (p as *mut int64_t): typeof(_5) = *mut {l5} i64
    // 3877: (p as *mut int64_t):   l5 = READ | UNIQUE | NON_NULL, (empty)
    // 3877: p: typeof(_6) = *const {l7} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3877: p:   l7 = READ | UNIQUE | NON_NULL, (empty)
    // 3877: (p as *mut int64_t): typeof(_5 = move _6 as *mut i64 (Misc)) = *mut {l26} i64
    // 3877: (p as *mut int64_t):   l26 = READ | UNIQUE | NON_NULL, (empty)
    let mut b: int64_t = *(q);
    // 3878: (q as *mut int64_t): typeof(_8) = *mut {l10} i64
    // 3878: (q as *mut int64_t):   l10 = READ | UNIQUE | NON_NULL, (empty)
    // 3878: q: typeof(_9) = *const {l12} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 3878: q:   l12 = READ | UNIQUE | NON_NULL, (empty)
    // 3878: (q as *mut int64_t): typeof(_8 = move _9 as *mut i64 (Misc)) = *mut {l27} i64
    // 3878: (q as *mut int64_t):   l27 = READ | UNIQUE | NON_NULL, (empty)
    if a < b {
        return -(1 as libc::c_int);
    }
    if a > b {
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe fn cmpint64_shim(arg0: *const libc::c_void, arg1: *const libc::c_void) -> libc::c_int {
    {
    let safe_arg0 = &*arg0;
    let safe_arg1 = &*arg1;
    let safe_result = cmpint64(safe_arg0,safe_arg1);
    let result = safe_result;
    result
}
}

unsafe extern "C" fn search() {
    let mut avgconfs: int64_t = 0;
    let mut medianconfs: int64_t = 0;
    let mut node: *mut Node = 0 as *mut Node;
    // 3890: mut node: typeof(_3) = *mut {l3} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3890: mut node:   l3 = UNIQUE | NON_NULL, (empty)
    // 3890: 0 as *mut Node: typeof(_3 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l367} DefId(0:777 ~ treengeling[2d04]::Node)
    // 3890: 0 as *mut Node:   l367 = UNIQUE | NON_NULL, (empty)
    let mut i: libc::c_int = 0;
    let mut l: libc::c_int = 0;
    lockconfs();
    numconfstack = 0 as libc::c_int;
    // 3894: numconfstack: typeof(_8) = *mut {l9} i32
    // 3894: numconfstack:   l9 = UNIQUE | NON_NULL, (empty)
    if eager != 0
    // 3895: eager: typeof(_15) = *mut {l17} i32
    // 3895: eager:   l17 = UNIQUE | NON_NULL, (empty)
        && clim > minclim
        // 3896: clim: typeof(_18) = *mut {l21} i32
        // 3896: clim:   l21 = UNIQUE | NON_NULL, (empty)
        // 3896: minclim: typeof(_20) = *mut {l24} i32
        // 3896: minclim:   l24 = UNIQUE | NON_NULL, (empty)
        && numnodes < maxactive
        // 3897: numnodes: typeof(_23) = *mut {l28} i32
        // 3897: numnodes:   l28 = UNIQUE | NON_NULL, (empty)
        // 3897: maxactive: typeof(_25) = *mut {l31} i32
        // 3897: maxactive:   l31 = UNIQUE | NON_NULL, (empty)
        && (softlimbytes == 0 || currentbytes < softlimbytes)
        // 3898: softlimbytes: typeof(_29) = *mut {l36} u64
        // 3898: softlimbytes:   l36 = UNIQUE | NON_NULL, (empty)
        // 3898: currentbytes: typeof(_32) = *mut {l40} u64
        // 3898: currentbytes:   l40 = UNIQUE | NON_NULL, (empty)
        // 3898: softlimbytes: typeof(_34) = *mut {l43} u64
        // 3898: softlimbytes:   l43 = UNIQUE | NON_NULL, (empty)
    {
        forcedclim = minclim;
        // 3900: minclim: typeof(_36) = *mut {l46} i32
        // 3900: minclim:   l46 = UNIQUE | NON_NULL, (empty)
        // 3900: forcedclim: typeof(_37) = *mut {l48} i32
        // 3900: forcedclim:   l48 = UNIQUE | NON_NULL, (empty)
        vrb(
            b" %d forcing limit %d instead of %d\0" as *const u8 as *const libc::c_char,
            // 3902: b" %d forcing l ... _char: typeof(_39) = *const {l51} i8
            // 3902: b" %d forcing l ... _char:   l51 = UNIQUE | NON_NULL, (empty)
            // 3902: b" %d forcing l ... st u8: typeof(_40) = *const {l53} u8
            // 3902: b" %d forcing l ... st u8:   l53 = UNIQUE | NON_NULL, (empty)
            // 3902: b" %d forcing l ... %d\0": typeof(_41) = *const {l55} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
            // 3902: b" %d forcing l ... %d\0":   l55 = UNIQUE | NON_NULL, (empty)
            // 3902: b" %d forcing l ... %d\0": typeof(_42) = & {l57} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
            // 3902: b" %d forcing l ... %d\0":   l57 = UNIQUE | NON_NULL, FIXED
            // 3902: b" %d forcing l ... %d\0": typeof(_41 = &raw const (*_42)) = *const {l369} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
            // 3902: b" %d forcing l ... %d\0":   l369 = UNIQUE | NON_NULL, (empty)
            // 3902: b" %d forcing l ... %d\0": typeof(_42 = const b" %d forcing limit %d instead of %d\x00") = & {l368} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
            // 3902: b" %d forcing l ... %d\0":   l368 = UNIQUE | NON_NULL, (empty)
            // 3902: b" %d forcing l ... _char: typeof(_39 = move _40 as *const i8 (Misc)) = *const {l371} i8
            // 3902: b" %d forcing l ... _char:   l371 = UNIQUE | NON_NULL, (empty)
            // 3902: b" %d forcing l ... st u8: typeof(_40 = move _41 as *const u8 (Pointer(ArrayToPointer))) = *const {l370} u8
            // 3902: b" %d forcing l ... st u8:   l370 = UNIQUE | NON_NULL, (empty)
            round,
            // 3903: round: typeof(_44) = *mut {l60} i32
            // 3903: round:   l60 = UNIQUE | NON_NULL, (empty)
            forcedclim,
            // 3904: forcedclim: typeof(_46) = *mut {l63} i32
            // 3904: forcedclim:   l63 = UNIQUE | NON_NULL, (empty)
            clim,
            // 3905: clim: typeof(_48) = *mut {l66} i32
            // 3905: clim:   l66 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        forcedclim = 0 as libc::c_int;
        // 3908: forcedclim: typeof(_50) = *mut {l69} i32
        // 3908: forcedclim:   l69 = UNIQUE | NON_NULL, (empty)
    }
    thisclim = if forcedclim != 0 { forcedclim } else { clim };
    // 3910: forcedclim: typeof(_54) = *mut {l74} i32
    // 3910: forcedclim:   l74 = UNIQUE | NON_NULL, (empty)
    // 3910: forcedclim: typeof(_55) = *mut {l76} i32
    // 3910: forcedclim:   l76 = UNIQUE | NON_NULL, (empty)
    // 3910: clim: typeof(_56) = *mut {l78} i32
    // 3910: clim:   l78 = UNIQUE | NON_NULL, (empty)
    // 3910: thisclim: typeof(_57) = *mut {l80} i32
    // 3910: thisclim:   l80 = UNIQUE | NON_NULL, (empty)
    newclim = clim;
    // 3911: clim: typeof(_59) = *mut {l83} i32
    // 3911: clim:   l83 = UNIQUE | NON_NULL, (empty)
    // 3911: newclim: typeof(_60) = *mut {l85} i32
    // 3911: newclim:   l85 = UNIQUE | NON_NULL, (empty)
    unlockconfs();
    if nosearch != 0 {
    // 3913: nosearch: typeof(_65) = *mut {l91} i32
    // 3913: nosearch:   l91 = UNIQUE | NON_NULL, (empty)
        return;
    }
    startimer_shim(&mut wct.search);
    // 3916: &mut wct.search: typeof(_68) = *mut {l95} f64
    // 3916: &mut wct.search:   l95 = UNIQUE | NON_NULL, (empty)
    // 3916: &mut wct.search: typeof(_69) = &mut {l97} f64
    // 3916: &mut wct.search:   l97 = UNIQUE | NON_NULL, (empty)
    // 3916: wct: typeof(_70) = *mut {l99} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
    // 3916: wct:   l99 = UNIQUE | NON_NULL, (empty)
    // 3916: &mut wct.search: typeof(_68 = &raw mut (*_69)) = *mut {l373} f64
    // 3916: &mut wct.search:   l373 = UNIQUE | NON_NULL, (empty)
    // 3916: &mut wct.search: typeof(_69 = &mut ((*_70).4: f64)) = &mut {l372} f64
    // 3916: &mut wct.search:   l372 = UNIQUE | NON_NULL, (empty)
    startphase(b"search\0" as *const u8 as *const libc::c_char);
    // 3917: b"search\0" as  ... _char: typeof(_72) = *const {l102} i8
    // 3917: b"search\0" as  ... _char:   l102 = UNIQUE | NON_NULL, (empty)
    // 3917: b"search\0" as  ... st u8: typeof(_73) = *const {l104} u8
    // 3917: b"search\0" as  ... st u8:   l104 = UNIQUE | NON_NULL, (empty)
    // 3917: b"search\0": typeof(_74) = *const {l106} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 3917: b"search\0":   l106 = UNIQUE | NON_NULL, (empty)
    // 3917: b"search\0": typeof(_75) = & {l108} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 3917: b"search\0":   l108 = UNIQUE | NON_NULL, FIXED
    // 3917: b"search\0": typeof(_74 = &raw const (*_75)) = *const {l375} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 3917: b"search\0":   l375 = UNIQUE | NON_NULL, (empty)
    // 3917: b"search\0" as  ... st u8: typeof(_73 = move _74 as *const u8 (Pointer(ArrayToPointer))) = *const {l376} u8
    // 3917: b"search\0" as  ... st u8:   l376 = UNIQUE | NON_NULL, (empty)
    // 3917: b"search\0" as  ... _char: typeof(_72 = move _73 as *const i8 (Misc)) = *const {l377} i8
    // 3917: b"search\0" as  ... _char:   l377 = UNIQUE | NON_NULL, (empty)
    // 3917: b"search\0": typeof(_75 = const b"search\x00") = & {l374} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
    // 3917: b"search\0":   l374 = UNIQUE | NON_NULL, (empty)
    sortnodes(
        b"search\0" as *const u8 as *const libc::c_char,
        // 3919: b"search\0" as  ... _char: typeof(_77) = *const {l111} i8
        // 3919: b"search\0" as  ... _char:   l111 = UNIQUE | NON_NULL, (empty)
        // 3919: b"search\0" as  ... st u8: typeof(_78) = *const {l113} u8
        // 3919: b"search\0" as  ... st u8:   l113 = UNIQUE | NON_NULL, (empty)
        // 3919: b"search\0": typeof(_79) = *const {l115} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
        // 3919: b"search\0":   l115 = UNIQUE | NON_NULL, (empty)
        // 3919: b"search\0": typeof(_80) = & {l117} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
        // 3919: b"search\0":   l117 = UNIQUE | NON_NULL, FIXED
        // 3919: b"search\0": typeof(_80 = const b"search\x00") = & {l378} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
        // 3919: b"search\0":   l378 = UNIQUE | NON_NULL, (empty)
        // 3919: b"search\0" as  ... _char: typeof(_77 = move _78 as *const i8 (Misc)) = *const {l381} i8
        // 3919: b"search\0" as  ... _char:   l381 = UNIQUE | NON_NULL, (empty)
        // 3919: b"search\0" as  ... st u8: typeof(_78 = move _79 as *const u8 (Pointer(ArrayToPointer))) = *const {l380} u8
        // 3919: b"search\0" as  ... st u8:   l380 = UNIQUE | NON_NULL, (empty)
        // 3919: b"search\0": typeof(_79 = &raw const (*_80)) = *const {l379} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
        // 3919: b"search\0":   l379 = UNIQUE | NON_NULL, (empty)
        Some(
        // 3920: Some( incmpnode ... nt, ): typeof(_81) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l119} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l120} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3920: Some( incmpnode ... nt, ):   l119 = UNIQUE | NON_NULL, (empty)
        // 3920: Some( incmpnode ... nt, ):   l120 = UNIQUE | NON_NULL, (empty)
        // 3920: Some( incmpnode ... nt, ): typeof(_81 = std::option::Option::<unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32>::Some(move _82)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l384} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l385} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
        // 3920: Some( incmpnode ... nt, ):   l384 = UNIQUE | NON_NULL, (empty)
        // 3920: Some( incmpnode ... nt, ):   l385 = UNIQUE | NON_NULL, (empty)
            incmpnodes
            // 3921: incmpnodes as u ... c_int: typeof(_82) = fn(*const {l122} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l123} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 3921: incmpnodes as u ... c_int:   l122 = UNIQUE | NON_NULL, (empty)
            // 3921: incmpnodes as u ... c_int:   l123 = UNIQUE | NON_NULL, (empty)
            // 3921: incmpnodes: typeof(_82 = incmpnodes as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*const {l382} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l383} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
            // 3921: incmpnodes:   l382 = UNIQUE | NON_NULL, (empty)
            // 3921: incmpnodes:   l383 = UNIQUE | NON_NULL, (empty)
                as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> libc::c_int,
        ),
    );
    l = maxactive;
    // 3925: maxactive: typeof(_84) = *mut {l126} i32
    // 3925: maxactive:   l126 = UNIQUE | NON_NULL, (empty)
    if nowfull() != 0 {
        l *= 2 as libc::c_int;
    }
    if l > numnodes {
    // 3929: numnodes: typeof(_94) = *mut {l137} i32
    // 3929: numnodes:   l137 = UNIQUE | NON_NULL, (empty)
        l = numnodes;
        // 3930: numnodes: typeof(_96) = *mut {l140} i32
        // 3930: numnodes:   l140 = UNIQUE | NON_NULL, (empty)
    }
    msg(
        b" %d searching %d out of %d nodes %.0f%% limit %d%s\0" as *const u8 as *const libc::c_char,
        // 3933: b" %d searching ... _char: typeof(_98) = *const {l143} i8
        // 3933: b" %d searching ... _char:   l143 = UNIQUE | NON_NULL, (empty)
        // 3933: b" %d searching ... st u8: typeof(_99) = *const {l145} u8
        // 3933: b" %d searching ... st u8:   l145 = UNIQUE | NON_NULL, (empty)
        // 3933: b" %d searching ... %s\0": typeof(_100) = *const {l147} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
        // 3933: b" %d searching ... %s\0":   l147 = UNIQUE | NON_NULL, (empty)
        // 3933: b" %d searching ... %s\0": typeof(_101) = & {l149} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
        // 3933: b" %d searching ... %s\0":   l149 = UNIQUE | NON_NULL, FIXED
        // 3933: b" %d searching ... %s\0": typeof(_101 = const b" %d searching %d out of %d nodes %.0f%% limit %d%s\x00") = & {l386} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
        // 3933: b" %d searching ... %s\0":   l386 = UNIQUE | NON_NULL, (empty)
        // 3933: b" %d searching ... _char: typeof(_98 = move _99 as *const i8 (Misc)) = *const {l389} i8
        // 3933: b" %d searching ... _char:   l389 = UNIQUE | NON_NULL, (empty)
        // 3933: b" %d searching ... st u8: typeof(_99 = move _100 as *const u8 (Pointer(ArrayToPointer))) = *const {l388} u8
        // 3933: b" %d searching ... st u8:   l388 = UNIQUE | NON_NULL, (empty)
        // 3933: b" %d searching ... %s\0": typeof(_100 = &raw const (*_101)) = *const {l387} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
        // 3933: b" %d searching ... %s\0":   l387 = UNIQUE | NON_NULL, (empty)
        round,
        // 3934: round: typeof(_103) = *mut {l152} i32
        // 3934: round:   l152 = UNIQUE | NON_NULL, (empty)
        l,
        numnodes,
        // 3936: numnodes: typeof(_106) = *mut {l156} i32
        // 3936: numnodes:   l156 = UNIQUE | NON_NULL, (empty)
        pcnt(l as libc::c_double, numnodes as libc::c_double),
        // 3937: numnodes: typeof(_112) = *mut {l163} i32
        // 3937: numnodes:   l163 = UNIQUE | NON_NULL, (empty)
        thisclim,
        // 3938: thisclim: typeof(_114) = *mut {l166} i32
        // 3938: thisclim:   l166 = UNIQUE | NON_NULL, (empty)
        if forcedclim != 0 {
        // 3939: if forcedclim ! ... har }: typeof(_115) = *const {l168} i8
        // 3939: if forcedclim ! ... har }:   l168 = UNIQUE | NON_NULL, (empty)
        // 3939: forcedclim: typeof(_118) = *mut {l172} i32
        // 3939: forcedclim:   l172 = UNIQUE | NON_NULL, (empty)
            b" forced\0" as *const u8 as *const libc::c_char
            // 3940: b" forced\0" as ... st u8: typeof(_119) = *const {l174} u8
            // 3940: b" forced\0" as ... st u8:   l174 = UNIQUE | NON_NULL, (empty)
            // 3940: b" forced\0": typeof(_120) = *const {l176} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 3940: b" forced\0":   l176 = UNIQUE | NON_NULL, (empty)
            // 3940: b" forced\0": typeof(_121) = & {l178} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 3940: b" forced\0":   l178 = UNIQUE | NON_NULL, FIXED
            // 3940: b" forced\0" as ... _char: typeof(_115 = move _119 as *const i8 (Misc)) = *const {l393} i8
            // 3940: b" forced\0" as ... _char:   l393 = UNIQUE | NON_NULL, (empty)
            // 3940: b" forced\0": typeof(_120 = &raw const (*_121)) = *const {l391} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 3940: b" forced\0":   l391 = UNIQUE | NON_NULL, (empty)
            // 3940: b" forced\0": typeof(_121 = const b" forced\x00") = & {l390} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 3940: b" forced\0":   l390 = UNIQUE | NON_NULL, (empty)
            // 3940: b" forced\0" as ... st u8: typeof(_119 = move _120 as *const u8 (Pointer(ArrayToPointer))) = *const {l392} u8
            // 3940: b" forced\0" as ... st u8:   l392 = UNIQUE | NON_NULL, (empty)
        } else {
            b"\0" as *const u8 as *const libc::c_char
            // 3942: b"\0" as *const u8: typeof(_122) = *const {l180} u8
            // 3942: b"\0" as *const u8:   l180 = UNIQUE | NON_NULL, (empty)
            // 3942: b"\0": typeof(_123) = *const {l182} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 3942: b"\0":   l182 = UNIQUE | NON_NULL, (empty)
            // 3942: b"\0": typeof(_124) = & {l184} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 3942: b"\0":   l184 = UNIQUE | NON_NULL, FIXED
            // 3942: b"\0": typeof(_124 = const b"\x00") = & {l394} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 3942: b"\0":   l394 = UNIQUE | NON_NULL, (empty)
            // 3942: b"\0" as *const ... _char: typeof(_115 = move _122 as *const i8 (Misc)) = *const {l397} i8
            // 3942: b"\0" as *const ... _char:   l397 = UNIQUE | NON_NULL, (empty)
            // 3942: b"\0": typeof(_123 = &raw const (*_124)) = *const {l395} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 3942: b"\0":   l395 = UNIQUE | NON_NULL, (empty)
            // 3942: b"\0" as *const u8: typeof(_122 = move _123 as *const u8 (Pointer(ArrayToPointer))) = *const {l396} u8
            // 3942: b"\0" as *const u8:   l396 = UNIQUE | NON_NULL, (empty)
        },
    );
    i = 0 as libc::c_int;
    while i < numnodes && numjobs < l {
    // 3946: numnodes: typeof(_132) = *mut {l193} i32
    // 3946: numnodes:   l193 = UNIQUE | NON_NULL, (empty)
    // 3946: numjobs: typeof(_135) = *mut {l197} i32
    // 3946: numjobs:   l197 = UNIQUE | NON_NULL, (empty)
        node = *nodes.offset(i as isize);
        // 3947: *nodes.offset(i ... size): typeof(_137) = *mut {l200} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3947: *nodes.offset(i ... size):   l200 = UNIQUE | NON_NULL, (empty)
        // 3947: nodes.offset(i  ... size): typeof(_138) = *mut {l202} *mut {l203} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3947: nodes.offset(i  ... size):   l202 = UNIQUE | NON_NULL, (empty)
        // 3947: nodes.offset(i  ... size):   l203 = UNIQUE | NON_NULL, (empty)
        // 3947: nodes: typeof(_139) = *mut {l205} *mut {l206} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3947: nodes:   l205 = UNIQUE | NON_NULL, (empty)
        // 3947: nodes:   l206 = UNIQUE | NON_NULL, (empty)
        // 3947: nodes: typeof(_140) = *mut {l208} *mut {l209} *mut {l210} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3947: nodes:   l208 = UNIQUE | NON_NULL, (empty)
        // 3947: nodes:   l209 = UNIQUE | NON_NULL, (empty)
        // 3947: nodes:   l210 = UNIQUE | NON_NULL, (empty)
        if !(skipnode(node) != 0) {
        // 3948: node: typeof(_147) = *mut {l218} DefId(0:777 ~ treengeling[2d04]::Node)
        // 3948: node:   l218 = UNIQUE | NON_NULL, (empty)
            js.search += 1;
            // 3949: js: typeof(_148) = *mut {l220} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
            // 3949: js:   l220 = UNIQUE | NON_NULL, (empty)
            js.search;
            // 3950: js: typeof(_151) = *mut {l224} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
            // 3950: js:   l224 = UNIQUE | NON_NULL, (empty)
            schedulejob(
                node,
                // 3952: node: typeof(_153) = *mut {l227} DefId(0:777 ~ treengeling[2d04]::Node)
                // 3952: node:   l227 = UNIQUE | NON_NULL, (empty)
                Some(searchnode as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void),
                // 3953: Some(searchnode ... void): typeof(_154) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l229} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l230} DefId(2:5583 ~ core[480a]::ffi::c_void)>
                // 3953: Some(searchnode ... void):   l229 = UNIQUE | NON_NULL, (empty)
                // 3953: Some(searchnode ... void):   l230 = UNIQUE | NON_NULL, (empty)
                // 3953: searchnode as u ... _void: typeof(_155) = fn(*mut {l232} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l233} DefId(2:5583 ~ core[480a]::ffi::c_void)
                // 3953: searchnode as u ... _void:   l232 = UNIQUE | NON_NULL, (empty)
                // 3953: searchnode as u ... _void:   l233 = UNIQUE | NON_NULL, (empty)
                // 3953: Some(searchnode ... void): typeof(_154 = std::option::Option::<unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void>::Some(move _155)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*mut {l400} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l401} DefId(2:5583 ~ core[480a]::ffi::c_void)>
                // 3953: Some(searchnode ... void):   l400 = UNIQUE | NON_NULL, (empty)
                // 3953: Some(searchnode ... void):   l401 = UNIQUE | NON_NULL, (empty)
                // 3953: searchnode: typeof(_155 = searchnode as unsafe extern "C" fn(*mut libc::c_void) -> *mut libc::c_void (Pointer(ReifyFnPointer))) = fn(*mut {l398} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> *mut {l399} DefId(2:5583 ~ core[480a]::ffi::c_void)
                // 3953: searchnode:   l398 = UNIQUE | NON_NULL, (empty)
                // 3953: searchnode:   l399 = UNIQUE | NON_NULL, (empty)
                b"search\0" as *const u8 as *const libc::c_char,
                // 3954: b"search\0" as  ... _char: typeof(_156) = *const {l235} i8
                // 3954: b"search\0" as  ... _char:   l235 = UNIQUE | NON_NULL, (empty)
                // 3954: b"search\0" as  ... st u8: typeof(_157) = *const {l237} u8
                // 3954: b"search\0" as  ... st u8:   l237 = UNIQUE | NON_NULL, (empty)
                // 3954: b"search\0": typeof(_158) = *const {l239} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
                // 3954: b"search\0":   l239 = UNIQUE | NON_NULL, (empty)
                // 3954: b"search\0": typeof(_159) = & {l241} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
                // 3954: b"search\0":   l241 = UNIQUE | NON_NULL, FIXED
                // 3954: b"search\0" as  ... _char: typeof(_156 = move _157 as *const i8 (Misc)) = *const {l405} i8
                // 3954: b"search\0" as  ... _char:   l405 = UNIQUE | NON_NULL, (empty)
                // 3954: b"search\0" as  ... st u8: typeof(_157 = move _158 as *const u8 (Pointer(ArrayToPointer))) = *const {l404} u8
                // 3954: b"search\0" as  ... st u8:   l404 = UNIQUE | NON_NULL, (empty)
                // 3954: b"search\0": typeof(_158 = &raw const (*_159)) = *const {l403} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
                // 3954: b"search\0":   l403 = UNIQUE | NON_NULL, (empty)
                // 3954: b"search\0": typeof(_159 = const b"search\x00") = & {l402} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
                // 3954: b"search\0":   l402 = UNIQUE | NON_NULL, (empty)
                SEARCH,
            );
        }
        i += 1;
        i;
    }
    vrb(
        b"scheduled %d search jobs in round %d\0" as *const u8 as *const libc::c_char,
        // 3962: b"scheduled %d  ... _char: typeof(_166) = *const {l249} i8
        // 3962: b"scheduled %d  ... _char:   l249 = UNIQUE | NON_NULL, (empty)
        // 3962: b"scheduled %d  ... st u8: typeof(_167) = *const {l251} u8
        // 3962: b"scheduled %d  ... st u8:   l251 = UNIQUE | NON_NULL, (empty)
        // 3962: b"scheduled %d  ... %d\0": typeof(_168) = *const {l253} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
        // 3962: b"scheduled %d  ... %d\0":   l253 = UNIQUE | NON_NULL, (empty)
        // 3962: b"scheduled %d  ... %d\0": typeof(_169) = & {l255} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
        // 3962: b"scheduled %d  ... %d\0":   l255 = UNIQUE | NON_NULL, FIXED
        // 3962: b"scheduled %d  ... _char: typeof(_166 = move _167 as *const i8 (Misc)) = *const {l409} i8
        // 3962: b"scheduled %d  ... _char:   l409 = UNIQUE | NON_NULL, (empty)
        // 3962: b"scheduled %d  ... %d\0": typeof(_168 = &raw const (*_169)) = *const {l407} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
        // 3962: b"scheduled %d  ... %d\0":   l407 = UNIQUE | NON_NULL, (empty)
        // 3962: b"scheduled %d  ... %d\0": typeof(_169 = const b"scheduled %d search jobs in round %d\x00") = & {l406} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
        // 3962: b"scheduled %d  ... %d\0":   l406 = UNIQUE | NON_NULL, (empty)
        // 3962: b"scheduled %d  ... st u8: typeof(_167 = move _168 as *const u8 (Pointer(ArrayToPointer))) = *const {l408} u8
        // 3962: b"scheduled %d  ... st u8:   l408 = UNIQUE | NON_NULL, (empty)
        numjobs,
        // 3963: numjobs: typeof(_171) = *mut {l258} i32
        // 3963: numjobs:   l258 = UNIQUE | NON_NULL, (empty)
        round,
        // 3964: round: typeof(_173) = *mut {l261} i32
        // 3964: round:   l261 = UNIQUE | NON_NULL, (empty)
    );
    runjobs();
    joinjobs();
    lockconfs();
    if numconfstack != 0 {
    // 3969: numconfstack: typeof(_180) = *mut {l269} i32
    // 3969: numconfstack:   l269 = UNIQUE | NON_NULL, (empty)
        avgconfs = 0 as libc::c_int as int64_t;
        i = 0 as libc::c_int;
        while i < numconfstack {
        // 3972: numconfstack: typeof(_187) = *mut {l277} i32
        // 3972: numconfstack:   l277 = UNIQUE | NON_NULL, (empty)
            avgconfs += *confstack.offset(i as isize);
            // 3973: confstack.offse ... size): typeof(_189) = *mut {l280} i64
            // 3973: confstack.offse ... size):   l280 = UNIQUE | NON_NULL, (empty)
            // 3973: confstack: typeof(_190) = *mut {l282} i64
            // 3973: confstack:   l282 = UNIQUE | NON_NULL, (empty)
            // 3973: confstack: typeof(_191) = *mut {l284} *mut {l285} i64
            // 3973: confstack:   l284 = UNIQUE | NON_NULL, (empty)
            // 3973: confstack:   l285 = UNIQUE | NON_NULL, (empty)
            i += 1;
            i;
        }
        avgconfs = if numconfstack != 0 {
        // 3977: numconfstack: typeof(_203) = *mut {l298} i32
        // 3977: numconfstack:   l298 = UNIQUE | NON_NULL, (empty)
            avgconfs / numconfstack as int64_t
            // 3978: numconfstack: typeof(_207) = *mut {l303} i32
            // 3978: numconfstack:   l303 = UNIQUE | NON_NULL, (empty)
        } else {
            0 as libc::c_int as int64_t
        };
        qsort(
            confstack as *mut libc::c_void,
            // 3983: confstack as *m ... _void: typeof(_214) = *mut {l311} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 3983: confstack as *m ... _void:   l311 = UNIQUE | NON_NULL, (empty)
            // 3983: confstack: typeof(_215) = *mut {l313} i64
            // 3983: confstack:   l313 = UNIQUE | NON_NULL, (empty)
            // 3983: confstack: typeof(_216) = *mut {l315} *mut {l316} i64
            // 3983: confstack:   l315 = UNIQUE | NON_NULL, (empty)
            // 3983: confstack:   l316 = UNIQUE | NON_NULL, (empty)
            // 3983: confstack as *m ... _void: typeof(_214 = move _215 as *mut libc::c_void (Misc)) = *mut {l410} DefId(2:5583 ~ core[480a]::ffi::c_void)
            // 3983: confstack as *m ... _void:   l410 = UNIQUE | NON_NULL, (empty)
            numconfstack as size_t,
            // 3984: numconfstack: typeof(_219) = *mut {l320} i32
            // 3984: numconfstack:   l320 = UNIQUE | NON_NULL, (empty)
            ::core::mem::size_of::<int64_t>() as libc::c_ulong,
            Some(
            // 3986: Some( cmpint64  ... nt, ): typeof(_222) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l324} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l325} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
            // 3986: Some( cmpint64  ... nt, ):   l324 = UNIQUE | NON_NULL, (empty)
            // 3986: Some( cmpint64  ... nt, ):   l325 = UNIQUE | NON_NULL, (empty)
            // 3986: Some( cmpint64  ... nt, ): typeof(_222 = std::option::Option::<unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32>::Some(move _223)) = DefId(2:47492 ~ core[480a]::option::Option)<fn(*const {l413} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l414} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32>
            // 3986: Some( cmpint64  ... nt, ):   l413 = UNIQUE | NON_NULL, (empty)
            // 3986: Some( cmpint64  ... nt, ):   l414 = UNIQUE | NON_NULL, (empty)
                cmpint64_shim
                // 3987: cmpint64 as uns ... c_int: typeof(_223) = fn(*const {l327} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l328} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
                // 3987: cmpint64 as uns ... c_int:   l327 = UNIQUE | NON_NULL, (empty)
                // 3987: cmpint64 as uns ... c_int:   l328 = UNIQUE | NON_NULL, (empty)
                // 3987: cmpint64: typeof(_223 = cmpint64 as unsafe extern "C" fn(*const libc::c_void, *const libc::c_void) -> i32 (Pointer(ReifyFnPointer))) = fn(*const {l411} DefId(2:5583 ~ core[480a]::ffi::c_void), *const {l412} DefId(2:5583 ~ core[480a]::ffi::c_void)) -> i32
                // 3987: cmpint64:   l411 = UNIQUE | NON_NULL, (empty)
                // 3987: cmpint64:   l412 = UNIQUE | NON_NULL, (empty)
                    as unsafe extern "C" fn(
                        *const libc::c_void,
                        *const libc::c_void,
                    ) -> libc::c_int,
            ),
        );
        medianconfs = *confstack.offset((numconfstack / 2 as libc::c_int) as isize);
        // 3994: confstack.offse ... size): typeof(_225) = *mut {l331} i64
        // 3994: confstack.offse ... size):   l331 = UNIQUE | NON_NULL, (empty)
        // 3994: confstack: typeof(_226) = *mut {l333} i64
        // 3994: confstack:   l333 = UNIQUE | NON_NULL, (empty)
        // 3994: confstack: typeof(_227) = *mut {l335} *mut {l336} i64
        // 3994: confstack:   l335 = UNIQUE | NON_NULL, (empty)
        // 3994: confstack:   l336 = UNIQUE | NON_NULL, (empty)
        // 3994: numconfstack: typeof(_231) = *mut {l341} i32
        // 3994: numconfstack:   l341 = UNIQUE | NON_NULL, (empty)
        msg(
            b" %d average actual conflicts %lld median %lld\0" as *const u8 as *const libc::c_char,
            // 3996: b" %d average a ... _char: typeof(_238) = *const {l349} i8
            // 3996: b" %d average a ... _char:   l349 = UNIQUE | NON_NULL, (empty)
            // 3996: b" %d average a ... st u8: typeof(_239) = *const {l351} u8
            // 3996: b" %d average a ... st u8:   l351 = UNIQUE | NON_NULL, (empty)
            // 3996: b" %d average a ... ld\0": typeof(_240) = *const {l353} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 3996: b" %d average a ... ld\0":   l353 = UNIQUE | NON_NULL, (empty)
            // 3996: b" %d average a ... ld\0": typeof(_241) = & {l355} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 3996: b" %d average a ... ld\0":   l355 = UNIQUE | NON_NULL, FIXED
            // 3996: b" %d average a ... _char: typeof(_238 = move _239 as *const i8 (Misc)) = *const {l418} i8
            // 3996: b" %d average a ... _char:   l418 = UNIQUE | NON_NULL, (empty)
            // 3996: b" %d average a ... ld\0": typeof(_240 = &raw const (*_241)) = *const {l416} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 3996: b" %d average a ... ld\0":   l416 = UNIQUE | NON_NULL, (empty)
            // 3996: b" %d average a ... st u8: typeof(_239 = move _240 as *const u8 (Pointer(ArrayToPointer))) = *const {l417} u8
            // 3996: b" %d average a ... st u8:   l417 = UNIQUE | NON_NULL, (empty)
            // 3996: b" %d average a ... ld\0": typeof(_241 = const b" %d average actual conflicts %lld median %lld\x00") = & {l415} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 3996: b" %d average a ... ld\0":   l415 = UNIQUE | NON_NULL, (empty)
            round,
            // 3997: round: typeof(_243) = *mut {l358} i32
            // 3997: round:   l358 = UNIQUE | NON_NULL, (empty)
            avgconfs as libc::c_longlong,
            medianconfs as libc::c_longlong,
        );
        newclim = medianconfs as libc::c_int;
        // 4001: newclim: typeof(_247) = *mut {l363} i32
        // 4001: newclim:   l363 = UNIQUE | NON_NULL, (empty)
    }
    unlockconfs();
    stoptimer();
}
unsafe extern "C" fn updateclim() {
    let mut oldclim: libc::c_int = clim;
    // 4007: clim: typeof(_2) = *mut {l2} i32
    // 4007: clim:   l2 = READ | UNIQUE | NON_NULL, (empty)
    let mut delta: libc::c_int = 0;
    if forcedclim != 0 {
    // 4009: forcedclim: typeof(_7) = *mut {l8} i32
    // 4009: forcedclim:   l8 = READ | UNIQUE | NON_NULL, (empty)
        forcedclim = 0 as libc::c_int;
        // 4010: forcedclim: typeof(_9) = *mut {l11} i32
        // 4010: forcedclim:   l11 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        forcedclims += 1;
        // 4011: forcedclims: typeof(_10) = *mut {l13} i64
        // 4011: forcedclims:   l13 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        forcedclims;
        // 4012: forcedclims: typeof(_13) = *mut {l17} i64
        // 4012: forcedclims:   l17 = READ | UNIQUE | NON_NULL, (empty)
    } else {
        delta = deleted - simplified;
        // 4014: deleted: typeof(_15) = *mut {l20} i32
        // 4014: deleted:   l20 = READ | UNIQUE | NON_NULL, (empty)
        // 4014: simplified: typeof(_17) = *mut {l23} i32
        // 4014: simplified:   l23 = READ | UNIQUE | NON_NULL, (empty)
        if delta > added || splitsuccessful == 0 {
        // 4015: added: typeof(_24) = *mut {l31} i32
        // 4015: added:   l31 = READ | UNIQUE | NON_NULL, (empty)
        // 4015: splitsuccessful: typeof(_27) = *mut {l35} i32
        // 4015: splitsuccessful:   l35 = READ | UNIQUE | NON_NULL, (empty)
            newclim *= 2 as libc::c_int;
            // 4016: newclim: typeof(_29) = *mut {l38} i32
            // 4016: newclim:   l38 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        } else if delta == 0 {
            newclim /= 2 as libc::c_int;
            // 4018: newclim: typeof(_34) = *mut {l44} i32
            // 4018: newclim:   l44 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        } else if delta < added {
        // 4019: added: typeof(_42) = *mut {l53} i32
        // 4019: added:   l53 = READ | UNIQUE | NON_NULL, (empty)
            newclim = 9 as libc::c_int * newclim / 10 as libc::c_int;
            // 4020: newclim: typeof(_46) = *mut {l58} i32
            // 4020: newclim:   l58 = READ | UNIQUE | NON_NULL, (empty)
            // 4020: newclim: typeof(_53) = *mut {l66} i32
            // 4020: newclim:   l66 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        }
        if newclim < minclim {
        // 4022: newclim: typeof(_57) = *mut {l71} i32
        // 4022: newclim:   l71 = READ | UNIQUE | NON_NULL, (empty)
        // 4022: minclim: typeof(_59) = *mut {l74} i32
        // 4022: minclim:   l74 = READ | UNIQUE | NON_NULL, (empty)
            clim = minclim;
            // 4023: minclim: typeof(_61) = *mut {l77} i32
            // 4023: minclim:   l77 = READ | UNIQUE | NON_NULL, (empty)
            // 4023: clim: typeof(_62) = *mut {l79} i32
            // 4023: clim:   l79 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        } else if newclim > maxclim {
        // 4024: newclim: typeof(_65) = *mut {l83} i32
        // 4024: newclim:   l83 = READ | UNIQUE | NON_NULL, (empty)
        // 4024: maxclim: typeof(_67) = *mut {l86} i32
        // 4024: maxclim:   l86 = READ | UNIQUE | NON_NULL, (empty)
            clim = maxclim;
            // 4025: maxclim: typeof(_69) = *mut {l89} i32
            // 4025: maxclim:   l89 = READ | UNIQUE | NON_NULL, (empty)
            // 4025: clim: typeof(_70) = *mut {l91} i32
            // 4025: clim:   l91 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        } else {
            clim = newclim;
            // 4027: newclim: typeof(_72) = *mut {l94} i32
            // 4027: newclim:   l94 = READ | UNIQUE | NON_NULL, (empty)
            // 4027: clim: typeof(_73) = *mut {l96} i32
            // 4027: clim:   l96 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        }
        if newclim < oldclim {
        // 4029: newclim: typeof(_77) = *mut {l101} i32
        // 4029: newclim:   l101 = READ | UNIQUE | NON_NULL, (empty)
            declims += 1;
            // 4030: declims: typeof(_79) = *mut {l104} i64
            // 4030: declims:   l104 = READ | WRITE | UNIQUE | NON_NULL, (empty)
            declims;
            // 4031: declims: typeof(_82) = *mut {l108} i64
            // 4031: declims:   l108 = READ | UNIQUE | NON_NULL, (empty)
        }
        if newclim > oldclim {
        // 4033: newclim: typeof(_85) = *mut {l112} i32
        // 4033: newclim:   l112 = READ | UNIQUE | NON_NULL, (empty)
            inclims += 1;
            // 4034: inclims: typeof(_87) = *mut {l115} i64
            // 4034: inclims:   l115 = READ | WRITE | UNIQUE | NON_NULL, (empty)
            inclims;
            // 4035: inclims: typeof(_90) = *mut {l119} i64
            // 4035: inclims:   l119 = READ | UNIQUE | NON_NULL, (empty)
        }
    }
    if oldclim != clim {
    // 4038: clim: typeof(_95) = *mut {l125} i32
    // 4038: clim:   l125 = READ | UNIQUE | NON_NULL, (empty)
        vrb(
            b"new conflict limit set to %d\0" as *const u8 as *const libc::c_char,
            // 4040: b"new conflict  ... _char: typeof(_97) = *const {l128} i8
            // 4040: b"new conflict  ... _char:   l128 = UNIQUE | NON_NULL, (empty)
            // 4040: b"new conflict  ... st u8: typeof(_98) = *const {l130} u8
            // 4040: b"new conflict  ... st u8:   l130 = UNIQUE | NON_NULL, (empty)
            // 4040: b"new conflict  ... %d\0": typeof(_99) = *const {l132} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
            // 4040: b"new conflict  ... %d\0":   l132 = UNIQUE | NON_NULL, (empty)
            // 4040: b"new conflict  ... %d\0": typeof(_100) = & {l134} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
            // 4040: b"new conflict  ... %d\0":   l134 = UNIQUE | NON_NULL, FIXED
            // 4040: b"new conflict  ... _char: typeof(_97 = move _98 as *const i8 (Misc)) = *const {l174} i8
            // 4040: b"new conflict  ... _char:   l174 = UNIQUE | NON_NULL, (empty)
            // 4040: b"new conflict  ... %d\0": typeof(_99 = &raw const (*_100)) = *const {l172} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
            // 4040: b"new conflict  ... %d\0":   l172 = UNIQUE | NON_NULL, (empty)
            // 4040: b"new conflict  ... st u8: typeof(_98 = move _99 as *const u8 (Pointer(ArrayToPointer))) = *const {l173} u8
            // 4040: b"new conflict  ... st u8:   l173 = UNIQUE | NON_NULL, (empty)
            // 4040: b"new conflict  ... %d\0": typeof(_100 = const b"new conflict limit set to %d\x00") = & {l171} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
            // 4040: b"new conflict  ... %d\0":   l171 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            clim,
            // 4041: clim: typeof(_102) = *mut {l137} i32
            // 4041: clim:   l137 = READ | UNIQUE | NON_NULL, (empty)
        );
    } else {
        vrb(
            b"conflict limit remains at %d\0" as *const u8 as *const libc::c_char,
            // 4045: b"conflict limi ... _char: typeof(_104) = *const {l140} i8
            // 4045: b"conflict limi ... _char:   l140 = UNIQUE | NON_NULL, (empty)
            // 4045: b"conflict limi ... st u8: typeof(_105) = *const {l142} u8
            // 4045: b"conflict limi ... st u8:   l142 = UNIQUE | NON_NULL, (empty)
            // 4045: b"conflict limi ... %d\0": typeof(_106) = *const {l144} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
            // 4045: b"conflict limi ... %d\0":   l144 = UNIQUE | NON_NULL, (empty)
            // 4045: b"conflict limi ... %d\0": typeof(_107) = & {l146} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
            // 4045: b"conflict limi ... %d\0":   l146 = UNIQUE | NON_NULL, FIXED
            // 4045: b"conflict limi ... _char: typeof(_104 = move _105 as *const i8 (Misc)) = *const {l178} i8
            // 4045: b"conflict limi ... _char:   l178 = UNIQUE | NON_NULL, (empty)
            // 4045: b"conflict limi ... %d\0": typeof(_107 = const b"conflict limit remains at %d\x00") = & {l175} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
            // 4045: b"conflict limi ... %d\0":   l175 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            // 4045: b"conflict limi ... st u8: typeof(_105 = move _106 as *const u8 (Pointer(ArrayToPointer))) = *const {l177} u8
            // 4045: b"conflict limi ... st u8:   l177 = UNIQUE | NON_NULL, (empty)
            // 4045: b"conflict limi ... %d\0": typeof(_106 = &raw const (*_107)) = *const {l176} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001d)) }]
            // 4045: b"conflict limi ... %d\0":   l176 = UNIQUE | NON_NULL, (empty)
            clim,
            // 4046: clim: typeof(_109) = *mut {l149} i32
            // 4046: clim:   l149 = READ | UNIQUE | NON_NULL, (empty)
        );
    }
    sumclims += clim as int64_t;
    // 4049: clim: typeof(_112) = *mut {l153} i32
    // 4049: clim:   l153 = READ | UNIQUE | NON_NULL, (empty)
    // 4049: sumclims: typeof(_113) = *mut {l155} i64
    // 4049: sumclims:   l155 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    simplified = 0 as libc::c_int;
    // 4050: simplified: typeof(_116) = *mut {l159} i32
    // 4050: simplified:   l159 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    deleted = simplified;
    // 4051: simplified: typeof(_118) = *mut {l162} i32
    // 4051: simplified:   l162 = READ | UNIQUE | NON_NULL, (empty)
    // 4051: deleted: typeof(_119) = *mut {l164} i32
    // 4051: deleted:   l164 = READ | WRITE | UNIQUE | NON_NULL, (empty)
    added = deleted;
    // 4052: deleted: typeof(_121) = *mut {l167} i32
    // 4052: deleted:   l167 = READ | UNIQUE | NON_NULL, (empty)
    // 4052: added: typeof(_122) = *mut {l169} i32
    // 4052: added:   l169 = READ | WRITE | UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn flush() -> libc::c_int {
    let mut i: libc::c_int = 0;
    let mut before: libc::c_int = numnodes;
    // 4056: numnodes: typeof(_4) = *mut {l4} i32
    // 4056: numnodes:   l4 = UNIQUE | NON_NULL, (empty)
    let mut flushed: libc::c_int = 0;
    let mut res: libc::c_int = 0;
    let mut node: *mut Node = 0 as *mut Node;
    // 4059: mut node: typeof(_7) = *mut {l8} DefId(0:777 ~ treengeling[2d04]::Node)
    // 4059: mut node:   l8 = UNIQUE | NON_NULL, (empty)
    // 4059: 0 as *mut Node: typeof(_7 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l128} DefId(0:777 ~ treengeling[2d04]::Node)
    // 4059: 0 as *mut Node:   l128 = UNIQUE | NON_NULL, (empty)
    i = 0 as libc::c_int;
    while i < numnodes {
    // 4061: numnodes: typeof(_14) = *mut {l16} i32
    // 4061: numnodes:   l16 = UNIQUE | NON_NULL, (empty)
        node = *nodes.offset(i as isize);
        // 4062: *nodes.offset(i ... size): typeof(_15) = *mut {l18} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4062: *nodes.offset(i ... size):   l18 = UNIQUE | NON_NULL, (empty)
        // 4062: nodes.offset(i  ... size): typeof(_16) = *mut {l20} *mut {l21} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4062: nodes.offset(i  ... size):   l20 = UNIQUE | NON_NULL, (empty)
        // 4062: nodes.offset(i  ... size):   l21 = UNIQUE | NON_NULL, (empty)
        // 4062: nodes: typeof(_17) = *mut {l23} *mut {l24} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4062: nodes:   l23 = UNIQUE | NON_NULL, (empty)
        // 4062: nodes:   l24 = UNIQUE | NON_NULL, (empty)
        // 4062: nodes: typeof(_18) = *mut {l26} *mut {l27} *mut {l28} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4062: nodes:   l26 = UNIQUE | NON_NULL, (empty)
        // 4062: nodes:   l27 = UNIQUE | NON_NULL, (empty)
        // 4062: nodes:   l28 = UNIQUE | NON_NULL, (empty)
        if (*node).res == 20 as libc::c_int {
            enqnewleafromnode_shim(node);
            // 4064: node: typeof(_25) = *mut {l36} DefId(0:777 ~ treengeling[2d04]::Node)
            // 4064: node:   l36 = UNIQUE | NON_NULL, (empty)
            delnode(node);
            // 4065: node: typeof(_27) = *mut {l39} DefId(0:777 ~ treengeling[2d04]::Node)
            // 4065: node:   l39 = UNIQUE | NON_NULL, (empty)
        } else if lglinconsistent((*node).lgl) != 0 {
        // 4066: (*node).lgl: typeof(_30) = *mut {l43} LGL
        // 4066: (*node).lgl:   l43 = UNIQUE | NON_NULL, (empty)
            mmsg(b"inconsistent\0" as *const u8 as *const libc::c_char, node);
            // 4067: b"inconsistent\ ... _char: typeof(_32) = *const {l46} i8
            // 4067: b"inconsistent\ ... _char:   l46 = UNIQUE | NON_NULL, (empty)
            // 4067: b"inconsistent\ ... st u8: typeof(_33) = *const {l48} u8
            // 4067: b"inconsistent\ ... st u8:   l48 = UNIQUE | NON_NULL, (empty)
            // 4067: b"inconsistent\0": typeof(_34) = *const {l50} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4067: b"inconsistent\0":   l50 = UNIQUE | NON_NULL, (empty)
            // 4067: b"inconsistent\0": typeof(_35) = & {l52} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4067: b"inconsistent\0":   l52 = UNIQUE | NON_NULL, FIXED
            // 4067: node: typeof(_36) = *mut {l54} DefId(0:777 ~ treengeling[2d04]::Node)
            // 4067: node:   l54 = UNIQUE | NON_NULL, (empty)
            // 4067: b"inconsistent\ ... _char: typeof(_32 = move _33 as *const i8 (Misc)) = *const {l132} i8
            // 4067: b"inconsistent\ ... _char:   l132 = UNIQUE | NON_NULL, (empty)
            // 4067: b"inconsistent\0": typeof(_35 = const b"inconsistent\x00") = & {l129} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4067: b"inconsistent\0":   l129 = UNIQUE | NON_NULL, (empty)
            // 4067: b"inconsistent\ ... st u8: typeof(_33 = move _34 as *const u8 (Pointer(ArrayToPointer))) = *const {l131} u8
            // 4067: b"inconsistent\ ... st u8:   l131 = UNIQUE | NON_NULL, (empty)
            // 4067: b"inconsistent\0": typeof(_34 = &raw const (*_35)) = *const {l130} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4067: b"inconsistent\0":   l130 = UNIQUE | NON_NULL, (empty)
            enqnewleafromnode_shim(node);
            // 4068: node: typeof(_38) = *mut {l57} DefId(0:777 ~ treengeling[2d04]::Node)
            // 4068: node:   l57 = UNIQUE | NON_NULL, (empty)
            delnode(node);
            // 4069: node: typeof(_40) = *mut {l60} DefId(0:777 ~ treengeling[2d04]::Node)
            // 4069: node:   l60 = UNIQUE | NON_NULL, (empty)
        } else {
            i += 1;
            i;
        }
    }
    flushed = before - numnodes;
    // 4075: numnodes: typeof(_48) = *mut {l69} i32
    // 4075: numnodes:   l69 = UNIQUE | NON_NULL, (empty)
    if flushed != 0 {
        vrb(
            b"flushed %d nodes\0" as *const u8 as *const libc::c_char,
            // 4078: b"flushed %d no ... _char: typeof(_54) = *const {l76} i8
            // 4078: b"flushed %d no ... _char:   l76 = UNIQUE | NON_NULL, (empty)
            // 4078: b"flushed %d no ... st u8: typeof(_55) = *const {l78} u8
            // 4078: b"flushed %d no ... st u8:   l78 = UNIQUE | NON_NULL, (empty)
            // 4078: b"flushed %d no ... es\0": typeof(_56) = *const {l80} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 4078: b"flushed %d no ... es\0":   l80 = UNIQUE | NON_NULL, (empty)
            // 4078: b"flushed %d no ... es\0": typeof(_57) = & {l82} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 4078: b"flushed %d no ... es\0":   l82 = UNIQUE | NON_NULL, FIXED
            // 4078: b"flushed %d no ... st u8: typeof(_55 = move _56 as *const u8 (Pointer(ArrayToPointer))) = *const {l135} u8
            // 4078: b"flushed %d no ... st u8:   l135 = UNIQUE | NON_NULL, (empty)
            // 4078: b"flushed %d no ... _char: typeof(_54 = move _55 as *const i8 (Misc)) = *const {l136} i8
            // 4078: b"flushed %d no ... _char:   l136 = UNIQUE | NON_NULL, (empty)
            // 4078: b"flushed %d no ... es\0": typeof(_57 = const b"flushed %d nodes\x00") = & {l133} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 4078: b"flushed %d no ... es\0":   l133 = UNIQUE | NON_NULL, (empty)
            // 4078: b"flushed %d no ... es\0": typeof(_56 = &raw const (*_57)) = *const {l134} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 4078: b"flushed %d no ... es\0":   l134 = UNIQUE | NON_NULL, (empty)
            flushed,
        );
    }
    if numnodes != 0 {
    // 4082: numnodes: typeof(_62) = *mut {l88} i32
    // 4082: numnodes:   l88 = UNIQUE | NON_NULL, (empty)
        res = 0 as libc::c_int;
        vrb(
            b"still %d nodes left\0" as *const u8 as *const libc::c_char,
            // 4085: b"still %d node ... _char: typeof(_65) = *const {l92} i8
            // 4085: b"still %d node ... _char:   l92 = UNIQUE | NON_NULL, (empty)
            // 4085: b"still %d node ... st u8: typeof(_66) = *const {l94} u8
            // 4085: b"still %d node ... st u8:   l94 = UNIQUE | NON_NULL, (empty)
            // 4085: b"still %d node ... ft\0": typeof(_67) = *const {l96} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
            // 4085: b"still %d node ... ft\0":   l96 = UNIQUE | NON_NULL, (empty)
            // 4085: b"still %d node ... ft\0": typeof(_68) = & {l98} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
            // 4085: b"still %d node ... ft\0":   l98 = UNIQUE | NON_NULL, FIXED
            // 4085: b"still %d node ... ft\0": typeof(_67 = &raw const (*_68)) = *const {l138} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
            // 4085: b"still %d node ... ft\0":   l138 = UNIQUE | NON_NULL, (empty)
            // 4085: b"still %d node ... st u8: typeof(_66 = move _67 as *const u8 (Pointer(ArrayToPointer))) = *const {l139} u8
            // 4085: b"still %d node ... st u8:   l139 = UNIQUE | NON_NULL, (empty)
            // 4085: b"still %d node ... ft\0": typeof(_68 = const b"still %d nodes left\x00") = & {l137} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000014)) }]
            // 4085: b"still %d node ... ft\0":   l137 = UNIQUE | NON_NULL, (empty)
            // 4085: b"still %d node ... _char: typeof(_65 = move _66 as *const i8 (Misc)) = *const {l140} i8
            // 4085: b"still %d node ... _char:   l140 = UNIQUE | NON_NULL, (empty)
            numnodes,
            // 4086: numnodes: typeof(_70) = *mut {l101} i32
            // 4086: numnodes:   l101 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        res = 20 as libc::c_int;
        msg(b"no more nodes left\0" as *const u8 as *const libc::c_char);
        // 4090: b"no more nodes ... _char: typeof(_73) = *const {l105} i8
        // 4090: b"no more nodes ... _char:   l105 = UNIQUE | NON_NULL, (empty)
        // 4090: b"no more nodes ... st u8: typeof(_74) = *const {l107} u8
        // 4090: b"no more nodes ... st u8:   l107 = UNIQUE | NON_NULL, (empty)
        // 4090: b"no more nodes ... ft\0": typeof(_75) = *const {l109} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
        // 4090: b"no more nodes ... ft\0":   l109 = UNIQUE | NON_NULL, (empty)
        // 4090: b"no more nodes ... ft\0": typeof(_76) = & {l111} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
        // 4090: b"no more nodes ... ft\0":   l111 = UNIQUE | NON_NULL, FIXED
        // 4090: b"no more nodes ... _char: typeof(_73 = move _74 as *const i8 (Misc)) = *const {l144} i8
        // 4090: b"no more nodes ... _char:   l144 = UNIQUE | NON_NULL, (empty)
        // 4090: b"no more nodes ... ft\0": typeof(_76 = const b"no more nodes left\x00") = & {l141} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
        // 4090: b"no more nodes ... ft\0":   l141 = UNIQUE | NON_NULL, (empty)
        // 4090: b"no more nodes ... st u8: typeof(_74 = move _75 as *const u8 (Pointer(ArrayToPointer))) = *const {l143} u8
        // 4090: b"no more nodes ... st u8:   l143 = UNIQUE | NON_NULL, (empty)
        // 4090: b"no more nodes ... ft\0": typeof(_75 = &raw const (*_76)) = *const {l142} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
        // 4090: b"no more nodes ... ft\0":   l142 = UNIQUE | NON_NULL, (empty)
        printf(b"s UNSATISFIABLE\n\0" as *const u8 as *const libc::c_char);
        // 4091: b"s UNSATISFIAB ... _char: typeof(_78) = *const {l114} i8
        // 4091: b"s UNSATISFIAB ... _char:   l114 = UNIQUE | NON_NULL, (empty)
        // 4091: b"s UNSATISFIAB ... st u8: typeof(_79) = *const {l116} u8
        // 4091: b"s UNSATISFIAB ... st u8:   l116 = UNIQUE | NON_NULL, (empty)
        // 4091: b"s UNSATISFIAB ... \n\0": typeof(_80) = *const {l118} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 4091: b"s UNSATISFIAB ... \n\0":   l118 = UNIQUE | NON_NULL, (empty)
        // 4091: b"s UNSATISFIAB ... \n\0": typeof(_81) = & {l120} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 4091: b"s UNSATISFIAB ... \n\0":   l120 = UNIQUE | NON_NULL, FIXED
        // 4091: b"s UNSATISFIAB ... \n\0": typeof(_80 = &raw const (*_81)) = *const {l146} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 4091: b"s UNSATISFIAB ... \n\0":   l146 = UNIQUE | NON_NULL, (empty)
        // 4091: b"s UNSATISFIAB ... st u8: typeof(_79 = move _80 as *const u8 (Pointer(ArrayToPointer))) = *const {l147} u8
        // 4091: b"s UNSATISFIAB ... st u8:   l147 = UNIQUE | NON_NULL, (empty)
        // 4091: b"s UNSATISFIAB ... _char: typeof(_78 = move _79 as *const i8 (Misc)) = *const {l148} i8
        // 4091: b"s UNSATISFIAB ... _char:   l148 = UNIQUE | NON_NULL, (empty)
        // 4091: b"s UNSATISFIAB ... \n\0": typeof(_81 = const b"s UNSATISFIABLE\n\x00") = & {l145} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 4091: b"s UNSATISFIAB ... \n\0":   l145 = UNIQUE | NON_NULL, (empty)
        fflush(stdout);
        // 4092: stdout: typeof(_83) = *mut {l123} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 4092: stdout:   l123 = UNIQUE | NON_NULL, (empty)
        // 4092: stdout: typeof(_84) = *mut {l125} *mut {l126} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 4092: stdout:   l125 = UNIQUE | NON_NULL, (empty)
        // 4092: stdout:   l126 = UNIQUE | NON_NULL, (empty)
    }
    return res;
}
unsafe extern "C" fn mergestats() {
    let mut node: *mut Node = 0 as *mut Node;
    // 4097: mut node: typeof(_1) = *mut {l1} DefId(0:777 ~ treengeling[2d04]::Node)
    // 4097: mut node:   l1 = UNIQUE | NON_NULL, (empty)
    // 4097: 0 as *mut Node: typeof(_1 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l92} DefId(0:777 ~ treengeling[2d04]::Node)
    // 4097: 0 as *mut Node:   l92 = UNIQUE | NON_NULL, (empty)
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while i < numnodes {
    // 4100: numnodes: typeof(_9) = *mut {l10} i32
    // 4100: numnodes:   l10 = UNIQUE | NON_NULL, (empty)
        node = *nodes.offset(i as isize);
        // 4101: *nodes.offset(i ... size): typeof(_10) = *mut {l12} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4101: *nodes.offset(i ... size):   l12 = UNIQUE | NON_NULL, (empty)
        // 4101: nodes.offset(i  ... size): typeof(_11) = *mut {l14} *mut {l15} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4101: nodes.offset(i  ... size):   l14 = UNIQUE | NON_NULL, (empty)
        // 4101: nodes.offset(i  ... size):   l15 = UNIQUE | NON_NULL, (empty)
        // 4101: nodes: typeof(_12) = *mut {l17} *mut {l18} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4101: nodes:   l17 = UNIQUE | NON_NULL, (empty)
        // 4101: nodes:   l18 = UNIQUE | NON_NULL, (empty)
        // 4101: nodes: typeof(_13) = *mut {l20} *mut {l21} *mut {l22} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4101: nodes:   l20 = UNIQUE | NON_NULL, (empty)
        // 4101: nodes:   l21 = UNIQUE | NON_NULL, (empty)
        // 4101: nodes:   l22 = UNIQUE | NON_NULL, (empty)
        if !((*node).lgl).is_null() {
        // 4102: ((*node).lgl): typeof(_19) = *mut {l29} LGL
        // 4102: ((*node).lgl):   l29 = UNIQUE | NON_NULL, (empty)
            updstats(node);
            // 4103: node: typeof(_21) = *mut {l32} DefId(0:777 ~ treengeling[2d04]::Node)
            // 4103: node:   l32 = UNIQUE | NON_NULL, (empty)
        }
        i += 1;
        i;
    }
    lockparstats();
    if noparallel == 0 && !(parallel.lgl).is_null() {
    // 4109: noparallel: typeof(_32) = *mut {l44} i32
    // 4109: noparallel:   l44 = UNIQUE | NON_NULL, (empty)
    // 4109: (parallel.lgl): typeof(_35) = *mut {l48} LGL
    // 4109: (parallel.lgl):   l48 = UNIQUE | NON_NULL, (empty)
    // 4109: parallel: typeof(_36) = *mut {l50} DefId(0:802 ~ treengeling[2d04]::Parallel)
    // 4109: parallel:   l50 = UNIQUE | NON_NULL, (empty)
        decisions += lglgetdecs(parallel.lgl) - parallel.decisions;
        // 4110: parallel.lgl: typeof(_39) = *mut {l54} LGL
        // 4110: parallel.lgl:   l54 = UNIQUE | NON_NULL, (empty)
        // 4110: parallel: typeof(_40) = *mut {l56} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 4110: parallel:   l56 = UNIQUE | NON_NULL, (empty)
        // 4110: parallel: typeof(_42) = *mut {l59} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 4110: parallel:   l59 = UNIQUE | NON_NULL, (empty)
        // 4110: decisions: typeof(_44) = *mut {l62} i64
        // 4110: decisions:   l62 = UNIQUE | NON_NULL, (empty)
        conflicts += lglgetconfs(parallel.lgl) - parallel.conflicts;
        // 4111: parallel.lgl: typeof(_48) = *mut {l67} LGL
        // 4111: parallel.lgl:   l67 = UNIQUE | NON_NULL, (empty)
        // 4111: parallel: typeof(_49) = *mut {l69} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 4111: parallel:   l69 = UNIQUE | NON_NULL, (empty)
        // 4111: parallel: typeof(_51) = *mut {l72} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 4111: parallel:   l72 = UNIQUE | NON_NULL, (empty)
        // 4111: conflicts: typeof(_53) = *mut {l75} i64
        // 4111: conflicts:   l75 = UNIQUE | NON_NULL, (empty)
        propagations += lglgetprops(parallel.lgl) - parallel.propagations;
        // 4112: parallel.lgl: typeof(_57) = *mut {l80} LGL
        // 4112: parallel.lgl:   l80 = UNIQUE | NON_NULL, (empty)
        // 4112: parallel: typeof(_58) = *mut {l82} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 4112: parallel:   l82 = UNIQUE | NON_NULL, (empty)
        // 4112: parallel: typeof(_60) = *mut {l85} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 4112: parallel:   l85 = UNIQUE | NON_NULL, (empty)
        // 4112: propagations: typeof(_62) = *mut {l88} i64
        // 4112: propagations:   l88 = UNIQUE | NON_NULL, (empty)
    }
    unlockparstats();
}
unsafe extern "C" fn stats() {
    let mut w: libc::c_double = getime();
    let mut t: libc::c_double = lglprocesstime();
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 4119: b"\0" as *const ... _char: typeof(_4) = *const {l4} i8
    // 4119: b"\0" as *const ... _char:   l4 = UNIQUE | NON_NULL, (empty)
    // 4119: b"\0" as *const u8: typeof(_5) = *const {l6} u8
    // 4119: b"\0" as *const u8:   l6 = UNIQUE | NON_NULL, (empty)
    // 4119: b"\0": typeof(_6) = *const {l8} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4119: b"\0":   l8 = UNIQUE | NON_NULL, (empty)
    // 4119: b"\0": typeof(_7) = & {l10} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4119: b"\0":   l10 = UNIQUE | NON_NULL, FIXED
    // 4119: b"\0": typeof(_6 = &raw const (*_7)) = *const {l552} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4119: b"\0":   l552 = UNIQUE | NON_NULL, (empty)
    // 4119: b"\0": typeof(_7 = const b"\x00") = & {l551} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4119: b"\0":   l551 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 4119: b"\0" as *const u8: typeof(_5 = move _6 as *const u8 (Pointer(ArrayToPointer))) = *const {l553} u8
    // 4119: b"\0" as *const u8:   l553 = UNIQUE | NON_NULL, (empty)
    // 4119: b"\0" as *const ... _char: typeof(_4 = move _5 as *const i8 (Misc)) = *const {l554} i8
    // 4119: b"\0" as *const ... _char:   l554 = UNIQUE | NON_NULL, (empty)
    msg(
        b"%d rounds, %lld nodes (%d max), %lld threads (%d max)\0" as *const u8
        // 4121: b"%d rounds, %l ... _char: typeof(_9) = *const {l13} i8
        // 4121: b"%d rounds, %l ... _char:   l13 = UNIQUE | NON_NULL, (empty)
        // 4121: b"%d rounds, %l ... st u8: typeof(_10) = *const {l15} u8
        // 4121: b"%d rounds, %l ... st u8:   l15 = UNIQUE | NON_NULL, (empty)
        // 4121: b"%d rounds, %l ... x)\0": typeof(_11) = *const {l17} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 4121: b"%d rounds, %l ... x)\0":   l17 = UNIQUE | NON_NULL, (empty)
        // 4121: b"%d rounds, %l ... x)\0": typeof(_12) = & {l19} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 4121: b"%d rounds, %l ... x)\0":   l19 = UNIQUE | NON_NULL, FIXED
        // 4121: b"%d rounds, %l ... st u8: typeof(_10 = move _11 as *const u8 (Pointer(ArrayToPointer))) = *const {l557} u8
        // 4121: b"%d rounds, %l ... st u8:   l557 = UNIQUE | NON_NULL, (empty)
        // 4121: b"%d rounds, %l ... x)\0": typeof(_11 = &raw const (*_12)) = *const {l556} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 4121: b"%d rounds, %l ... x)\0":   l556 = UNIQUE | NON_NULL, (empty)
        // 4121: b"%d rounds, %l ... x)\0": typeof(_12 = const b"%d rounds, %lld nodes (%d max), %lld threads (%d max)\x00") = & {l555} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 4121: b"%d rounds, %l ... x)\0":   l555 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4121: b"%d rounds, %l ... _char: typeof(_9 = move _10 as *const i8 (Misc)) = *const {l558} i8
        // 4121: b"%d rounds, %l ... _char:   l558 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        round,
        // 4123: round: typeof(_14) = *mut {l22} i32
        // 4123: round:   l22 = READ | UNIQUE | NON_NULL, (empty)
        ids as libc::c_longlong,
        // 4124: ids: typeof(_16) = *mut {l25} i64
        // 4124: ids:   l25 = READ | UNIQUE | NON_NULL, (empty)
        maxnumnodes,
        // 4125: maxnumnodes: typeof(_18) = *mut {l28} i32
        // 4125: maxnumnodes:   l28 = READ | UNIQUE | NON_NULL, (empty)
        (noparallel == 0) as libc::c_int as libc::c_longlong + threads as libc::c_longlong,
        // 4126: noparallel: typeof(_24) = *mut {l35} i32
        // 4126: noparallel:   l35 = READ | UNIQUE | NON_NULL, (empty)
        // 4126: threads: typeof(_26) = *mut {l38} i64
        // 4126: threads:   l38 = READ | UNIQUE | NON_NULL, (empty)
        maxnumworkers + (noparallel == 0) as libc::c_int,
        // 4127: maxnumworkers: typeof(_30) = *mut {l43} i32
        // 4127: maxnumworkers:   l43 = READ | UNIQUE | NON_NULL, (empty)
        // 4127: noparallel: typeof(_34) = *mut {l48} i32
        // 4127: noparallel:   l48 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(
        b"%.0f avg clim, %lld incs, %lld decs, %lld forced, %lld simp\0" as *const u8
        // 4130: b"%.0f avg clim ... _char: typeof(_37) = *const {l52} i8
        // 4130: b"%.0f avg clim ... _char:   l52 = UNIQUE | NON_NULL, (empty)
        // 4130: b"%.0f avg clim ... st u8: typeof(_38) = *const {l54} u8
        // 4130: b"%.0f avg clim ... st u8:   l54 = UNIQUE | NON_NULL, (empty)
        // 4130: b"%.0f avg clim ... mp\0": typeof(_39) = *const {l56} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 4130: b"%.0f avg clim ... mp\0":   l56 = UNIQUE | NON_NULL, (empty)
        // 4130: b"%.0f avg clim ... mp\0": typeof(_40) = & {l58} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 4130: b"%.0f avg clim ... mp\0":   l58 = UNIQUE | NON_NULL, FIXED
        // 4130: b"%.0f avg clim ... st u8: typeof(_38 = move _39 as *const u8 (Pointer(ArrayToPointer))) = *const {l561} u8
        // 4130: b"%.0f avg clim ... st u8:   l561 = UNIQUE | NON_NULL, (empty)
        // 4130: b"%.0f avg clim ... mp\0": typeof(_39 = &raw const (*_40)) = *const {l560} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 4130: b"%.0f avg clim ... mp\0":   l560 = UNIQUE | NON_NULL, (empty)
        // 4130: b"%.0f avg clim ... mp\0": typeof(_40 = const b"%.0f avg clim, %lld incs, %lld decs, %lld forced, %lld simp\x00") = & {l559} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 4130: b"%.0f avg clim ... mp\0":   l559 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4130: b"%.0f avg clim ... _char: typeof(_37 = move _38 as *const i8 (Misc)) = *const {l562} i8
        // 4130: b"%.0f avg clim ... _char:   l562 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        avg(
            sumclims as libc::c_double,
            // 4133: sumclims: typeof(_44) = *mut {l63} i64
            // 4133: sumclims:   l63 = READ | UNIQUE | NON_NULL, (empty)
            (inclims + declims + 1 as libc::c_int as int64_t) as libc::c_double,
            // 4134: inclims: typeof(_49) = *mut {l69} i64
            // 4134: inclims:   l69 = READ | UNIQUE | NON_NULL, (empty)
            // 4134: declims: typeof(_51) = *mut {l72} i64
            // 4134: declims:   l72 = READ | UNIQUE | NON_NULL, (empty)
        ),
        inclims as libc::c_longlong,
        // 4136: inclims: typeof(_57) = *mut {l79} i64
        // 4136: inclims:   l79 = READ | UNIQUE | NON_NULL, (empty)
        declims as libc::c_longlong,
        // 4137: declims: typeof(_59) = *mut {l82} i64
        // 4137: declims:   l82 = READ | UNIQUE | NON_NULL, (empty)
        forcedclims as libc::c_longlong,
        // 4138: forcedclims: typeof(_61) = *mut {l85} i64
        // 4138: forcedclims:   l85 = READ | UNIQUE | NON_NULL, (empty)
        sumsimplified as libc::c_longlong,
        // 4139: sumsimplified: typeof(_63) = *mut {l88} i64
        // 4139: sumsimplified:   l88 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 4141: b"\0" as *const ... _char: typeof(_65) = *const {l91} i8
    // 4141: b"\0" as *const ... _char:   l91 = UNIQUE | NON_NULL, (empty)
    // 4141: b"\0" as *const u8: typeof(_66) = *const {l93} u8
    // 4141: b"\0" as *const u8:   l93 = UNIQUE | NON_NULL, (empty)
    // 4141: b"\0": typeof(_67) = *const {l95} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4141: b"\0":   l95 = UNIQUE | NON_NULL, (empty)
    // 4141: b"\0": typeof(_68) = & {l97} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4141: b"\0":   l97 = UNIQUE | NON_NULL, FIXED
    // 4141: b"\0" as *const ... _char: typeof(_65 = move _66 as *const i8 (Misc)) = *const {l566} i8
    // 4141: b"\0" as *const ... _char:   l566 = UNIQUE | NON_NULL, (empty)
    // 4141: b"\0" as *const u8: typeof(_66 = move _67 as *const u8 (Pointer(ArrayToPointer))) = *const {l565} u8
    // 4141: b"\0" as *const u8:   l565 = UNIQUE | NON_NULL, (empty)
    // 4141: b"\0": typeof(_68 = const b"\x00") = & {l563} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4141: b"\0":   l563 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 4141: b"\0": typeof(_67 = &raw const (*_68)) = *const {l564} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4141: b"\0":   l564 = UNIQUE | NON_NULL, (empty)
    msg(
        b"%.2f wall clock time, %.2f process time\0" as *const u8 as *const libc::c_char,
        // 4143: b"%.2f wall clo ... _char: typeof(_70) = *const {l100} i8
        // 4143: b"%.2f wall clo ... _char:   l100 = UNIQUE | NON_NULL, (empty)
        // 4143: b"%.2f wall clo ... st u8: typeof(_71) = *const {l102} u8
        // 4143: b"%.2f wall clo ... st u8:   l102 = UNIQUE | NON_NULL, (empty)
        // 4143: b"%.2f wall clo ... me\0": typeof(_72) = *const {l104} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 4143: b"%.2f wall clo ... me\0":   l104 = UNIQUE | NON_NULL, (empty)
        // 4143: b"%.2f wall clo ... me\0": typeof(_73) = & {l106} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 4143: b"%.2f wall clo ... me\0":   l106 = UNIQUE | NON_NULL, FIXED
        // 4143: b"%.2f wall clo ... me\0": typeof(_73 = const b"%.2f wall clock time, %.2f process time\x00") = & {l567} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 4143: b"%.2f wall clo ... me\0":   l567 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4143: b"%.2f wall clo ... st u8: typeof(_71 = move _72 as *const u8 (Pointer(ArrayToPointer))) = *const {l569} u8
        // 4143: b"%.2f wall clo ... st u8:   l569 = UNIQUE | NON_NULL, (empty)
        // 4143: b"%.2f wall clo ... me\0": typeof(_72 = &raw const (*_73)) = *const {l568} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 4143: b"%.2f wall clo ... me\0":   l568 = UNIQUE | NON_NULL, (empty)
        // 4143: b"%.2f wall clo ... _char: typeof(_70 = move _71 as *const i8 (Misc)) = *const {l570} i8
        // 4143: b"%.2f wall clo ... _char:   l570 = UNIQUE | NON_NULL, (empty)
        w,
        t,
    );
    msg(
        b"%.0f%% utilization for %d%s worker threads on %d cores\0" as *const u8
        // 4148: b"%.0f%% utiliz ... _char: typeof(_77) = *const {l111} i8
        // 4148: b"%.0f%% utiliz ... _char:   l111 = UNIQUE | NON_NULL, (empty)
        // 4148: b"%.0f%% utiliz ... st u8: typeof(_78) = *const {l113} u8
        // 4148: b"%.0f%% utiliz ... st u8:   l113 = UNIQUE | NON_NULL, (empty)
        // 4148: b"%.0f%% utiliz ... es\0": typeof(_79) = *const {l115} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000037)) }]
        // 4148: b"%.0f%% utiliz ... es\0":   l115 = UNIQUE | NON_NULL, (empty)
        // 4148: b"%.0f%% utiliz ... es\0": typeof(_80) = & {l117} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000037)) }]
        // 4148: b"%.0f%% utiliz ... es\0":   l117 = UNIQUE | NON_NULL, FIXED
        // 4148: b"%.0f%% utiliz ... es\0": typeof(_79 = &raw const (*_80)) = *const {l572} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000037)) }]
        // 4148: b"%.0f%% utiliz ... es\0":   l572 = UNIQUE | NON_NULL, (empty)
        // 4148: b"%.0f%% utiliz ... es\0": typeof(_80 = const b"%.0f%% utilization for %d%s worker threads on %d cores\x00") = & {l571} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000037)) }]
        // 4148: b"%.0f%% utiliz ... es\0":   l571 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4148: b"%.0f%% utiliz ... _char: typeof(_77 = move _78 as *const i8 (Misc)) = *const {l574} i8
        // 4148: b"%.0f%% utiliz ... _char:   l574 = UNIQUE | NON_NULL, (empty)
        // 4148: b"%.0f%% utiliz ... st u8: typeof(_78 = move _79 as *const u8 (Pointer(ArrayToPointer))) = *const {l573} u8
        // 4148: b"%.0f%% utiliz ... st u8:   l573 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        pcnt(
            t,
            (maxworkers + (noparallel == 0) as libc::c_int) as libc::c_double * w,
            // 4152: maxworkers: typeof(_87) = *mut {l125} i32
            // 4152: maxworkers:   l125 = READ | UNIQUE | NON_NULL, (empty)
            // 4152: noparallel: typeof(_91) = *mut {l130} i32
            // 4152: noparallel:   l130 = READ | UNIQUE | NON_NULL, (empty)
        ),
        maxworkers,
        // 4154: maxworkers: typeof(_95) = *mut {l135} i32
        // 4154: maxworkers:   l135 = READ | UNIQUE | NON_NULL, (empty)
        if noparallel == 0 {
        // 4155: if noparallel = ... har }: typeof(_96) = *const {l137} i8
        // 4155: if noparallel = ... har }:   l137 = UNIQUE | NON_NULL, (empty)
        // 4155: noparallel: typeof(_99) = *mut {l141} i32
        // 4155: noparallel:   l141 = READ | UNIQUE | NON_NULL, (empty)
            b" + 1\0" as *const u8 as *const libc::c_char
            // 4156: b" + 1\0" as *c ... st u8: typeof(_100) = *const {l143} u8
            // 4156: b" + 1\0" as *c ... st u8:   l143 = UNIQUE | NON_NULL, (empty)
            // 4156: b" + 1\0": typeof(_101) = *const {l145} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 4156: b" + 1\0":   l145 = UNIQUE | NON_NULL, (empty)
            // 4156: b" + 1\0": typeof(_102) = & {l147} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 4156: b" + 1\0":   l147 = UNIQUE | NON_NULL, FIXED
            // 4156: b" + 1\0": typeof(_101 = &raw const (*_102)) = *const {l576} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 4156: b" + 1\0":   l576 = UNIQUE | NON_NULL, (empty)
            // 4156: b" + 1\0" as *c ... _char: typeof(_96 = move _100 as *const i8 (Misc)) = *const {l578} i8
            // 4156: b" + 1\0" as *c ... _char:   l578 = UNIQUE | NON_NULL, (empty)
            // 4156: b" + 1\0": typeof(_102 = const b" + 1\x00") = & {l575} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 4156: b" + 1\0":   l575 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            // 4156: b" + 1\0" as *c ... st u8: typeof(_100 = move _101 as *const u8 (Pointer(ArrayToPointer))) = *const {l577} u8
            // 4156: b" + 1\0" as *c ... st u8:   l577 = UNIQUE | NON_NULL, (empty)
        } else {
            b"\0" as *const u8 as *const libc::c_char
            // 4158: b"\0" as *const u8: typeof(_103) = *const {l149} u8
            // 4158: b"\0" as *const u8:   l149 = UNIQUE | NON_NULL, (empty)
            // 4158: b"\0": typeof(_104) = *const {l151} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 4158: b"\0":   l151 = UNIQUE | NON_NULL, (empty)
            // 4158: b"\0": typeof(_105) = & {l153} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 4158: b"\0":   l153 = UNIQUE | NON_NULL, FIXED
            // 4158: b"\0" as *const u8: typeof(_103 = move _104 as *const u8 (Pointer(ArrayToPointer))) = *const {l581} u8
            // 4158: b"\0" as *const u8:   l581 = UNIQUE | NON_NULL, (empty)
            // 4158: b"\0": typeof(_104 = &raw const (*_105)) = *const {l580} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 4158: b"\0":   l580 = UNIQUE | NON_NULL, (empty)
            // 4158: b"\0" as *const ... _char: typeof(_96 = move _103 as *const i8 (Misc)) = *const {l582} i8
            // 4158: b"\0" as *const ... _char:   l582 = UNIQUE | NON_NULL, (empty)
            // 4158: b"\0": typeof(_105 = const b"\x00") = & {l579} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 4158: b"\0":   l579 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        },
        ncores,
        // 4160: ncores: typeof(_107) = *mut {l156} i32
        // 4160: ncores:   l156 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 4162: b"\0" as *const ... _char: typeof(_109) = *const {l159} i8
    // 4162: b"\0" as *const ... _char:   l159 = UNIQUE | NON_NULL, (empty)
    // 4162: b"\0" as *const u8: typeof(_110) = *const {l161} u8
    // 4162: b"\0" as *const u8:   l161 = UNIQUE | NON_NULL, (empty)
    // 4162: b"\0": typeof(_111) = *const {l163} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4162: b"\0":   l163 = UNIQUE | NON_NULL, (empty)
    // 4162: b"\0": typeof(_112) = & {l165} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4162: b"\0":   l165 = UNIQUE | NON_NULL, FIXED
    // 4162: b"\0": typeof(_112 = const b"\x00") = & {l583} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4162: b"\0":   l583 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 4162: b"\0": typeof(_111 = &raw const (*_112)) = *const {l584} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4162: b"\0":   l584 = UNIQUE | NON_NULL, (empty)
    // 4162: b"\0" as *const u8: typeof(_110 = move _111 as *const u8 (Pointer(ArrayToPointer))) = *const {l585} u8
    // 4162: b"\0" as *const u8:   l585 = UNIQUE | NON_NULL, (empty)
    // 4162: b"\0" as *const ... _char: typeof(_109 = move _110 as *const i8 (Misc)) = *const {l586} i8
    // 4162: b"\0" as *const ... _char:   l586 = UNIQUE | NON_NULL, (empty)
    if noparallel == 0 {
    // 4163: noparallel: typeof(_116) = *mut {l170} i32
    // 4163: noparallel:   l170 = READ | UNIQUE | NON_NULL, (empty)
        msg(
            b"started %d additional parallel solver instances\0" as *const u8
            // 4165: b"started %d ad ... _char: typeof(_118) = *const {l173} i8
            // 4165: b"started %d ad ... _char:   l173 = UNIQUE | NON_NULL, (empty)
            // 4165: b"started %d ad ... st u8: typeof(_119) = *const {l175} u8
            // 4165: b"started %d ad ... st u8:   l175 = UNIQUE | NON_NULL, (empty)
            // 4165: b"started %d ad ... es\0": typeof(_120) = *const {l177} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
            // 4165: b"started %d ad ... es\0":   l177 = UNIQUE | NON_NULL, (empty)
            // 4165: b"started %d ad ... es\0": typeof(_121) = & {l179} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
            // 4165: b"started %d ad ... es\0":   l179 = UNIQUE | NON_NULL, FIXED
            // 4165: b"started %d ad ... es\0": typeof(_121 = const b"started %d additional parallel solver instances\x00") = & {l587} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
            // 4165: b"started %d ad ... es\0":   l587 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            // 4165: b"started %d ad ... _char: typeof(_118 = move _119 as *const i8 (Misc)) = *const {l590} i8
            // 4165: b"started %d ad ... _char:   l590 = UNIQUE | NON_NULL, (empty)
            // 4165: b"started %d ad ... es\0": typeof(_120 = &raw const (*_121)) = *const {l588} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
            // 4165: b"started %d ad ... es\0":   l588 = UNIQUE | NON_NULL, (empty)
            // 4165: b"started %d ad ... st u8: typeof(_119 = move _120 as *const u8 (Pointer(ArrayToPointer))) = *const {l589} u8
            // 4165: b"started %d ad ... st u8:   l589 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
            nparallel,
            // 4167: nparallel: typeof(_123) = *mut {l182} i32
            // 4167: nparallel:   l182 = READ | UNIQUE | NON_NULL, (empty)
        );
        msg(
            b"%lld units consumed %.0f%% of %lld produced\0" as *const u8 as *const libc::c_char,
            // 4170: b"%lld units co ... _char: typeof(_125) = *const {l185} i8
            // 4170: b"%lld units co ... _char:   l185 = UNIQUE | NON_NULL, (empty)
            // 4170: b"%lld units co ... st u8: typeof(_126) = *const {l187} u8
            // 4170: b"%lld units co ... st u8:   l187 = UNIQUE | NON_NULL, (empty)
            // 4170: b"%lld units co ... ed\0": typeof(_127) = *const {l189} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 4170: b"%lld units co ... ed\0":   l189 = UNIQUE | NON_NULL, (empty)
            // 4170: b"%lld units co ... ed\0": typeof(_128) = & {l191} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 4170: b"%lld units co ... ed\0":   l191 = UNIQUE | NON_NULL, FIXED
            // 4170: b"%lld units co ... ed\0": typeof(_128 = const b"%lld units consumed %.0f%% of %lld produced\x00") = & {l591} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 4170: b"%lld units co ... ed\0":   l591 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            // 4170: b"%lld units co ... _char: typeof(_125 = move _126 as *const i8 (Misc)) = *const {l594} i8
            // 4170: b"%lld units co ... _char:   l594 = UNIQUE | NON_NULL, (empty)
            // 4170: b"%lld units co ... ed\0": typeof(_127 = &raw const (*_128)) = *const {l592} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 4170: b"%lld units co ... ed\0":   l592 = UNIQUE | NON_NULL, (empty)
            // 4170: b"%lld units co ... st u8: typeof(_126 = move _127 as *const u8 (Pointer(ArrayToPointer))) = *const {l593} u8
            // 4170: b"%lld units co ... st u8:   l593 = UNIQUE | NON_NULL, (empty)
            parallel.consumed.units as libc::c_longlong,
            // 4171: parallel: typeof(_130) = *mut {l194} DefId(0:802 ~ treengeling[2d04]::Parallel)
            // 4171: parallel:   l194 = READ | UNIQUE | NON_NULL, (empty)
            pcnt(
                parallel.consumed.units as libc::c_double,
                // 4173: parallel: typeof(_134) = *mut {l199} DefId(0:802 ~ treengeling[2d04]::Parallel)
                // 4173: parallel:   l199 = READ | UNIQUE | NON_NULL, (empty)
                parallel.produced.units as libc::c_double,
                // 4174: parallel: typeof(_137) = *mut {l203} DefId(0:802 ~ treengeling[2d04]::Parallel)
                // 4174: parallel:   l203 = READ | UNIQUE | NON_NULL, (empty)
            ),
            parallel.produced.units as libc::c_longlong,
            // 4176: parallel: typeof(_139) = *mut {l206} DefId(0:802 ~ treengeling[2d04]::Parallel)
            // 4176: parallel:   l206 = READ | UNIQUE | NON_NULL, (empty)
        );
        msg(
            b"%lld leaf clauses consumed %.0f%% of %lld produced\0" as *const u8
            // 4179: b"%lld leaf cla ... _char: typeof(_141) = *const {l209} i8
            // 4179: b"%lld leaf cla ... _char:   l209 = UNIQUE | NON_NULL, (empty)
            // 4179: b"%lld leaf cla ... st u8: typeof(_142) = *const {l211} u8
            // 4179: b"%lld leaf cla ... st u8:   l211 = UNIQUE | NON_NULL, (empty)
            // 4179: b"%lld leaf cla ... ed\0": typeof(_143) = *const {l213} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 4179: b"%lld leaf cla ... ed\0":   l213 = UNIQUE | NON_NULL, (empty)
            // 4179: b"%lld leaf cla ... ed\0": typeof(_144) = & {l215} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 4179: b"%lld leaf cla ... ed\0":   l215 = UNIQUE | NON_NULL, FIXED
            // 4179: b"%lld leaf cla ... ed\0": typeof(_143 = &raw const (*_144)) = *const {l596} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 4179: b"%lld leaf cla ... ed\0":   l596 = UNIQUE | NON_NULL, (empty)
            // 4179: b"%lld leaf cla ... ed\0": typeof(_144 = const b"%lld leaf clauses consumed %.0f%% of %lld produced\x00") = & {l595} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 4179: b"%lld leaf cla ... ed\0":   l595 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            // 4179: b"%lld leaf cla ... _char: typeof(_141 = move _142 as *const i8 (Misc)) = *const {l598} i8
            // 4179: b"%lld leaf cla ... _char:   l598 = UNIQUE | NON_NULL, (empty)
            // 4179: b"%lld leaf cla ... st u8: typeof(_142 = move _143 as *const u8 (Pointer(ArrayToPointer))) = *const {l597} u8
            // 4179: b"%lld leaf cla ... st u8:   l597 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
            parallel.consumed.leafs as libc::c_longlong,
            // 4181: parallel: typeof(_146) = *mut {l218} DefId(0:802 ~ treengeling[2d04]::Parallel)
            // 4181: parallel:   l218 = READ | UNIQUE | NON_NULL, (empty)
            pcnt(
                parallel.consumed.leafs as libc::c_double,
                // 4183: parallel: typeof(_150) = *mut {l223} DefId(0:802 ~ treengeling[2d04]::Parallel)
                // 4183: parallel:   l223 = READ | UNIQUE | NON_NULL, (empty)
                parallel.produced.leafs as libc::c_double,
                // 4184: parallel: typeof(_153) = *mut {l227} DefId(0:802 ~ treengeling[2d04]::Parallel)
                // 4184: parallel:   l227 = READ | UNIQUE | NON_NULL, (empty)
            ),
            parallel.produced.leafs as libc::c_longlong,
            // 4186: parallel: typeof(_155) = *mut {l230} DefId(0:802 ~ treengeling[2d04]::Parallel)
            // 4186: parallel:   l230 = READ | UNIQUE | NON_NULL, (empty)
        );
    }
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 4189: b"\0" as *const ... _char: typeof(_157) = *const {l233} i8
    // 4189: b"\0" as *const ... _char:   l233 = UNIQUE | NON_NULL, (empty)
    // 4189: b"\0" as *const u8: typeof(_158) = *const {l235} u8
    // 4189: b"\0" as *const u8:   l235 = UNIQUE | NON_NULL, (empty)
    // 4189: b"\0": typeof(_159) = *const {l237} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4189: b"\0":   l237 = UNIQUE | NON_NULL, (empty)
    // 4189: b"\0": typeof(_160) = & {l239} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4189: b"\0":   l239 = UNIQUE | NON_NULL, FIXED
    // 4189: b"\0": typeof(_159 = &raw const (*_160)) = *const {l600} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4189: b"\0":   l600 = UNIQUE | NON_NULL, (empty)
    // 4189: b"\0" as *const u8: typeof(_158 = move _159 as *const u8 (Pointer(ArrayToPointer))) = *const {l601} u8
    // 4189: b"\0" as *const u8:   l601 = UNIQUE | NON_NULL, (empty)
    // 4189: b"\0" as *const ... _char: typeof(_157 = move _158 as *const i8 (Misc)) = *const {l602} i8
    // 4189: b"\0" as *const ... _char:   l602 = UNIQUE | NON_NULL, (empty)
    // 4189: b"\0": typeof(_160 = const b"\x00") = & {l599} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4189: b"\0":   l599 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    msg(
        b"%lld conflicts, %.0f conflicts per second\0" as *const u8 as *const libc::c_char,
        // 4191: b"%lld conflict ... _char: typeof(_162) = *const {l242} i8
        // 4191: b"%lld conflict ... _char:   l242 = UNIQUE | NON_NULL, (empty)
        // 4191: b"%lld conflict ... st u8: typeof(_163) = *const {l244} u8
        // 4191: b"%lld conflict ... st u8:   l244 = UNIQUE | NON_NULL, (empty)
        // 4191: b"%lld conflict ... nd\0": typeof(_164) = *const {l246} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 4191: b"%lld conflict ... nd\0":   l246 = UNIQUE | NON_NULL, (empty)
        // 4191: b"%lld conflict ... nd\0": typeof(_165) = & {l248} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 4191: b"%lld conflict ... nd\0":   l248 = UNIQUE | NON_NULL, FIXED
        // 4191: b"%lld conflict ... nd\0": typeof(_165 = const b"%lld conflicts, %.0f conflicts per second\x00") = & {l603} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 4191: b"%lld conflict ... nd\0":   l603 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4191: b"%lld conflict ... _char: typeof(_162 = move _163 as *const i8 (Misc)) = *const {l606} i8
        // 4191: b"%lld conflict ... _char:   l606 = UNIQUE | NON_NULL, (empty)
        // 4191: b"%lld conflict ... nd\0": typeof(_164 = &raw const (*_165)) = *const {l604} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 4191: b"%lld conflict ... nd\0":   l604 = UNIQUE | NON_NULL, (empty)
        // 4191: b"%lld conflict ... st u8: typeof(_163 = move _164 as *const u8 (Pointer(ArrayToPointer))) = *const {l605} u8
        // 4191: b"%lld conflict ... st u8:   l605 = UNIQUE | NON_NULL, (empty)
        conflicts as libc::c_longlong,
        // 4192: conflicts: typeof(_167) = *mut {l251} i64
        // 4192: conflicts:   l251 = READ | UNIQUE | NON_NULL, (empty)
        avg(conflicts as libc::c_double, w),
        // 4193: conflicts: typeof(_171) = *mut {l256} i64
        // 4193: conflicts:   l256 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(
        b"%lld decisions, %.0f decisions per second\0" as *const u8 as *const libc::c_char,
        // 4196: b"%lld decision ... _char: typeof(_174) = *const {l260} i8
        // 4196: b"%lld decision ... _char:   l260 = UNIQUE | NON_NULL, (empty)
        // 4196: b"%lld decision ... st u8: typeof(_175) = *const {l262} u8
        // 4196: b"%lld decision ... st u8:   l262 = UNIQUE | NON_NULL, (empty)
        // 4196: b"%lld decision ... nd\0": typeof(_176) = *const {l264} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 4196: b"%lld decision ... nd\0":   l264 = UNIQUE | NON_NULL, (empty)
        // 4196: b"%lld decision ... nd\0": typeof(_177) = & {l266} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 4196: b"%lld decision ... nd\0":   l266 = UNIQUE | NON_NULL, FIXED
        // 4196: b"%lld decision ... st u8: typeof(_175 = move _176 as *const u8 (Pointer(ArrayToPointer))) = *const {l609} u8
        // 4196: b"%lld decision ... st u8:   l609 = UNIQUE | NON_NULL, (empty)
        // 4196: b"%lld decision ... _char: typeof(_174 = move _175 as *const i8 (Misc)) = *const {l610} i8
        // 4196: b"%lld decision ... _char:   l610 = UNIQUE | NON_NULL, (empty)
        // 4196: b"%lld decision ... nd\0": typeof(_176 = &raw const (*_177)) = *const {l608} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 4196: b"%lld decision ... nd\0":   l608 = UNIQUE | NON_NULL, (empty)
        // 4196: b"%lld decision ... nd\0": typeof(_177 = const b"%lld decisions, %.0f decisions per second\x00") = & {l607} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 4196: b"%lld decision ... nd\0":   l607 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        decisions as libc::c_longlong,
        // 4197: decisions: typeof(_179) = *mut {l269} i64
        // 4197: decisions:   l269 = READ | UNIQUE | NON_NULL, (empty)
        avg(decisions as libc::c_double, w),
        // 4198: decisions: typeof(_183) = *mut {l274} i64
        // 4198: decisions:   l274 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(
        b"%lld propagations, %.1f million propagations per second\0" as *const u8
        // 4201: b"%lld propagat ... _char: typeof(_186) = *const {l278} i8
        // 4201: b"%lld propagat ... _char:   l278 = UNIQUE | NON_NULL, (empty)
        // 4201: b"%lld propagat ... st u8: typeof(_187) = *const {l280} u8
        // 4201: b"%lld propagat ... st u8:   l280 = UNIQUE | NON_NULL, (empty)
        // 4201: b"%lld propagat ... nd\0": typeof(_188) = *const {l282} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 4201: b"%lld propagat ... nd\0":   l282 = UNIQUE | NON_NULL, (empty)
        // 4201: b"%lld propagat ... nd\0": typeof(_189) = & {l284} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 4201: b"%lld propagat ... nd\0":   l284 = UNIQUE | NON_NULL, FIXED
        // 4201: b"%lld propagat ... st u8: typeof(_187 = move _188 as *const u8 (Pointer(ArrayToPointer))) = *const {l613} u8
        // 4201: b"%lld propagat ... st u8:   l613 = UNIQUE | NON_NULL, (empty)
        // 4201: b"%lld propagat ... nd\0": typeof(_188 = &raw const (*_189)) = *const {l612} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 4201: b"%lld propagat ... nd\0":   l612 = UNIQUE | NON_NULL, (empty)
        // 4201: b"%lld propagat ... nd\0": typeof(_189 = const b"%lld propagations, %.1f million propagations per second\x00") = & {l611} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 4201: b"%lld propagat ... nd\0":   l611 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4201: b"%lld propagat ... _char: typeof(_186 = move _187 as *const i8 (Misc)) = *const {l614} i8
        // 4201: b"%lld propagat ... _char:   l614 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        propagations as libc::c_longlong,
        // 4203: propagations: typeof(_191) = *mut {l287} i64
        // 4203: propagations:   l287 = READ | UNIQUE | NON_NULL, (empty)
        avg(propagations as libc::c_double / 1e6f64, w),
        // 4204: propagations: typeof(_196) = *mut {l293} i64
        // 4204: propagations:   l293 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 4206: b"\0" as *const ... _char: typeof(_199) = *const {l297} i8
    // 4206: b"\0" as *const ... _char:   l297 = UNIQUE | NON_NULL, (empty)
    // 4206: b"\0" as *const u8: typeof(_200) = *const {l299} u8
    // 4206: b"\0" as *const u8:   l299 = UNIQUE | NON_NULL, (empty)
    // 4206: b"\0": typeof(_201) = *const {l301} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4206: b"\0":   l301 = UNIQUE | NON_NULL, (empty)
    // 4206: b"\0": typeof(_202) = & {l303} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4206: b"\0":   l303 = UNIQUE | NON_NULL, FIXED
    // 4206: b"\0" as *const u8: typeof(_200 = move _201 as *const u8 (Pointer(ArrayToPointer))) = *const {l617} u8
    // 4206: b"\0" as *const u8:   l617 = UNIQUE | NON_NULL, (empty)
    // 4206: b"\0": typeof(_202 = const b"\x00") = & {l615} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4206: b"\0":   l615 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 4206: b"\0" as *const ... _char: typeof(_199 = move _200 as *const i8 (Misc)) = *const {l618} i8
    // 4206: b"\0" as *const ... _char:   l618 = UNIQUE | NON_NULL, (empty)
    // 4206: b"\0": typeof(_201 = &raw const (*_202)) = *const {l616} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4206: b"\0":   l616 = UNIQUE | NON_NULL, (empty)
    msg(
        b"%lld tree-based look-ahead %.0f%% out of %d look-aheads\0" as *const u8
        // 4208: b"%lld tree-bas ... _char: typeof(_204) = *const {l306} i8
        // 4208: b"%lld tree-bas ... _char:   l306 = UNIQUE | NON_NULL, (empty)
        // 4208: b"%lld tree-bas ... st u8: typeof(_205) = *const {l308} u8
        // 4208: b"%lld tree-bas ... st u8:   l308 = UNIQUE | NON_NULL, (empty)
        // 4208: b"%lld tree-bas ... ds\0": typeof(_206) = *const {l310} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 4208: b"%lld tree-bas ... ds\0":   l310 = UNIQUE | NON_NULL, (empty)
        // 4208: b"%lld tree-bas ... ds\0": typeof(_207) = & {l312} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 4208: b"%lld tree-bas ... ds\0":   l312 = UNIQUE | NON_NULL, FIXED
        // 4208: b"%lld tree-bas ... ds\0": typeof(_207 = const b"%lld tree-based look-ahead %.0f%% out of %d look-aheads\x00") = & {l619} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 4208: b"%lld tree-bas ... ds\0":   l619 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4208: b"%lld tree-bas ... ds\0": typeof(_206 = &raw const (*_207)) = *const {l620} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
        // 4208: b"%lld tree-bas ... ds\0":   l620 = UNIQUE | NON_NULL, (empty)
        // 4208: b"%lld tree-bas ... _char: typeof(_204 = move _205 as *const i8 (Misc)) = *const {l622} i8
        // 4208: b"%lld tree-bas ... _char:   l622 = UNIQUE | NON_NULL, (empty)
        // 4208: b"%lld tree-bas ... st u8: typeof(_205 = move _206 as *const u8 (Pointer(ArrayToPointer))) = *const {l621} u8
        // 4208: b"%lld tree-bas ... st u8:   l621 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        treelkhd,
        // 4210: treelkhd: typeof(_209) = *mut {l315} i64
        // 4210: treelkhd:   l315 = READ | UNIQUE | NON_NULL, (empty)
        pcnt(treelkhd as libc::c_double, totalkhd as libc::c_double),
        // 4211: treelkhd: typeof(_213) = *mut {l320} i64
        // 4211: treelkhd:   l320 = READ | UNIQUE | NON_NULL, (empty)
        // 4211: totalkhd: typeof(_216) = *mut {l324} i64
        // 4211: totalkhd:   l324 = READ | UNIQUE | NON_NULL, (empty)
        totalkhd,
        // 4212: totalkhd: typeof(_218) = *mut {l327} i64
        // 4212: totalkhd:   l327 = READ | UNIQUE | NON_NULL, (empty)
    );
    let mut otherlkhdstr: *const libc::c_char = 0 as *const libc::c_char;
    // 4214: mut otherlkhdstr: typeof(_219) = *const {l329} i8
    // 4214: mut otherlkhdstr:   l329 = UNIQUE, (empty)
    // 4214: 0 as *const lib ... _char: typeof(_219 = const 0_usize as *const i8 (PointerFromExposedAddress)) = *const {l623} i8
    // 4214: 0 as *const lib ... _char:   l623 = UNIQUE, (empty)
    if relevancelkhd != 0 {
    // 4215: relevancelkhd: typeof(_223) = *mut {l334} i32
    // 4215: relevancelkhd:   l334 = READ | UNIQUE | NON_NULL, (empty)
        otherlkhdstr = b"relevance\0" as *const u8 as *const libc::c_char;
        // 4216: b"relevance\0"  ... st u8: typeof(_224) = *const {l336} u8
        // 4216: b"relevance\0"  ... st u8:   l336 = UNIQUE | NON_NULL, (empty)
        // 4216: b"relevance\0": typeof(_225) = *const {l338} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 4216: b"relevance\0":   l338 = UNIQUE | NON_NULL, (empty)
        // 4216: b"relevance\0": typeof(_226) = & {l340} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 4216: b"relevance\0":   l340 = UNIQUE | NON_NULL, FIXED
        // 4216: b"relevance\0": typeof(_225 = &raw const (*_226)) = *const {l625} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 4216: b"relevance\0":   l625 = UNIQUE | NON_NULL, (empty)
        // 4216: otherlkhdstr =  ... _char: typeof(_219 = move _224 as *const i8 (Misc)) = *const {l627} i8
        // 4216: otherlkhdstr =  ... _char:   l627 = UNIQUE | NON_NULL, (empty)
        // 4216: b"relevance\0": typeof(_226 = const b"relevance\x00") = & {l624} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
        // 4216: b"relevance\0":   l624 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4216: b"relevance\0"  ... st u8: typeof(_224 = move _225 as *const u8 (Pointer(ArrayToPointer))) = *const {l626} u8
        // 4216: b"relevance\0"  ... st u8:   l626 = UNIQUE | NON_NULL, (empty)
    } else if locslkhd != 0 {
    // 4217: locslkhd: typeof(_229) = *mut {l344} i32
    // 4217: locslkhd:   l344 = READ | UNIQUE | NON_NULL, (empty)
        otherlkhdstr = b"local-search\0" as *const u8 as *const libc::c_char;
        // 4218: b"local-search\ ... st u8: typeof(_230) = *const {l346} u8
        // 4218: b"local-search\ ... st u8:   l346 = UNIQUE | NON_NULL, (empty)
        // 4218: b"local-search\0": typeof(_231) = *const {l348} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 4218: b"local-search\0":   l348 = UNIQUE | NON_NULL, (empty)
        // 4218: b"local-search\0": typeof(_232) = & {l350} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 4218: b"local-search\0":   l350 = UNIQUE | NON_NULL, FIXED
        // 4218: b"local-search\ ... st u8: typeof(_230 = move _231 as *const u8 (Pointer(ArrayToPointer))) = *const {l630} u8
        // 4218: b"local-search\ ... st u8:   l630 = UNIQUE | NON_NULL, (empty)
        // 4218: b"local-search\0": typeof(_231 = &raw const (*_232)) = *const {l629} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 4218: b"local-search\0":   l629 = UNIQUE | NON_NULL, (empty)
        // 4218: otherlkhdstr =  ... _char: typeof(_219 = move _230 as *const i8 (Misc)) = *const {l631} i8
        // 4218: otherlkhdstr =  ... _char:   l631 = UNIQUE | NON_NULL, (empty)
        // 4218: b"local-search\0": typeof(_232 = const b"local-search\x00") = & {l628} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 4218: b"local-search\0":   l628 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    } else {
        otherlkhdstr = b"JWH\0" as *const u8 as *const libc::c_char;
        // 4220: b"JWH\0" as *co ... st u8: typeof(_233) = *const {l352} u8
        // 4220: b"JWH\0" as *co ... st u8:   l352 = UNIQUE | NON_NULL, (empty)
        // 4220: b"JWH\0": typeof(_234) = *const {l354} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 4220: b"JWH\0":   l354 = UNIQUE | NON_NULL, (empty)
        // 4220: b"JWH\0": typeof(_235) = & {l356} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 4220: b"JWH\0":   l356 = UNIQUE | NON_NULL, FIXED
        // 4220: b"JWH\0" as *co ... st u8: typeof(_233 = move _234 as *const u8 (Pointer(ArrayToPointer))) = *const {l634} u8
        // 4220: b"JWH\0" as *co ... st u8:   l634 = UNIQUE | NON_NULL, (empty)
        // 4220: b"JWH\0": typeof(_235 = const b"JWH\x00") = & {l632} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 4220: b"JWH\0":   l632 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4220: otherlkhdstr =  ... _char: typeof(_219 = move _233 as *const i8 (Misc)) = *const {l635} i8
        // 4220: otherlkhdstr =  ... _char:   l635 = UNIQUE | NON_NULL, (empty)
        // 4220: b"JWH\0": typeof(_234 = &raw const (*_235)) = *const {l633} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
        // 4220: b"JWH\0":   l633 = UNIQUE | NON_NULL, (empty)
    }
    msg(
        b"%lld %s based look-ahead %.0f%% out of %d look-aheads\0" as *const u8
        // 4223: b"%lld %s based ... _char: typeof(_237) = *const {l359} i8
        // 4223: b"%lld %s based ... _char:   l359 = UNIQUE | NON_NULL, (empty)
        // 4223: b"%lld %s based ... st u8: typeof(_238) = *const {l361} u8
        // 4223: b"%lld %s based ... st u8:   l361 = UNIQUE | NON_NULL, (empty)
        // 4223: b"%lld %s based ... ds\0": typeof(_239) = *const {l363} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 4223: b"%lld %s based ... ds\0":   l363 = UNIQUE | NON_NULL, (empty)
        // 4223: b"%lld %s based ... ds\0": typeof(_240) = & {l365} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 4223: b"%lld %s based ... ds\0":   l365 = UNIQUE | NON_NULL, FIXED
        // 4223: b"%lld %s based ... _char: typeof(_237 = move _238 as *const i8 (Misc)) = *const {l639} i8
        // 4223: b"%lld %s based ... _char:   l639 = UNIQUE | NON_NULL, (empty)
        // 4223: b"%lld %s based ... ds\0": typeof(_240 = const b"%lld %s based look-ahead %.0f%% out of %d look-aheads\x00") = & {l636} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 4223: b"%lld %s based ... ds\0":   l636 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4223: b"%lld %s based ... ds\0": typeof(_239 = &raw const (*_240)) = *const {l637} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
        // 4223: b"%lld %s based ... ds\0":   l637 = UNIQUE | NON_NULL, (empty)
        // 4223: b"%lld %s based ... st u8: typeof(_238 = move _239 as *const u8 (Pointer(ArrayToPointer))) = *const {l638} u8
        // 4223: b"%lld %s based ... st u8:   l638 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        totalkhd - treelkhd,
        // 4225: totalkhd: typeof(_243) = *mut {l369} i64
        // 4225: totalkhd:   l369 = READ | UNIQUE | NON_NULL, (empty)
        // 4225: treelkhd: typeof(_245) = *mut {l372} i64
        // 4225: treelkhd:   l372 = READ | UNIQUE | NON_NULL, (empty)
        otherlkhdstr,
        // 4226: otherlkhdstr: typeof(_247) = *const {l375} i8
        // 4226: otherlkhdstr:   l375 = UNIQUE, (empty)
        pcnt(
            (totalkhd - treelkhd) as libc::c_double,
            // 4228: totalkhd: typeof(_252) = *mut {l381} i64
            // 4228: totalkhd:   l381 = READ | UNIQUE | NON_NULL, (empty)
            // 4228: treelkhd: typeof(_254) = *mut {l384} i64
            // 4228: treelkhd:   l384 = READ | UNIQUE | NON_NULL, (empty)
            totalkhd as libc::c_double,
            // 4229: totalkhd: typeof(_258) = *mut {l389} i64
            // 4229: totalkhd:   l389 = READ | UNIQUE | NON_NULL, (empty)
        ),
        totalkhd,
        // 4231: totalkhd: typeof(_260) = *mut {l392} i64
        // 4231: totalkhd:   l392 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 4233: b"\0" as *const ... _char: typeof(_262) = *const {l395} i8
    // 4233: b"\0" as *const ... _char:   l395 = UNIQUE | NON_NULL, (empty)
    // 4233: b"\0" as *const u8: typeof(_263) = *const {l397} u8
    // 4233: b"\0" as *const u8:   l397 = UNIQUE | NON_NULL, (empty)
    // 4233: b"\0": typeof(_264) = *const {l399} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4233: b"\0":   l399 = UNIQUE | NON_NULL, (empty)
    // 4233: b"\0": typeof(_265) = & {l401} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4233: b"\0":   l401 = UNIQUE | NON_NULL, FIXED
    // 4233: b"\0": typeof(_265 = const b"\x00") = & {l640} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4233: b"\0":   l640 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 4233: b"\0": typeof(_264 = &raw const (*_265)) = *const {l641} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 4233: b"\0":   l641 = UNIQUE | NON_NULL, (empty)
    // 4233: b"\0" as *const u8: typeof(_263 = move _264 as *const u8 (Pointer(ArrayToPointer))) = *const {l642} u8
    // 4233: b"\0" as *const u8:   l642 = UNIQUE | NON_NULL, (empty)
    // 4233: b"\0" as *const ... _char: typeof(_262 = move _263 as *const i8 (Misc)) = *const {l643} i8
    // 4233: b"\0" as *const ... _char:   l643 = UNIQUE | NON_NULL, (empty)
    msg(
        b"%7d %3.0f%% lookaheads      %7.2f seconds %4.0f%%\0" as *const u8 as *const libc::c_char,
        // 4235: b"%7d %3.0f%% l ... _char: typeof(_267) = *const {l404} i8
        // 4235: b"%7d %3.0f%% l ... _char:   l404 = UNIQUE | NON_NULL, (empty)
        // 4235: b"%7d %3.0f%% l ... st u8: typeof(_268) = *const {l406} u8
        // 4235: b"%7d %3.0f%% l ... st u8:   l406 = UNIQUE | NON_NULL, (empty)
        // 4235: b"%7d %3.0f%% l ... %%\0": typeof(_269) = *const {l408} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4235: b"%7d %3.0f%% l ... %%\0":   l408 = UNIQUE | NON_NULL, (empty)
        // 4235: b"%7d %3.0f%% l ... %%\0": typeof(_270) = & {l410} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4235: b"%7d %3.0f%% l ... %%\0":   l410 = UNIQUE | NON_NULL, FIXED
        // 4235: b"%7d %3.0f%% l ... %%\0": typeof(_270 = const b"%7d %3.0f%% lookaheads      %7.2f seconds %4.0f%%\x00") = & {l644} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4235: b"%7d %3.0f%% l ... %%\0":   l644 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4235: b"%7d %3.0f%% l ... st u8: typeof(_268 = move _269 as *const u8 (Pointer(ArrayToPointer))) = *const {l646} u8
        // 4235: b"%7d %3.0f%% l ... st u8:   l646 = UNIQUE | NON_NULL, (empty)
        // 4235: b"%7d %3.0f%% l ... %%\0": typeof(_269 = &raw const (*_270)) = *const {l645} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4235: b"%7d %3.0f%% l ... %%\0":   l645 = UNIQUE | NON_NULL, (empty)
        // 4235: b"%7d %3.0f%% l ... _char: typeof(_267 = move _268 as *const i8 (Misc)) = *const {l647} i8
        // 4235: b"%7d %3.0f%% l ... _char:   l647 = UNIQUE | NON_NULL, (empty)
        js.lkhd,
        // 4236: js: typeof(_272) = *mut {l413} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4236: js:   l413 = READ | UNIQUE | NON_NULL, (empty)
        pcnt(js.lkhd as libc::c_double, js.cnt as libc::c_double),
        // 4237: js: typeof(_276) = *mut {l418} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4237: js:   l418 = READ | UNIQUE | NON_NULL, (empty)
        // 4237: js: typeof(_279) = *mut {l422} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4237: js:   l422 = READ | UNIQUE | NON_NULL, (empty)
        wct.lkhd,
        // 4238: wct: typeof(_281) = *mut {l425} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
        // 4238: wct:   l425 = READ | UNIQUE | NON_NULL, (empty)
        pcnt(wct.lkhd, w),
        // 4239: wct: typeof(_284) = *mut {l429} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
        // 4239: wct:   l429 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(
        b"%7d %3.0f%% splits          %7.2f seconds %4.0f%%\0" as *const u8 as *const libc::c_char,
        // 4242: b"%7d %3.0f%% s ... _char: typeof(_287) = *const {l433} i8
        // 4242: b"%7d %3.0f%% s ... _char:   l433 = UNIQUE | NON_NULL, (empty)
        // 4242: b"%7d %3.0f%% s ... st u8: typeof(_288) = *const {l435} u8
        // 4242: b"%7d %3.0f%% s ... st u8:   l435 = UNIQUE | NON_NULL, (empty)
        // 4242: b"%7d %3.0f%% s ... %%\0": typeof(_289) = *const {l437} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4242: b"%7d %3.0f%% s ... %%\0":   l437 = UNIQUE | NON_NULL, (empty)
        // 4242: b"%7d %3.0f%% s ... %%\0": typeof(_290) = & {l439} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4242: b"%7d %3.0f%% s ... %%\0":   l439 = UNIQUE | NON_NULL, FIXED
        // 4242: b"%7d %3.0f%% s ... st u8: typeof(_288 = move _289 as *const u8 (Pointer(ArrayToPointer))) = *const {l650} u8
        // 4242: b"%7d %3.0f%% s ... st u8:   l650 = UNIQUE | NON_NULL, (empty)
        // 4242: b"%7d %3.0f%% s ... %%\0": typeof(_290 = const b"%7d %3.0f%% splits          %7.2f seconds %4.0f%%\x00") = & {l648} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4242: b"%7d %3.0f%% s ... %%\0":   l648 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4242: b"%7d %3.0f%% s ... _char: typeof(_287 = move _288 as *const i8 (Misc)) = *const {l651} i8
        // 4242: b"%7d %3.0f%% s ... _char:   l651 = UNIQUE | NON_NULL, (empty)
        // 4242: b"%7d %3.0f%% s ... %%\0": typeof(_289 = &raw const (*_290)) = *const {l649} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4242: b"%7d %3.0f%% s ... %%\0":   l649 = UNIQUE | NON_NULL, (empty)
        js.split,
        // 4243: js: typeof(_292) = *mut {l442} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4243: js:   l442 = READ | UNIQUE | NON_NULL, (empty)
        pcnt(js.split as libc::c_double, js.cnt as libc::c_double),
        // 4244: js: typeof(_296) = *mut {l447} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4244: js:   l447 = READ | UNIQUE | NON_NULL, (empty)
        // 4244: js: typeof(_299) = *mut {l451} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4244: js:   l451 = READ | UNIQUE | NON_NULL, (empty)
        wct.split,
        // 4245: wct: typeof(_301) = *mut {l454} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
        // 4245: wct:   l454 = READ | UNIQUE | NON_NULL, (empty)
        pcnt(wct.split, w),
        // 4246: wct: typeof(_304) = *mut {l458} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
        // 4246: wct:   l458 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(
        b"%7d %3.0f%% simplifications %7.2f seconds %4.0f%%\0" as *const u8 as *const libc::c_char,
        // 4249: b"%7d %3.0f%% s ... _char: typeof(_307) = *const {l462} i8
        // 4249: b"%7d %3.0f%% s ... _char:   l462 = UNIQUE | NON_NULL, (empty)
        // 4249: b"%7d %3.0f%% s ... st u8: typeof(_308) = *const {l464} u8
        // 4249: b"%7d %3.0f%% s ... st u8:   l464 = UNIQUE | NON_NULL, (empty)
        // 4249: b"%7d %3.0f%% s ... %%\0": typeof(_309) = *const {l466} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4249: b"%7d %3.0f%% s ... %%\0":   l466 = UNIQUE | NON_NULL, (empty)
        // 4249: b"%7d %3.0f%% s ... %%\0": typeof(_310) = & {l468} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4249: b"%7d %3.0f%% s ... %%\0":   l468 = UNIQUE | NON_NULL, FIXED
        // 4249: b"%7d %3.0f%% s ... _char: typeof(_307 = move _308 as *const i8 (Misc)) = *const {l655} i8
        // 4249: b"%7d %3.0f%% s ... _char:   l655 = UNIQUE | NON_NULL, (empty)
        // 4249: b"%7d %3.0f%% s ... %%\0": typeof(_309 = &raw const (*_310)) = *const {l653} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4249: b"%7d %3.0f%% s ... %%\0":   l653 = UNIQUE | NON_NULL, (empty)
        // 4249: b"%7d %3.0f%% s ... st u8: typeof(_308 = move _309 as *const u8 (Pointer(ArrayToPointer))) = *const {l654} u8
        // 4249: b"%7d %3.0f%% s ... st u8:   l654 = UNIQUE | NON_NULL, (empty)
        // 4249: b"%7d %3.0f%% s ... %%\0": typeof(_310 = const b"%7d %3.0f%% simplifications %7.2f seconds %4.0f%%\x00") = & {l652} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4249: b"%7d %3.0f%% s ... %%\0":   l652 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        js.simp,
        // 4250: js: typeof(_312) = *mut {l471} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4250: js:   l471 = READ | UNIQUE | NON_NULL, (empty)
        pcnt(js.simp as libc::c_double, js.cnt as libc::c_double),
        // 4251: js: typeof(_316) = *mut {l476} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4251: js:   l476 = READ | UNIQUE | NON_NULL, (empty)
        // 4251: js: typeof(_319) = *mut {l480} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4251: js:   l480 = READ | UNIQUE | NON_NULL, (empty)
        wct.simp,
        // 4252: wct: typeof(_321) = *mut {l483} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
        // 4252: wct:   l483 = READ | UNIQUE | NON_NULL, (empty)
        pcnt(wct.simp, w),
        // 4253: wct: typeof(_324) = *mut {l487} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
        // 4253: wct:   l487 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(
        b"%7d %3.0f%% searches        %7.2f seconds %4.0f%%\0" as *const u8 as *const libc::c_char,
        // 4256: b"%7d %3.0f%% s ... _char: typeof(_327) = *const {l491} i8
        // 4256: b"%7d %3.0f%% s ... _char:   l491 = UNIQUE | NON_NULL, (empty)
        // 4256: b"%7d %3.0f%% s ... st u8: typeof(_328) = *const {l493} u8
        // 4256: b"%7d %3.0f%% s ... st u8:   l493 = UNIQUE | NON_NULL, (empty)
        // 4256: b"%7d %3.0f%% s ... %%\0": typeof(_329) = *const {l495} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4256: b"%7d %3.0f%% s ... %%\0":   l495 = UNIQUE | NON_NULL, (empty)
        // 4256: b"%7d %3.0f%% s ... %%\0": typeof(_330) = & {l497} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4256: b"%7d %3.0f%% s ... %%\0":   l497 = UNIQUE | NON_NULL, FIXED
        // 4256: b"%7d %3.0f%% s ... %%\0": typeof(_329 = &raw const (*_330)) = *const {l657} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4256: b"%7d %3.0f%% s ... %%\0":   l657 = UNIQUE | NON_NULL, (empty)
        // 4256: b"%7d %3.0f%% s ... st u8: typeof(_328 = move _329 as *const u8 (Pointer(ArrayToPointer))) = *const {l658} u8
        // 4256: b"%7d %3.0f%% s ... st u8:   l658 = UNIQUE | NON_NULL, (empty)
        // 4256: b"%7d %3.0f%% s ... _char: typeof(_327 = move _328 as *const i8 (Misc)) = *const {l659} i8
        // 4256: b"%7d %3.0f%% s ... _char:   l659 = UNIQUE | NON_NULL, (empty)
        // 4256: b"%7d %3.0f%% s ... %%\0": typeof(_330 = const b"%7d %3.0f%% searches        %7.2f seconds %4.0f%%\x00") = & {l656} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
        // 4256: b"%7d %3.0f%% s ... %%\0":   l656 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        js.search,
        // 4257: js: typeof(_332) = *mut {l500} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4257: js:   l500 = READ | UNIQUE | NON_NULL, (empty)
        pcnt(js.search as libc::c_double, js.cnt as libc::c_double),
        // 4258: js: typeof(_336) = *mut {l505} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4258: js:   l505 = READ | UNIQUE | NON_NULL, (empty)
        // 4258: js: typeof(_339) = *mut {l509} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4258: js:   l509 = READ | UNIQUE | NON_NULL, (empty)
        wct.search,
        // 4259: wct: typeof(_341) = *mut {l512} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
        // 4259: wct:   l512 = READ | UNIQUE | NON_NULL, (empty)
        pcnt(wct.search, w),
        // 4260: wct: typeof(_344) = *mut {l516} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
        // 4260: wct:   l516 = READ | UNIQUE | NON_NULL, (empty)
    );
    msg(
        b"======================================================\0" as *const u8
        // 4263: b"============= ... _char: typeof(_347) = *const {l520} i8
        // 4263: b"============= ... _char:   l520 = UNIQUE | NON_NULL, (empty)
        // 4263: b"============= ... st u8: typeof(_348) = *const {l522} u8
        // 4263: b"============= ... st u8:   l522 = UNIQUE | NON_NULL, (empty)
        // 4263: b"============= ... ==\0": typeof(_349) = *const {l524} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000037)) }]
        // 4263: b"============= ... ==\0":   l524 = UNIQUE | NON_NULL, (empty)
        // 4263: b"============= ... ==\0": typeof(_350) = & {l526} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000037)) }]
        // 4263: b"============= ... ==\0":   l526 = UNIQUE | NON_NULL, FIXED
        // 4263: b"============= ... ==\0": typeof(_350 = const b"======================================================\x00") = & {l660} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000037)) }]
        // 4263: b"============= ... ==\0":   l660 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        // 4263: b"============= ... st u8: typeof(_348 = move _349 as *const u8 (Pointer(ArrayToPointer))) = *const {l662} u8
        // 4263: b"============= ... st u8:   l662 = UNIQUE | NON_NULL, (empty)
        // 4263: b"============= ... _char: typeof(_347 = move _348 as *const i8 (Misc)) = *const {l663} i8
        // 4263: b"============= ... _char:   l663 = UNIQUE | NON_NULL, (empty)
        // 4263: b"============= ... ==\0": typeof(_349 = &raw const (*_350)) = *const {l661} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000037)) }]
        // 4263: b"============= ... ==\0":   l661 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
    );
    msg(
        b"%7d 100%% scheduled jobs  %7.2f seconds, %.0f MB\0" as *const u8 as *const libc::c_char,
        // 4267: b"%7d 100%% sch ... _char: typeof(_352) = *const {l529} i8
        // 4267: b"%7d 100%% sch ... _char:   l529 = UNIQUE | NON_NULL, (empty)
        // 4267: b"%7d 100%% sch ... st u8: typeof(_353) = *const {l531} u8
        // 4267: b"%7d 100%% sch ... st u8:   l531 = UNIQUE | NON_NULL, (empty)
        // 4267: b"%7d 100%% sch ... MB\0": typeof(_354) = *const {l533} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
        // 4267: b"%7d 100%% sch ... MB\0":   l533 = UNIQUE | NON_NULL, (empty)
        // 4267: b"%7d 100%% sch ... MB\0": typeof(_355) = & {l535} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
        // 4267: b"%7d 100%% sch ... MB\0":   l535 = UNIQUE | NON_NULL, FIXED
        // 4267: b"%7d 100%% sch ... MB\0": typeof(_354 = &raw const (*_355)) = *const {l665} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
        // 4267: b"%7d 100%% sch ... MB\0":   l665 = UNIQUE | NON_NULL, (empty)
        // 4267: b"%7d 100%% sch ... st u8: typeof(_353 = move _354 as *const u8 (Pointer(ArrayToPointer))) = *const {l666} u8
        // 4267: b"%7d 100%% sch ... st u8:   l666 = UNIQUE | NON_NULL, (empty)
        // 4267: b"%7d 100%% sch ... _char: typeof(_352 = move _353 as *const i8 (Misc)) = *const {l667} i8
        // 4267: b"%7d 100%% sch ... _char:   l667 = UNIQUE | NON_NULL, (empty)
        // 4267: b"%7d 100%% sch ... MB\0": typeof(_355 = const b"%7d 100%% scheduled jobs  %7.2f seconds, %.0f MB\x00") = & {l664} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
        // 4267: b"%7d 100%% sch ... MB\0":   l664 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
        js.cnt,
        // 4268: js: typeof(_357) = *mut {l538} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
        // 4268: js:   l538 = READ | UNIQUE | NON_NULL, (empty)
        w,
        maxbytes as libc::c_double / ((1 as libc::c_int) << 20 as libc::c_int) as libc::c_double,
        // 4270: maxbytes: typeof(_362) = *mut {l544} u64
        // 4270: maxbytes:   l544 = READ | UNIQUE | NON_NULL, (empty)
    );
}
unsafe extern "C" fn parallelwins(mut res: libc::c_int) {
    msg(
        b"%s parallel solver instance wins with result %d after %.2f seconds\0" as *const u8
        // 4275: b"%s parallel s ... _char: typeof(_3) = *const {l3} i8
        // 4275: b"%s parallel s ... _char:   l3 = UNIQUE | NON_NULL, (empty)
        // 4275: b"%s parallel s ... st u8: typeof(_4) = *const {l5} u8
        // 4275: b"%s parallel s ... st u8:   l5 = UNIQUE | NON_NULL, (empty)
        // 4275: b"%s parallel s ... ds\0": typeof(_5) = *const {l7} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000043)) }]
        // 4275: b"%s parallel s ... ds\0":   l7 = UNIQUE | NON_NULL, (empty)
        // 4275: b"%s parallel s ... ds\0": typeof(_6) = & {l9} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000043)) }]
        // 4275: b"%s parallel s ... ds\0":   l9 = UNIQUE | NON_NULL, FIXED
        // 4275: b"%s parallel s ... st u8: typeof(_4 = move _5 as *const u8 (Pointer(ArrayToPointer))) = *const {l112} u8
        // 4275: b"%s parallel s ... st u8:   l112 = UNIQUE | NON_NULL, (empty)
        // 4275: b"%s parallel s ... ds\0": typeof(_5 = &raw const (*_6)) = *const {l111} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000043)) }]
        // 4275: b"%s parallel s ... ds\0":   l111 = UNIQUE | NON_NULL, (empty)
        // 4275: b"%s parallel s ... _char: typeof(_3 = move _4 as *const i8 (Misc)) = *const {l113} i8
        // 4275: b"%s parallel s ... _char:   l113 = UNIQUE | NON_NULL, (empty)
        // 4275: b"%s parallel s ... ds\0": typeof(_6 = const b"%s parallel solver instance wins with result %d after %.2f seconds\x00") = & {l110} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000043)) }]
        // 4275: b"%s parallel s ... ds\0":   l110 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        if nparallel == 1 as libc::c_int {
        // 4277: if nparallel == ... har }: typeof(_7) = *const {l11} i8
        // 4277: if nparallel == ... har }:   l11 = UNIQUE | NON_NULL, (empty)
        // 4277: nparallel: typeof(_10) = *mut {l15} i32
        // 4277: nparallel:   l15 = UNIQUE | NON_NULL, (empty)
            b"first\0" as *const u8 as *const libc::c_char
            // 4278: b"first\0" as * ... st u8: typeof(_12) = *const {l18} u8
            // 4278: b"first\0" as * ... st u8:   l18 = UNIQUE | NON_NULL, (empty)
            // 4278: b"first\0": typeof(_13) = *const {l20} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 4278: b"first\0":   l20 = UNIQUE | NON_NULL, (empty)
            // 4278: b"first\0": typeof(_14) = & {l22} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 4278: b"first\0":   l22 = UNIQUE | NON_NULL, FIXED
            // 4278: b"first\0" as * ... st u8: typeof(_12 = move _13 as *const u8 (Pointer(ArrayToPointer))) = *const {l116} u8
            // 4278: b"first\0" as * ... st u8:   l116 = UNIQUE | NON_NULL, (empty)
            // 4278: b"first\0" as * ... _char: typeof(_7 = move _12 as *const i8 (Misc)) = *const {l117} i8
            // 4278: b"first\0" as * ... _char:   l117 = UNIQUE | NON_NULL, (empty)
            // 4278: b"first\0": typeof(_14 = const b"first\x00") = & {l114} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 4278: b"first\0":   l114 = UNIQUE | NON_NULL, (empty)
            // 4278: b"first\0": typeof(_13 = &raw const (*_14)) = *const {l115} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 4278: b"first\0":   l115 = UNIQUE | NON_NULL, (empty)
        } else {
            b"second\0" as *const u8 as *const libc::c_char
            // 4280: b"second\0" as  ... st u8: typeof(_15) = *const {l24} u8
            // 4280: b"second\0" as  ... st u8:   l24 = UNIQUE | NON_NULL, (empty)
            // 4280: b"second\0": typeof(_16) = *const {l26} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 4280: b"second\0":   l26 = UNIQUE | NON_NULL, (empty)
            // 4280: b"second\0": typeof(_17) = & {l28} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 4280: b"second\0":   l28 = UNIQUE | NON_NULL, FIXED
            // 4280: b"second\0": typeof(_16 = &raw const (*_17)) = *const {l119} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 4280: b"second\0":   l119 = UNIQUE | NON_NULL, (empty)
            // 4280: b"second\0" as  ... st u8: typeof(_15 = move _16 as *const u8 (Pointer(ArrayToPointer))) = *const {l120} u8
            // 4280: b"second\0" as  ... st u8:   l120 = UNIQUE | NON_NULL, (empty)
            // 4280: b"second\0": typeof(_17 = const b"second\x00") = & {l118} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 4280: b"second\0":   l118 = UNIQUE | NON_NULL, (empty)
            // 4280: b"second\0" as  ... _char: typeof(_7 = move _15 as *const i8 (Misc)) = *const {l121} i8
            // 4280: b"second\0" as  ... _char:   l121 = UNIQUE | NON_NULL, (empty)
        },
        res,
        getime(),
    );
    if res == 10 as libc::c_int {
        printf(b"s SATISFIABLE\n\0" as *const u8 as *const libc::c_char);
        // 4286: b"s SATISFIABLE ... _char: typeof(_25) = *const {l37} i8
        // 4286: b"s SATISFIABLE ... _char:   l37 = UNIQUE | NON_NULL, (empty)
        // 4286: b"s SATISFIABLE ... st u8: typeof(_26) = *const {l39} u8
        // 4286: b"s SATISFIABLE ... st u8:   l39 = UNIQUE | NON_NULL, (empty)
        // 4286: b"s SATISFIABLE\n\0": typeof(_27) = *const {l41} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 4286: b"s SATISFIABLE\n\0":   l41 = UNIQUE | NON_NULL, (empty)
        // 4286: b"s SATISFIABLE\n\0": typeof(_28) = & {l43} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 4286: b"s SATISFIABLE\n\0":   l43 = UNIQUE | NON_NULL, FIXED
        // 4286: b"s SATISFIABLE ... st u8: typeof(_26 = move _27 as *const u8 (Pointer(ArrayToPointer))) = *const {l124} u8
        // 4286: b"s SATISFIABLE ... st u8:   l124 = UNIQUE | NON_NULL, (empty)
        // 4286: b"s SATISFIABLE\n\0": typeof(_28 = const b"s SATISFIABLE\n\x00") = & {l122} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 4286: b"s SATISFIABLE\n\0":   l122 = UNIQUE | NON_NULL, (empty)
        // 4286: b"s SATISFIABLE\n\0": typeof(_27 = &raw const (*_28)) = *const {l123} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 4286: b"s SATISFIABLE\n\0":   l123 = UNIQUE | NON_NULL, (empty)
        // 4286: b"s SATISFIABLE ... _char: typeof(_25 = move _26 as *const i8 (Misc)) = *const {l125} i8
        // 4286: b"s SATISFIABLE ... _char:   l125 = UNIQUE | NON_NULL, (empty)
        if nowitness == 0 {
        // 4287: nowitness: typeof(_31) = *mut {l47} i32
        // 4287: nowitness:   l47 = UNIQUE | NON_NULL, (empty)
            fflush(stdout);
            // 4288: stdout: typeof(_33) = *mut {l50} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 4288: stdout:   l50 = UNIQUE | NON_NULL, (empty)
            // 4288: stdout: typeof(_34) = *mut {l52} *mut {l53} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 4288: stdout:   l52 = UNIQUE | NON_NULL, (empty)
            // 4288: stdout:   l53 = UNIQUE | NON_NULL, (empty)
            if nparallel > 1 as libc::c_int {
            // 4289: nparallel: typeof(_37) = *mut {l57} i32
            // 4289: nparallel:   l57 = UNIQUE | NON_NULL, (empty)
                lgljoin(root, parallel.lgl);
                // 4290: root: typeof(_40) = *mut {l61} LGL
                // 4290: root:   l61 = UNIQUE | NON_NULL, (empty)
                // 4290: root: typeof(_41) = *mut {l63} *mut {l64} LGL
                // 4290: root:   l63 = UNIQUE | NON_NULL, (empty)
                // 4290: root:   l64 = UNIQUE | NON_NULL, (empty)
                // 4290: parallel.lgl: typeof(_42) = *mut {l66} LGL
                // 4290: parallel.lgl:   l66 = UNIQUE | NON_NULL, (empty)
                // 4290: parallel: typeof(_43) = *mut {l68} DefId(0:802 ~ treengeling[2d04]::Parallel)
                // 4290: parallel:   l68 = UNIQUE | NON_NULL, (empty)
                witness(root);
                // 4291: root: typeof(_45) = *mut {l71} LGL
                // 4291: root:   l71 = UNIQUE | NON_NULL, (empty)
                // 4291: root: typeof(_46) = *mut {l73} *mut {l74} LGL
                // 4291: root:   l73 = UNIQUE | NON_NULL, (empty)
                // 4291: root:   l74 = UNIQUE | NON_NULL, (empty)
            } else {
                witness(parallel.lgl);
                // 4293: parallel.lgl: typeof(_48) = *mut {l77} LGL
                // 4293: parallel.lgl:   l77 = UNIQUE | NON_NULL, (empty)
                // 4293: parallel: typeof(_49) = *mut {l79} DefId(0:802 ~ treengeling[2d04]::Parallel)
                // 4293: parallel:   l79 = UNIQUE | NON_NULL, (empty)
            }
        }
    } else if res == 20 as libc::c_int {
        printf(b"s UNSATISFIABLE\n\0" as *const u8 as *const libc::c_char);
        // 4297: b"s UNSATISFIAB ... _char: typeof(_54) = *const {l85} i8
        // 4297: b"s UNSATISFIAB ... _char:   l85 = UNIQUE | NON_NULL, (empty)
        // 4297: b"s UNSATISFIAB ... st u8: typeof(_55) = *const {l87} u8
        // 4297: b"s UNSATISFIAB ... st u8:   l87 = UNIQUE | NON_NULL, (empty)
        // 4297: b"s UNSATISFIAB ... \n\0": typeof(_56) = *const {l89} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 4297: b"s UNSATISFIAB ... \n\0":   l89 = UNIQUE | NON_NULL, (empty)
        // 4297: b"s UNSATISFIAB ... \n\0": typeof(_57) = & {l91} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 4297: b"s UNSATISFIAB ... \n\0":   l91 = UNIQUE | NON_NULL, FIXED
        // 4297: b"s UNSATISFIAB ... st u8: typeof(_55 = move _56 as *const u8 (Pointer(ArrayToPointer))) = *const {l128} u8
        // 4297: b"s UNSATISFIAB ... st u8:   l128 = UNIQUE | NON_NULL, (empty)
        // 4297: b"s UNSATISFIAB ... \n\0": typeof(_56 = &raw const (*_57)) = *const {l127} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 4297: b"s UNSATISFIAB ... \n\0":   l127 = UNIQUE | NON_NULL, (empty)
        // 4297: b"s UNSATISFIAB ... _char: typeof(_54 = move _55 as *const i8 (Misc)) = *const {l129} i8
        // 4297: b"s UNSATISFIAB ... _char:   l129 = UNIQUE | NON_NULL, (empty)
        // 4297: b"s UNSATISFIAB ... \n\0": typeof(_57 = const b"s UNSATISFIABLE\n\x00") = & {l126} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 4297: b"s UNSATISFIAB ... \n\0":   l126 = UNIQUE | NON_NULL, (empty)
    } else {
        printf(b"c s UNKNOWN\n\0" as *const u8 as *const libc::c_char);
        // 4299: b"c s UNKNOWN\n ... _char: typeof(_60) = *const {l95} i8
        // 4299: b"c s UNKNOWN\n ... _char:   l95 = UNIQUE | NON_NULL, (empty)
        // 4299: b"c s UNKNOWN\n ... st u8: typeof(_61) = *const {l97} u8
        // 4299: b"c s UNKNOWN\n ... st u8:   l97 = UNIQUE | NON_NULL, (empty)
        // 4299: b"c s UNKNOWN\n\0": typeof(_62) = *const {l99} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 4299: b"c s UNKNOWN\n\0":   l99 = UNIQUE | NON_NULL, (empty)
        // 4299: b"c s UNKNOWN\n\0": typeof(_63) = & {l101} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 4299: b"c s UNKNOWN\n\0":   l101 = UNIQUE | NON_NULL, FIXED
        // 4299: b"c s UNKNOWN\n\0": typeof(_62 = &raw const (*_63)) = *const {l131} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 4299: b"c s UNKNOWN\n\0":   l131 = UNIQUE | NON_NULL, (empty)
        // 4299: b"c s UNKNOWN\n\0": typeof(_63 = const b"c s UNKNOWN\n\x00") = & {l130} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 4299: b"c s UNKNOWN\n\0":   l130 = UNIQUE | NON_NULL, (empty)
        // 4299: b"c s UNKNOWN\n ... _char: typeof(_60 = move _61 as *const i8 (Misc)) = *const {l133} i8
        // 4299: b"c s UNKNOWN\n ... _char:   l133 = UNIQUE | NON_NULL, (empty)
        // 4299: b"c s UNKNOWN\n ... st u8: typeof(_61 = move _62 as *const u8 (Pointer(ArrayToPointer))) = *const {l132} u8
        // 4299: b"c s UNKNOWN\n ... st u8:   l132 = UNIQUE | NON_NULL, (empty)
        abort();
    }
    fflush(stdout);
    // 4302: stdout: typeof(_66) = *mut {l105} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 4302: stdout:   l105 = UNIQUE | NON_NULL, (empty)
    // 4302: stdout: typeof(_67) = *mut {l107} *mut {l108} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 4302: stdout:   l107 = UNIQUE | NON_NULL, (empty)
    // 4302: stdout:   l108 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn finish() -> libc::c_int {
    let mut node: *mut Node = 0 as *mut Node;
    // 4305: mut node: typeof(_2) = *mut {l2} DefId(0:777 ~ treengeling[2d04]::Node)
    // 4305: mut node:   l2 = UNIQUE | NON_NULL, (empty)
    // 4305: 0 as *mut Node: typeof(_2 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l170} DefId(0:777 ~ treengeling[2d04]::Node)
    // 4305: 0 as *mut Node:   l170 = UNIQUE | NON_NULL, (empty)
    let mut i: libc::c_int = 0;
    let mut res: libc::c_int = 0;
    res = flush();
    if res != 0 {
        return res;
    }
    i = 0 as libc::c_int;
    while i < numnodes {
    // 4313: numnodes: typeof(_16) = *mut {l17} i32
    // 4313: numnodes:   l17 = UNIQUE | NON_NULL, (empty)
        node = *nodes.offset(i as isize);
        // 4314: *nodes.offset(i ... size): typeof(_17) = *mut {l19} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4314: *nodes.offset(i ... size):   l19 = UNIQUE | NON_NULL, (empty)
        // 4314: nodes.offset(i  ... size): typeof(_18) = *mut {l21} *mut {l22} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4314: nodes.offset(i  ... size):   l21 = UNIQUE | NON_NULL, (empty)
        // 4314: nodes.offset(i  ... size):   l22 = UNIQUE | NON_NULL, (empty)
        // 4314: nodes: typeof(_19) = *mut {l24} *mut {l25} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4314: nodes:   l24 = UNIQUE | NON_NULL, (empty)
        // 4314: nodes:   l25 = UNIQUE | NON_NULL, (empty)
        // 4314: nodes: typeof(_20) = *mut {l27} *mut {l28} *mut {l29} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4314: nodes:   l27 = UNIQUE | NON_NULL, (empty)
        // 4314: nodes:   l28 = UNIQUE | NON_NULL, (empty)
        // 4314: nodes:   l29 = UNIQUE | NON_NULL, (empty)
        if (*node).res == 10 as libc::c_int {
            break;
        }
        i += 1;
        i;
    }
    if i < numnodes {
    // 4321: numnodes: typeof(_37) = *mut {l47} i32
    // 4321: numnodes:   l47 = UNIQUE | NON_NULL, (empty)
        vrb(b"node %d sat\0" as *const u8 as *const libc::c_char, i);
        // 4322: b"node %d sat\0 ... _char: typeof(_39) = *const {l50} i8
        // 4322: b"node %d sat\0 ... _char:   l50 = UNIQUE | NON_NULL, (empty)
        // 4322: b"node %d sat\0 ... st u8: typeof(_40) = *const {l52} u8
        // 4322: b"node %d sat\0 ... st u8:   l52 = UNIQUE | NON_NULL, (empty)
        // 4322: b"node %d sat\0": typeof(_41) = *const {l54} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 4322: b"node %d sat\0":   l54 = UNIQUE | NON_NULL, (empty)
        // 4322: b"node %d sat\0": typeof(_42) = & {l56} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 4322: b"node %d sat\0":   l56 = UNIQUE | NON_NULL, FIXED
        // 4322: b"node %d sat\0": typeof(_42 = const b"node %d sat\x00") = & {l171} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 4322: b"node %d sat\0":   l171 = UNIQUE | NON_NULL, (empty)
        // 4322: b"node %d sat\0 ... _char: typeof(_39 = move _40 as *const i8 (Misc)) = *const {l174} i8
        // 4322: b"node %d sat\0 ... _char:   l174 = UNIQUE | NON_NULL, (empty)
        // 4322: b"node %d sat\0 ... st u8: typeof(_40 = move _41 as *const u8 (Pointer(ArrayToPointer))) = *const {l173} u8
        // 4322: b"node %d sat\0 ... st u8:   l173 = UNIQUE | NON_NULL, (empty)
        // 4322: b"node %d sat\0": typeof(_41 = &raw const (*_42)) = *const {l172} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 4322: b"node %d sat\0":   l172 = UNIQUE | NON_NULL, (empty)
        res = 10 as libc::c_int;
        node = *nodes.offset(i as isize);
        // 4324: *nodes.offset(i ... size): typeof(_45) = *mut {l60} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4324: *nodes.offset(i ... size):   l60 = UNIQUE | NON_NULL, (empty)
        // 4324: nodes.offset(i  ... size): typeof(_46) = *mut {l62} *mut {l63} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4324: nodes.offset(i  ... size):   l62 = UNIQUE | NON_NULL, (empty)
        // 4324: nodes.offset(i  ... size):   l63 = UNIQUE | NON_NULL, (empty)
        // 4324: nodes: typeof(_47) = *mut {l65} *mut {l66} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4324: nodes:   l65 = UNIQUE | NON_NULL, (empty)
        // 4324: nodes:   l66 = UNIQUE | NON_NULL, (empty)
        // 4324: nodes: typeof(_48) = *mut {l68} *mut {l69} *mut {l70} DefId(0:777 ~ treengeling[2d04]::Node)
        // 4324: nodes:   l68 = UNIQUE | NON_NULL, (empty)
        // 4324: nodes:   l69 = UNIQUE | NON_NULL, (empty)
        // 4324: nodes:   l70 = UNIQUE | NON_NULL, (empty)
        msg(
            b"winner [%d %lld] satisfiable in round %d after %lld nodes and %.2f seconds\0"
            // 4326: b"winner [%d %l ... _char: typeof(_52) = *const {l75} i8
            // 4326: b"winner [%d %l ... _char:   l75 = UNIQUE | NON_NULL, (empty)
            // 4326: b"winner [%d %l ... st u8: typeof(_53) = *const {l77} u8
            // 4326: b"winner [%d %l ... st u8:   l77 = UNIQUE | NON_NULL, (empty)
            // 4326: b"winner [%d %l ... ds\0": typeof(_54) = *const {l79} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000004b)) }]
            // 4326: b"winner [%d %l ... ds\0":   l79 = UNIQUE | NON_NULL, (empty)
            // 4326: b"winner [%d %l ... ds\0": typeof(_55) = & {l81} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000004b)) }]
            // 4326: b"winner [%d %l ... ds\0":   l81 = UNIQUE | NON_NULL, FIXED
            // 4326: b"winner [%d %l ... st u8: typeof(_53 = move _54 as *const u8 (Pointer(ArrayToPointer))) = *const {l177} u8
            // 4326: b"winner [%d %l ... st u8:   l177 = UNIQUE | NON_NULL, (empty)
            // 4326: b"winner [%d %l ... _char: typeof(_52 = move _53 as *const i8 (Misc)) = *const {l178} i8
            // 4326: b"winner [%d %l ... _char:   l178 = UNIQUE | NON_NULL, (empty)
            // 4326: b"winner [%d %l ... ds\0": typeof(_55 = const b"winner [%d %lld] satisfiable in round %d after %lld nodes and %.2f seconds\x00") = & {l175} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000004b)) }]
            // 4326: b"winner [%d %l ... ds\0":   l175 = UNIQUE | NON_NULL, (empty)
            // 4326: b"winner [%d %l ... ds\0": typeof(_54 = &raw const (*_55)) = *const {l176} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000004b)) }]
            // 4326: b"winner [%d %l ... ds\0":   l176 = UNIQUE | NON_NULL, (empty)
                as *const u8 as *const libc::c_char,
            (*node).depth,
            (*node).id as libc::c_longlong,
            round,
            // 4330: round: typeof(_59) = *mut {l86} i32
            // 4330: round:   l86 = UNIQUE | NON_NULL, (empty)
            ids as libc::c_longlong,
            // 4331: ids: typeof(_61) = *mut {l89} i64
            // 4331: ids:   l89 = UNIQUE | NON_NULL, (empty)
            getime(),
        );
        printf(b"s SATISFIABLE\n\0" as *const u8 as *const libc::c_char);
        // 4334: b"s SATISFIABLE ... _char: typeof(_64) = *const {l93} i8
        // 4334: b"s SATISFIABLE ... _char:   l93 = UNIQUE | NON_NULL, (empty)
        // 4334: b"s SATISFIABLE ... st u8: typeof(_65) = *const {l95} u8
        // 4334: b"s SATISFIABLE ... st u8:   l95 = UNIQUE | NON_NULL, (empty)
        // 4334: b"s SATISFIABLE\n\0": typeof(_66) = *const {l97} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 4334: b"s SATISFIABLE\n\0":   l97 = UNIQUE | NON_NULL, (empty)
        // 4334: b"s SATISFIABLE\n\0": typeof(_67) = & {l99} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 4334: b"s SATISFIABLE\n\0":   l99 = UNIQUE | NON_NULL, FIXED
        // 4334: b"s SATISFIABLE ... _char: typeof(_64 = move _65 as *const i8 (Misc)) = *const {l182} i8
        // 4334: b"s SATISFIABLE ... _char:   l182 = UNIQUE | NON_NULL, (empty)
        // 4334: b"s SATISFIABLE\n\0": typeof(_67 = const b"s SATISFIABLE\n\x00") = & {l179} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 4334: b"s SATISFIABLE\n\0":   l179 = UNIQUE | NON_NULL, (empty)
        // 4334: b"s SATISFIABLE ... st u8: typeof(_65 = move _66 as *const u8 (Pointer(ArrayToPointer))) = *const {l181} u8
        // 4334: b"s SATISFIABLE ... st u8:   l181 = UNIQUE | NON_NULL, (empty)
        // 4334: b"s SATISFIABLE\n\0": typeof(_66 = &raw const (*_67)) = *const {l180} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 4334: b"s SATISFIABLE\n\0":   l180 = UNIQUE | NON_NULL, (empty)
        if nowitness == 0 {
        // 4335: nowitness: typeof(_71) = *mut {l104} i32
        // 4335: nowitness:   l104 = UNIQUE | NON_NULL, (empty)
            fflush(stdout);
            // 4336: stdout: typeof(_73) = *mut {l107} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 4336: stdout:   l107 = UNIQUE | NON_NULL, (empty)
            // 4336: stdout: typeof(_74) = *mut {l109} *mut {l110} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 4336: stdout:   l109 = UNIQUE | NON_NULL, (empty)
            // 4336: stdout:   l110 = UNIQUE | NON_NULL, (empty)
            lgljoin(root, (*node).lgl);
            // 4337: root: typeof(_76) = *mut {l113} LGL
            // 4337: root:   l113 = UNIQUE | NON_NULL, (empty)
            // 4337: root: typeof(_77) = *mut {l115} *mut {l116} LGL
            // 4337: root:   l115 = UNIQUE | NON_NULL, (empty)
            // 4337: root:   l116 = UNIQUE | NON_NULL, (empty)
            // 4337: (*node).lgl: typeof(_78) = *mut {l118} LGL
            // 4337: (*node).lgl:   l118 = UNIQUE | NON_NULL, (empty)
            witness(root);
            // 4338: root: typeof(_80) = *mut {l121} LGL
            // 4338: root:   l121 = UNIQUE | NON_NULL, (empty)
            // 4338: root: typeof(_81) = *mut {l123} *mut {l124} LGL
            // 4338: root:   l123 = UNIQUE | NON_NULL, (empty)
            // 4338: root:   l124 = UNIQUE | NON_NULL, (empty)
        }
        fflush(stdout);
        // 4340: stdout: typeof(_83) = *mut {l127} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 4340: stdout:   l127 = UNIQUE | NON_NULL, (empty)
        // 4340: stdout: typeof(_84) = *mut {l129} *mut {l130} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 4340: stdout:   l129 = UNIQUE | NON_NULL, (empty)
        // 4340: stdout:   l130 = UNIQUE | NON_NULL, (empty)
    } else if noparallel == 0 {
    // 4341: noparallel: typeof(_87) = *mut {l134} i32
    // 4341: noparallel:   l134 = UNIQUE | NON_NULL, (empty)
        lockdone();
        res = parallel.res;
        // 4343: parallel: typeof(_90) = *mut {l138} DefId(0:802 ~ treengeling[2d04]::Parallel)
        // 4343: parallel:   l138 = UNIQUE | NON_NULL, (empty)
        unlockdone();
        vrb(
            b"no node result thus parallel result %d\0" as *const u8 as *const libc::c_char,
            // 4346: b"no node resul ... _char: typeof(_93) = *const {l142} i8
            // 4346: b"no node resul ... _char:   l142 = UNIQUE | NON_NULL, (empty)
            // 4346: b"no node resul ... st u8: typeof(_94) = *const {l144} u8
            // 4346: b"no node resul ... st u8:   l144 = UNIQUE | NON_NULL, (empty)
            // 4346: b"no node resul ... %d\0": typeof(_95) = *const {l146} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 4346: b"no node resul ... %d\0":   l146 = UNIQUE | NON_NULL, (empty)
            // 4346: b"no node resul ... %d\0": typeof(_96) = & {l148} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 4346: b"no node resul ... %d\0":   l148 = UNIQUE | NON_NULL, FIXED
            // 4346: b"no node resul ... %d\0": typeof(_95 = &raw const (*_96)) = *const {l184} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 4346: b"no node resul ... %d\0":   l184 = UNIQUE | NON_NULL, (empty)
            // 4346: b"no node resul ... _char: typeof(_93 = move _94 as *const i8 (Misc)) = *const {l186} i8
            // 4346: b"no node resul ... _char:   l186 = UNIQUE | NON_NULL, (empty)
            // 4346: b"no node resul ... st u8: typeof(_94 = move _95 as *const u8 (Pointer(ArrayToPointer))) = *const {l185} u8
            // 4346: b"no node resul ... st u8:   l185 = UNIQUE | NON_NULL, (empty)
            // 4346: b"no node resul ... %d\0": typeof(_96 = const b"no node result thus parallel result %d\x00") = & {l183} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 4346: b"no node resul ... %d\0":   l183 = UNIQUE | NON_NULL, (empty)
            res,
        );
        if res != 0 {
            parallelwins(res);
        }
    } else {
        vrb(
            b"no satisfiable node found but still %d nodes left in round %d\0" as *const u8
            // 4354: b"no satisfiabl ... _char: typeof(_103) = *const {l156} i8
            // 4354: b"no satisfiabl ... _char:   l156 = UNIQUE | NON_NULL, (empty)
            // 4354: b"no satisfiabl ... st u8: typeof(_104) = *const {l158} u8
            // 4354: b"no satisfiabl ... st u8:   l158 = UNIQUE | NON_NULL, (empty)
            // 4354: b"no satisfiabl ... %d\0": typeof(_105) = *const {l160} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003e)) }]
            // 4354: b"no satisfiabl ... %d\0":   l160 = UNIQUE | NON_NULL, (empty)
            // 4354: b"no satisfiabl ... %d\0": typeof(_106) = & {l162} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003e)) }]
            // 4354: b"no satisfiabl ... %d\0":   l162 = UNIQUE | NON_NULL, FIXED
            // 4354: b"no satisfiabl ... %d\0": typeof(_106 = const b"no satisfiable node found but still %d nodes left in round %d\x00") = & {l187} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003e)) }]
            // 4354: b"no satisfiabl ... %d\0":   l187 = UNIQUE | NON_NULL, (empty)
            // 4354: b"no satisfiabl ... st u8: typeof(_104 = move _105 as *const u8 (Pointer(ArrayToPointer))) = *const {l189} u8
            // 4354: b"no satisfiabl ... st u8:   l189 = UNIQUE | NON_NULL, (empty)
            // 4354: b"no satisfiabl ... _char: typeof(_103 = move _104 as *const i8 (Misc)) = *const {l190} i8
            // 4354: b"no satisfiabl ... _char:   l190 = UNIQUE | NON_NULL, (empty)
            // 4354: b"no satisfiabl ... %d\0": typeof(_105 = &raw const (*_106)) = *const {l188} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003e)) }]
            // 4354: b"no satisfiabl ... %d\0":   l188 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
            numnodes,
            // 4356: numnodes: typeof(_108) = *mut {l165} i32
            // 4356: numnodes:   l165 = UNIQUE | NON_NULL, (empty)
            round,
            // 4357: round: typeof(_110) = *mut {l168} i32
            // 4357: round:   l168 = UNIQUE | NON_NULL, (empty)
        );
    }
    return res;
}
static catchedsig: libc::c_int = 0;
static sig_int_handler: Option<unsafe extern "C" fn(libc::c_int) -> ()> = None;
static sig_segv_handler: Option<unsafe extern "C" fn(libc::c_int) -> ()> = None;
static sig_abrt_handler: Option<unsafe extern "C" fn(libc::c_int) -> ()> = None;
static sig_term_handler: Option<unsafe extern "C" fn(libc::c_int) -> ()> = None;
unsafe extern "C" fn resetsighandlers() {
    signal(2 as libc::c_int, sig_int_handler);
    // 4368: sig_int_handler: typeof(_4) = *mut {l4} DefId(2:47492 ~ core[480a]::option::Option)<fn(i32) -> ()>
    // 4368: sig_int_handler:   l4 = UNIQUE | NON_NULL, (empty)
    signal(11 as libc::c_int, sig_segv_handler);
    // 4369: sig_segv_handler: typeof(_8) = *mut {l9} DefId(2:47492 ~ core[480a]::option::Option)<fn(i32) -> ()>
    // 4369: sig_segv_handler:   l9 = UNIQUE | NON_NULL, (empty)
    signal(6 as libc::c_int, sig_abrt_handler);
    // 4370: sig_abrt_handler: typeof(_12) = *mut {l14} DefId(2:47492 ~ core[480a]::option::Option)<fn(i32) -> ()>
    // 4370: sig_abrt_handler:   l14 = UNIQUE | NON_NULL, (empty)
    signal(15 as libc::c_int, sig_term_handler);
    // 4371: sig_term_handler: typeof(_16) = *mut {l19} DefId(2:47492 ~ core[480a]::option::Option)<fn(i32) -> ()>
    // 4371: sig_term_handler:   l19 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn caughtsigmsg(mut sig: libc::c_int) {
    if verbose == 0 {
    // 4374: verbose: typeof(_5) = *mut {l5} i32
    // 4374: verbose:   l5 = UNIQUE | NON_NULL, (empty)
        return;
    }
    printf(
        b"c\nc CAUGHT SIGNAL %d\nc\n\0" as *const u8 as *const libc::c_char,
        // 4378: b"c\nc CAUGHT S ... _char: typeof(_8) = *const {l9} i8
        // 4378: b"c\nc CAUGHT S ... _char:   l9 = UNIQUE | NON_NULL, (empty)
        // 4378: b"c\nc CAUGHT S ... st u8: typeof(_9) = *const {l11} u8
        // 4378: b"c\nc CAUGHT S ... st u8:   l11 = UNIQUE | NON_NULL, (empty)
        // 4378: b"c\nc CAUGHT S ... \n\0": typeof(_10) = *const {l13} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 4378: b"c\nc CAUGHT S ... \n\0":   l13 = UNIQUE | NON_NULL, (empty)
        // 4378: b"c\nc CAUGHT S ... \n\0": typeof(_11) = & {l15} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 4378: b"c\nc CAUGHT S ... \n\0":   l15 = UNIQUE | NON_NULL, FIXED
        // 4378: b"c\nc CAUGHT S ... st u8: typeof(_9 = move _10 as *const u8 (Pointer(ArrayToPointer))) = *const {l26} u8
        // 4378: b"c\nc CAUGHT S ... st u8:   l26 = UNIQUE | NON_NULL, (empty)
        // 4378: b"c\nc CAUGHT S ... \n\0": typeof(_10 = &raw const (*_11)) = *const {l25} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 4378: b"c\nc CAUGHT S ... \n\0":   l25 = UNIQUE | NON_NULL, (empty)
        // 4378: b"c\nc CAUGHT S ... \n\0": typeof(_11 = const b"c\nc CAUGHT SIGNAL %d\nc\n\x00") = & {l24} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
        // 4378: b"c\nc CAUGHT S ... \n\0":   l24 = UNIQUE | NON_NULL, (empty)
        // 4378: b"c\nc CAUGHT S ... _char: typeof(_8 = move _9 as *const i8 (Misc)) = *const {l27} i8
        // 4378: b"c\nc CAUGHT S ... _char:   l27 = UNIQUE | NON_NULL, (empty)
        sig,
    );
    fflush(stdout);
    // 4381: stdout: typeof(_14) = *mut {l19} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 4381: stdout:   l19 = UNIQUE | NON_NULL, (empty)
    // 4381: stdout: typeof(_15) = *mut {l21} *mut {l22} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 4381: stdout:   l21 = UNIQUE | NON_NULL, (empty)
    // 4381: stdout:   l22 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn catchsig(mut sig: libc::c_int) {
    if catchedsig == 0 {
    // 4384: catchedsig: typeof(_5) = *mut {l5} i32
    // 4384: catchedsig:   l5 = UNIQUE | NON_NULL, (empty)
        fputs(
            b"c s UNKNOWN\n\0" as *const u8 as *const libc::c_char,
            // 4386: b"c s UNKNOWN\n ... _char: typeof(_7) = *const {l8} i8
            // 4386: b"c s UNKNOWN\n ... _char:   l8 = UNIQUE | NON_NULL, (empty)
            // 4386: b"c s UNKNOWN\n ... st u8: typeof(_8) = *const {l10} u8
            // 4386: b"c s UNKNOWN\n ... st u8:   l10 = UNIQUE | NON_NULL, (empty)
            // 4386: b"c s UNKNOWN\n\0": typeof(_9) = *const {l12} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4386: b"c s UNKNOWN\n\0":   l12 = UNIQUE | NON_NULL, (empty)
            // 4386: b"c s UNKNOWN\n\0": typeof(_10) = & {l14} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4386: b"c s UNKNOWN\n\0":   l14 = UNIQUE | NON_NULL, FIXED
            // 4386: b"c s UNKNOWN\n\0": typeof(_9 = &raw const (*_10)) = *const {l40} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4386: b"c s UNKNOWN\n\0":   l40 = UNIQUE | NON_NULL, (empty)
            // 4386: b"c s UNKNOWN\n ... st u8: typeof(_8 = move _9 as *const u8 (Pointer(ArrayToPointer))) = *const {l41} u8
            // 4386: b"c s UNKNOWN\n ... st u8:   l41 = UNIQUE | NON_NULL, (empty)
            // 4386: b"c s UNKNOWN\n ... _char: typeof(_7 = move _8 as *const i8 (Misc)) = *const {l42} i8
            // 4386: b"c s UNKNOWN\n ... _char:   l42 = UNIQUE | NON_NULL, (empty)
            // 4386: b"c s UNKNOWN\n\0": typeof(_10 = const b"c s UNKNOWN\n\x00") = & {l39} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4386: b"c s UNKNOWN\n\0":   l39 = UNIQUE | NON_NULL, (empty)
            stdout,
            // 4387: stdout: typeof(_11) = *mut {l16} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 4387: stdout:   l16 = UNIQUE | NON_NULL, (empty)
            // 4387: stdout: typeof(_12) = *mut {l18} *mut {l19} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 4387: stdout:   l18 = UNIQUE | NON_NULL, (empty)
            // 4387: stdout:   l19 = UNIQUE | NON_NULL, (empty)
        );
        fflush(stdout);
        // 4389: stdout: typeof(_14) = *mut {l22} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 4389: stdout:   l22 = UNIQUE | NON_NULL, (empty)
        // 4389: stdout: typeof(_15) = *mut {l24} *mut {l25} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 4389: stdout:   l24 = UNIQUE | NON_NULL, (empty)
        // 4389: stdout:   l25 = UNIQUE | NON_NULL, (empty)
        catchedsig = 1 as libc::c_int;
        // 4390: catchedsig: typeof(_17) = *mut {l28} i32
        // 4390: catchedsig:   l28 = UNIQUE | NON_NULL, (empty)
        caughtsigmsg(sig);
        mergestats();
        stats();
        caughtsigmsg(sig);
    }
    resetsighandlers();
    raise(sig);
}
unsafe extern "C" fn setsighandlers() {
    sig_int_handler = signal(
    // 4400: sig_int_handler: typeof(_5) = *mut {l5} DefId(2:47492 ~ core[480a]::option::Option)<fn(i32) -> ()>
    // 4400: sig_int_handler:   l5 = UNIQUE | NON_NULL, (empty)
        2 as libc::c_int,
        Some(catchsig as unsafe extern "C" fn(libc::c_int) -> ()),
    );
    sig_segv_handler = signal(
    // 4404: sig_segv_handler: typeof(_10) = *mut {l11} DefId(2:47492 ~ core[480a]::option::Option)<fn(i32) -> ()>
    // 4404: sig_segv_handler:   l11 = UNIQUE | NON_NULL, (empty)
        11 as libc::c_int,
        Some(catchsig as unsafe extern "C" fn(libc::c_int) -> ()),
    );
    sig_abrt_handler = signal(
    // 4408: sig_abrt_handler: typeof(_15) = *mut {l17} DefId(2:47492 ~ core[480a]::option::Option)<fn(i32) -> ()>
    // 4408: sig_abrt_handler:   l17 = UNIQUE | NON_NULL, (empty)
        6 as libc::c_int,
        Some(catchsig as unsafe extern "C" fn(libc::c_int) -> ()),
    );
    sig_term_handler = signal(
    // 4412: sig_term_handler: typeof(_20) = *mut {l23} DefId(2:47492 ~ core[480a]::option::Option)<fn(i32) -> ()>
    // 4412: sig_term_handler:   l23 = UNIQUE | NON_NULL, (empty)
        15 as libc::c_int,
        Some(catchsig as unsafe extern "C" fn(libc::c_int) -> ()),
    );
}
unsafe extern "C" fn init() {
    wct.epoch = currentime();
    // 4418: wct: typeof(_2) = *mut {l2} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
    // 4418: wct:   l2 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.confs.mutex, 0 as *const pthread_mutexattr_t);
    // 4419: &mut lock.confs ... mutex: typeof(_4) = *mut {l5} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4419: &mut lock.confs ... mutex:   l5 = UNIQUE | NON_NULL, (empty)
    // 4419: &mut lock.confs ... mutex: typeof(_5) = &mut {l7} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4419: &mut lock.confs ... mutex:   l7 = UNIQUE | NON_NULL, (empty)
    // 4419: lock: typeof(_6) = *mut {l9} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4419: lock:   l9 = UNIQUE | NON_NULL, (empty)
    // 4419: 0 as *const pth ... ttr_t: typeof(_7) = *const {l11} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4419: 0 as *const pth ... ttr_t:   l11 = UNIQUE | NON_NULL, (empty)
    // 4419: 0 as *const pth ... ttr_t: typeof(_7 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l123} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4419: 0 as *const pth ... ttr_t:   l123 = UNIQUE | NON_NULL, (empty)
    // 4419: &mut lock.confs ... mutex: typeof(_5 = &mut (((*_6).0: Lock).0: pthread_mutex_t)) = &mut {l121} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4419: &mut lock.confs ... mutex:   l121 = UNIQUE | NON_NULL, (empty)
    // 4419: &mut lock.confs ... mutex: typeof(_4 = &raw mut (*_5)) = *mut {l122} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4419: &mut lock.confs ... mutex:   l122 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.done.mutex, 0 as *const pthread_mutexattr_t);
    // 4420: &mut lock.done.mutex: typeof(_9) = *mut {l14} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4420: &mut lock.done.mutex:   l14 = UNIQUE | NON_NULL, (empty)
    // 4420: &mut lock.done.mutex: typeof(_10) = &mut {l16} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4420: &mut lock.done.mutex:   l16 = UNIQUE | NON_NULL, (empty)
    // 4420: lock: typeof(_11) = *mut {l18} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4420: lock:   l18 = UNIQUE | NON_NULL, (empty)
    // 4420: 0 as *const pth ... ttr_t: typeof(_12) = *const {l20} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4420: 0 as *const pth ... ttr_t:   l20 = UNIQUE | NON_NULL, (empty)
    // 4420: &mut lock.done.mutex: typeof(_9 = &raw mut (*_10)) = *mut {l125} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4420: &mut lock.done.mutex:   l125 = UNIQUE | NON_NULL, (empty)
    // 4420: 0 as *const pth ... ttr_t: typeof(_12 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l126} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4420: 0 as *const pth ... ttr_t:   l126 = UNIQUE | NON_NULL, (empty)
    // 4420: &mut lock.done.mutex: typeof(_10 = &mut (((*_11).1: Lock).0: pthread_mutex_t)) = &mut {l124} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4420: &mut lock.done.mutex:   l124 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.leafs.mutex, 0 as *const pthread_mutexattr_t);
    // 4421: &mut lock.leafs ... mutex: typeof(_14) = *mut {l23} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4421: &mut lock.leafs ... mutex:   l23 = UNIQUE | NON_NULL, (empty)
    // 4421: &mut lock.leafs ... mutex: typeof(_15) = &mut {l25} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4421: &mut lock.leafs ... mutex:   l25 = UNIQUE | NON_NULL, (empty)
    // 4421: lock: typeof(_16) = *mut {l27} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4421: lock:   l27 = UNIQUE | NON_NULL, (empty)
    // 4421: 0 as *const pth ... ttr_t: typeof(_17) = *const {l29} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4421: 0 as *const pth ... ttr_t:   l29 = UNIQUE | NON_NULL, (empty)
    // 4421: &mut lock.leafs ... mutex: typeof(_15 = &mut (((*_16).2: Lock).0: pthread_mutex_t)) = &mut {l127} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4421: &mut lock.leafs ... mutex:   l127 = UNIQUE | NON_NULL, (empty)
    // 4421: 0 as *const pth ... ttr_t: typeof(_17 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l129} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4421: 0 as *const pth ... ttr_t:   l129 = UNIQUE | NON_NULL, (empty)
    // 4421: &mut lock.leafs ... mutex: typeof(_14 = &raw mut (*_15)) = *mut {l128} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4421: &mut lock.leafs ... mutex:   l128 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.mem.mutex, 0 as *const pthread_mutexattr_t);
    // 4422: &mut lock.mem.mutex: typeof(_19) = *mut {l32} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4422: &mut lock.mem.mutex:   l32 = UNIQUE | NON_NULL, (empty)
    // 4422: &mut lock.mem.mutex: typeof(_20) = &mut {l34} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4422: &mut lock.mem.mutex:   l34 = UNIQUE | NON_NULL, (empty)
    // 4422: lock: typeof(_21) = *mut {l36} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4422: lock:   l36 = UNIQUE | NON_NULL, (empty)
    // 4422: 0 as *const pth ... ttr_t: typeof(_22) = *const {l38} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4422: 0 as *const pth ... ttr_t:   l38 = UNIQUE | NON_NULL, (empty)
    // 4422: 0 as *const pth ... ttr_t: typeof(_22 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l132} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4422: 0 as *const pth ... ttr_t:   l132 = UNIQUE | NON_NULL, (empty)
    // 4422: &mut lock.mem.mutex: typeof(_20 = &mut (((*_21).3: Lock).0: pthread_mutex_t)) = &mut {l130} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4422: &mut lock.mem.mutex:   l130 = UNIQUE | NON_NULL, (empty)
    // 4422: &mut lock.mem.mutex: typeof(_19 = &raw mut (*_20)) = *mut {l131} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4422: &mut lock.mem.mutex:   l131 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.msg.mutex, 0 as *const pthread_mutexattr_t);
    // 4423: &mut lock.msg.mutex: typeof(_24) = *mut {l41} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4423: &mut lock.msg.mutex:   l41 = UNIQUE | NON_NULL, (empty)
    // 4423: &mut lock.msg.mutex: typeof(_25) = &mut {l43} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4423: &mut lock.msg.mutex:   l43 = UNIQUE | NON_NULL, (empty)
    // 4423: lock: typeof(_26) = *mut {l45} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4423: lock:   l45 = UNIQUE | NON_NULL, (empty)
    // 4423: 0 as *const pth ... ttr_t: typeof(_27) = *const {l47} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4423: 0 as *const pth ... ttr_t:   l47 = UNIQUE | NON_NULL, (empty)
    // 4423: &mut lock.msg.mutex: typeof(_24 = &raw mut (*_25)) = *mut {l134} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4423: &mut lock.msg.mutex:   l134 = UNIQUE | NON_NULL, (empty)
    // 4423: 0 as *const pth ... ttr_t: typeof(_27 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l135} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4423: 0 as *const pth ... ttr_t:   l135 = UNIQUE | NON_NULL, (empty)
    // 4423: &mut lock.msg.mutex: typeof(_25 = &mut (((*_26).4: Lock).0: pthread_mutex_t)) = &mut {l133} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4423: &mut lock.msg.mutex:   l133 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.nodes.mutex, 0 as *const pthread_mutexattr_t);
    // 4424: &mut lock.nodes ... mutex: typeof(_29) = *mut {l50} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4424: &mut lock.nodes ... mutex:   l50 = UNIQUE | NON_NULL, (empty)
    // 4424: &mut lock.nodes ... mutex: typeof(_30) = &mut {l52} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4424: &mut lock.nodes ... mutex:   l52 = UNIQUE | NON_NULL, (empty)
    // 4424: lock: typeof(_31) = *mut {l54} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4424: lock:   l54 = UNIQUE | NON_NULL, (empty)
    // 4424: 0 as *const pth ... ttr_t: typeof(_32) = *const {l56} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4424: 0 as *const pth ... ttr_t:   l56 = UNIQUE | NON_NULL, (empty)
    // 4424: &mut lock.nodes ... mutex: typeof(_30 = &mut (((*_31).5: Lock).0: pthread_mutex_t)) = &mut {l136} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4424: &mut lock.nodes ... mutex:   l136 = UNIQUE | NON_NULL, (empty)
    // 4424: 0 as *const pth ... ttr_t: typeof(_32 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l138} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4424: 0 as *const pth ... ttr_t:   l138 = UNIQUE | NON_NULL, (empty)
    // 4424: &mut lock.nodes ... mutex: typeof(_29 = &raw mut (*_30)) = *mut {l137} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4424: &mut lock.nodes ... mutex:   l137 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.parleafs.mutex, 0 as *const pthread_mutexattr_t);
    // 4425: &mut lock.parle ... mutex: typeof(_34) = *mut {l59} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4425: &mut lock.parle ... mutex:   l59 = UNIQUE | NON_NULL, (empty)
    // 4425: &mut lock.parle ... mutex: typeof(_35) = &mut {l61} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4425: &mut lock.parle ... mutex:   l61 = UNIQUE | NON_NULL, (empty)
    // 4425: lock: typeof(_36) = *mut {l63} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4425: lock:   l63 = UNIQUE | NON_NULL, (empty)
    // 4425: 0 as *const pth ... ttr_t: typeof(_37) = *const {l65} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4425: 0 as *const pth ... ttr_t:   l65 = UNIQUE | NON_NULL, (empty)
    // 4425: &mut lock.parle ... mutex: typeof(_35 = &mut (((*_36).7: Lock).0: pthread_mutex_t)) = &mut {l139} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4425: &mut lock.parle ... mutex:   l139 = UNIQUE | NON_NULL, (empty)
    // 4425: 0 as *const pth ... ttr_t: typeof(_37 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l141} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4425: 0 as *const pth ... ttr_t:   l141 = UNIQUE | NON_NULL, (empty)
    // 4425: &mut lock.parle ... mutex: typeof(_34 = &raw mut (*_35)) = *mut {l140} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4425: &mut lock.parle ... mutex:   l140 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.parstats.mutex, 0 as *const pthread_mutexattr_t);
    // 4426: &mut lock.parst ... mutex: typeof(_39) = *mut {l68} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4426: &mut lock.parst ... mutex:   l68 = UNIQUE | NON_NULL, (empty)
    // 4426: &mut lock.parst ... mutex: typeof(_40) = &mut {l70} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4426: &mut lock.parst ... mutex:   l70 = UNIQUE | NON_NULL, (empty)
    // 4426: lock: typeof(_41) = *mut {l72} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4426: lock:   l72 = UNIQUE | NON_NULL, (empty)
    // 4426: 0 as *const pth ... ttr_t: typeof(_42) = *const {l74} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4426: 0 as *const pth ... ttr_t:   l74 = UNIQUE | NON_NULL, (empty)
    // 4426: 0 as *const pth ... ttr_t: typeof(_42 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l144} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4426: 0 as *const pth ... ttr_t:   l144 = UNIQUE | NON_NULL, (empty)
    // 4426: &mut lock.parst ... mutex: typeof(_39 = &raw mut (*_40)) = *mut {l143} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4426: &mut lock.parst ... mutex:   l143 = UNIQUE | NON_NULL, (empty)
    // 4426: &mut lock.parst ... mutex: typeof(_40 = &mut (((*_41).8: Lock).0: pthread_mutex_t)) = &mut {l142} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4426: &mut lock.parst ... mutex:   l142 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.parunits.mutex, 0 as *const pthread_mutexattr_t);
    // 4427: &mut lock.parun ... mutex: typeof(_44) = *mut {l77} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4427: &mut lock.parun ... mutex:   l77 = UNIQUE | NON_NULL, (empty)
    // 4427: &mut lock.parun ... mutex: typeof(_45) = &mut {l79} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4427: &mut lock.parun ... mutex:   l79 = UNIQUE | NON_NULL, (empty)
    // 4427: lock: typeof(_46) = *mut {l81} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4427: lock:   l81 = UNIQUE | NON_NULL, (empty)
    // 4427: 0 as *const pth ... ttr_t: typeof(_47) = *const {l83} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4427: 0 as *const pth ... ttr_t:   l83 = UNIQUE | NON_NULL, (empty)
    // 4427: &mut lock.parun ... mutex: typeof(_44 = &raw mut (*_45)) = *mut {l146} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4427: &mut lock.parun ... mutex:   l146 = UNIQUE | NON_NULL, (empty)
    // 4427: 0 as *const pth ... ttr_t: typeof(_47 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l147} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4427: 0 as *const pth ... ttr_t:   l147 = UNIQUE | NON_NULL, (empty)
    // 4427: &mut lock.parun ... mutex: typeof(_45 = &mut (((*_46).9: Lock).0: pthread_mutex_t)) = &mut {l145} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4427: &mut lock.parun ... mutex:   l145 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.simplified.mutex, 0 as *const pthread_mutexattr_t);
    // 4428: &mut lock.simpl ... mutex: typeof(_49) = *mut {l86} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4428: &mut lock.simpl ... mutex:   l86 = UNIQUE | NON_NULL, (empty)
    // 4428: &mut lock.simpl ... mutex: typeof(_50) = &mut {l88} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4428: &mut lock.simpl ... mutex:   l88 = UNIQUE | NON_NULL, (empty)
    // 4428: lock: typeof(_51) = *mut {l90} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4428: lock:   l90 = UNIQUE | NON_NULL, (empty)
    // 4428: 0 as *const pth ... ttr_t: typeof(_52) = *const {l92} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4428: 0 as *const pth ... ttr_t:   l92 = UNIQUE | NON_NULL, (empty)
    // 4428: &mut lock.simpl ... mutex: typeof(_50 = &mut (((*_51).10: Lock).0: pthread_mutex_t)) = &mut {l148} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4428: &mut lock.simpl ... mutex:   l148 = UNIQUE | NON_NULL, (empty)
    // 4428: 0 as *const pth ... ttr_t: typeof(_52 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l150} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4428: 0 as *const pth ... ttr_t:   l150 = UNIQUE | NON_NULL, (empty)
    // 4428: &mut lock.simpl ... mutex: typeof(_49 = &raw mut (*_50)) = *mut {l149} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4428: &mut lock.simpl ... mutex:   l149 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.stats.mutex, 0 as *const pthread_mutexattr_t);
    // 4429: &mut lock.stats ... mutex: typeof(_54) = *mut {l95} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4429: &mut lock.stats ... mutex:   l95 = UNIQUE | NON_NULL, (empty)
    // 4429: &mut lock.stats ... mutex: typeof(_55) = &mut {l97} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4429: &mut lock.stats ... mutex:   l97 = UNIQUE | NON_NULL, (empty)
    // 4429: lock: typeof(_56) = *mut {l99} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4429: lock:   l99 = UNIQUE | NON_NULL, (empty)
    // 4429: 0 as *const pth ... ttr_t: typeof(_57) = *const {l101} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4429: 0 as *const pth ... ttr_t:   l101 = UNIQUE | NON_NULL, (empty)
    // 4429: &mut lock.stats ... mutex: typeof(_55 = &mut (((*_56).11: Lock).0: pthread_mutex_t)) = &mut {l151} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4429: &mut lock.stats ... mutex:   l151 = UNIQUE | NON_NULL, (empty)
    // 4429: 0 as *const pth ... ttr_t: typeof(_57 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l153} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4429: 0 as *const pth ... ttr_t:   l153 = UNIQUE | NON_NULL, (empty)
    // 4429: &mut lock.stats ... mutex: typeof(_54 = &raw mut (*_55)) = *mut {l152} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4429: &mut lock.stats ... mutex:   l152 = UNIQUE | NON_NULL, (empty)
    pthread_mutex_init(&mut lock.workers.mutex, 0 as *const pthread_mutexattr_t);
    // 4430: &mut lock.worke ... mutex: typeof(_59) = *mut {l104} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4430: &mut lock.worke ... mutex:   l104 = UNIQUE | NON_NULL, (empty)
    // 4430: &mut lock.worke ... mutex: typeof(_60) = &mut {l106} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4430: &mut lock.worke ... mutex:   l106 = UNIQUE | NON_NULL, (empty)
    // 4430: lock: typeof(_61) = *mut {l108} DefId(0:878 ~ treengeling[2d04]::C2RustUnnamed_8)
    // 4430: lock:   l108 = UNIQUE | NON_NULL, (empty)
    // 4430: 0 as *const pth ... ttr_t: typeof(_62) = *const {l110} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4430: 0 as *const pth ... ttr_t:   l110 = UNIQUE | NON_NULL, (empty)
    // 4430: 0 as *const pth ... ttr_t: typeof(_62 = const 0_usize as *const pthread_mutexattr_t (PointerFromExposedAddress)) = *const {l156} DefId(0:719 ~ treengeling[2d04]::pthread_mutexattr_t)
    // 4430: 0 as *const pth ... ttr_t:   l156 = UNIQUE | NON_NULL, (empty)
    // 4430: &mut lock.worke ... mutex: typeof(_60 = &mut (((*_61).12: Lock).0: pthread_mutex_t)) = &mut {l154} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4430: &mut lock.worke ... mutex:   l154 = UNIQUE | NON_NULL, (empty)
    // 4430: &mut lock.worke ... mutex: typeof(_59 = &raw mut (*_60)) = *mut {l155} DefId(0:740 ~ treengeling[2d04]::pthread_mutex_t)
    // 4430: &mut lock.worke ... mutex:   l155 = UNIQUE | NON_NULL, (empty)
    pthread_cond_init(&mut workerscond, 0 as *const pthread_condattr_t);
    // 4431: &mut workerscond: typeof(_64) = *mut {l113} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 4431: &mut workerscond:   l113 = UNIQUE | NON_NULL, (empty)
    // 4431: &mut workerscond: typeof(_65) = &mut {l115} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 4431: &mut workerscond:   l115 = UNIQUE | NON_NULL, (empty)
    // 4431: workerscond: typeof(_66) = *mut {l117} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 4431: workerscond:   l117 = UNIQUE | NON_NULL, (empty)
    // 4431: 0 as *const pth ... ttr_t: typeof(_67) = *const {l119} DefId(0:726 ~ treengeling[2d04]::pthread_condattr_t)
    // 4431: 0 as *const pth ... ttr_t:   l119 = UNIQUE | NON_NULL, (empty)
    // 4431: 0 as *const pth ... ttr_t: typeof(_67 = const 0_usize as *const pthread_condattr_t (PointerFromExposedAddress)) = *const {l159} DefId(0:726 ~ treengeling[2d04]::pthread_condattr_t)
    // 4431: 0 as *const pth ... ttr_t:   l159 = UNIQUE | NON_NULL, (empty)
    // 4431: &mut workerscond: typeof(_65 = &mut (*_66)) = &mut {l157} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 4431: &mut workerscond:   l157 = UNIQUE | NON_NULL, (empty)
    // 4431: &mut workerscond: typeof(_64 = &raw mut (*_65)) = *mut {l158} DefId(0:748 ~ treengeling[2d04]::pthread_cond_t)
    // 4431: &mut workerscond:   l158 = UNIQUE | NON_NULL, (empty)
}
unsafe extern "C" fn has(
    mut str: *const libc::c_char,
    // 4434: mut str: typeof(_1) = *const {g101} i8
    // 4434: mut str:   g101 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, FIXED
    mut suffix: *const libc::c_char,
    // 4435: mut suffix: typeof(_2) = *const {g102} i8
    // 4435: mut suffix:   g102 = READ | UNIQUE | OFFSET_ADD | NON_NULL, FIXED
) -> libc::c_int {
    let mut l: libc::c_int = strlen(str) as libc::c_int;
    // 4437: str: typeof(_6) = *const {l6} i8
    // 4437: str:   l6 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    let mut k: libc::c_int = strlen(suffix) as libc::c_int;
    // 4438: suffix: typeof(_9) = *const {l10} i8
    // 4438: suffix:   l10 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    if l < k {
        return 0 as libc::c_int;
    }
    return (strcmp(str.offset(l as isize).offset(-(k as isize)), suffix) == 0) as libc::c_int;
    // 4442: str.offset(l as ... ize)): typeof(_17) = *const {l19} i8
    // 4442: str.offset(l as ... ize)):   l19 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
    // 4442: str.offset(l as ... size): typeof(_18) = *const {l21} i8
    // 4442: str.offset(l as ... size):   l21 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    // 4442: str: typeof(_19) = *const {l23} i8
    // 4442: str:   l23 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    // 4442: suffix: typeof(_26) = *const {l31} i8
    // 4442: suffix:   l31 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
}
unsafe extern "C" fn cmd(mut fmt: *const libc::c_char, mut name: *const libc::c_char) -> *mut FILE {
// 4444: *mut FILE: typeof(_0) = *mut {g105} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
// 4444: *mut FILE:   g105 = UNIQUE | NON_NULL, FIXED
// 4444: mut fmt: typeof(_1) = *const {g103} i8
// 4444: mut fmt:   g103 = UNIQUE | NON_NULL, FIXED
// 4444: mut name: typeof(_2) = *const {g104} i8
// 4444: mut name:   g104 = UNIQUE | NON_NULL, FIXED
    let mut res: *mut FILE = 0 as *mut FILE;
    // 4445: mut res: typeof(_4) = *mut {l4} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 4445: mut res:   l4 = UNIQUE | NON_NULL, (empty)
    // 4445: 0 as *mut FILE: typeof(_4 = const 0_usize as *mut _IO_FILE (PointerFromExposedAddress)) = *mut {l46} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 4445: 0 as *mut FILE:   l46 = UNIQUE | NON_NULL, (empty)
    let mut s: *mut libc::c_char = malloc(
    // 4446: mut s: typeof(_5) = *mut {l6} i8
    // 4446: mut s:   l6 = UNIQUE | NON_NULL, (empty)
    // 4446: malloc( (strlen ... g), ): typeof(_6) = *mut {l8} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 4446: malloc( (strlen ... g), ):   l8 = UNIQUE | NON_NULL, (empty)
    // 4446: malloc( (strlen ... _char: typeof(_5 = move _6 as *mut i8 (Misc)) = *mut {l47} i8
    // 4446: malloc( (strlen ... _char:   l47 = UNIQUE | NON_NULL, (empty)
        (strlen(fmt))
        // 4447: fmt: typeof(_10) = *const {l13} i8
        // 4447: fmt:   l13 = UNIQUE | NON_NULL, (empty)
            .wrapping_add(strlen(name))
            // 4448: name: typeof(_12) = *const {l16} i8
            // 4448: name:   l16 = UNIQUE | NON_NULL, (empty)
            .wrapping_add(1 as libc::c_int as libc::c_ulong),
    ) as *mut libc::c_char;
    sprintf(s, fmt, name);
    // 4451: s: typeof(_16) = *mut {l21} i8
    // 4451: s:   l21 = UNIQUE | NON_NULL, (empty)
    // 4451: fmt: typeof(_17) = *const {l23} i8
    // 4451: fmt:   l23 = UNIQUE | NON_NULL, (empty)
    // 4451: name: typeof(_18) = *const {l25} i8
    // 4451: name:   l25 = UNIQUE | NON_NULL, (empty)
    res = popen(s, b"r\0" as *const u8 as *const libc::c_char);
    // 4452: popen(s, b"r\0" ... char): typeof(_19) = *mut {l27} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 4452: popen(s, b"r\0" ... char):   l27 = UNIQUE | NON_NULL, (empty)
    // 4452: s: typeof(_20) = *const {l29} i8
    // 4452: s:   l29 = UNIQUE | NON_NULL, (empty)
    // 4452: s: typeof(_21) = *mut {l31} i8
    // 4452: s:   l31 = UNIQUE | NON_NULL, (empty)
    // 4452: b"r\0" as *cons ... _char: typeof(_22) = *const {l33} i8
    // 4452: b"r\0" as *cons ... _char:   l33 = UNIQUE | NON_NULL, (empty)
    // 4452: b"r\0" as *const u8: typeof(_23) = *const {l35} u8
    // 4452: b"r\0" as *const u8:   l35 = UNIQUE | NON_NULL, (empty)
    // 4452: b"r\0": typeof(_24) = *const {l37} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
    // 4452: b"r\0":   l37 = UNIQUE | NON_NULL, (empty)
    // 4452: b"r\0": typeof(_25) = & {l39} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
    // 4452: b"r\0":   l39 = UNIQUE | NON_NULL, FIXED
    // 4452: b"r\0": typeof(_25 = const b"r\x00") = & {l49} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
    // 4452: b"r\0":   l49 = UNIQUE | NON_NULL, (empty)
    // 4452: b"r\0" as *const u8: typeof(_23 = move _24 as *const u8 (Pointer(ArrayToPointer))) = *const {l51} u8
    // 4452: b"r\0" as *const u8:   l51 = UNIQUE | NON_NULL, (empty)
    // 4452: s: typeof(_20 = move _21 as *const i8 (Pointer(MutToConstPointer))) = *const {l48} i8
    // 4452: s:   l48 = UNIQUE | NON_NULL, (empty)
    // 4452: b"r\0": typeof(_24 = &raw const (*_25)) = *const {l50} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
    // 4452: b"r\0":   l50 = UNIQUE | NON_NULL, (empty)
    // 4452: b"r\0" as *cons ... _char: typeof(_22 = move _23 as *const i8 (Misc)) = *const {l52} i8
    // 4452: b"r\0" as *cons ... _char:   l52 = UNIQUE | NON_NULL, (empty)
    free(s as *mut libc::c_void);
    // 4453: s as *mut libc: ... _void: typeof(_27) = *mut {l42} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 4453: s as *mut libc: ... _void:   l42 = UNIQUE | NON_NULL, (empty)
    // 4453: s: typeof(_28) = *mut {l44} i8
    // 4453: s:   l44 = UNIQUE | NON_NULL, (empty)
    // 4453: s as *mut libc: ... _void: typeof(_27 = move _28 as *mut libc::c_void (Misc)) = *mut {l53} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 4453: s as *mut libc: ... _void:   l53 = UNIQUE | NON_NULL, (empty)
    return res;
}
unsafe extern "C" fn parselopt(
    mut arg: *const libc::c_char,
    // 4457: mut arg: typeof(_1) = *const {g106} i8
    // 4457: mut arg:   g106 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, FIXED
    mut resptr: *mut libc::c_int,
    // 4458: mut resptr: typeof(_2) = *mut {g107} i32
    // 4458: mut resptr:   g107 = READ | WRITE | UNIQUE | NON_NULL, FIXED
    mut opt: *const libc::c_char,
    // 4459: mut opt: typeof(_3) = *const {g108} i8
    // 4459: mut opt:   g108 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, FIXED
) -> libc::c_int {
    let mut p: *const libc::c_char = 0 as *const libc::c_char;
    // 4461: mut p: typeof(_5) = *const {l5} i8
    // 4461: mut p:   l5 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
    // 4461: 0 as *const lib ... _char: typeof(_5 = const 0_usize as *const i8 (PointerFromExposedAddress)) = *const {l126} i8
    // 4461: 0 as *const lib ... _char:   l126 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    let mut q: *const libc::c_char = 0 as *const libc::c_char;
    // 4462: mut q: typeof(_6) = *const {l7} i8
    // 4462: mut q:   l7 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
    // 4462: 0 as *const lib ... _char: typeof(_6 = const 0_usize as *const i8 (PointerFromExposedAddress)) = *const {l127} i8
    // 4462: 0 as *const lib ... _char:   l127 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB, (empty)
    if *arg.offset(0 as libc::c_int as isize) as libc::c_int != '-' as i32
    // 4463: arg.offset(0 as ... size): typeof(_12) = *const {l14} i8
    // 4463: arg.offset(0 as ... size):   l14 = READ | UNIQUE | NON_NULL, (empty)
    // 4463: arg: typeof(_13) = *const {l16} i8
    // 4463: arg:   l16 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
        && *arg.offset(1 as libc::c_int as isize) as libc::c_int != '-' as i32
        // 4464: arg.offset(1 as ... size): typeof(_20) = *const {l24} i8
        // 4464: arg.offset(1 as ... size):   l24 = READ | UNIQUE | NON_NULL, (empty)
        // 4464: arg: typeof(_21) = *const {l26} i8
        // 4464: arg:   l26 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    {
        return 0 as libc::c_int;
    }
    p = arg.offset(2 as libc::c_int as isize);
    // 4468: arg.offset(2 as ... size): typeof(_26) = *const {l32} i8
    // 4468: arg.offset(2 as ... size):   l32 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    // 4468: arg: typeof(_27) = *const {l34} i8
    // 4468: arg:   l34 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    q = opt;
    // 4469: opt: typeof(_30) = *const {l38} i8
    // 4469: opt:   l38 = READ | UNIQUE | OFFSET_ADD | OFFSET_SUB | NON_NULL, (empty)
    while *p as libc::c_int == *q as libc::c_int {
        p = p.offset(1);
        // 4471: p.offset(1): typeof(_38) = *const {l47} i8
        // 4471: p.offset(1):   l47 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
        // 4471: p: typeof(_39) = *const {l49} i8
        // 4471: p:   l49 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
        p;
        // 4472: p: typeof(_40) = *const {l51} i8
        // 4472: p:   l51 = (empty), (empty)
        q = q.offset(1);
        // 4473: q.offset(1): typeof(_41) = *const {l53} i8
        // 4473: q.offset(1):   l53 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
        // 4473: q: typeof(_42) = *const {l55} i8
        // 4473: q:   l55 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
        q;
        // 4474: q: typeof(_43) = *const {l57} i8
        // 4474: q:   l57 = (empty), (empty)
    }
    if *q != 0 {
        return 0 as libc::c_int;
    }
    let fresh17 = p;
    // 4479: fresh17: typeof(_51) = *const {l66} i8
    // 4479: fresh17:   l66 = READ, (empty)
    p = p.offset(1);
    // 4480: p.offset(1): typeof(_52) = *const {l68} i8
    // 4480: p.offset(1):   l68 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
    // 4480: p: typeof(_53) = *const {l70} i8
    // 4480: p:   l70 = READ | OFFSET_ADD | OFFSET_SUB, (empty)
    if *fresh17 as libc::c_int != '=' as i32 {
        return 0 as libc::c_int;
    }
    if *resptr != 0 {
        err(
            b"multiple '--%s=...' options\0" as *const u8 as *const libc::c_char,
            // 4486: b"multiple '--% ... _char: typeof(_64) = *const {l82} i8
            // 4486: b"multiple '--% ... _char:   l82 = UNIQUE | NON_NULL, (empty)
            // 4486: b"multiple '--% ... st u8: typeof(_65) = *const {l84} u8
            // 4486: b"multiple '--% ... st u8:   l84 = UNIQUE | NON_NULL, (empty)
            // 4486: b"multiple '--% ... ns\0": typeof(_66) = *const {l86} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 4486: b"multiple '--% ... ns\0":   l86 = UNIQUE | NON_NULL, (empty)
            // 4486: b"multiple '--% ... ns\0": typeof(_67) = & {l88} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 4486: b"multiple '--% ... ns\0":   l88 = UNIQUE | NON_NULL, FIXED
            // 4486: b"multiple '--% ... ns\0": typeof(_66 = &raw const (*_67)) = *const {l129} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 4486: b"multiple '--% ... ns\0":   l129 = UNIQUE | NON_NULL, (empty)
            // 4486: b"multiple '--% ... st u8: typeof(_65 = move _66 as *const u8 (Pointer(ArrayToPointer))) = *const {l130} u8
            // 4486: b"multiple '--% ... st u8:   l130 = UNIQUE | NON_NULL, (empty)
            // 4486: b"multiple '--% ... _char: typeof(_64 = move _65 as *const i8 (Misc)) = *const {l131} i8
            // 4486: b"multiple '--% ... _char:   l131 = UNIQUE | NON_NULL, (empty)
            // 4486: b"multiple '--% ... ns\0": typeof(_67 = const b"multiple \'--%s=...\' options\x00") = & {l128} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 4486: b"multiple '--% ... ns\0":   l128 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            opt,
            // 4487: opt: typeof(_68) = *const {l90} i8
            // 4487: opt:   l90 = UNIQUE | NON_NULL, (empty)
        );
    }
    if isnum(p) == 0 {
    // 4490: p: typeof(_72) = *const {l95} i8
    // 4490: p:   l95 = (empty), (empty)
        err(
            b"expected number as argument in '%s'\0" as *const u8 as *const libc::c_char,
            // 4492: b"expected numb ... _char: typeof(_74) = *const {l98} i8
            // 4492: b"expected numb ... _char:   l98 = UNIQUE | NON_NULL, (empty)
            // 4492: b"expected numb ... st u8: typeof(_75) = *const {l100} u8
            // 4492: b"expected numb ... st u8:   l100 = UNIQUE | NON_NULL, (empty)
            // 4492: b"expected numb ... s'\0": typeof(_76) = *const {l102} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
            // 4492: b"expected numb ... s'\0":   l102 = UNIQUE | NON_NULL, (empty)
            // 4492: b"expected numb ... s'\0": typeof(_77) = & {l104} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
            // 4492: b"expected numb ... s'\0":   l104 = UNIQUE | NON_NULL, FIXED
            // 4492: b"expected numb ... st u8: typeof(_75 = move _76 as *const u8 (Pointer(ArrayToPointer))) = *const {l134} u8
            // 4492: b"expected numb ... st u8:   l134 = UNIQUE | NON_NULL, (empty)
            // 4492: b"expected numb ... s'\0": typeof(_77 = const b"expected number as argument in \'%s\'\x00") = & {l132} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
            // 4492: b"expected numb ... s'\0":   l132 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            // 4492: b"expected numb ... _char: typeof(_74 = move _75 as *const i8 (Misc)) = *const {l135} i8
            // 4492: b"expected numb ... _char:   l135 = UNIQUE | NON_NULL, (empty)
            // 4492: b"expected numb ... s'\0": typeof(_76 = &raw const (*_77)) = *const {l133} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
            // 4492: b"expected numb ... s'\0":   l133 = UNIQUE | NON_NULL, (empty)
            arg,
            // 4493: arg: typeof(_78) = *const {l106} i8
            // 4493: arg:   l106 = UNIQUE | NON_NULL, (empty)
        );
    }
    *resptr = atoi(p);
    // 4496: p: typeof(_80) = *const {l109} i8
    // 4496: p:   l109 = READ | OFFSET_ADD, (empty)
    if *resptr <= 0 as libc::c_int {
        err(
            b"expected positive number in '%s'\0" as *const u8 as *const libc::c_char,
            // 4499: b"expected posi ... _char: typeof(_86) = *const {l116} i8
            // 4499: b"expected posi ... _char:   l116 = UNIQUE | NON_NULL, (empty)
            // 4499: b"expected posi ... st u8: typeof(_87) = *const {l118} u8
            // 4499: b"expected posi ... st u8:   l118 = UNIQUE | NON_NULL, (empty)
            // 4499: b"expected posi ... s'\0": typeof(_88) = *const {l120} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 4499: b"expected posi ... s'\0":   l120 = UNIQUE | NON_NULL, (empty)
            // 4499: b"expected posi ... s'\0": typeof(_89) = & {l122} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 4499: b"expected posi ... s'\0":   l122 = UNIQUE | NON_NULL, FIXED
            // 4499: b"expected posi ... s'\0": typeof(_88 = &raw const (*_89)) = *const {l137} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 4499: b"expected posi ... s'\0":   l137 = UNIQUE | NON_NULL, (empty)
            // 4499: b"expected posi ... s'\0": typeof(_89 = const b"expected positive number in \'%s\'\x00") = & {l136} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
            // 4499: b"expected posi ... s'\0":   l136 = READ | UNIQUE | OFFSET_ADD | NON_NULL, (empty)
            // 4499: b"expected posi ... st u8: typeof(_87 = move _88 as *const u8 (Pointer(ArrayToPointer))) = *const {l138} u8
            // 4499: b"expected posi ... st u8:   l138 = UNIQUE | NON_NULL, (empty)
            // 4499: b"expected posi ... _char: typeof(_86 = move _87 as *const i8 (Misc)) = *const {l139} i8
            // 4499: b"expected posi ... _char:   l139 = UNIQUE | NON_NULL, (empty)
            arg,
            // 4500: arg: typeof(_90) = *const {l124} i8
            // 4500: arg:   l124 = UNIQUE | NON_NULL, (empty)
        );
    }
    return 1 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn parseu64(
    mut arg: *const libc::c_char,
    // 4507: mut arg: typeof(_1) = *const {g109} i8
    // 4507: mut arg:   g109 = UNIQUE | NON_NULL, FIXED
    mut opt: *const libc::c_char,
    // 4508: mut opt: typeof(_2) = *const {g110} i8
    // 4508: mut opt:   g110 = UNIQUE | NON_NULL, FIXED
) -> libc::c_int {
    let mut res: libc::c_ulonglong = 0 as libc::c_int as libc::c_ulonglong;
    let mut p: *const libc::c_char = arg;
    // 4511: mut p: typeof(_6) = *const {l6} i8
    // 4511: mut p:   l6 = UNIQUE | NON_NULL, (empty)
    let mut ch: libc::c_int = 0;
    let fresh18 = p;
    // 4513: fresh18: typeof(_8) = *const {l9} i8
    // 4513: fresh18:   l9 = UNIQUE | NON_NULL, (empty)
    p = p.offset(1);
    // 4514: p.offset(1): typeof(_9) = *const {l11} i8
    // 4514: p.offset(1):   l11 = UNIQUE | NON_NULL, (empty)
    // 4514: p: typeof(_10) = *const {l13} i8
    // 4514: p:   l13 = UNIQUE | NON_NULL, (empty)
    ch = *fresh18 as libc::c_int;
    if ch == 0 {
        err(
            b"empty string argument to '%s'\0" as *const u8 as *const libc::c_char,
            // 4518: b"empty string  ... _char: typeof(_16) = *const {l20} i8
            // 4518: b"empty string  ... _char:   l20 = UNIQUE | NON_NULL, (empty)
            // 4518: b"empty string  ... st u8: typeof(_17) = *const {l22} u8
            // 4518: b"empty string  ... st u8:   l22 = UNIQUE | NON_NULL, (empty)
            // 4518: b"empty string  ... s'\0": typeof(_18) = *const {l24} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 4518: b"empty string  ... s'\0":   l24 = UNIQUE | NON_NULL, (empty)
            // 4518: b"empty string  ... s'\0": typeof(_19) = & {l26} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 4518: b"empty string  ... s'\0":   l26 = UNIQUE | NON_NULL, FIXED
            // 4518: b"empty string  ... s'\0": typeof(_19 = const b"empty string argument to \'%s\'\x00") = & {l126} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 4518: b"empty string  ... s'\0":   l126 = UNIQUE | NON_NULL, (empty)
            // 4518: b"empty string  ... st u8: typeof(_17 = move _18 as *const u8 (Pointer(ArrayToPointer))) = *const {l128} u8
            // 4518: b"empty string  ... st u8:   l128 = UNIQUE | NON_NULL, (empty)
            // 4518: b"empty string  ... _char: typeof(_16 = move _17 as *const i8 (Misc)) = *const {l129} i8
            // 4518: b"empty string  ... _char:   l129 = UNIQUE | NON_NULL, (empty)
            // 4518: b"empty string  ... s'\0": typeof(_18 = &raw const (*_19)) = *const {l127} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 4518: b"empty string  ... s'\0":   l127 = UNIQUE | NON_NULL, (empty)
            opt,
            // 4519: opt: typeof(_20) = *const {l28} i8
            // 4519: opt:   l28 = UNIQUE | NON_NULL, (empty)
        );
    }
    res = (ch - '0' as i32) as libc::c_ulonglong;
    loop {
        let fresh19 = p;
        // 4524: fresh19: typeof(_27) = *const {l36} i8
        // 4524: fresh19:   l36 = UNIQUE | NON_NULL, (empty)
        p = p.offset(1);
        // 4525: p.offset(1): typeof(_28) = *const {l38} i8
        // 4525: p.offset(1):   l38 = UNIQUE | NON_NULL, (empty)
        // 4525: p: typeof(_29) = *const {l40} i8
        // 4525: p:   l40 = UNIQUE | NON_NULL, (empty)
        ch = *fresh19 as libc::c_int;
        if !(*(*__ctype_b_loc()).offset(ch as isize) as libc::c_int
        // 4527: (*__ctype_b_loc ... size): typeof(_37) = *const {l49} u16
        // 4527: (*__ctype_b_loc ... size):   l49 = UNIQUE | NON_NULL, (empty)
        // 4527: (*__ctype_b_loc()): typeof(_38) = *const {l51} u16
        // 4527: (*__ctype_b_loc()):   l51 = UNIQUE | NON_NULL, (empty)
        // 4527: __ctype_b_loc(): typeof(_39) = *mut {l53} *const {l54} u16
        // 4527: __ctype_b_loc():   l53 = UNIQUE | NON_NULL, (empty)
        // 4527: __ctype_b_loc():   l54 = UNIQUE | NON_NULL, (empty)
            & _ISdigit as libc::c_int as libc::c_ushort as libc::c_int
            != 0)
        {
            break;
        }
        let mut current_block_9: u64;
        let mut digit: libc::c_int = 0;
        if (!(0 as libc::c_ulonglong) >> 1 as libc::c_int)
            .wrapping_div(10 as libc::c_int as libc::c_ulonglong)
            < res
        {
            current_block_9 = 5801668696158960501;
        } else {
            current_block_9 = 4906268039856690917;
        }
        loop {
            match current_block_9 {
                5801668696158960501 => {
                    err(
                        b"argument to '%s' too large\0" as *const u8 as *const libc::c_char,
                        // 4547: b"argument to ' ... _char: typeof(_61) = *const {l77} i8
                        // 4547: b"argument to ' ... _char:   l77 = UNIQUE | NON_NULL, (empty)
                        // 4547: b"argument to ' ... st u8: typeof(_62) = *const {l79} u8
                        // 4547: b"argument to ' ... st u8:   l79 = UNIQUE | NON_NULL, (empty)
                        // 4547: b"argument to ' ... ge\0": typeof(_63) = *const {l81} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
                        // 4547: b"argument to ' ... ge\0":   l81 = UNIQUE | NON_NULL, (empty)
                        // 4547: b"argument to ' ... ge\0": typeof(_64) = & {l83} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
                        // 4547: b"argument to ' ... ge\0":   l83 = UNIQUE | NON_NULL, FIXED
                        // 4547: b"argument to ' ... ge\0": typeof(_64 = const b"argument to \'%s\' too large\x00") = & {l130} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
                        // 4547: b"argument to ' ... ge\0":   l130 = UNIQUE | NON_NULL, (empty)
                        // 4547: b"argument to ' ... st u8: typeof(_62 = move _63 as *const u8 (Pointer(ArrayToPointer))) = *const {l132} u8
                        // 4547: b"argument to ' ... st u8:   l132 = UNIQUE | NON_NULL, (empty)
                        // 4547: b"argument to ' ... ge\0": typeof(_63 = &raw const (*_64)) = *const {l131} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
                        // 4547: b"argument to ' ... ge\0":   l131 = UNIQUE | NON_NULL, (empty)
                        // 4547: b"argument to ' ... _char: typeof(_61 = move _62 as *const i8 (Misc)) = *const {l133} i8
                        // 4547: b"argument to ' ... _char:   l133 = UNIQUE | NON_NULL, (empty)
                        opt,
                        // 4548: opt: typeof(_65) = *const {l85} i8
                        // 4548: opt:   l85 = UNIQUE | NON_NULL, (empty)
                    );
                    current_block_9 = 4906268039856690917;
                }
                _ => {
                    res = res.wrapping_mul(10 as libc::c_int as libc::c_ulonglong);
                    digit = ch - '0' as i32;
                    if (!(0 as libc::c_ulonglong) >> 1 as libc::c_int)
                        .wrapping_sub(digit as libc::c_ulonglong)
                        < res
                    {
                        current_block_9 = 5801668696158960501;
                    } else {
                        break;
                    }
                }
            }
        }
        res = res.wrapping_add(digit as libc::c_ulonglong);
    }
    if ch != 0 {
        err(
            b"invalid unsigned 64 bit number in '%s %s'\0" as *const u8 as *const libc::c_char,
            // 4570: b"invalid unsig ... _char: typeof(_92) = *const {l113} i8
            // 4570: b"invalid unsig ... _char:   l113 = UNIQUE | NON_NULL, (empty)
            // 4570: b"invalid unsig ... st u8: typeof(_93) = *const {l115} u8
            // 4570: b"invalid unsig ... st u8:   l115 = UNIQUE | NON_NULL, (empty)
            // 4570: b"invalid unsig ... s'\0": typeof(_94) = *const {l117} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 4570: b"invalid unsig ... s'\0":   l117 = UNIQUE | NON_NULL, (empty)
            // 4570: b"invalid unsig ... s'\0": typeof(_95) = & {l119} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 4570: b"invalid unsig ... s'\0":   l119 = UNIQUE | NON_NULL, FIXED
            // 4570: b"invalid unsig ... s'\0": typeof(_95 = const b"invalid unsigned 64 bit number in \'%s %s\'\x00") = & {l134} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 4570: b"invalid unsig ... s'\0":   l134 = UNIQUE | NON_NULL, (empty)
            // 4570: b"invalid unsig ... st u8: typeof(_93 = move _94 as *const u8 (Pointer(ArrayToPointer))) = *const {l136} u8
            // 4570: b"invalid unsig ... st u8:   l136 = UNIQUE | NON_NULL, (empty)
            // 4570: b"invalid unsig ... s'\0": typeof(_94 = &raw const (*_95)) = *const {l135} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 4570: b"invalid unsig ... s'\0":   l135 = UNIQUE | NON_NULL, (empty)
            // 4570: b"invalid unsig ... _char: typeof(_92 = move _93 as *const i8 (Misc)) = *const {l137} i8
            // 4570: b"invalid unsig ... _char:   l137 = UNIQUE | NON_NULL, (empty)
            opt,
            // 4571: opt: typeof(_96) = *const {l121} i8
            // 4571: opt:   l121 = UNIQUE | NON_NULL, (empty)
            arg,
            // 4572: arg: typeof(_97) = *const {l123} i8
            // 4572: arg:   l123 = UNIQUE | NON_NULL, (empty)
        );
    }
    return res as libc::c_int;
}
unsafe fn main_0(mut argc: libc::c_int, mut argv: *mut *mut libc::c_char) -> libc::c_int {
// 4577: mut argv: typeof(_2) = *mut {g111} *mut {g112} i8
// 4577: mut argv:   g111 = UNIQUE | NON_NULL, FIXED
// 4577: mut argv:   g112 = UNIQUE | NON_NULL, FIXED
    let mut seed: libc::c_ulonglong = 0 as libc::c_int as libc::c_ulonglong;
    let mut i: libc::c_int = 0;
    let mut res: libc::c_int = 0;
    let mut tmp: libc::c_int = 0;
    let mut clf: libc::c_int = 0;
    let mut node: *mut Node = 0 as *mut Node;
    // 4583: mut node: typeof(_10) = *mut {l10} DefId(0:777 ~ treengeling[2d04]::Node)
    // 4583: mut node:   l10 = UNIQUE | NON_NULL, (empty)
    // 4583: 0 as *mut Node: typeof(_10 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l3381} DefId(0:777 ~ treengeling[2d04]::Node)
    // 4583: 0 as *mut Node:   l3381 = UNIQUE | NON_NULL, (empty)
    let mut leaf: *mut Leaf = 0 as *mut Leaf;
    // 4584: mut leaf: typeof(_11) = *mut {l12} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 4584: mut leaf:   l12 = UNIQUE | NON_NULL, (empty)
    // 4584: 0 as *mut Leaf: typeof(_11 = const 0_usize as *mut Leaf (PointerFromExposedAddress)) = *mut {l3382} DefId(0:794 ~ treengeling[2d04]::Leaf)
    // 4584: 0 as *mut Leaf:   l3382 = UNIQUE | NON_NULL, (empty)
    let mut sec: libc::c_double = 0.;
    init();
    i = 1 as libc::c_int;
    while i < argc {
        if strcmp(
            *argv.offset(i as isize),
            // 4590: *argv.offset(i  ... size): typeof(_23) = *const {l25} i8
            // 4590: *argv.offset(i  ... size):   l25 = UNIQUE | NON_NULL, (empty)
            // 4590: *argv.offset(i  ... size): typeof(_24) = *mut {l27} i8
            // 4590: *argv.offset(i  ... size):   l27 = UNIQUE | NON_NULL, (empty)
            // 4590: argv.offset(i a ... size): typeof(_25) = *mut {l29} *mut {l30} i8
            // 4590: argv.offset(i a ... size):   l29 = UNIQUE | NON_NULL, (empty)
            // 4590: argv.offset(i a ... size):   l30 = UNIQUE | NON_NULL, (empty)
            // 4590: argv: typeof(_26) = *mut {l32} *mut {l33} i8
            // 4590: argv:   l32 = UNIQUE | NON_NULL, (empty)
            // 4590: argv:   l33 = UNIQUE | NON_NULL, (empty)
            // 4590: *argv.offset(i  ... size): typeof(_23 = move _24 as *const i8 (Pointer(MutToConstPointer))) = *const {l3383} i8
            // 4590: *argv.offset(i  ... size):   l3383 = UNIQUE | NON_NULL, (empty)
            b"-h\0" as *const u8 as *const libc::c_char,
            // 4591: b"-h\0" as *con ... _char: typeof(_29) = *const {l37} i8
            // 4591: b"-h\0" as *con ... _char:   l37 = UNIQUE | NON_NULL, (empty)
            // 4591: b"-h\0" as *const u8: typeof(_30) = *const {l39} u8
            // 4591: b"-h\0" as *const u8:   l39 = UNIQUE | NON_NULL, (empty)
            // 4591: b"-h\0": typeof(_31) = *const {l41} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4591: b"-h\0":   l41 = UNIQUE | NON_NULL, (empty)
            // 4591: b"-h\0": typeof(_32) = & {l43} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4591: b"-h\0":   l43 = UNIQUE | NON_NULL, FIXED
            // 4591: b"-h\0" as *con ... _char: typeof(_29 = move _30 as *const i8 (Misc)) = *const {l3387} i8
            // 4591: b"-h\0" as *con ... _char:   l3387 = UNIQUE | NON_NULL, (empty)
            // 4591: b"-h\0": typeof(_31 = &raw const (*_32)) = *const {l3385} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4591: b"-h\0":   l3385 = UNIQUE | NON_NULL, (empty)
            // 4591: b"-h\0": typeof(_32 = const b"-h\x00") = & {l3384} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4591: b"-h\0":   l3384 = UNIQUE | NON_NULL, (empty)
            // 4591: b"-h\0" as *const u8: typeof(_30 = move _31 as *const u8 (Pointer(ArrayToPointer))) = *const {l3386} u8
            // 4591: b"-h\0" as *const u8:   l3386 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            usage();
        } else if strcmp(
            *argv.offset(i as isize),
            // 4596: *argv.offset(i  ... size): typeof(_36) = *const {l48} i8
            // 4596: *argv.offset(i  ... size):   l48 = UNIQUE | NON_NULL, (empty)
            // 4596: *argv.offset(i  ... size): typeof(_37) = *mut {l50} i8
            // 4596: *argv.offset(i  ... size):   l50 = UNIQUE | NON_NULL, (empty)
            // 4596: argv.offset(i a ... size): typeof(_38) = *mut {l52} *mut {l53} i8
            // 4596: argv.offset(i a ... size):   l52 = UNIQUE | NON_NULL, (empty)
            // 4596: argv.offset(i a ... size):   l53 = UNIQUE | NON_NULL, (empty)
            // 4596: argv: typeof(_39) = *mut {l55} *mut {l56} i8
            // 4596: argv:   l55 = UNIQUE | NON_NULL, (empty)
            // 4596: argv:   l56 = UNIQUE | NON_NULL, (empty)
            // 4596: *argv.offset(i  ... size): typeof(_36 = move _37 as *const i8 (Pointer(MutToConstPointer))) = *const {l3388} i8
            // 4596: *argv.offset(i  ... size):   l3388 = UNIQUE | NON_NULL, (empty)
            b"--version\0" as *const u8 as *const libc::c_char,
            // 4597: b"--version\0"  ... _char: typeof(_42) = *const {l60} i8
            // 4597: b"--version\0"  ... _char:   l60 = UNIQUE | NON_NULL, (empty)
            // 4597: b"--version\0"  ... st u8: typeof(_43) = *const {l62} u8
            // 4597: b"--version\0"  ... st u8:   l62 = UNIQUE | NON_NULL, (empty)
            // 4597: b"--version\0": typeof(_44) = *const {l64} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4597: b"--version\0":   l64 = UNIQUE | NON_NULL, (empty)
            // 4597: b"--version\0": typeof(_45) = & {l66} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4597: b"--version\0":   l66 = UNIQUE | NON_NULL, FIXED
            // 4597: b"--version\0": typeof(_45 = const b"--version\x00") = & {l3389} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4597: b"--version\0":   l3389 = UNIQUE | NON_NULL, (empty)
            // 4597: b"--version\0"  ... st u8: typeof(_43 = move _44 as *const u8 (Pointer(ArrayToPointer))) = *const {l3391} u8
            // 4597: b"--version\0"  ... st u8:   l3391 = UNIQUE | NON_NULL, (empty)
            // 4597: b"--version\0": typeof(_44 = &raw const (*_45)) = *const {l3390} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4597: b"--version\0":   l3390 = UNIQUE | NON_NULL, (empty)
            // 4597: b"--version\0"  ... _char: typeof(_42 = move _43 as *const i8 (Misc)) = *const {l3392} i8
            // 4597: b"--version\0"  ... _char:   l3392 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            version();
        } else if strcmp(
            *argv.offset(i as isize),
            // 4602: *argv.offset(i  ... size): typeof(_49) = *const {l71} i8
            // 4602: *argv.offset(i  ... size):   l71 = UNIQUE | NON_NULL, (empty)
            // 4602: *argv.offset(i  ... size): typeof(_50) = *mut {l73} i8
            // 4602: *argv.offset(i  ... size):   l73 = UNIQUE | NON_NULL, (empty)
            // 4602: argv.offset(i a ... size): typeof(_51) = *mut {l75} *mut {l76} i8
            // 4602: argv.offset(i a ... size):   l75 = UNIQUE | NON_NULL, (empty)
            // 4602: argv.offset(i a ... size):   l76 = UNIQUE | NON_NULL, (empty)
            // 4602: argv: typeof(_52) = *mut {l78} *mut {l79} i8
            // 4602: argv:   l78 = UNIQUE | NON_NULL, (empty)
            // 4602: argv:   l79 = UNIQUE | NON_NULL, (empty)
            // 4602: *argv.offset(i  ... size): typeof(_49 = move _50 as *const i8 (Pointer(MutToConstPointer))) = *const {l3393} i8
            // 4602: *argv.offset(i  ... size):   l3393 = UNIQUE | NON_NULL, (empty)
            b"-v\0" as *const u8 as *const libc::c_char,
            // 4603: b"-v\0" as *con ... _char: typeof(_55) = *const {l83} i8
            // 4603: b"-v\0" as *con ... _char:   l83 = UNIQUE | NON_NULL, (empty)
            // 4603: b"-v\0" as *const u8: typeof(_56) = *const {l85} u8
            // 4603: b"-v\0" as *const u8:   l85 = UNIQUE | NON_NULL, (empty)
            // 4603: b"-v\0": typeof(_57) = *const {l87} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4603: b"-v\0":   l87 = UNIQUE | NON_NULL, (empty)
            // 4603: b"-v\0": typeof(_58) = & {l89} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4603: b"-v\0":   l89 = UNIQUE | NON_NULL, FIXED
            // 4603: b"-v\0": typeof(_57 = &raw const (*_58)) = *const {l3395} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4603: b"-v\0":   l3395 = UNIQUE | NON_NULL, (empty)
            // 4603: b"-v\0" as *con ... _char: typeof(_55 = move _56 as *const i8 (Misc)) = *const {l3397} i8
            // 4603: b"-v\0" as *con ... _char:   l3397 = UNIQUE | NON_NULL, (empty)
            // 4603: b"-v\0" as *const u8: typeof(_56 = move _57 as *const u8 (Pointer(ArrayToPointer))) = *const {l3396} u8
            // 4603: b"-v\0" as *const u8:   l3396 = UNIQUE | NON_NULL, (empty)
            // 4603: b"-v\0": typeof(_58 = const b"-v\x00") = & {l3394} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4603: b"-v\0":   l3394 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            verbose += 1;
            // 4606: verbose: typeof(_59) = *mut {l91} i32
            // 4606: verbose:   l91 = UNIQUE | NON_NULL, (empty)
            verbose;
            // 4607: verbose: typeof(_62) = *mut {l95} i32
            // 4607: verbose:   l95 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4609: *argv.offset(i  ... size): typeof(_65) = *const {l99} i8
            // 4609: *argv.offset(i  ... size):   l99 = UNIQUE | NON_NULL, (empty)
            // 4609: *argv.offset(i  ... size): typeof(_66) = *mut {l101} i8
            // 4609: *argv.offset(i  ... size):   l101 = UNIQUE | NON_NULL, (empty)
            // 4609: argv.offset(i a ... size): typeof(_67) = *mut {l103} *mut {l104} i8
            // 4609: argv.offset(i a ... size):   l103 = UNIQUE | NON_NULL, (empty)
            // 4609: argv.offset(i a ... size):   l104 = UNIQUE | NON_NULL, (empty)
            // 4609: argv: typeof(_68) = *mut {l106} *mut {l107} i8
            // 4609: argv:   l106 = UNIQUE | NON_NULL, (empty)
            // 4609: argv:   l107 = UNIQUE | NON_NULL, (empty)
            // 4609: *argv.offset(i  ... size): typeof(_65 = move _66 as *const i8 (Pointer(MutToConstPointer))) = *const {l3398} i8
            // 4609: *argv.offset(i  ... size):   l3398 = UNIQUE | NON_NULL, (empty)
            b"-S\0" as *const u8 as *const libc::c_char,
            // 4610: b"-S\0" as *con ... _char: typeof(_71) = *const {l111} i8
            // 4610: b"-S\0" as *con ... _char:   l111 = UNIQUE | NON_NULL, (empty)
            // 4610: b"-S\0" as *const u8: typeof(_72) = *const {l113} u8
            // 4610: b"-S\0" as *const u8:   l113 = UNIQUE | NON_NULL, (empty)
            // 4610: b"-S\0": typeof(_73) = *const {l115} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4610: b"-S\0":   l115 = UNIQUE | NON_NULL, (empty)
            // 4610: b"-S\0": typeof(_74) = & {l117} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4610: b"-S\0":   l117 = UNIQUE | NON_NULL, FIXED
            // 4610: b"-S\0" as *con ... _char: typeof(_71 = move _72 as *const i8 (Misc)) = *const {l3402} i8
            // 4610: b"-S\0" as *con ... _char:   l3402 = UNIQUE | NON_NULL, (empty)
            // 4610: b"-S\0": typeof(_73 = &raw const (*_74)) = *const {l3400} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4610: b"-S\0":   l3400 = UNIQUE | NON_NULL, (empty)
            // 4610: b"-S\0": typeof(_74 = const b"-S\x00") = & {l3399} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4610: b"-S\0":   l3399 = UNIQUE | NON_NULL, (empty)
            // 4610: b"-S\0" as *const u8: typeof(_72 = move _73 as *const u8 (Pointer(ArrayToPointer))) = *const {l3401} u8
            // 4610: b"-S\0" as *const u8:   l3401 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            showstats = 1 as libc::c_int;
            // 4613: showstats: typeof(_76) = *mut {l120} i32
            // 4613: showstats:   l120 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4615: *argv.offset(i  ... size): typeof(_79) = *const {l124} i8
            // 4615: *argv.offset(i  ... size):   l124 = UNIQUE | NON_NULL, (empty)
            // 4615: *argv.offset(i  ... size): typeof(_80) = *mut {l126} i8
            // 4615: *argv.offset(i  ... size):   l126 = UNIQUE | NON_NULL, (empty)
            // 4615: argv.offset(i a ... size): typeof(_81) = *mut {l128} *mut {l129} i8
            // 4615: argv.offset(i a ... size):   l128 = UNIQUE | NON_NULL, (empty)
            // 4615: argv.offset(i a ... size):   l129 = UNIQUE | NON_NULL, (empty)
            // 4615: argv: typeof(_82) = *mut {l131} *mut {l132} i8
            // 4615: argv:   l131 = UNIQUE | NON_NULL, (empty)
            // 4615: argv:   l132 = UNIQUE | NON_NULL, (empty)
            // 4615: *argv.offset(i  ... size): typeof(_79 = move _80 as *const i8 (Pointer(MutToConstPointer))) = *const {l3403} i8
            // 4615: *argv.offset(i  ... size):   l3403 = UNIQUE | NON_NULL, (empty)
            b"-n\0" as *const u8 as *const libc::c_char,
            // 4616: b"-n\0" as *con ... _char: typeof(_85) = *const {l136} i8
            // 4616: b"-n\0" as *con ... _char:   l136 = UNIQUE | NON_NULL, (empty)
            // 4616: b"-n\0" as *const u8: typeof(_86) = *const {l138} u8
            // 4616: b"-n\0" as *const u8:   l138 = UNIQUE | NON_NULL, (empty)
            // 4616: b"-n\0": typeof(_87) = *const {l140} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4616: b"-n\0":   l140 = UNIQUE | NON_NULL, (empty)
            // 4616: b"-n\0": typeof(_88) = & {l142} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4616: b"-n\0":   l142 = UNIQUE | NON_NULL, FIXED
            // 4616: b"-n\0": typeof(_87 = &raw const (*_88)) = *const {l3405} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4616: b"-n\0":   l3405 = UNIQUE | NON_NULL, (empty)
            // 4616: b"-n\0": typeof(_88 = const b"-n\x00") = & {l3404} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4616: b"-n\0":   l3404 = UNIQUE | NON_NULL, (empty)
            // 4616: b"-n\0" as *const u8: typeof(_86 = move _87 as *const u8 (Pointer(ArrayToPointer))) = *const {l3406} u8
            // 4616: b"-n\0" as *const u8:   l3406 = UNIQUE | NON_NULL, (empty)
            // 4616: b"-n\0" as *con ... _char: typeof(_85 = move _86 as *const i8 (Misc)) = *const {l3407} i8
            // 4616: b"-n\0" as *con ... _char:   l3407 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            nowitness = 1 as libc::c_int;
            // 4619: nowitness: typeof(_90) = *mut {l145} i32
            // 4619: nowitness:   l145 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4621: *argv.offset(i  ... size): typeof(_93) = *const {l149} i8
            // 4621: *argv.offset(i  ... size):   l149 = UNIQUE | NON_NULL, (empty)
            // 4621: *argv.offset(i  ... size): typeof(_94) = *mut {l151} i8
            // 4621: *argv.offset(i  ... size):   l151 = UNIQUE | NON_NULL, (empty)
            // 4621: argv.offset(i a ... size): typeof(_95) = *mut {l153} *mut {l154} i8
            // 4621: argv.offset(i a ... size):   l153 = UNIQUE | NON_NULL, (empty)
            // 4621: argv.offset(i a ... size):   l154 = UNIQUE | NON_NULL, (empty)
            // 4621: argv: typeof(_96) = *mut {l156} *mut {l157} i8
            // 4621: argv:   l156 = UNIQUE | NON_NULL, (empty)
            // 4621: argv:   l157 = UNIQUE | NON_NULL, (empty)
            // 4621: *argv.offset(i  ... size): typeof(_93 = move _94 as *const i8 (Pointer(MutToConstPointer))) = *const {l3408} i8
            // 4621: *argv.offset(i  ... size):   l3408 = UNIQUE | NON_NULL, (empty)
            b"-O\0" as *const u8 as *const libc::c_char,
            // 4622: b"-O\0" as *con ... _char: typeof(_99) = *const {l161} i8
            // 4622: b"-O\0" as *con ... _char:   l161 = UNIQUE | NON_NULL, (empty)
            // 4622: b"-O\0" as *const u8: typeof(_100) = *const {l163} u8
            // 4622: b"-O\0" as *const u8:   l163 = UNIQUE | NON_NULL, (empty)
            // 4622: b"-O\0": typeof(_101) = *const {l165} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4622: b"-O\0":   l165 = UNIQUE | NON_NULL, (empty)
            // 4622: b"-O\0": typeof(_102) = & {l167} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4622: b"-O\0":   l167 = UNIQUE | NON_NULL, FIXED
            // 4622: b"-O\0" as *con ... _char: typeof(_99 = move _100 as *const i8 (Misc)) = *const {l3412} i8
            // 4622: b"-O\0" as *con ... _char:   l3412 = UNIQUE | NON_NULL, (empty)
            // 4622: b"-O\0": typeof(_102 = const b"-O\x00") = & {l3409} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4622: b"-O\0":   l3409 = UNIQUE | NON_NULL, (empty)
            // 4622: b"-O\0" as *const u8: typeof(_100 = move _101 as *const u8 (Pointer(ArrayToPointer))) = *const {l3411} u8
            // 4622: b"-O\0" as *const u8:   l3411 = UNIQUE | NON_NULL, (empty)
            // 4622: b"-O\0": typeof(_101 = &raw const (*_102)) = *const {l3410} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4622: b"-O\0":   l3410 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            optimize = 1 as libc::c_int;
            // 4625: optimize: typeof(_104) = *mut {l170} i32
            // 4625: optimize:   l170 = UNIQUE | NON_NULL, (empty)
        } else if *(*argv.offset(i as isize)).offset(0 as libc::c_int as isize) as libc::c_int
        // 4626: (*argv.offset(i ... size): typeof(_110) = *mut {l177} i8
        // 4626: (*argv.offset(i ... size):   l177 = UNIQUE | NON_NULL, (empty)
        // 4626: (*argv.offset(i ... ize)): typeof(_111) = *mut {l179} i8
        // 4626: (*argv.offset(i ... ize)):   l179 = UNIQUE | NON_NULL, (empty)
        // 4626: argv.offset(i a ... size): typeof(_112) = *mut {l181} *mut {l182} i8
        // 4626: argv.offset(i a ... size):   l181 = UNIQUE | NON_NULL, (empty)
        // 4626: argv.offset(i a ... size):   l182 = UNIQUE | NON_NULL, (empty)
        // 4626: argv: typeof(_113) = *mut {l184} *mut {l185} i8
        // 4626: argv:   l184 = UNIQUE | NON_NULL, (empty)
        // 4626: argv:   l185 = UNIQUE | NON_NULL, (empty)
            == '-' as i32
            && *(*argv.offset(i as isize)).offset(1 as libc::c_int as isize) as libc::c_int
            // 4628: (*argv.offset(i ... size): typeof(_122) = *mut {l195} i8
            // 4628: (*argv.offset(i ... size):   l195 = UNIQUE | NON_NULL, (empty)
            // 4628: (*argv.offset(i ... ize)): typeof(_123) = *mut {l197} i8
            // 4628: (*argv.offset(i ... ize)):   l197 = UNIQUE | NON_NULL, (empty)
            // 4628: argv.offset(i a ... size): typeof(_124) = *mut {l199} *mut {l200} i8
            // 4628: argv.offset(i a ... size):   l199 = UNIQUE | NON_NULL, (empty)
            // 4628: argv.offset(i a ... size):   l200 = UNIQUE | NON_NULL, (empty)
            // 4628: argv: typeof(_125) = *mut {l202} *mut {l203} i8
            // 4628: argv:   l202 = UNIQUE | NON_NULL, (empty)
            // 4628: argv:   l203 = UNIQUE | NON_NULL, (empty)
                == 'O' as i32
            && isnum((*argv.offset(i as isize)).offset(2 as libc::c_int as isize)) != 0
            // 4630: (*argv.offset(i ... size): typeof(_133) = *const {l212} i8
            // 4630: (*argv.offset(i ... size):   l212 = UNIQUE | NON_NULL, (empty)
            // 4630: (*argv.offset(i ... size): typeof(_134) = *mut {l214} i8
            // 4630: (*argv.offset(i ... size):   l214 = UNIQUE | NON_NULL, (empty)
            // 4630: (*argv.offset(i ... ize)): typeof(_135) = *mut {l216} i8
            // 4630: (*argv.offset(i ... ize)):   l216 = UNIQUE | NON_NULL, (empty)
            // 4630: argv.offset(i a ... size): typeof(_136) = *mut {l218} *mut {l219} i8
            // 4630: argv.offset(i a ... size):   l218 = UNIQUE | NON_NULL, (empty)
            // 4630: argv.offset(i a ... size):   l219 = UNIQUE | NON_NULL, (empty)
            // 4630: argv: typeof(_137) = *mut {l221} *mut {l222} i8
            // 4630: argv:   l221 = UNIQUE | NON_NULL, (empty)
            // 4630: argv:   l222 = UNIQUE | NON_NULL, (empty)
            // 4630: (*argv.offset(i ... size): typeof(_133 = move _134 as *const i8 (Pointer(MutToConstPointer))) = *const {l3413} i8
            // 4630: (*argv.offset(i ... size):   l3413 = UNIQUE | NON_NULL, (empty)
        {
            if optimize >= 0 as libc::c_int {
            // 4632: optimize: typeof(_145) = *mut {l231} i32
            // 4632: optimize:   l231 = UNIQUE | NON_NULL, (empty)
                err(b"multiple '-O...' options\0" as *const u8 as *const libc::c_char);
                // 4633: b"multiple '-O. ... _char: typeof(_148) = *const {l235} i8
                // 4633: b"multiple '-O. ... _char:   l235 = UNIQUE | NON_NULL, (empty)
                // 4633: b"multiple '-O. ... st u8: typeof(_149) = *const {l237} u8
                // 4633: b"multiple '-O. ... st u8:   l237 = UNIQUE | NON_NULL, (empty)
                // 4633: b"multiple '-O. ... ns\0": typeof(_150) = *const {l239} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4633: b"multiple '-O. ... ns\0":   l239 = UNIQUE | NON_NULL, (empty)
                // 4633: b"multiple '-O. ... ns\0": typeof(_151) = & {l241} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4633: b"multiple '-O. ... ns\0":   l241 = UNIQUE | NON_NULL, FIXED
                // 4633: b"multiple '-O. ... _char: typeof(_148 = move _149 as *const i8 (Misc)) = *const {l3417} i8
                // 4633: b"multiple '-O. ... _char:   l3417 = UNIQUE | NON_NULL, (empty)
                // 4633: b"multiple '-O. ... st u8: typeof(_149 = move _150 as *const u8 (Pointer(ArrayToPointer))) = *const {l3416} u8
                // 4633: b"multiple '-O. ... st u8:   l3416 = UNIQUE | NON_NULL, (empty)
                // 4633: b"multiple '-O. ... ns\0": typeof(_151 = const b"multiple \'-O...\' options\x00") = & {l3414} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4633: b"multiple '-O. ... ns\0":   l3414 = UNIQUE | NON_NULL, (empty)
                // 4633: b"multiple '-O. ... ns\0": typeof(_150 = &raw const (*_151)) = *const {l3415} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4633: b"multiple '-O. ... ns\0":   l3415 = UNIQUE | NON_NULL, (empty)
            }
            optimize = atoi((*argv.offset(i as isize)).offset(2 as libc::c_int as isize));
            // 4635: (*argv.offset(i ... size): typeof(_153) = *const {l244} i8
            // 4635: (*argv.offset(i ... size):   l244 = UNIQUE | NON_NULL, (empty)
            // 4635: (*argv.offset(i ... size): typeof(_154) = *mut {l246} i8
            // 4635: (*argv.offset(i ... size):   l246 = UNIQUE | NON_NULL, (empty)
            // 4635: (*argv.offset(i ... ize)): typeof(_155) = *mut {l248} i8
            // 4635: (*argv.offset(i ... ize)):   l248 = UNIQUE | NON_NULL, (empty)
            // 4635: argv.offset(i a ... size): typeof(_156) = *mut {l250} *mut {l251} i8
            // 4635: argv.offset(i a ... size):   l250 = UNIQUE | NON_NULL, (empty)
            // 4635: argv.offset(i a ... size):   l251 = UNIQUE | NON_NULL, (empty)
            // 4635: argv: typeof(_157) = *mut {l253} *mut {l254} i8
            // 4635: argv:   l253 = UNIQUE | NON_NULL, (empty)
            // 4635: argv:   l254 = UNIQUE | NON_NULL, (empty)
            // 4635: optimize: typeof(_162) = *mut {l260} i32
            // 4635: optimize:   l260 = UNIQUE | NON_NULL, (empty)
            // 4635: (*argv.offset(i ... size): typeof(_153 = move _154 as *const i8 (Pointer(MutToConstPointer))) = *const {l3418} i8
            // 4635: (*argv.offset(i ... size):   l3418 = UNIQUE | NON_NULL, (empty)
            if optimize < 0 as libc::c_int {
            // 4636: optimize: typeof(_165) = *mut {l264} i32
            // 4636: optimize:   l264 = UNIQUE | NON_NULL, (empty)
                err(
                    b"invalid number in '%s'\0" as *const u8 as *const libc::c_char,
                    // 4638: b"invalid numbe ... _char: typeof(_168) = *const {l268} i8
                    // 4638: b"invalid numbe ... _char:   l268 = UNIQUE | NON_NULL, (empty)
                    // 4638: b"invalid numbe ... st u8: typeof(_169) = *const {l270} u8
                    // 4638: b"invalid numbe ... st u8:   l270 = UNIQUE | NON_NULL, (empty)
                    // 4638: b"invalid numbe ... s'\0": typeof(_170) = *const {l272} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000017)) }]
                    // 4638: b"invalid numbe ... s'\0":   l272 = UNIQUE | NON_NULL, (empty)
                    // 4638: b"invalid numbe ... s'\0": typeof(_171) = & {l274} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000017)) }]
                    // 4638: b"invalid numbe ... s'\0":   l274 = UNIQUE | NON_NULL, FIXED
                    // 4638: b"invalid numbe ... st u8: typeof(_169 = move _170 as *const u8 (Pointer(ArrayToPointer))) = *const {l3421} u8
                    // 4638: b"invalid numbe ... st u8:   l3421 = UNIQUE | NON_NULL, (empty)
                    // 4638: b"invalid numbe ... s'\0": typeof(_170 = &raw const (*_171)) = *const {l3420} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000017)) }]
                    // 4638: b"invalid numbe ... s'\0":   l3420 = UNIQUE | NON_NULL, (empty)
                    // 4638: b"invalid numbe ... s'\0": typeof(_171 = const b"invalid number in \'%s\'\x00") = & {l3419} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000017)) }]
                    // 4638: b"invalid numbe ... s'\0":   l3419 = UNIQUE | NON_NULL, (empty)
                    // 4638: b"invalid numbe ... _char: typeof(_168 = move _169 as *const i8 (Misc)) = *const {l3422} i8
                    // 4638: b"invalid numbe ... _char:   l3422 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4639: *argv.offset(i  ... size): typeof(_172) = *mut {l276} i8
                    // 4639: *argv.offset(i  ... size):   l276 = UNIQUE | NON_NULL, (empty)
                    // 4639: argv.offset(i a ... size): typeof(_173) = *mut {l278} *mut {l279} i8
                    // 4639: argv.offset(i a ... size):   l278 = UNIQUE | NON_NULL, (empty)
                    // 4639: argv.offset(i a ... size):   l279 = UNIQUE | NON_NULL, (empty)
                    // 4639: argv: typeof(_174) = *mut {l281} *mut {l282} i8
                    // 4639: argv:   l281 = UNIQUE | NON_NULL, (empty)
                    // 4639: argv:   l282 = UNIQUE | NON_NULL, (empty)
                );
            }
        } else if strcmp(
            *argv.offset(i as isize),
            // 4643: *argv.offset(i  ... size): typeof(_179) = *const {l288} i8
            // 4643: *argv.offset(i  ... size):   l288 = UNIQUE | NON_NULL, (empty)
            // 4643: *argv.offset(i  ... size): typeof(_180) = *mut {l290} i8
            // 4643: *argv.offset(i  ... size):   l290 = UNIQUE | NON_NULL, (empty)
            // 4643: argv.offset(i a ... size): typeof(_181) = *mut {l292} *mut {l293} i8
            // 4643: argv.offset(i a ... size):   l292 = UNIQUE | NON_NULL, (empty)
            // 4643: argv.offset(i a ... size):   l293 = UNIQUE | NON_NULL, (empty)
            // 4643: argv: typeof(_182) = *mut {l295} *mut {l296} i8
            // 4643: argv:   l295 = UNIQUE | NON_NULL, (empty)
            // 4643: argv:   l296 = UNIQUE | NON_NULL, (empty)
            // 4643: *argv.offset(i  ... size): typeof(_179 = move _180 as *const i8 (Pointer(MutToConstPointer))) = *const {l3423} i8
            // 4643: *argv.offset(i  ... size):   l3423 = UNIQUE | NON_NULL, (empty)
            b"--reduce\0" as *const u8 as *const libc::c_char,
            // 4644: b"--reduce\0" a ... _char: typeof(_185) = *const {l300} i8
            // 4644: b"--reduce\0" a ... _char:   l300 = UNIQUE | NON_NULL, (empty)
            // 4644: b"--reduce\0" a ... st u8: typeof(_186) = *const {l302} u8
            // 4644: b"--reduce\0" a ... st u8:   l302 = UNIQUE | NON_NULL, (empty)
            // 4644: b"--reduce\0": typeof(_187) = *const {l304} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
            // 4644: b"--reduce\0":   l304 = UNIQUE | NON_NULL, (empty)
            // 4644: b"--reduce\0": typeof(_188) = & {l306} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
            // 4644: b"--reduce\0":   l306 = UNIQUE | NON_NULL, FIXED
            // 4644: b"--reduce\0": typeof(_187 = &raw const (*_188)) = *const {l3425} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
            // 4644: b"--reduce\0":   l3425 = UNIQUE | NON_NULL, (empty)
            // 4644: b"--reduce\0" a ... st u8: typeof(_186 = move _187 as *const u8 (Pointer(ArrayToPointer))) = *const {l3426} u8
            // 4644: b"--reduce\0" a ... st u8:   l3426 = UNIQUE | NON_NULL, (empty)
            // 4644: b"--reduce\0": typeof(_188 = const b"--reduce\x00") = & {l3424} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
            // 4644: b"--reduce\0":   l3424 = UNIQUE | NON_NULL, (empty)
            // 4644: b"--reduce\0" a ... _char: typeof(_185 = move _186 as *const i8 (Misc)) = *const {l3427} i8
            // 4644: b"--reduce\0" a ... _char:   l3427 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            reducecache = 1 as libc::c_int;
            // 4647: reducecache: typeof(_190) = *mut {l309} i32
            // 4647: reducecache:   l309 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4649: *argv.offset(i  ... size): typeof(_193) = *const {l313} i8
            // 4649: *argv.offset(i  ... size):   l313 = UNIQUE | NON_NULL, (empty)
            // 4649: *argv.offset(i  ... size): typeof(_194) = *mut {l315} i8
            // 4649: *argv.offset(i  ... size):   l315 = UNIQUE | NON_NULL, (empty)
            // 4649: argv.offset(i a ... size): typeof(_195) = *mut {l317} *mut {l318} i8
            // 4649: argv.offset(i a ... size):   l317 = UNIQUE | NON_NULL, (empty)
            // 4649: argv.offset(i a ... size):   l318 = UNIQUE | NON_NULL, (empty)
            // 4649: argv: typeof(_196) = *mut {l320} *mut {l321} i8
            // 4649: argv:   l320 = UNIQUE | NON_NULL, (empty)
            // 4649: argv:   l321 = UNIQUE | NON_NULL, (empty)
            // 4649: *argv.offset(i  ... size): typeof(_193 = move _194 as *const i8 (Pointer(MutToConstPointer))) = *const {l3428} i8
            // 4649: *argv.offset(i  ... size):   l3428 = UNIQUE | NON_NULL, (empty)
            b"--locslkhd\0" as *const u8 as *const libc::c_char,
            // 4650: b"--locslkhd\0" ... _char: typeof(_199) = *const {l325} i8
            // 4650: b"--locslkhd\0" ... _char:   l325 = UNIQUE | NON_NULL, (empty)
            // 4650: b"--locslkhd\0" ... st u8: typeof(_200) = *const {l327} u8
            // 4650: b"--locslkhd\0" ... st u8:   l327 = UNIQUE | NON_NULL, (empty)
            // 4650: b"--locslkhd\0": typeof(_201) = *const {l329} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 4650: b"--locslkhd\0":   l329 = UNIQUE | NON_NULL, (empty)
            // 4650: b"--locslkhd\0": typeof(_202) = & {l331} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 4650: b"--locslkhd\0":   l331 = UNIQUE | NON_NULL, FIXED
            // 4650: b"--locslkhd\0" ... st u8: typeof(_200 = move _201 as *const u8 (Pointer(ArrayToPointer))) = *const {l3431} u8
            // 4650: b"--locslkhd\0" ... st u8:   l3431 = UNIQUE | NON_NULL, (empty)
            // 4650: b"--locslkhd\0" ... _char: typeof(_199 = move _200 as *const i8 (Misc)) = *const {l3432} i8
            // 4650: b"--locslkhd\0" ... _char:   l3432 = UNIQUE | NON_NULL, (empty)
            // 4650: b"--locslkhd\0": typeof(_201 = &raw const (*_202)) = *const {l3430} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 4650: b"--locslkhd\0":   l3430 = UNIQUE | NON_NULL, (empty)
            // 4650: b"--locslkhd\0": typeof(_202 = const b"--locslkhd\x00") = & {l3429} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
            // 4650: b"--locslkhd\0":   l3429 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            locslkhd = 1 as libc::c_int;
            // 4653: locslkhd: typeof(_204) = *mut {l334} i32
            // 4653: locslkhd:   l334 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4655: *argv.offset(i  ... size): typeof(_207) = *const {l338} i8
            // 4655: *argv.offset(i  ... size):   l338 = UNIQUE | NON_NULL, (empty)
            // 4655: *argv.offset(i  ... size): typeof(_208) = *mut {l340} i8
            // 4655: *argv.offset(i  ... size):   l340 = UNIQUE | NON_NULL, (empty)
            // 4655: argv.offset(i a ... size): typeof(_209) = *mut {l342} *mut {l343} i8
            // 4655: argv.offset(i a ... size):   l342 = UNIQUE | NON_NULL, (empty)
            // 4655: argv.offset(i a ... size):   l343 = UNIQUE | NON_NULL, (empty)
            // 4655: argv: typeof(_210) = *mut {l345} *mut {l346} i8
            // 4655: argv:   l345 = UNIQUE | NON_NULL, (empty)
            // 4655: argv:   l346 = UNIQUE | NON_NULL, (empty)
            // 4655: *argv.offset(i  ... size): typeof(_207 = move _208 as *const i8 (Pointer(MutToConstPointer))) = *const {l3433} i8
            // 4655: *argv.offset(i  ... size):   l3433 = UNIQUE | NON_NULL, (empty)
            b"--no-relevancelkhd\0" as *const u8 as *const libc::c_char,
            // 4656: b"--no-relevanc ... _char: typeof(_213) = *const {l350} i8
            // 4656: b"--no-relevanc ... _char:   l350 = UNIQUE | NON_NULL, (empty)
            // 4656: b"--no-relevanc ... st u8: typeof(_214) = *const {l352} u8
            // 4656: b"--no-relevanc ... st u8:   l352 = UNIQUE | NON_NULL, (empty)
            // 4656: b"--no-relevanc ... hd\0": typeof(_215) = *const {l354} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
            // 4656: b"--no-relevanc ... hd\0":   l354 = UNIQUE | NON_NULL, (empty)
            // 4656: b"--no-relevanc ... hd\0": typeof(_216) = & {l356} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
            // 4656: b"--no-relevanc ... hd\0":   l356 = UNIQUE | NON_NULL, FIXED
            // 4656: b"--no-relevanc ... hd\0": typeof(_216 = const b"--no-relevancelkhd\x00") = & {l3434} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
            // 4656: b"--no-relevanc ... hd\0":   l3434 = UNIQUE | NON_NULL, (empty)
            // 4656: b"--no-relevanc ... hd\0": typeof(_215 = &raw const (*_216)) = *const {l3435} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000013)) }]
            // 4656: b"--no-relevanc ... hd\0":   l3435 = UNIQUE | NON_NULL, (empty)
            // 4656: b"--no-relevanc ... _char: typeof(_213 = move _214 as *const i8 (Misc)) = *const {l3437} i8
            // 4656: b"--no-relevanc ... _char:   l3437 = UNIQUE | NON_NULL, (empty)
            // 4656: b"--no-relevanc ... st u8: typeof(_214 = move _215 as *const u8 (Pointer(ArrayToPointer))) = *const {l3436} u8
            // 4656: b"--no-relevanc ... st u8:   l3436 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            relevancelkhd = 0 as libc::c_int;
            // 4659: relevancelkhd: typeof(_218) = *mut {l359} i32
            // 4659: relevancelkhd:   l359 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4661: *argv.offset(i  ... size): typeof(_221) = *const {l363} i8
            // 4661: *argv.offset(i  ... size):   l363 = UNIQUE | NON_NULL, (empty)
            // 4661: *argv.offset(i  ... size): typeof(_222) = *mut {l365} i8
            // 4661: *argv.offset(i  ... size):   l365 = UNIQUE | NON_NULL, (empty)
            // 4661: argv.offset(i a ... size): typeof(_223) = *mut {l367} *mut {l368} i8
            // 4661: argv.offset(i a ... size):   l367 = UNIQUE | NON_NULL, (empty)
            // 4661: argv.offset(i a ... size):   l368 = UNIQUE | NON_NULL, (empty)
            // 4661: argv: typeof(_224) = *mut {l370} *mut {l371} i8
            // 4661: argv:   l370 = UNIQUE | NON_NULL, (empty)
            // 4661: argv:   l371 = UNIQUE | NON_NULL, (empty)
            // 4661: *argv.offset(i  ... size): typeof(_221 = move _222 as *const i8 (Pointer(MutToConstPointer))) = *const {l3438} i8
            // 4661: *argv.offset(i  ... size):   l3438 = UNIQUE | NON_NULL, (empty)
            b"--force-simp\0" as *const u8 as *const libc::c_char,
            // 4662: b"--force-simp\ ... _char: typeof(_227) = *const {l375} i8
            // 4662: b"--force-simp\ ... _char:   l375 = UNIQUE | NON_NULL, (empty)
            // 4662: b"--force-simp\ ... st u8: typeof(_228) = *const {l377} u8
            // 4662: b"--force-simp\ ... st u8:   l377 = UNIQUE | NON_NULL, (empty)
            // 4662: b"--force-simp\0": typeof(_229) = *const {l379} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4662: b"--force-simp\0":   l379 = UNIQUE | NON_NULL, (empty)
            // 4662: b"--force-simp\0": typeof(_230) = & {l381} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4662: b"--force-simp\0":   l381 = UNIQUE | NON_NULL, FIXED
            // 4662: b"--force-simp\0": typeof(_229 = &raw const (*_230)) = *const {l3440} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4662: b"--force-simp\0":   l3440 = UNIQUE | NON_NULL, (empty)
            // 4662: b"--force-simp\ ... st u8: typeof(_228 = move _229 as *const u8 (Pointer(ArrayToPointer))) = *const {l3441} u8
            // 4662: b"--force-simp\ ... st u8:   l3441 = UNIQUE | NON_NULL, (empty)
            // 4662: b"--force-simp\ ... _char: typeof(_227 = move _228 as *const i8 (Misc)) = *const {l3442} i8
            // 4662: b"--force-simp\ ... _char:   l3442 = UNIQUE | NON_NULL, (empty)
            // 4662: b"--force-simp\0": typeof(_230 = const b"--force-simp\x00") = & {l3439} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4662: b"--force-simp\0":   l3439 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            forcesimp = 1 as libc::c_int;
            // 4665: forcesimp: typeof(_232) = *mut {l384} i32
            // 4665: forcesimp:   l384 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4667: *argv.offset(i  ... size): typeof(_235) = *const {l388} i8
            // 4667: *argv.offset(i  ... size):   l388 = UNIQUE | NON_NULL, (empty)
            // 4667: *argv.offset(i  ... size): typeof(_236) = *mut {l390} i8
            // 4667: *argv.offset(i  ... size):   l390 = UNIQUE | NON_NULL, (empty)
            // 4667: argv.offset(i a ... size): typeof(_237) = *mut {l392} *mut {l393} i8
            // 4667: argv.offset(i a ... size):   l392 = UNIQUE | NON_NULL, (empty)
            // 4667: argv.offset(i a ... size):   l393 = UNIQUE | NON_NULL, (empty)
            // 4667: argv: typeof(_238) = *mut {l395} *mut {l396} i8
            // 4667: argv:   l395 = UNIQUE | NON_NULL, (empty)
            // 4667: argv:   l396 = UNIQUE | NON_NULL, (empty)
            // 4667: *argv.offset(i  ... size): typeof(_235 = move _236 as *const i8 (Pointer(MutToConstPointer))) = *const {l3443} i8
            // 4667: *argv.offset(i  ... size):   l3443 = UNIQUE | NON_NULL, (empty)
            b"--no-simp\0" as *const u8 as *const libc::c_char,
            // 4668: b"--no-simp\0"  ... _char: typeof(_241) = *const {l400} i8
            // 4668: b"--no-simp\0"  ... _char:   l400 = UNIQUE | NON_NULL, (empty)
            // 4668: b"--no-simp\0"  ... st u8: typeof(_242) = *const {l402} u8
            // 4668: b"--no-simp\0"  ... st u8:   l402 = UNIQUE | NON_NULL, (empty)
            // 4668: b"--no-simp\0": typeof(_243) = *const {l404} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4668: b"--no-simp\0":   l404 = UNIQUE | NON_NULL, (empty)
            // 4668: b"--no-simp\0": typeof(_244) = & {l406} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4668: b"--no-simp\0":   l406 = UNIQUE | NON_NULL, FIXED
            // 4668: b"--no-simp\0"  ... st u8: typeof(_242 = move _243 as *const u8 (Pointer(ArrayToPointer))) = *const {l3446} u8
            // 4668: b"--no-simp\0"  ... st u8:   l3446 = UNIQUE | NON_NULL, (empty)
            // 4668: b"--no-simp\0"  ... _char: typeof(_241 = move _242 as *const i8 (Misc)) = *const {l3447} i8
            // 4668: b"--no-simp\0"  ... _char:   l3447 = UNIQUE | NON_NULL, (empty)
            // 4668: b"--no-simp\0": typeof(_244 = const b"--no-simp\x00") = & {l3444} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4668: b"--no-simp\0":   l3444 = UNIQUE | NON_NULL, (empty)
            // 4668: b"--no-simp\0": typeof(_243 = &raw const (*_244)) = *const {l3445} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4668: b"--no-simp\0":   l3445 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            nosimp = 1 as libc::c_int;
            // 4671: nosimp: typeof(_246) = *mut {l409} i32
            // 4671: nosimp:   l409 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4673: *argv.offset(i  ... size): typeof(_249) = *const {l413} i8
            // 4673: *argv.offset(i  ... size):   l413 = UNIQUE | NON_NULL, (empty)
            // 4673: *argv.offset(i  ... size): typeof(_250) = *mut {l415} i8
            // 4673: *argv.offset(i  ... size):   l415 = UNIQUE | NON_NULL, (empty)
            // 4673: argv.offset(i a ... size): typeof(_251) = *mut {l417} *mut {l418} i8
            // 4673: argv.offset(i a ... size):   l417 = UNIQUE | NON_NULL, (empty)
            // 4673: argv.offset(i a ... size):   l418 = UNIQUE | NON_NULL, (empty)
            // 4673: argv: typeof(_252) = *mut {l420} *mut {l421} i8
            // 4673: argv:   l420 = UNIQUE | NON_NULL, (empty)
            // 4673: argv:   l421 = UNIQUE | NON_NULL, (empty)
            // 4673: *argv.offset(i  ... size): typeof(_249 = move _250 as *const i8 (Pointer(MutToConstPointer))) = *const {l3448} i8
            // 4673: *argv.offset(i  ... size):   l3448 = UNIQUE | NON_NULL, (empty)
            b"--no-search\0" as *const u8 as *const libc::c_char,
            // 4674: b"--no-search\0 ... _char: typeof(_255) = *const {l425} i8
            // 4674: b"--no-search\0 ... _char:   l425 = UNIQUE | NON_NULL, (empty)
            // 4674: b"--no-search\0 ... st u8: typeof(_256) = *const {l427} u8
            // 4674: b"--no-search\0 ... st u8:   l427 = UNIQUE | NON_NULL, (empty)
            // 4674: b"--no-search\0": typeof(_257) = *const {l429} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4674: b"--no-search\0":   l429 = UNIQUE | NON_NULL, (empty)
            // 4674: b"--no-search\0": typeof(_258) = & {l431} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4674: b"--no-search\0":   l431 = UNIQUE | NON_NULL, FIXED
            // 4674: b"--no-search\0": typeof(_258 = const b"--no-search\x00") = & {l3449} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4674: b"--no-search\0":   l3449 = UNIQUE | NON_NULL, (empty)
            // 4674: b"--no-search\0": typeof(_257 = &raw const (*_258)) = *const {l3450} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4674: b"--no-search\0":   l3450 = UNIQUE | NON_NULL, (empty)
            // 4674: b"--no-search\0 ... st u8: typeof(_256 = move _257 as *const u8 (Pointer(ArrayToPointer))) = *const {l3451} u8
            // 4674: b"--no-search\0 ... st u8:   l3451 = UNIQUE | NON_NULL, (empty)
            // 4674: b"--no-search\0 ... _char: typeof(_255 = move _256 as *const i8 (Misc)) = *const {l3452} i8
            // 4674: b"--no-search\0 ... _char:   l3452 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            nosearch = 1 as libc::c_int;
            // 4677: nosearch: typeof(_260) = *mut {l434} i32
            // 4677: nosearch:   l434 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4679: *argv.offset(i  ... size): typeof(_263) = *const {l438} i8
            // 4679: *argv.offset(i  ... size):   l438 = UNIQUE | NON_NULL, (empty)
            // 4679: *argv.offset(i  ... size): typeof(_264) = *mut {l440} i8
            // 4679: *argv.offset(i  ... size):   l440 = UNIQUE | NON_NULL, (empty)
            // 4679: argv.offset(i a ... size): typeof(_265) = *mut {l442} *mut {l443} i8
            // 4679: argv.offset(i a ... size):   l442 = UNIQUE | NON_NULL, (empty)
            // 4679: argv.offset(i a ... size):   l443 = UNIQUE | NON_NULL, (empty)
            // 4679: argv: typeof(_266) = *mut {l445} *mut {l446} i8
            // 4679: argv:   l445 = UNIQUE | NON_NULL, (empty)
            // 4679: argv:   l446 = UNIQUE | NON_NULL, (empty)
            // 4679: *argv.offset(i  ... size): typeof(_263 = move _264 as *const i8 (Pointer(MutToConstPointer))) = *const {l3453} i8
            // 4679: *argv.offset(i  ... size):   l3453 = UNIQUE | NON_NULL, (empty)
            b"--no-parallel\0" as *const u8 as *const libc::c_char,
            // 4680: b"--no-parallel ... _char: typeof(_269) = *const {l450} i8
            // 4680: b"--no-parallel ... _char:   l450 = UNIQUE | NON_NULL, (empty)
            // 4680: b"--no-parallel ... st u8: typeof(_270) = *const {l452} u8
            // 4680: b"--no-parallel ... st u8:   l452 = UNIQUE | NON_NULL, (empty)
            // 4680: b"--no-parallel\0": typeof(_271) = *const {l454} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 4680: b"--no-parallel\0":   l454 = UNIQUE | NON_NULL, (empty)
            // 4680: b"--no-parallel\0": typeof(_272) = & {l456} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 4680: b"--no-parallel\0":   l456 = UNIQUE | NON_NULL, FIXED
            // 4680: b"--no-parallel ... _char: typeof(_269 = move _270 as *const i8 (Misc)) = *const {l3457} i8
            // 4680: b"--no-parallel ... _char:   l3457 = UNIQUE | NON_NULL, (empty)
            // 4680: b"--no-parallel\0": typeof(_271 = &raw const (*_272)) = *const {l3455} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 4680: b"--no-parallel\0":   l3455 = UNIQUE | NON_NULL, (empty)
            // 4680: b"--no-parallel ... st u8: typeof(_270 = move _271 as *const u8 (Pointer(ArrayToPointer))) = *const {l3456} u8
            // 4680: b"--no-parallel ... st u8:   l3456 = UNIQUE | NON_NULL, (empty)
            // 4680: b"--no-parallel\0": typeof(_272 = const b"--no-parallel\x00") = & {l3454} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 4680: b"--no-parallel\0":   l3454 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            noparallel = 1 as libc::c_int;
            // 4683: noparallel: typeof(_274) = *mut {l459} i32
            // 4683: noparallel:   l459 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4685: *argv.offset(i  ... size): typeof(_277) = *const {l463} i8
            // 4685: *argv.offset(i  ... size):   l463 = UNIQUE | NON_NULL, (empty)
            // 4685: *argv.offset(i  ... size): typeof(_278) = *mut {l465} i8
            // 4685: *argv.offset(i  ... size):   l465 = UNIQUE | NON_NULL, (empty)
            // 4685: argv.offset(i a ... size): typeof(_279) = *mut {l467} *mut {l468} i8
            // 4685: argv.offset(i a ... size):   l467 = UNIQUE | NON_NULL, (empty)
            // 4685: argv.offset(i a ... size):   l468 = UNIQUE | NON_NULL, (empty)
            // 4685: argv: typeof(_280) = *mut {l470} *mut {l471} i8
            // 4685: argv:   l470 = UNIQUE | NON_NULL, (empty)
            // 4685: argv:   l471 = UNIQUE | NON_NULL, (empty)
            // 4685: *argv.offset(i  ... size): typeof(_277 = move _278 as *const i8 (Pointer(MutToConstPointer))) = *const {l3458} i8
            // 4685: *argv.offset(i  ... size):   l3458 = UNIQUE | NON_NULL, (empty)
            b"--no-full\0" as *const u8 as *const libc::c_char,
            // 4686: b"--no-full\0"  ... _char: typeof(_283) = *const {l475} i8
            // 4686: b"--no-full\0"  ... _char:   l475 = UNIQUE | NON_NULL, (empty)
            // 4686: b"--no-full\0"  ... st u8: typeof(_284) = *const {l477} u8
            // 4686: b"--no-full\0"  ... st u8:   l477 = UNIQUE | NON_NULL, (empty)
            // 4686: b"--no-full\0": typeof(_285) = *const {l479} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4686: b"--no-full\0":   l479 = UNIQUE | NON_NULL, (empty)
            // 4686: b"--no-full\0": typeof(_286) = & {l481} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4686: b"--no-full\0":   l481 = UNIQUE | NON_NULL, FIXED
            // 4686: b"--no-full\0"  ... st u8: typeof(_284 = move _285 as *const u8 (Pointer(ArrayToPointer))) = *const {l3461} u8
            // 4686: b"--no-full\0"  ... st u8:   l3461 = UNIQUE | NON_NULL, (empty)
            // 4686: b"--no-full\0": typeof(_286 = const b"--no-full\x00") = & {l3459} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4686: b"--no-full\0":   l3459 = UNIQUE | NON_NULL, (empty)
            // 4686: b"--no-full\0": typeof(_285 = &raw const (*_286)) = *const {l3460} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4686: b"--no-full\0":   l3460 = UNIQUE | NON_NULL, (empty)
            // 4686: b"--no-full\0"  ... _char: typeof(_283 = move _284 as *const i8 (Misc)) = *const {l3462} i8
            // 4686: b"--no-full\0"  ... _char:   l3462 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            fullint = 0 as libc::c_int;
            // 4689: fullint: typeof(_288) = *mut {l484} i32
            // 4689: fullint:   l484 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4691: *argv.offset(i  ... size): typeof(_291) = *const {l488} i8
            // 4691: *argv.offset(i  ... size):   l488 = UNIQUE | NON_NULL, (empty)
            // 4691: *argv.offset(i  ... size): typeof(_292) = *mut {l490} i8
            // 4691: *argv.offset(i  ... size):   l490 = UNIQUE | NON_NULL, (empty)
            // 4691: argv.offset(i a ... size): typeof(_293) = *mut {l492} *mut {l493} i8
            // 4691: argv.offset(i a ... size):   l492 = UNIQUE | NON_NULL, (empty)
            // 4691: argv.offset(i a ... size):   l493 = UNIQUE | NON_NULL, (empty)
            // 4691: argv: typeof(_294) = *mut {l495} *mut {l496} i8
            // 4691: argv:   l495 = UNIQUE | NON_NULL, (empty)
            // 4691: argv:   l496 = UNIQUE | NON_NULL, (empty)
            // 4691: *argv.offset(i  ... size): typeof(_291 = move _292 as *const i8 (Pointer(MutToConstPointer))) = *const {l3463} i8
            // 4691: *argv.offset(i  ... size):   l3463 = UNIQUE | NON_NULL, (empty)
            b"-f\0" as *const u8 as *const libc::c_char,
            // 4692: b"-f\0" as *con ... _char: typeof(_297) = *const {l500} i8
            // 4692: b"-f\0" as *con ... _char:   l500 = UNIQUE | NON_NULL, (empty)
            // 4692: b"-f\0" as *const u8: typeof(_298) = *const {l502} u8
            // 4692: b"-f\0" as *const u8:   l502 = UNIQUE | NON_NULL, (empty)
            // 4692: b"-f\0": typeof(_299) = *const {l504} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4692: b"-f\0":   l504 = UNIQUE | NON_NULL, (empty)
            // 4692: b"-f\0": typeof(_300) = & {l506} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4692: b"-f\0":   l506 = UNIQUE | NON_NULL, FIXED
            // 4692: b"-f\0" as *con ... _char: typeof(_297 = move _298 as *const i8 (Misc)) = *const {l3467} i8
            // 4692: b"-f\0" as *con ... _char:   l3467 = UNIQUE | NON_NULL, (empty)
            // 4692: b"-f\0": typeof(_299 = &raw const (*_300)) = *const {l3465} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4692: b"-f\0":   l3465 = UNIQUE | NON_NULL, (empty)
            // 4692: b"-f\0": typeof(_300 = const b"-f\x00") = & {l3464} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4692: b"-f\0":   l3464 = UNIQUE | NON_NULL, (empty)
            // 4692: b"-f\0" as *const u8: typeof(_298 = move _299 as *const u8 (Pointer(ArrayToPointer))) = *const {l3466} u8
            // 4692: b"-f\0" as *const u8:   l3466 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            i += 1;
            if i == argc {
                err(b"argument to '-f' missing\0" as *const u8 as *const libc::c_char);
                // 4697: b"argument to ' ... _char: typeof(_307) = *const {l514} i8
                // 4697: b"argument to ' ... _char:   l514 = UNIQUE | NON_NULL, (empty)
                // 4697: b"argument to ' ... st u8: typeof(_308) = *const {l516} u8
                // 4697: b"argument to ' ... st u8:   l516 = UNIQUE | NON_NULL, (empty)
                // 4697: b"argument to ' ... ng\0": typeof(_309) = *const {l518} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4697: b"argument to ' ... ng\0":   l518 = UNIQUE | NON_NULL, (empty)
                // 4697: b"argument to ' ... ng\0": typeof(_310) = & {l520} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4697: b"argument to ' ... ng\0":   l520 = UNIQUE | NON_NULL, FIXED
                // 4697: b"argument to ' ... ng\0": typeof(_310 = const b"argument to \'-f\' missing\x00") = & {l3468} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4697: b"argument to ' ... ng\0":   l3468 = UNIQUE | NON_NULL, (empty)
                // 4697: b"argument to ' ... _char: typeof(_307 = move _308 as *const i8 (Misc)) = *const {l3471} i8
                // 4697: b"argument to ' ... _char:   l3471 = UNIQUE | NON_NULL, (empty)
                // 4697: b"argument to ' ... st u8: typeof(_308 = move _309 as *const u8 (Pointer(ArrayToPointer))) = *const {l3470} u8
                // 4697: b"argument to ' ... st u8:   l3470 = UNIQUE | NON_NULL, (empty)
                // 4697: b"argument to ' ... ng\0": typeof(_309 = &raw const (*_310)) = *const {l3469} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4697: b"argument to ' ... ng\0":   l3469 = UNIQUE | NON_NULL, (empty)
            }
            if isnum(*argv.offset(i as isize)) == 0 || {
            // 4699: *argv.offset(i  ... size): typeof(_314) = *const {l525} i8
            // 4699: *argv.offset(i  ... size):   l525 = UNIQUE | NON_NULL, (empty)
            // 4699: *argv.offset(i  ... size): typeof(_315) = *mut {l527} i8
            // 4699: *argv.offset(i  ... size):   l527 = UNIQUE | NON_NULL, (empty)
            // 4699: argv.offset(i a ... size): typeof(_316) = *mut {l529} *mut {l530} i8
            // 4699: argv.offset(i a ... size):   l529 = UNIQUE | NON_NULL, (empty)
            // 4699: argv.offset(i a ... size):   l530 = UNIQUE | NON_NULL, (empty)
            // 4699: argv: typeof(_317) = *mut {l532} *mut {l533} i8
            // 4699: argv:   l532 = UNIQUE | NON_NULL, (empty)
            // 4699: argv:   l533 = UNIQUE | NON_NULL, (empty)
            // 4699: *argv.offset(i  ... size): typeof(_314 = move _315 as *const i8 (Pointer(MutToConstPointer))) = *const {l3472} i8
            // 4699: *argv.offset(i  ... size):   l3472 = UNIQUE | NON_NULL, (empty)
                fullint = atoi(*argv.offset(i as isize));
                // 4700: *argv.offset(i  ... size): typeof(_322) = *const {l539} i8
                // 4700: *argv.offset(i  ... size):   l539 = UNIQUE | NON_NULL, (empty)
                // 4700: *argv.offset(i  ... size): typeof(_323) = *mut {l541} i8
                // 4700: *argv.offset(i  ... size):   l541 = UNIQUE | NON_NULL, (empty)
                // 4700: argv.offset(i a ... size): typeof(_324) = *mut {l543} *mut {l544} i8
                // 4700: argv.offset(i a ... size):   l543 = UNIQUE | NON_NULL, (empty)
                // 4700: argv.offset(i a ... size):   l544 = UNIQUE | NON_NULL, (empty)
                // 4700: argv: typeof(_325) = *mut {l546} *mut {l547} i8
                // 4700: argv:   l546 = UNIQUE | NON_NULL, (empty)
                // 4700: argv:   l547 = UNIQUE | NON_NULL, (empty)
                // 4700: fullint: typeof(_328) = *mut {l551} i32
                // 4700: fullint:   l551 = UNIQUE | NON_NULL, (empty)
                // 4700: *argv.offset(i  ... size): typeof(_322 = move _323 as *const i8 (Pointer(MutToConstPointer))) = *const {l3473} i8
                // 4700: *argv.offset(i  ... size):   l3473 = UNIQUE | NON_NULL, (empty)
                fullint < 0 as libc::c_int
                // 4701: fullint: typeof(_330) = *mut {l554} i32
                // 4701: fullint:   l554 = UNIQUE | NON_NULL, (empty)
            } {
                err(
                    b"expected (non negative) number as argument in '-f %s'\0" as *const u8
                    // 4704: b"expected (non ... _char: typeof(_333) = *const {l558} i8
                    // 4704: b"expected (non ... _char:   l558 = UNIQUE | NON_NULL, (empty)
                    // 4704: b"expected (non ... st u8: typeof(_334) = *const {l560} u8
                    // 4704: b"expected (non ... st u8:   l560 = UNIQUE | NON_NULL, (empty)
                    // 4704: b"expected (non ... s'\0": typeof(_335) = *const {l562} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
                    // 4704: b"expected (non ... s'\0":   l562 = UNIQUE | NON_NULL, (empty)
                    // 4704: b"expected (non ... s'\0": typeof(_336) = & {l564} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
                    // 4704: b"expected (non ... s'\0":   l564 = UNIQUE | NON_NULL, FIXED
                    // 4704: b"expected (non ... st u8: typeof(_334 = move _335 as *const u8 (Pointer(ArrayToPointer))) = *const {l3476} u8
                    // 4704: b"expected (non ... st u8:   l3476 = UNIQUE | NON_NULL, (empty)
                    // 4704: b"expected (non ... _char: typeof(_333 = move _334 as *const i8 (Misc)) = *const {l3477} i8
                    // 4704: b"expected (non ... _char:   l3477 = UNIQUE | NON_NULL, (empty)
                    // 4704: b"expected (non ... s'\0": typeof(_335 = &raw const (*_336)) = *const {l3475} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
                    // 4704: b"expected (non ... s'\0":   l3475 = UNIQUE | NON_NULL, (empty)
                    // 4704: b"expected (non ... s'\0": typeof(_336 = const b"expected (non negative) number as argument in \'-f %s\'\x00") = & {l3474} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000036)) }]
                    // 4704: b"expected (non ... s'\0":   l3474 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                    *argv.offset(i as isize),
                    // 4706: *argv.offset(i  ... size): typeof(_337) = *mut {l566} i8
                    // 4706: *argv.offset(i  ... size):   l566 = UNIQUE | NON_NULL, (empty)
                    // 4706: argv.offset(i a ... size): typeof(_338) = *mut {l568} *mut {l569} i8
                    // 4706: argv.offset(i a ... size):   l568 = UNIQUE | NON_NULL, (empty)
                    // 4706: argv.offset(i a ... size):   l569 = UNIQUE | NON_NULL, (empty)
                    // 4706: argv: typeof(_339) = *mut {l571} *mut {l572} i8
                    // 4706: argv:   l571 = UNIQUE | NON_NULL, (empty)
                    // 4706: argv:   l572 = UNIQUE | NON_NULL, (empty)
                );
            }
        } else if strcmp(
            *argv.offset(i as isize),
            // 4710: *argv.offset(i  ... size): typeof(_344) = *const {l578} i8
            // 4710: *argv.offset(i  ... size):   l578 = UNIQUE | NON_NULL, (empty)
            // 4710: *argv.offset(i  ... size): typeof(_345) = *mut {l580} i8
            // 4710: *argv.offset(i  ... size):   l580 = UNIQUE | NON_NULL, (empty)
            // 4710: argv.offset(i a ... size): typeof(_346) = *mut {l582} *mut {l583} i8
            // 4710: argv.offset(i a ... size):   l582 = UNIQUE | NON_NULL, (empty)
            // 4710: argv.offset(i a ... size):   l583 = UNIQUE | NON_NULL, (empty)
            // 4710: argv: typeof(_347) = *mut {l585} *mut {l586} i8
            // 4710: argv:   l585 = UNIQUE | NON_NULL, (empty)
            // 4710: argv:   l586 = UNIQUE | NON_NULL, (empty)
            // 4710: *argv.offset(i  ... size): typeof(_344 = move _345 as *const i8 (Pointer(MutToConstPointer))) = *const {l3478} i8
            // 4710: *argv.offset(i  ... size):   l3478 = UNIQUE | NON_NULL, (empty)
            b"--balance\0" as *const u8 as *const libc::c_char,
            // 4711: b"--balance\0"  ... _char: typeof(_350) = *const {l590} i8
            // 4711: b"--balance\0"  ... _char:   l590 = UNIQUE | NON_NULL, (empty)
            // 4711: b"--balance\0"  ... st u8: typeof(_351) = *const {l592} u8
            // 4711: b"--balance\0"  ... st u8:   l592 = UNIQUE | NON_NULL, (empty)
            // 4711: b"--balance\0": typeof(_352) = *const {l594} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4711: b"--balance\0":   l594 = UNIQUE | NON_NULL, (empty)
            // 4711: b"--balance\0": typeof(_353) = & {l596} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4711: b"--balance\0":   l596 = UNIQUE | NON_NULL, FIXED
            // 4711: b"--balance\0": typeof(_352 = &raw const (*_353)) = *const {l3480} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4711: b"--balance\0":   l3480 = UNIQUE | NON_NULL, (empty)
            // 4711: b"--balance\0": typeof(_353 = const b"--balance\x00") = & {l3479} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
            // 4711: b"--balance\0":   l3479 = UNIQUE | NON_NULL, (empty)
            // 4711: b"--balance\0"  ... st u8: typeof(_351 = move _352 as *const u8 (Pointer(ArrayToPointer))) = *const {l3481} u8
            // 4711: b"--balance\0"  ... st u8:   l3481 = UNIQUE | NON_NULL, (empty)
            // 4711: b"--balance\0"  ... _char: typeof(_350 = move _351 as *const i8 (Misc)) = *const {l3482} i8
            // 4711: b"--balance\0"  ... _char:   l3482 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            balance = 1 as libc::c_int;
            // 4714: balance: typeof(_355) = *mut {l599} i32
            // 4714: balance:   l599 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4716: *argv.offset(i  ... size): typeof(_358) = *const {l603} i8
            // 4716: *argv.offset(i  ... size):   l603 = UNIQUE | NON_NULL, (empty)
            // 4716: *argv.offset(i  ... size): typeof(_359) = *mut {l605} i8
            // 4716: *argv.offset(i  ... size):   l605 = UNIQUE | NON_NULL, (empty)
            // 4716: argv.offset(i a ... size): typeof(_360) = *mut {l607} *mut {l608} i8
            // 4716: argv.offset(i a ... size):   l607 = UNIQUE | NON_NULL, (empty)
            // 4716: argv.offset(i a ... size):   l608 = UNIQUE | NON_NULL, (empty)
            // 4716: argv: typeof(_361) = *mut {l610} *mut {l611} i8
            // 4716: argv:   l610 = UNIQUE | NON_NULL, (empty)
            // 4716: argv:   l611 = UNIQUE | NON_NULL, (empty)
            // 4716: *argv.offset(i  ... size): typeof(_358 = move _359 as *const i8 (Pointer(MutToConstPointer))) = *const {l3483} i8
            // 4716: *argv.offset(i  ... size):   l3483 = UNIQUE | NON_NULL, (empty)
            b"--symmetric\0" as *const u8 as *const libc::c_char,
            // 4717: b"--symmetric\0 ... _char: typeof(_364) = *const {l615} i8
            // 4717: b"--symmetric\0 ... _char:   l615 = UNIQUE | NON_NULL, (empty)
            // 4717: b"--symmetric\0 ... st u8: typeof(_365) = *const {l617} u8
            // 4717: b"--symmetric\0 ... st u8:   l617 = UNIQUE | NON_NULL, (empty)
            // 4717: b"--symmetric\0": typeof(_366) = *const {l619} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4717: b"--symmetric\0":   l619 = UNIQUE | NON_NULL, (empty)
            // 4717: b"--symmetric\0": typeof(_367) = & {l621} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4717: b"--symmetric\0":   l621 = UNIQUE | NON_NULL, FIXED
            // 4717: b"--symmetric\0": typeof(_367 = const b"--symmetric\x00") = & {l3484} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4717: b"--symmetric\0":   l3484 = UNIQUE | NON_NULL, (empty)
            // 4717: b"--symmetric\0 ... _char: typeof(_364 = move _365 as *const i8 (Misc)) = *const {l3487} i8
            // 4717: b"--symmetric\0 ... _char:   l3487 = UNIQUE | NON_NULL, (empty)
            // 4717: b"--symmetric\0 ... st u8: typeof(_365 = move _366 as *const u8 (Pointer(ArrayToPointer))) = *const {l3486} u8
            // 4717: b"--symmetric\0 ... st u8:   l3486 = UNIQUE | NON_NULL, (empty)
            // 4717: b"--symmetric\0": typeof(_366 = &raw const (*_367)) = *const {l3485} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4717: b"--symmetric\0":   l3485 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            asymmetric = 0 as libc::c_int;
            // 4720: asymmetric: typeof(_369) = *mut {l624} i32
            // 4720: asymmetric:   l624 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4722: *argv.offset(i  ... size): typeof(_372) = *const {l628} i8
            // 4722: *argv.offset(i  ... size):   l628 = UNIQUE | NON_NULL, (empty)
            // 4722: *argv.offset(i  ... size): typeof(_373) = *mut {l630} i8
            // 4722: *argv.offset(i  ... size):   l630 = UNIQUE | NON_NULL, (empty)
            // 4722: argv.offset(i a ... size): typeof(_374) = *mut {l632} *mut {l633} i8
            // 4722: argv.offset(i a ... size):   l632 = UNIQUE | NON_NULL, (empty)
            // 4722: argv.offset(i a ... size):   l633 = UNIQUE | NON_NULL, (empty)
            // 4722: argv: typeof(_375) = *mut {l635} *mut {l636} i8
            // 4722: argv:   l635 = UNIQUE | NON_NULL, (empty)
            // 4722: argv:   l636 = UNIQUE | NON_NULL, (empty)
            // 4722: *argv.offset(i  ... size): typeof(_372 = move _373 as *const i8 (Pointer(MutToConstPointer))) = *const {l3488} i8
            // 4722: *argv.offset(i  ... size):   l3488 = UNIQUE | NON_NULL, (empty)
            b"--asymmetric\0" as *const u8 as *const libc::c_char,
            // 4723: b"--asymmetric\ ... _char: typeof(_378) = *const {l640} i8
            // 4723: b"--asymmetric\ ... _char:   l640 = UNIQUE | NON_NULL, (empty)
            // 4723: b"--asymmetric\ ... st u8: typeof(_379) = *const {l642} u8
            // 4723: b"--asymmetric\ ... st u8:   l642 = UNIQUE | NON_NULL, (empty)
            // 4723: b"--asymmetric\0": typeof(_380) = *const {l644} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4723: b"--asymmetric\0":   l644 = UNIQUE | NON_NULL, (empty)
            // 4723: b"--asymmetric\0": typeof(_381) = & {l646} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4723: b"--asymmetric\0":   l646 = UNIQUE | NON_NULL, FIXED
            // 4723: b"--asymmetric\0": typeof(_380 = &raw const (*_381)) = *const {l3490} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4723: b"--asymmetric\0":   l3490 = UNIQUE | NON_NULL, (empty)
            // 4723: b"--asymmetric\ ... _char: typeof(_378 = move _379 as *const i8 (Misc)) = *const {l3492} i8
            // 4723: b"--asymmetric\ ... _char:   l3492 = UNIQUE | NON_NULL, (empty)
            // 4723: b"--asymmetric\0": typeof(_381 = const b"--asymmetric\x00") = & {l3489} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4723: b"--asymmetric\0":   l3489 = UNIQUE | NON_NULL, (empty)
            // 4723: b"--asymmetric\ ... st u8: typeof(_379 = move _380 as *const u8 (Pointer(ArrayToPointer))) = *const {l3491} u8
            // 4723: b"--asymmetric\ ... st u8:   l3491 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            asymmetric = 1 as libc::c_int;
            // 4726: asymmetric: typeof(_383) = *mut {l649} i32
            // 4726: asymmetric:   l649 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4728: *argv.offset(i  ... size): typeof(_386) = *const {l653} i8
            // 4728: *argv.offset(i  ... size):   l653 = UNIQUE | NON_NULL, (empty)
            // 4728: *argv.offset(i  ... size): typeof(_387) = *mut {l655} i8
            // 4728: *argv.offset(i  ... size):   l655 = UNIQUE | NON_NULL, (empty)
            // 4728: argv.offset(i a ... size): typeof(_388) = *mut {l657} *mut {l658} i8
            // 4728: argv.offset(i a ... size):   l657 = UNIQUE | NON_NULL, (empty)
            // 4728: argv.offset(i a ... size):   l658 = UNIQUE | NON_NULL, (empty)
            // 4728: argv: typeof(_389) = *mut {l660} *mut {l661} i8
            // 4728: argv:   l660 = UNIQUE | NON_NULL, (empty)
            // 4728: argv:   l661 = UNIQUE | NON_NULL, (empty)
            // 4728: *argv.offset(i  ... size): typeof(_386 = move _387 as *const i8 (Pointer(MutToConstPointer))) = *const {l3493} i8
            // 4728: *argv.offset(i  ... size):   l3493 = UNIQUE | NON_NULL, (empty)
            b"--portfolio\0" as *const u8 as *const libc::c_char,
            // 4729: b"--portfolio\0 ... _char: typeof(_392) = *const {l665} i8
            // 4729: b"--portfolio\0 ... _char:   l665 = UNIQUE | NON_NULL, (empty)
            // 4729: b"--portfolio\0 ... st u8: typeof(_393) = *const {l667} u8
            // 4729: b"--portfolio\0 ... st u8:   l667 = UNIQUE | NON_NULL, (empty)
            // 4729: b"--portfolio\0": typeof(_394) = *const {l669} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4729: b"--portfolio\0":   l669 = UNIQUE | NON_NULL, (empty)
            // 4729: b"--portfolio\0": typeof(_395) = & {l671} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4729: b"--portfolio\0":   l671 = UNIQUE | NON_NULL, FIXED
            // 4729: b"--portfolio\0 ... _char: typeof(_392 = move _393 as *const i8 (Misc)) = *const {l3497} i8
            // 4729: b"--portfolio\0 ... _char:   l3497 = UNIQUE | NON_NULL, (empty)
            // 4729: b"--portfolio\0 ... st u8: typeof(_393 = move _394 as *const u8 (Pointer(ArrayToPointer))) = *const {l3496} u8
            // 4729: b"--portfolio\0 ... st u8:   l3496 = UNIQUE | NON_NULL, (empty)
            // 4729: b"--portfolio\0": typeof(_395 = const b"--portfolio\x00") = & {l3494} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4729: b"--portfolio\0":   l3494 = UNIQUE | NON_NULL, (empty)
            // 4729: b"--portfolio\0": typeof(_394 = &raw const (*_395)) = *const {l3495} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
            // 4729: b"--portfolio\0":   l3495 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            portfolio = 1 as libc::c_int;
            // 4732: portfolio: typeof(_397) = *mut {l674} i32
            // 4732: portfolio:   l674 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4734: *argv.offset(i  ... size): typeof(_400) = *const {l678} i8
            // 4734: *argv.offset(i  ... size):   l678 = UNIQUE | NON_NULL, (empty)
            // 4734: *argv.offset(i  ... size): typeof(_401) = *mut {l680} i8
            // 4734: *argv.offset(i  ... size):   l680 = UNIQUE | NON_NULL, (empty)
            // 4734: argv.offset(i a ... size): typeof(_402) = *mut {l682} *mut {l683} i8
            // 4734: argv.offset(i a ... size):   l682 = UNIQUE | NON_NULL, (empty)
            // 4734: argv.offset(i a ... size):   l683 = UNIQUE | NON_NULL, (empty)
            // 4734: argv: typeof(_403) = *mut {l685} *mut {l686} i8
            // 4734: argv:   l685 = UNIQUE | NON_NULL, (empty)
            // 4734: argv:   l686 = UNIQUE | NON_NULL, (empty)
            // 4734: *argv.offset(i  ... size): typeof(_400 = move _401 as *const i8 (Pointer(MutToConstPointer))) = *const {l3498} i8
            // 4734: *argv.offset(i  ... size):   l3498 = UNIQUE | NON_NULL, (empty)
            b"--eager\0" as *const u8 as *const libc::c_char,
            // 4735: b"--eager\0" as ... _char: typeof(_406) = *const {l690} i8
            // 4735: b"--eager\0" as ... _char:   l690 = UNIQUE | NON_NULL, (empty)
            // 4735: b"--eager\0" as ... st u8: typeof(_407) = *const {l692} u8
            // 4735: b"--eager\0" as ... st u8:   l692 = UNIQUE | NON_NULL, (empty)
            // 4735: b"--eager\0": typeof(_408) = *const {l694} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 4735: b"--eager\0":   l694 = UNIQUE | NON_NULL, (empty)
            // 4735: b"--eager\0": typeof(_409) = & {l696} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 4735: b"--eager\0":   l696 = UNIQUE | NON_NULL, FIXED
            // 4735: b"--eager\0": typeof(_409 = const b"--eager\x00") = & {l3499} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 4735: b"--eager\0":   l3499 = UNIQUE | NON_NULL, (empty)
            // 4735: b"--eager\0" as ... st u8: typeof(_407 = move _408 as *const u8 (Pointer(ArrayToPointer))) = *const {l3501} u8
            // 4735: b"--eager\0" as ... st u8:   l3501 = UNIQUE | NON_NULL, (empty)
            // 4735: b"--eager\0" as ... _char: typeof(_406 = move _407 as *const i8 (Misc)) = *const {l3502} i8
            // 4735: b"--eager\0" as ... _char:   l3502 = UNIQUE | NON_NULL, (empty)
            // 4735: b"--eager\0": typeof(_408 = &raw const (*_409)) = *const {l3500} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
            // 4735: b"--eager\0":   l3500 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            eager = 1 as libc::c_int;
            // 4738: eager: typeof(_411) = *mut {l699} i32
            // 4738: eager:   l699 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4740: *argv.offset(i  ... size): typeof(_414) = *const {l703} i8
            // 4740: *argv.offset(i  ... size):   l703 = UNIQUE | NON_NULL, (empty)
            // 4740: *argv.offset(i  ... size): typeof(_415) = *mut {l705} i8
            // 4740: *argv.offset(i  ... size):   l705 = UNIQUE | NON_NULL, (empty)
            // 4740: argv.offset(i a ... size): typeof(_416) = *mut {l707} *mut {l708} i8
            // 4740: argv.offset(i a ... size):   l707 = UNIQUE | NON_NULL, (empty)
            // 4740: argv.offset(i a ... size):   l708 = UNIQUE | NON_NULL, (empty)
            // 4740: argv: typeof(_417) = *mut {l710} *mut {l711} i8
            // 4740: argv:   l710 = UNIQUE | NON_NULL, (empty)
            // 4740: argv:   l711 = UNIQUE | NON_NULL, (empty)
            // 4740: *argv.offset(i  ... size): typeof(_414 = move _415 as *const i8 (Pointer(MutToConstPointer))) = *const {l3503} i8
            // 4740: *argv.offset(i  ... size):   l3503 = UNIQUE | NON_NULL, (empty)
            b"--lazy\0" as *const u8 as *const libc::c_char,
            // 4741: b"--lazy\0" as  ... _char: typeof(_420) = *const {l715} i8
            // 4741: b"--lazy\0" as  ... _char:   l715 = UNIQUE | NON_NULL, (empty)
            // 4741: b"--lazy\0" as  ... st u8: typeof(_421) = *const {l717} u8
            // 4741: b"--lazy\0" as  ... st u8:   l717 = UNIQUE | NON_NULL, (empty)
            // 4741: b"--lazy\0": typeof(_422) = *const {l719} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 4741: b"--lazy\0":   l719 = UNIQUE | NON_NULL, (empty)
            // 4741: b"--lazy\0": typeof(_423) = & {l721} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 4741: b"--lazy\0":   l721 = UNIQUE | NON_NULL, FIXED
            // 4741: b"--lazy\0": typeof(_422 = &raw const (*_423)) = *const {l3505} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 4741: b"--lazy\0":   l3505 = UNIQUE | NON_NULL, (empty)
            // 4741: b"--lazy\0": typeof(_423 = const b"--lazy\x00") = & {l3504} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000007)) }]
            // 4741: b"--lazy\0":   l3504 = UNIQUE | NON_NULL, (empty)
            // 4741: b"--lazy\0" as  ... st u8: typeof(_421 = move _422 as *const u8 (Pointer(ArrayToPointer))) = *const {l3506} u8
            // 4741: b"--lazy\0" as  ... st u8:   l3506 = UNIQUE | NON_NULL, (empty)
            // 4741: b"--lazy\0" as  ... _char: typeof(_420 = move _421 as *const i8 (Misc)) = *const {l3507} i8
            // 4741: b"--lazy\0" as  ... _char:   l3507 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            eager = 0 as libc::c_int;
            // 4744: eager: typeof(_425) = *mut {l724} i32
            // 4744: eager:   l724 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4746: *argv.offset(i  ... size): typeof(_428) = *const {l728} i8
            // 4746: *argv.offset(i  ... size):   l728 = UNIQUE | NON_NULL, (empty)
            // 4746: *argv.offset(i  ... size): typeof(_429) = *mut {l730} i8
            // 4746: *argv.offset(i  ... size):   l730 = UNIQUE | NON_NULL, (empty)
            // 4746: argv.offset(i a ... size): typeof(_430) = *mut {l732} *mut {l733} i8
            // 4746: argv.offset(i a ... size):   l732 = UNIQUE | NON_NULL, (empty)
            // 4746: argv.offset(i a ... size):   l733 = UNIQUE | NON_NULL, (empty)
            // 4746: argv: typeof(_431) = *mut {l735} *mut {l736} i8
            // 4746: argv:   l735 = UNIQUE | NON_NULL, (empty)
            // 4746: argv:   l736 = UNIQUE | NON_NULL, (empty)
            // 4746: *argv.offset(i  ... size): typeof(_428 = move _429 as *const i8 (Pointer(MutToConstPointer))) = *const {l3508} i8
            // 4746: *argv.offset(i  ... size):   l3508 = UNIQUE | NON_NULL, (empty)
            b"-m\0" as *const u8 as *const libc::c_char,
            // 4747: b"-m\0" as *con ... _char: typeof(_434) = *const {l740} i8
            // 4747: b"-m\0" as *con ... _char:   l740 = UNIQUE | NON_NULL, (empty)
            // 4747: b"-m\0" as *const u8: typeof(_435) = *const {l742} u8
            // 4747: b"-m\0" as *const u8:   l742 = UNIQUE | NON_NULL, (empty)
            // 4747: b"-m\0": typeof(_436) = *const {l744} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4747: b"-m\0":   l744 = UNIQUE | NON_NULL, (empty)
            // 4747: b"-m\0": typeof(_437) = & {l746} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4747: b"-m\0":   l746 = UNIQUE | NON_NULL, FIXED
            // 4747: b"-m\0": typeof(_437 = const b"-m\x00") = & {l3509} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4747: b"-m\0":   l3509 = UNIQUE | NON_NULL, (empty)
            // 4747: b"-m\0": typeof(_436 = &raw const (*_437)) = *const {l3510} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4747: b"-m\0":   l3510 = UNIQUE | NON_NULL, (empty)
            // 4747: b"-m\0" as *con ... _char: typeof(_434 = move _435 as *const i8 (Misc)) = *const {l3512} i8
            // 4747: b"-m\0" as *con ... _char:   l3512 = UNIQUE | NON_NULL, (empty)
            // 4747: b"-m\0" as *const u8: typeof(_435 = move _436 as *const u8 (Pointer(ArrayToPointer))) = *const {l3511} u8
            // 4747: b"-m\0" as *const u8:   l3511 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            if hardlimbytes != 0 {
            // 4750: hardlimbytes: typeof(_441) = *mut {l751} u64
            // 4750: hardlimbytes:   l751 = UNIQUE | NON_NULL, (empty)
                err(b"multiple memory limit specification\0" as *const u8 as *const libc::c_char);
                // 4751: b"multiple memo ... _char: typeof(_443) = *const {l754} i8
                // 4751: b"multiple memo ... _char:   l754 = UNIQUE | NON_NULL, (empty)
                // 4751: b"multiple memo ... st u8: typeof(_444) = *const {l756} u8
                // 4751: b"multiple memo ... st u8:   l756 = UNIQUE | NON_NULL, (empty)
                // 4751: b"multiple memo ... on\0": typeof(_445) = *const {l758} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4751: b"multiple memo ... on\0":   l758 = UNIQUE | NON_NULL, (empty)
                // 4751: b"multiple memo ... on\0": typeof(_446) = & {l760} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4751: b"multiple memo ... on\0":   l760 = UNIQUE | NON_NULL, FIXED
                // 4751: b"multiple memo ... _char: typeof(_443 = move _444 as *const i8 (Misc)) = *const {l3516} i8
                // 4751: b"multiple memo ... _char:   l3516 = UNIQUE | NON_NULL, (empty)
                // 4751: b"multiple memo ... on\0": typeof(_446 = const b"multiple memory limit specification\x00") = & {l3513} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4751: b"multiple memo ... on\0":   l3513 = UNIQUE | NON_NULL, (empty)
                // 4751: b"multiple memo ... on\0": typeof(_445 = &raw const (*_446)) = *const {l3514} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4751: b"multiple memo ... on\0":   l3514 = UNIQUE | NON_NULL, (empty)
                // 4751: b"multiple memo ... st u8: typeof(_444 = move _445 as *const u8 (Pointer(ArrayToPointer))) = *const {l3515} u8
                // 4751: b"multiple memo ... st u8:   l3515 = UNIQUE | NON_NULL, (empty)
            }
            i += 1;
            if i == argc {
                err(b"argument to '-m' missing\0" as *const u8 as *const libc::c_char);
                // 4755: b"argument to ' ... _char: typeof(_453) = *const {l768} i8
                // 4755: b"argument to ' ... _char:   l768 = UNIQUE | NON_NULL, (empty)
                // 4755: b"argument to ' ... st u8: typeof(_454) = *const {l770} u8
                // 4755: b"argument to ' ... st u8:   l770 = UNIQUE | NON_NULL, (empty)
                // 4755: b"argument to ' ... ng\0": typeof(_455) = *const {l772} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4755: b"argument to ' ... ng\0":   l772 = UNIQUE | NON_NULL, (empty)
                // 4755: b"argument to ' ... ng\0": typeof(_456) = & {l774} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4755: b"argument to ' ... ng\0":   l774 = UNIQUE | NON_NULL, FIXED
                // 4755: b"argument to ' ... ng\0": typeof(_455 = &raw const (*_456)) = *const {l3518} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4755: b"argument to ' ... ng\0":   l3518 = UNIQUE | NON_NULL, (empty)
                // 4755: b"argument to ' ... _char: typeof(_453 = move _454 as *const i8 (Misc)) = *const {l3520} i8
                // 4755: b"argument to ' ... _char:   l3520 = UNIQUE | NON_NULL, (empty)
                // 4755: b"argument to ' ... st u8: typeof(_454 = move _455 as *const u8 (Pointer(ArrayToPointer))) = *const {l3519} u8
                // 4755: b"argument to ' ... st u8:   l3519 = UNIQUE | NON_NULL, (empty)
                // 4755: b"argument to ' ... ng\0": typeof(_456 = const b"argument to \'-m\' missing\x00") = & {l3517} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4755: b"argument to ' ... ng\0":   l3517 = UNIQUE | NON_NULL, (empty)
            }
            if isnum(*argv.offset(i as isize)) == 0 {
            // 4757: *argv.offset(i  ... size): typeof(_460) = *const {l779} i8
            // 4757: *argv.offset(i  ... size):   l779 = UNIQUE | NON_NULL, (empty)
            // 4757: *argv.offset(i  ... size): typeof(_461) = *mut {l781} i8
            // 4757: *argv.offset(i  ... size):   l781 = UNIQUE | NON_NULL, (empty)
            // 4757: argv.offset(i a ... size): typeof(_462) = *mut {l783} *mut {l784} i8
            // 4757: argv.offset(i a ... size):   l783 = UNIQUE | NON_NULL, (empty)
            // 4757: argv.offset(i a ... size):   l784 = UNIQUE | NON_NULL, (empty)
            // 4757: argv: typeof(_463) = *mut {l786} *mut {l787} i8
            // 4757: argv:   l786 = UNIQUE | NON_NULL, (empty)
            // 4757: argv:   l787 = UNIQUE | NON_NULL, (empty)
            // 4757: *argv.offset(i  ... size): typeof(_460 = move _461 as *const i8 (Pointer(MutToConstPointer))) = *const {l3521} i8
            // 4757: *argv.offset(i  ... size):   l3521 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected number as argument in '-m %s'\0" as *const u8 as *const libc::c_char,
                    // 4759: b"expected numb ... _char: typeof(_467) = *const {l792} i8
                    // 4759: b"expected numb ... _char:   l792 = UNIQUE | NON_NULL, (empty)
                    // 4759: b"expected numb ... st u8: typeof(_468) = *const {l794} u8
                    // 4759: b"expected numb ... st u8:   l794 = UNIQUE | NON_NULL, (empty)
                    // 4759: b"expected numb ... s'\0": typeof(_469) = *const {l796} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4759: b"expected numb ... s'\0":   l796 = UNIQUE | NON_NULL, (empty)
                    // 4759: b"expected numb ... s'\0": typeof(_470) = & {l798} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4759: b"expected numb ... s'\0":   l798 = UNIQUE | NON_NULL, FIXED
                    // 4759: b"expected numb ... _char: typeof(_467 = move _468 as *const i8 (Misc)) = *const {l3525} i8
                    // 4759: b"expected numb ... _char:   l3525 = UNIQUE | NON_NULL, (empty)
                    // 4759: b"expected numb ... s'\0": typeof(_470 = const b"expected number as argument in \'-m %s\'\x00") = & {l3522} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4759: b"expected numb ... s'\0":   l3522 = UNIQUE | NON_NULL, (empty)
                    // 4759: b"expected numb ... st u8: typeof(_468 = move _469 as *const u8 (Pointer(ArrayToPointer))) = *const {l3524} u8
                    // 4759: b"expected numb ... st u8:   l3524 = UNIQUE | NON_NULL, (empty)
                    // 4759: b"expected numb ... s'\0": typeof(_469 = &raw const (*_470)) = *const {l3523} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4759: b"expected numb ... s'\0":   l3523 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4760: *argv.offset(i  ... size): typeof(_471) = *mut {l800} i8
                    // 4760: *argv.offset(i  ... size):   l800 = UNIQUE | NON_NULL, (empty)
                    // 4760: argv.offset(i a ... size): typeof(_472) = *mut {l802} *mut {l803} i8
                    // 4760: argv.offset(i a ... size):   l802 = UNIQUE | NON_NULL, (empty)
                    // 4760: argv.offset(i a ... size):   l803 = UNIQUE | NON_NULL, (empty)
                    // 4760: argv: typeof(_473) = *mut {l805} *mut {l806} i8
                    // 4760: argv:   l805 = UNIQUE | NON_NULL, (empty)
                    // 4760: argv:   l806 = UNIQUE | NON_NULL, (empty)
                );
            }
            hardlimbytes = atoll(*argv.offset(i as isize)) as size_t;
            // 4763: *argv.offset(i  ... size): typeof(_477) = *const {l811} i8
            // 4763: *argv.offset(i  ... size):   l811 = UNIQUE | NON_NULL, (empty)
            // 4763: *argv.offset(i  ... size): typeof(_478) = *mut {l813} i8
            // 4763: *argv.offset(i  ... size):   l813 = UNIQUE | NON_NULL, (empty)
            // 4763: argv.offset(i a ... size): typeof(_479) = *mut {l815} *mut {l816} i8
            // 4763: argv.offset(i a ... size):   l815 = UNIQUE | NON_NULL, (empty)
            // 4763: argv.offset(i a ... size):   l816 = UNIQUE | NON_NULL, (empty)
            // 4763: argv: typeof(_480) = *mut {l818} *mut {l819} i8
            // 4763: argv:   l818 = UNIQUE | NON_NULL, (empty)
            // 4763: argv:   l819 = UNIQUE | NON_NULL, (empty)
            // 4763: hardlimbytes: typeof(_483) = *mut {l823} u64
            // 4763: hardlimbytes:   l823 = UNIQUE | NON_NULL, (empty)
            // 4763: *argv.offset(i  ... size): typeof(_477 = move _478 as *const i8 (Pointer(MutToConstPointer))) = *const {l3526} i8
            // 4763: *argv.offset(i  ... size):   l3526 = UNIQUE | NON_NULL, (empty)
            if hardlimbytes > 0 as libc::c_int as size_t {
            // 4764: hardlimbytes: typeof(_487) = *mut {l828} u64
            // 4764: hardlimbytes:   l828 = UNIQUE | NON_NULL, (empty)
                hardlimbytes <<= 20 as libc::c_int;
                // 4765: hardlimbytes: typeof(_491) = *mut {l833} u64
                // 4765: hardlimbytes:   l833 = UNIQUE | NON_NULL, (empty)
            }
            if hardlimbytes <= 0 as libc::c_int as size_t {
            // 4767: hardlimbytes: typeof(_495) = *mut {l838} u64
            // 4767: hardlimbytes:   l838 = UNIQUE | NON_NULL, (empty)
                err(
                    b"invalid number of MB in '-m %s'\0" as *const u8 as *const libc::c_char,
                    // 4769: b"invalid numbe ... _char: typeof(_499) = *const {l843} i8
                    // 4769: b"invalid numbe ... _char:   l843 = UNIQUE | NON_NULL, (empty)
                    // 4769: b"invalid numbe ... st u8: typeof(_500) = *const {l845} u8
                    // 4769: b"invalid numbe ... st u8:   l845 = UNIQUE | NON_NULL, (empty)
                    // 4769: b"invalid numbe ... s'\0": typeof(_501) = *const {l847} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                    // 4769: b"invalid numbe ... s'\0":   l847 = UNIQUE | NON_NULL, (empty)
                    // 4769: b"invalid numbe ... s'\0": typeof(_502) = & {l849} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                    // 4769: b"invalid numbe ... s'\0":   l849 = UNIQUE | NON_NULL, FIXED
                    // 4769: b"invalid numbe ... st u8: typeof(_500 = move _501 as *const u8 (Pointer(ArrayToPointer))) = *const {l3529} u8
                    // 4769: b"invalid numbe ... st u8:   l3529 = UNIQUE | NON_NULL, (empty)
                    // 4769: b"invalid numbe ... _char: typeof(_499 = move _500 as *const i8 (Misc)) = *const {l3530} i8
                    // 4769: b"invalid numbe ... _char:   l3530 = UNIQUE | NON_NULL, (empty)
                    // 4769: b"invalid numbe ... s'\0": typeof(_502 = const b"invalid number of MB in \'-m %s\'\x00") = & {l3527} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                    // 4769: b"invalid numbe ... s'\0":   l3527 = UNIQUE | NON_NULL, (empty)
                    // 4769: b"invalid numbe ... s'\0": typeof(_501 = &raw const (*_502)) = *const {l3528} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                    // 4769: b"invalid numbe ... s'\0":   l3528 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4770: *argv.offset(i  ... size): typeof(_503) = *mut {l851} i8
                    // 4770: *argv.offset(i  ... size):   l851 = UNIQUE | NON_NULL, (empty)
                    // 4770: argv.offset(i a ... size): typeof(_504) = *mut {l853} *mut {l854} i8
                    // 4770: argv.offset(i a ... size):   l853 = UNIQUE | NON_NULL, (empty)
                    // 4770: argv.offset(i a ... size):   l854 = UNIQUE | NON_NULL, (empty)
                    // 4770: argv: typeof(_505) = *mut {l856} *mut {l857} i8
                    // 4770: argv:   l856 = UNIQUE | NON_NULL, (empty)
                    // 4770: argv:   l857 = UNIQUE | NON_NULL, (empty)
                );
            }
        } else if strcmp(
            *argv.offset(i as isize),
            // 4774: *argv.offset(i  ... size): typeof(_510) = *const {l863} i8
            // 4774: *argv.offset(i  ... size):   l863 = UNIQUE | NON_NULL, (empty)
            // 4774: *argv.offset(i  ... size): typeof(_511) = *mut {l865} i8
            // 4774: *argv.offset(i  ... size):   l865 = UNIQUE | NON_NULL, (empty)
            // 4774: argv.offset(i a ... size): typeof(_512) = *mut {l867} *mut {l868} i8
            // 4774: argv.offset(i a ... size):   l867 = UNIQUE | NON_NULL, (empty)
            // 4774: argv.offset(i a ... size):   l868 = UNIQUE | NON_NULL, (empty)
            // 4774: argv: typeof(_513) = *mut {l870} *mut {l871} i8
            // 4774: argv:   l870 = UNIQUE | NON_NULL, (empty)
            // 4774: argv:   l871 = UNIQUE | NON_NULL, (empty)
            // 4774: *argv.offset(i  ... size): typeof(_510 = move _511 as *const i8 (Pointer(MutToConstPointer))) = *const {l3531} i8
            // 4774: *argv.offset(i  ... size):   l3531 = UNIQUE | NON_NULL, (empty)
            b"-g\0" as *const u8 as *const libc::c_char,
            // 4775: b"-g\0" as *con ... _char: typeof(_516) = *const {l875} i8
            // 4775: b"-g\0" as *con ... _char:   l875 = UNIQUE | NON_NULL, (empty)
            // 4775: b"-g\0" as *const u8: typeof(_517) = *const {l877} u8
            // 4775: b"-g\0" as *const u8:   l877 = UNIQUE | NON_NULL, (empty)
            // 4775: b"-g\0": typeof(_518) = *const {l879} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4775: b"-g\0":   l879 = UNIQUE | NON_NULL, (empty)
            // 4775: b"-g\0": typeof(_519) = & {l881} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4775: b"-g\0":   l881 = UNIQUE | NON_NULL, FIXED
            // 4775: b"-g\0" as *con ... _char: typeof(_516 = move _517 as *const i8 (Misc)) = *const {l3535} i8
            // 4775: b"-g\0" as *con ... _char:   l3535 = UNIQUE | NON_NULL, (empty)
            // 4775: b"-g\0" as *const u8: typeof(_517 = move _518 as *const u8 (Pointer(ArrayToPointer))) = *const {l3534} u8
            // 4775: b"-g\0" as *const u8:   l3534 = UNIQUE | NON_NULL, (empty)
            // 4775: b"-g\0": typeof(_518 = &raw const (*_519)) = *const {l3533} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4775: b"-g\0":   l3533 = UNIQUE | NON_NULL, (empty)
            // 4775: b"-g\0": typeof(_519 = const b"-g\x00") = & {l3532} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4775: b"-g\0":   l3532 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            if hardlimbytes != 0 {
            // 4778: hardlimbytes: typeof(_523) = *mut {l886} u64
            // 4778: hardlimbytes:   l886 = UNIQUE | NON_NULL, (empty)
                err(b"multiple memory limit specification\0" as *const u8 as *const libc::c_char);
                // 4779: b"multiple memo ... _char: typeof(_525) = *const {l889} i8
                // 4779: b"multiple memo ... _char:   l889 = UNIQUE | NON_NULL, (empty)
                // 4779: b"multiple memo ... st u8: typeof(_526) = *const {l891} u8
                // 4779: b"multiple memo ... st u8:   l891 = UNIQUE | NON_NULL, (empty)
                // 4779: b"multiple memo ... on\0": typeof(_527) = *const {l893} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4779: b"multiple memo ... on\0":   l893 = UNIQUE | NON_NULL, (empty)
                // 4779: b"multiple memo ... on\0": typeof(_528) = & {l895} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4779: b"multiple memo ... on\0":   l895 = UNIQUE | NON_NULL, FIXED
                // 4779: b"multiple memo ... _char: typeof(_525 = move _526 as *const i8 (Misc)) = *const {l3539} i8
                // 4779: b"multiple memo ... _char:   l3539 = UNIQUE | NON_NULL, (empty)
                // 4779: b"multiple memo ... on\0": typeof(_527 = &raw const (*_528)) = *const {l3537} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4779: b"multiple memo ... on\0":   l3537 = UNIQUE | NON_NULL, (empty)
                // 4779: b"multiple memo ... on\0": typeof(_528 = const b"multiple memory limit specification\x00") = & {l3536} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4779: b"multiple memo ... on\0":   l3536 = UNIQUE | NON_NULL, (empty)
                // 4779: b"multiple memo ... st u8: typeof(_526 = move _527 as *const u8 (Pointer(ArrayToPointer))) = *const {l3538} u8
                // 4779: b"multiple memo ... st u8:   l3538 = UNIQUE | NON_NULL, (empty)
            }
            i += 1;
            if i == argc {
                err(b"argument to '-g' missing\0" as *const u8 as *const libc::c_char);
                // 4783: b"argument to ' ... _char: typeof(_535) = *const {l903} i8
                // 4783: b"argument to ' ... _char:   l903 = UNIQUE | NON_NULL, (empty)
                // 4783: b"argument to ' ... st u8: typeof(_536) = *const {l905} u8
                // 4783: b"argument to ' ... st u8:   l905 = UNIQUE | NON_NULL, (empty)
                // 4783: b"argument to ' ... ng\0": typeof(_537) = *const {l907} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4783: b"argument to ' ... ng\0":   l907 = UNIQUE | NON_NULL, (empty)
                // 4783: b"argument to ' ... ng\0": typeof(_538) = & {l909} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4783: b"argument to ' ... ng\0":   l909 = UNIQUE | NON_NULL, FIXED
                // 4783: b"argument to ' ... st u8: typeof(_536 = move _537 as *const u8 (Pointer(ArrayToPointer))) = *const {l3542} u8
                // 4783: b"argument to ' ... st u8:   l3542 = UNIQUE | NON_NULL, (empty)
                // 4783: b"argument to ' ... ng\0": typeof(_537 = &raw const (*_538)) = *const {l3541} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4783: b"argument to ' ... ng\0":   l3541 = UNIQUE | NON_NULL, (empty)
                // 4783: b"argument to ' ... _char: typeof(_535 = move _536 as *const i8 (Misc)) = *const {l3543} i8
                // 4783: b"argument to ' ... _char:   l3543 = UNIQUE | NON_NULL, (empty)
                // 4783: b"argument to ' ... ng\0": typeof(_538 = const b"argument to \'-g\' missing\x00") = & {l3540} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4783: b"argument to ' ... ng\0":   l3540 = UNIQUE | NON_NULL, (empty)
            }
            if isnum(*argv.offset(i as isize)) == 0 {
            // 4785: *argv.offset(i  ... size): typeof(_542) = *const {l914} i8
            // 4785: *argv.offset(i  ... size):   l914 = UNIQUE | NON_NULL, (empty)
            // 4785: *argv.offset(i  ... size): typeof(_543) = *mut {l916} i8
            // 4785: *argv.offset(i  ... size):   l916 = UNIQUE | NON_NULL, (empty)
            // 4785: argv.offset(i a ... size): typeof(_544) = *mut {l918} *mut {l919} i8
            // 4785: argv.offset(i a ... size):   l918 = UNIQUE | NON_NULL, (empty)
            // 4785: argv.offset(i a ... size):   l919 = UNIQUE | NON_NULL, (empty)
            // 4785: argv: typeof(_545) = *mut {l921} *mut {l922} i8
            // 4785: argv:   l921 = UNIQUE | NON_NULL, (empty)
            // 4785: argv:   l922 = UNIQUE | NON_NULL, (empty)
            // 4785: *argv.offset(i  ... size): typeof(_542 = move _543 as *const i8 (Pointer(MutToConstPointer))) = *const {l3544} i8
            // 4785: *argv.offset(i  ... size):   l3544 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected number as argument in '-g %s'\0" as *const u8 as *const libc::c_char,
                    // 4787: b"expected numb ... _char: typeof(_549) = *const {l927} i8
                    // 4787: b"expected numb ... _char:   l927 = UNIQUE | NON_NULL, (empty)
                    // 4787: b"expected numb ... st u8: typeof(_550) = *const {l929} u8
                    // 4787: b"expected numb ... st u8:   l929 = UNIQUE | NON_NULL, (empty)
                    // 4787: b"expected numb ... s'\0": typeof(_551) = *const {l931} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4787: b"expected numb ... s'\0":   l931 = UNIQUE | NON_NULL, (empty)
                    // 4787: b"expected numb ... s'\0": typeof(_552) = & {l933} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4787: b"expected numb ... s'\0":   l933 = UNIQUE | NON_NULL, FIXED
                    // 4787: b"expected numb ... s'\0": typeof(_551 = &raw const (*_552)) = *const {l3546} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4787: b"expected numb ... s'\0":   l3546 = UNIQUE | NON_NULL, (empty)
                    // 4787: b"expected numb ... _char: typeof(_549 = move _550 as *const i8 (Misc)) = *const {l3548} i8
                    // 4787: b"expected numb ... _char:   l3548 = UNIQUE | NON_NULL, (empty)
                    // 4787: b"expected numb ... st u8: typeof(_550 = move _551 as *const u8 (Pointer(ArrayToPointer))) = *const {l3547} u8
                    // 4787: b"expected numb ... st u8:   l3547 = UNIQUE | NON_NULL, (empty)
                    // 4787: b"expected numb ... s'\0": typeof(_552 = const b"expected number as argument in \'-g %s\'\x00") = & {l3545} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4787: b"expected numb ... s'\0":   l3545 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4788: *argv.offset(i  ... size): typeof(_553) = *mut {l935} i8
                    // 4788: *argv.offset(i  ... size):   l935 = UNIQUE | NON_NULL, (empty)
                    // 4788: argv.offset(i a ... size): typeof(_554) = *mut {l937} *mut {l938} i8
                    // 4788: argv.offset(i a ... size):   l937 = UNIQUE | NON_NULL, (empty)
                    // 4788: argv.offset(i a ... size):   l938 = UNIQUE | NON_NULL, (empty)
                    // 4788: argv: typeof(_555) = *mut {l940} *mut {l941} i8
                    // 4788: argv:   l940 = UNIQUE | NON_NULL, (empty)
                    // 4788: argv:   l941 = UNIQUE | NON_NULL, (empty)
                );
            }
            hardlimbytes = atoll(*argv.offset(i as isize)) as size_t;
            // 4791: *argv.offset(i  ... size): typeof(_559) = *const {l946} i8
            // 4791: *argv.offset(i  ... size):   l946 = UNIQUE | NON_NULL, (empty)
            // 4791: *argv.offset(i  ... size): typeof(_560) = *mut {l948} i8
            // 4791: *argv.offset(i  ... size):   l948 = UNIQUE | NON_NULL, (empty)
            // 4791: argv.offset(i a ... size): typeof(_561) = *mut {l950} *mut {l951} i8
            // 4791: argv.offset(i a ... size):   l950 = UNIQUE | NON_NULL, (empty)
            // 4791: argv.offset(i a ... size):   l951 = UNIQUE | NON_NULL, (empty)
            // 4791: argv: typeof(_562) = *mut {l953} *mut {l954} i8
            // 4791: argv:   l953 = UNIQUE | NON_NULL, (empty)
            // 4791: argv:   l954 = UNIQUE | NON_NULL, (empty)
            // 4791: hardlimbytes: typeof(_565) = *mut {l958} u64
            // 4791: hardlimbytes:   l958 = UNIQUE | NON_NULL, (empty)
            // 4791: *argv.offset(i  ... size): typeof(_559 = move _560 as *const i8 (Pointer(MutToConstPointer))) = *const {l3549} i8
            // 4791: *argv.offset(i  ... size):   l3549 = UNIQUE | NON_NULL, (empty)
            if hardlimbytes > 0 as libc::c_int as size_t {
            // 4792: hardlimbytes: typeof(_569) = *mut {l963} u64
            // 4792: hardlimbytes:   l963 = UNIQUE | NON_NULL, (empty)
                hardlimbytes <<= 30 as libc::c_int;
                // 4793: hardlimbytes: typeof(_573) = *mut {l968} u64
                // 4793: hardlimbytes:   l968 = UNIQUE | NON_NULL, (empty)
            }
            if hardlimbytes <= 0 as libc::c_int as size_t {
            // 4795: hardlimbytes: typeof(_577) = *mut {l973} u64
            // 4795: hardlimbytes:   l973 = UNIQUE | NON_NULL, (empty)
                err(
                    b"invalid number of GB in '-g %s'\0" as *const u8 as *const libc::c_char,
                    // 4797: b"invalid numbe ... _char: typeof(_581) = *const {l978} i8
                    // 4797: b"invalid numbe ... _char:   l978 = UNIQUE | NON_NULL, (empty)
                    // 4797: b"invalid numbe ... st u8: typeof(_582) = *const {l980} u8
                    // 4797: b"invalid numbe ... st u8:   l980 = UNIQUE | NON_NULL, (empty)
                    // 4797: b"invalid numbe ... s'\0": typeof(_583) = *const {l982} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                    // 4797: b"invalid numbe ... s'\0":   l982 = UNIQUE | NON_NULL, (empty)
                    // 4797: b"invalid numbe ... s'\0": typeof(_584) = & {l984} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                    // 4797: b"invalid numbe ... s'\0":   l984 = UNIQUE | NON_NULL, FIXED
                    // 4797: b"invalid numbe ... s'\0": typeof(_584 = const b"invalid number of GB in \'-g %s\'\x00") = & {l3550} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                    // 4797: b"invalid numbe ... s'\0":   l3550 = UNIQUE | NON_NULL, (empty)
                    // 4797: b"invalid numbe ... _char: typeof(_581 = move _582 as *const i8 (Misc)) = *const {l3553} i8
                    // 4797: b"invalid numbe ... _char:   l3553 = UNIQUE | NON_NULL, (empty)
                    // 4797: b"invalid numbe ... s'\0": typeof(_583 = &raw const (*_584)) = *const {l3551} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                    // 4797: b"invalid numbe ... s'\0":   l3551 = UNIQUE | NON_NULL, (empty)
                    // 4797: b"invalid numbe ... st u8: typeof(_582 = move _583 as *const u8 (Pointer(ArrayToPointer))) = *const {l3552} u8
                    // 4797: b"invalid numbe ... st u8:   l3552 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4798: *argv.offset(i  ... size): typeof(_585) = *mut {l986} i8
                    // 4798: *argv.offset(i  ... size):   l986 = UNIQUE | NON_NULL, (empty)
                    // 4798: argv.offset(i a ... size): typeof(_586) = *mut {l988} *mut {l989} i8
                    // 4798: argv.offset(i a ... size):   l988 = UNIQUE | NON_NULL, (empty)
                    // 4798: argv.offset(i a ... size):   l989 = UNIQUE | NON_NULL, (empty)
                    // 4798: argv: typeof(_587) = *mut {l991} *mut {l992} i8
                    // 4798: argv:   l991 = UNIQUE | NON_NULL, (empty)
                    // 4798: argv:   l992 = UNIQUE | NON_NULL, (empty)
                );
            }
        } else if strcmp(
            *argv.offset(i as isize),
            // 4802: *argv.offset(i  ... size): typeof(_592) = *const {l998} i8
            // 4802: *argv.offset(i  ... size):   l998 = UNIQUE | NON_NULL, (empty)
            // 4802: *argv.offset(i  ... size): typeof(_593) = *mut {l1000} i8
            // 4802: *argv.offset(i  ... size):   l1000 = UNIQUE | NON_NULL, (empty)
            // 4802: argv.offset(i a ... size): typeof(_594) = *mut {l1002} *mut {l1003} i8
            // 4802: argv.offset(i a ... size):   l1002 = UNIQUE | NON_NULL, (empty)
            // 4802: argv.offset(i a ... size):   l1003 = UNIQUE | NON_NULL, (empty)
            // 4802: argv: typeof(_595) = *mut {l1005} *mut {l1006} i8
            // 4802: argv:   l1005 = UNIQUE | NON_NULL, (empty)
            // 4802: argv:   l1006 = UNIQUE | NON_NULL, (empty)
            // 4802: *argv.offset(i  ... size): typeof(_592 = move _593 as *const i8 (Pointer(MutToConstPointer))) = *const {l3554} i8
            // 4802: *argv.offset(i  ... size):   l3554 = UNIQUE | NON_NULL, (empty)
            b"-t\0" as *const u8 as *const libc::c_char,
            // 4803: b"-t\0" as *con ... _char: typeof(_598) = *const {l1010} i8
            // 4803: b"-t\0" as *con ... _char:   l1010 = UNIQUE | NON_NULL, (empty)
            // 4803: b"-t\0" as *const u8: typeof(_599) = *const {l1012} u8
            // 4803: b"-t\0" as *const u8:   l1012 = UNIQUE | NON_NULL, (empty)
            // 4803: b"-t\0": typeof(_600) = *const {l1014} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4803: b"-t\0":   l1014 = UNIQUE | NON_NULL, (empty)
            // 4803: b"-t\0": typeof(_601) = & {l1016} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4803: b"-t\0":   l1016 = UNIQUE | NON_NULL, FIXED
            // 4803: b"-t\0": typeof(_601 = const b"-t\x00") = & {l3555} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4803: b"-t\0":   l3555 = UNIQUE | NON_NULL, (empty)
            // 4803: b"-t\0" as *const u8: typeof(_599 = move _600 as *const u8 (Pointer(ArrayToPointer))) = *const {l3557} u8
            // 4803: b"-t\0" as *const u8:   l3557 = UNIQUE | NON_NULL, (empty)
            // 4803: b"-t\0" as *con ... _char: typeof(_598 = move _599 as *const i8 (Misc)) = *const {l3558} i8
            // 4803: b"-t\0" as *con ... _char:   l3558 = UNIQUE | NON_NULL, (empty)
            // 4803: b"-t\0": typeof(_600 = &raw const (*_601)) = *const {l3556} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4803: b"-t\0":   l3556 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            if maxworkers > 0 as libc::c_int {
            // 4806: maxworkers: typeof(_605) = *mut {l1021} i32
            // 4806: maxworkers:   l1021 = UNIQUE | NON_NULL, (empty)
                err(b"multiple '-t <workers>' options\0" as *const u8 as *const libc::c_char);
                // 4807: b"multiple '-t  ... _char: typeof(_608) = *const {l1025} i8
                // 4807: b"multiple '-t  ... _char:   l1025 = UNIQUE | NON_NULL, (empty)
                // 4807: b"multiple '-t  ... st u8: typeof(_609) = *const {l1027} u8
                // 4807: b"multiple '-t  ... st u8:   l1027 = UNIQUE | NON_NULL, (empty)
                // 4807: b"multiple '-t  ... ns\0": typeof(_610) = *const {l1029} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                // 4807: b"multiple '-t  ... ns\0":   l1029 = UNIQUE | NON_NULL, (empty)
                // 4807: b"multiple '-t  ... ns\0": typeof(_611) = & {l1031} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                // 4807: b"multiple '-t  ... ns\0":   l1031 = UNIQUE | NON_NULL, FIXED
                // 4807: b"multiple '-t  ... _char: typeof(_608 = move _609 as *const i8 (Misc)) = *const {l3562} i8
                // 4807: b"multiple '-t  ... _char:   l3562 = UNIQUE | NON_NULL, (empty)
                // 4807: b"multiple '-t  ... ns\0": typeof(_610 = &raw const (*_611)) = *const {l3560} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                // 4807: b"multiple '-t  ... ns\0":   l3560 = UNIQUE | NON_NULL, (empty)
                // 4807: b"multiple '-t  ... ns\0": typeof(_611 = const b"multiple \'-t <workers>\' options\x00") = & {l3559} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
                // 4807: b"multiple '-t  ... ns\0":   l3559 = UNIQUE | NON_NULL, (empty)
                // 4807: b"multiple '-t  ... st u8: typeof(_609 = move _610 as *const u8 (Pointer(ArrayToPointer))) = *const {l3561} u8
                // 4807: b"multiple '-t  ... st u8:   l3561 = UNIQUE | NON_NULL, (empty)
            }
            if maxworkers2 > 0 as libc::c_int {
            // 4809: maxworkers2: typeof(_615) = *mut {l1036} i32
            // 4809: maxworkers2:   l1036 = UNIQUE | NON_NULL, (empty)
                err(b"both '-t <workers>' and '<workers>'\0" as *const u8 as *const libc::c_char);
                // 4810: b"both '-t <wor ... _char: typeof(_618) = *const {l1040} i8
                // 4810: b"both '-t <wor ... _char:   l1040 = UNIQUE | NON_NULL, (empty)
                // 4810: b"both '-t <wor ... st u8: typeof(_619) = *const {l1042} u8
                // 4810: b"both '-t <wor ... st u8:   l1042 = UNIQUE | NON_NULL, (empty)
                // 4810: b"both '-t <wor ... >'\0": typeof(_620) = *const {l1044} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4810: b"both '-t <wor ... >'\0":   l1044 = UNIQUE | NON_NULL, (empty)
                // 4810: b"both '-t <wor ... >'\0": typeof(_621) = & {l1046} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4810: b"both '-t <wor ... >'\0":   l1046 = UNIQUE | NON_NULL, FIXED
                // 4810: b"both '-t <wor ... _char: typeof(_618 = move _619 as *const i8 (Misc)) = *const {l3566} i8
                // 4810: b"both '-t <wor ... _char:   l3566 = UNIQUE | NON_NULL, (empty)
                // 4810: b"both '-t <wor ... >'\0": typeof(_620 = &raw const (*_621)) = *const {l3564} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4810: b"both '-t <wor ... >'\0":   l3564 = UNIQUE | NON_NULL, (empty)
                // 4810: b"both '-t <wor ... >'\0": typeof(_621 = const b"both \'-t <workers>\' and \'<workers>\'\x00") = & {l3563} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4810: b"both '-t <wor ... >'\0":   l3563 = UNIQUE | NON_NULL, (empty)
                // 4810: b"both '-t <wor ... st u8: typeof(_619 = move _620 as *const u8 (Pointer(ArrayToPointer))) = *const {l3565} u8
                // 4810: b"both '-t <wor ... st u8:   l3565 = UNIQUE | NON_NULL, (empty)
            }
            i += 1;
            if i == argc {
                err(b"argument to '-t' missing\0" as *const u8 as *const libc::c_char);
                // 4814: b"argument to ' ... _char: typeof(_628) = *const {l1054} i8
                // 4814: b"argument to ' ... _char:   l1054 = UNIQUE | NON_NULL, (empty)
                // 4814: b"argument to ' ... st u8: typeof(_629) = *const {l1056} u8
                // 4814: b"argument to ' ... st u8:   l1056 = UNIQUE | NON_NULL, (empty)
                // 4814: b"argument to ' ... ng\0": typeof(_630) = *const {l1058} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4814: b"argument to ' ... ng\0":   l1058 = UNIQUE | NON_NULL, (empty)
                // 4814: b"argument to ' ... ng\0": typeof(_631) = & {l1060} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4814: b"argument to ' ... ng\0":   l1060 = UNIQUE | NON_NULL, FIXED
                // 4814: b"argument to ' ... st u8: typeof(_629 = move _630 as *const u8 (Pointer(ArrayToPointer))) = *const {l3569} u8
                // 4814: b"argument to ' ... st u8:   l3569 = UNIQUE | NON_NULL, (empty)
                // 4814: b"argument to ' ... ng\0": typeof(_631 = const b"argument to \'-t\' missing\x00") = & {l3567} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4814: b"argument to ' ... ng\0":   l3567 = UNIQUE | NON_NULL, (empty)
                // 4814: b"argument to ' ... ng\0": typeof(_630 = &raw const (*_631)) = *const {l3568} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4814: b"argument to ' ... ng\0":   l3568 = UNIQUE | NON_NULL, (empty)
                // 4814: b"argument to ' ... _char: typeof(_628 = move _629 as *const i8 (Misc)) = *const {l3570} i8
                // 4814: b"argument to ' ... _char:   l3570 = UNIQUE | NON_NULL, (empty)
            }
            if isnum(*argv.offset(i as isize)) == 0 {
            // 4816: *argv.offset(i  ... size): typeof(_635) = *const {l1065} i8
            // 4816: *argv.offset(i  ... size):   l1065 = UNIQUE | NON_NULL, (empty)
            // 4816: *argv.offset(i  ... size): typeof(_636) = *mut {l1067} i8
            // 4816: *argv.offset(i  ... size):   l1067 = UNIQUE | NON_NULL, (empty)
            // 4816: argv.offset(i a ... size): typeof(_637) = *mut {l1069} *mut {l1070} i8
            // 4816: argv.offset(i a ... size):   l1069 = UNIQUE | NON_NULL, (empty)
            // 4816: argv.offset(i a ... size):   l1070 = UNIQUE | NON_NULL, (empty)
            // 4816: argv: typeof(_638) = *mut {l1072} *mut {l1073} i8
            // 4816: argv:   l1072 = UNIQUE | NON_NULL, (empty)
            // 4816: argv:   l1073 = UNIQUE | NON_NULL, (empty)
            // 4816: *argv.offset(i  ... size): typeof(_635 = move _636 as *const i8 (Pointer(MutToConstPointer))) = *const {l3571} i8
            // 4816: *argv.offset(i  ... size):   l3571 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected number as argument in '-t %s'\0" as *const u8 as *const libc::c_char,
                    // 4818: b"expected numb ... _char: typeof(_642) = *const {l1078} i8
                    // 4818: b"expected numb ... _char:   l1078 = UNIQUE | NON_NULL, (empty)
                    // 4818: b"expected numb ... st u8: typeof(_643) = *const {l1080} u8
                    // 4818: b"expected numb ... st u8:   l1080 = UNIQUE | NON_NULL, (empty)
                    // 4818: b"expected numb ... s'\0": typeof(_644) = *const {l1082} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4818: b"expected numb ... s'\0":   l1082 = UNIQUE | NON_NULL, (empty)
                    // 4818: b"expected numb ... s'\0": typeof(_645) = & {l1084} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4818: b"expected numb ... s'\0":   l1084 = UNIQUE | NON_NULL, FIXED
                    // 4818: b"expected numb ... st u8: typeof(_643 = move _644 as *const u8 (Pointer(ArrayToPointer))) = *const {l3574} u8
                    // 4818: b"expected numb ... st u8:   l3574 = UNIQUE | NON_NULL, (empty)
                    // 4818: b"expected numb ... _char: typeof(_642 = move _643 as *const i8 (Misc)) = *const {l3575} i8
                    // 4818: b"expected numb ... _char:   l3575 = UNIQUE | NON_NULL, (empty)
                    // 4818: b"expected numb ... s'\0": typeof(_645 = const b"expected number as argument in \'-t %s\'\x00") = & {l3572} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4818: b"expected numb ... s'\0":   l3572 = UNIQUE | NON_NULL, (empty)
                    // 4818: b"expected numb ... s'\0": typeof(_644 = &raw const (*_645)) = *const {l3573} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4818: b"expected numb ... s'\0":   l3573 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4819: *argv.offset(i  ... size): typeof(_646) = *mut {l1086} i8
                    // 4819: *argv.offset(i  ... size):   l1086 = UNIQUE | NON_NULL, (empty)
                    // 4819: argv.offset(i a ... size): typeof(_647) = *mut {l1088} *mut {l1089} i8
                    // 4819: argv.offset(i a ... size):   l1088 = UNIQUE | NON_NULL, (empty)
                    // 4819: argv.offset(i a ... size):   l1089 = UNIQUE | NON_NULL, (empty)
                    // 4819: argv: typeof(_648) = *mut {l1091} *mut {l1092} i8
                    // 4819: argv:   l1091 = UNIQUE | NON_NULL, (empty)
                    // 4819: argv:   l1092 = UNIQUE | NON_NULL, (empty)
                );
            }
            maxworkers = atoi(*argv.offset(i as isize));
            // 4822: *argv.offset(i  ... size): typeof(_652) = *const {l1097} i8
            // 4822: *argv.offset(i  ... size):   l1097 = UNIQUE | NON_NULL, (empty)
            // 4822: *argv.offset(i  ... size): typeof(_653) = *mut {l1099} i8
            // 4822: *argv.offset(i  ... size):   l1099 = UNIQUE | NON_NULL, (empty)
            // 4822: argv.offset(i a ... size): typeof(_654) = *mut {l1101} *mut {l1102} i8
            // 4822: argv.offset(i a ... size):   l1101 = UNIQUE | NON_NULL, (empty)
            // 4822: argv.offset(i a ... size):   l1102 = UNIQUE | NON_NULL, (empty)
            // 4822: argv: typeof(_655) = *mut {l1104} *mut {l1105} i8
            // 4822: argv:   l1104 = UNIQUE | NON_NULL, (empty)
            // 4822: argv:   l1105 = UNIQUE | NON_NULL, (empty)
            // 4822: maxworkers: typeof(_658) = *mut {l1109} i32
            // 4822: maxworkers:   l1109 = UNIQUE | NON_NULL, (empty)
            // 4822: *argv.offset(i  ... size): typeof(_652 = move _653 as *const i8 (Pointer(MutToConstPointer))) = *const {l3576} i8
            // 4822: *argv.offset(i  ... size):   l3576 = UNIQUE | NON_NULL, (empty)
            if maxworkers <= 0 as libc::c_int {
            // 4823: maxworkers: typeof(_661) = *mut {l1113} i32
            // 4823: maxworkers:   l1113 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected positive number in '-t %s'\0" as *const u8 as *const libc::c_char,
                    // 4825: b"expected posi ... _char: typeof(_664) = *const {l1117} i8
                    // 4825: b"expected posi ... _char:   l1117 = UNIQUE | NON_NULL, (empty)
                    // 4825: b"expected posi ... st u8: typeof(_665) = *const {l1119} u8
                    // 4825: b"expected posi ... st u8:   l1119 = UNIQUE | NON_NULL, (empty)
                    // 4825: b"expected posi ... s'\0": typeof(_666) = *const {l1121} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4825: b"expected posi ... s'\0":   l1121 = UNIQUE | NON_NULL, (empty)
                    // 4825: b"expected posi ... s'\0": typeof(_667) = & {l1123} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4825: b"expected posi ... s'\0":   l1123 = UNIQUE | NON_NULL, FIXED
                    // 4825: b"expected posi ... s'\0": typeof(_666 = &raw const (*_667)) = *const {l3578} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4825: b"expected posi ... s'\0":   l3578 = UNIQUE | NON_NULL, (empty)
                    // 4825: b"expected posi ... _char: typeof(_664 = move _665 as *const i8 (Misc)) = *const {l3580} i8
                    // 4825: b"expected posi ... _char:   l3580 = UNIQUE | NON_NULL, (empty)
                    // 4825: b"expected posi ... s'\0": typeof(_667 = const b"expected positive number in \'-t %s\'\x00") = & {l3577} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4825: b"expected posi ... s'\0":   l3577 = UNIQUE | NON_NULL, (empty)
                    // 4825: b"expected posi ... st u8: typeof(_665 = move _666 as *const u8 (Pointer(ArrayToPointer))) = *const {l3579} u8
                    // 4825: b"expected posi ... st u8:   l3579 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4826: *argv.offset(i  ... size): typeof(_668) = *mut {l1125} i8
                    // 4826: *argv.offset(i  ... size):   l1125 = UNIQUE | NON_NULL, (empty)
                    // 4826: argv.offset(i a ... size): typeof(_669) = *mut {l1127} *mut {l1128} i8
                    // 4826: argv.offset(i a ... size):   l1127 = UNIQUE | NON_NULL, (empty)
                    // 4826: argv.offset(i a ... size):   l1128 = UNIQUE | NON_NULL, (empty)
                    // 4826: argv: typeof(_670) = *mut {l1130} *mut {l1131} i8
                    // 4826: argv:   l1130 = UNIQUE | NON_NULL, (empty)
                    // 4826: argv:   l1131 = UNIQUE | NON_NULL, (empty)
                );
            }
        } else if strcmp(
            *argv.offset(i as isize),
            // 4830: *argv.offset(i  ... size): typeof(_675) = *const {l1137} i8
            // 4830: *argv.offset(i  ... size):   l1137 = UNIQUE | NON_NULL, (empty)
            // 4830: *argv.offset(i  ... size): typeof(_676) = *mut {l1139} i8
            // 4830: *argv.offset(i  ... size):   l1139 = UNIQUE | NON_NULL, (empty)
            // 4830: argv.offset(i a ... size): typeof(_677) = *mut {l1141} *mut {l1142} i8
            // 4830: argv.offset(i a ... size):   l1141 = UNIQUE | NON_NULL, (empty)
            // 4830: argv.offset(i a ... size):   l1142 = UNIQUE | NON_NULL, (empty)
            // 4830: argv: typeof(_678) = *mut {l1144} *mut {l1145} i8
            // 4830: argv:   l1144 = UNIQUE | NON_NULL, (empty)
            // 4830: argv:   l1145 = UNIQUE | NON_NULL, (empty)
            // 4830: *argv.offset(i  ... size): typeof(_675 = move _676 as *const i8 (Pointer(MutToConstPointer))) = *const {l3581} i8
            // 4830: *argv.offset(i  ... size):   l3581 = UNIQUE | NON_NULL, (empty)
            b"-a\0" as *const u8 as *const libc::c_char,
            // 4831: b"-a\0" as *con ... _char: typeof(_681) = *const {l1149} i8
            // 4831: b"-a\0" as *con ... _char:   l1149 = UNIQUE | NON_NULL, (empty)
            // 4831: b"-a\0" as *const u8: typeof(_682) = *const {l1151} u8
            // 4831: b"-a\0" as *const u8:   l1151 = UNIQUE | NON_NULL, (empty)
            // 4831: b"-a\0": typeof(_683) = *const {l1153} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4831: b"-a\0":   l1153 = UNIQUE | NON_NULL, (empty)
            // 4831: b"-a\0": typeof(_684) = & {l1155} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4831: b"-a\0":   l1155 = UNIQUE | NON_NULL, FIXED
            // 4831: b"-a\0" as *con ... _char: typeof(_681 = move _682 as *const i8 (Misc)) = *const {l3585} i8
            // 4831: b"-a\0" as *con ... _char:   l3585 = UNIQUE | NON_NULL, (empty)
            // 4831: b"-a\0" as *const u8: typeof(_682 = move _683 as *const u8 (Pointer(ArrayToPointer))) = *const {l3584} u8
            // 4831: b"-a\0" as *const u8:   l3584 = UNIQUE | NON_NULL, (empty)
            // 4831: b"-a\0": typeof(_683 = &raw const (*_684)) = *const {l3583} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4831: b"-a\0":   l3583 = UNIQUE | NON_NULL, (empty)
            // 4831: b"-a\0": typeof(_684 = const b"-a\x00") = & {l3582} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4831: b"-a\0":   l3582 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            if maxactive > 0 as libc::c_int {
            // 4834: maxactive: typeof(_688) = *mut {l1160} i32
            // 4834: maxactive:   l1160 = UNIQUE | NON_NULL, (empty)
                err(b"multiple '-a <nodes>' options\0" as *const u8 as *const libc::c_char);
                // 4835: b"multiple '-a  ... _char: typeof(_691) = *const {l1164} i8
                // 4835: b"multiple '-a  ... _char:   l1164 = UNIQUE | NON_NULL, (empty)
                // 4835: b"multiple '-a  ... st u8: typeof(_692) = *const {l1166} u8
                // 4835: b"multiple '-a  ... st u8:   l1166 = UNIQUE | NON_NULL, (empty)
                // 4835: b"multiple '-a  ... ns\0": typeof(_693) = *const {l1168} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
                // 4835: b"multiple '-a  ... ns\0":   l1168 = UNIQUE | NON_NULL, (empty)
                // 4835: b"multiple '-a  ... ns\0": typeof(_694) = & {l1170} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
                // 4835: b"multiple '-a  ... ns\0":   l1170 = UNIQUE | NON_NULL, FIXED
                // 4835: b"multiple '-a  ... _char: typeof(_691 = move _692 as *const i8 (Misc)) = *const {l3589} i8
                // 4835: b"multiple '-a  ... _char:   l3589 = UNIQUE | NON_NULL, (empty)
                // 4835: b"multiple '-a  ... ns\0": typeof(_693 = &raw const (*_694)) = *const {l3587} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
                // 4835: b"multiple '-a  ... ns\0":   l3587 = UNIQUE | NON_NULL, (empty)
                // 4835: b"multiple '-a  ... ns\0": typeof(_694 = const b"multiple \'-a <nodes>\' options\x00") = & {l3586} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
                // 4835: b"multiple '-a  ... ns\0":   l3586 = UNIQUE | NON_NULL, (empty)
                // 4835: b"multiple '-a  ... st u8: typeof(_692 = move _693 as *const u8 (Pointer(ArrayToPointer))) = *const {l3588} u8
                // 4835: b"multiple '-a  ... st u8:   l3588 = UNIQUE | NON_NULL, (empty)
            }
            i += 1;
            if i == argc {
                err(b"argument to '-a' missing\0" as *const u8 as *const libc::c_char);
                // 4839: b"argument to ' ... _char: typeof(_701) = *const {l1178} i8
                // 4839: b"argument to ' ... _char:   l1178 = UNIQUE | NON_NULL, (empty)
                // 4839: b"argument to ' ... st u8: typeof(_702) = *const {l1180} u8
                // 4839: b"argument to ' ... st u8:   l1180 = UNIQUE | NON_NULL, (empty)
                // 4839: b"argument to ' ... ng\0": typeof(_703) = *const {l1182} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4839: b"argument to ' ... ng\0":   l1182 = UNIQUE | NON_NULL, (empty)
                // 4839: b"argument to ' ... ng\0": typeof(_704) = & {l1184} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4839: b"argument to ' ... ng\0":   l1184 = UNIQUE | NON_NULL, FIXED
                // 4839: b"argument to ' ... ng\0": typeof(_703 = &raw const (*_704)) = *const {l3591} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4839: b"argument to ' ... ng\0":   l3591 = UNIQUE | NON_NULL, (empty)
                // 4839: b"argument to ' ... st u8: typeof(_702 = move _703 as *const u8 (Pointer(ArrayToPointer))) = *const {l3592} u8
                // 4839: b"argument to ' ... st u8:   l3592 = UNIQUE | NON_NULL, (empty)
                // 4839: b"argument to ' ... ng\0": typeof(_704 = const b"argument to \'-a\' missing\x00") = & {l3590} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4839: b"argument to ' ... ng\0":   l3590 = UNIQUE | NON_NULL, (empty)
                // 4839: b"argument to ' ... _char: typeof(_701 = move _702 as *const i8 (Misc)) = *const {l3593} i8
                // 4839: b"argument to ' ... _char:   l3593 = UNIQUE | NON_NULL, (empty)
            }
            if isnum(*argv.offset(i as isize)) == 0 {
            // 4841: *argv.offset(i  ... size): typeof(_708) = *const {l1189} i8
            // 4841: *argv.offset(i  ... size):   l1189 = UNIQUE | NON_NULL, (empty)
            // 4841: *argv.offset(i  ... size): typeof(_709) = *mut {l1191} i8
            // 4841: *argv.offset(i  ... size):   l1191 = UNIQUE | NON_NULL, (empty)
            // 4841: argv.offset(i a ... size): typeof(_710) = *mut {l1193} *mut {l1194} i8
            // 4841: argv.offset(i a ... size):   l1193 = UNIQUE | NON_NULL, (empty)
            // 4841: argv.offset(i a ... size):   l1194 = UNIQUE | NON_NULL, (empty)
            // 4841: argv: typeof(_711) = *mut {l1196} *mut {l1197} i8
            // 4841: argv:   l1196 = UNIQUE | NON_NULL, (empty)
            // 4841: argv:   l1197 = UNIQUE | NON_NULL, (empty)
            // 4841: *argv.offset(i  ... size): typeof(_708 = move _709 as *const i8 (Pointer(MutToConstPointer))) = *const {l3594} i8
            // 4841: *argv.offset(i  ... size):   l3594 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected number as argument in '-a %s'\0" as *const u8 as *const libc::c_char,
                    // 4843: b"expected numb ... _char: typeof(_715) = *const {l1202} i8
                    // 4843: b"expected numb ... _char:   l1202 = UNIQUE | NON_NULL, (empty)
                    // 4843: b"expected numb ... st u8: typeof(_716) = *const {l1204} u8
                    // 4843: b"expected numb ... st u8:   l1204 = UNIQUE | NON_NULL, (empty)
                    // 4843: b"expected numb ... s'\0": typeof(_717) = *const {l1206} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4843: b"expected numb ... s'\0":   l1206 = UNIQUE | NON_NULL, (empty)
                    // 4843: b"expected numb ... s'\0": typeof(_718) = & {l1208} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4843: b"expected numb ... s'\0":   l1208 = UNIQUE | NON_NULL, FIXED
                    // 4843: b"expected numb ... s'\0": typeof(_718 = const b"expected number as argument in \'-a %s\'\x00") = & {l3595} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4843: b"expected numb ... s'\0":   l3595 = UNIQUE | NON_NULL, (empty)
                    // 4843: b"expected numb ... st u8: typeof(_716 = move _717 as *const u8 (Pointer(ArrayToPointer))) = *const {l3597} u8
                    // 4843: b"expected numb ... st u8:   l3597 = UNIQUE | NON_NULL, (empty)
                    // 4843: b"expected numb ... _char: typeof(_715 = move _716 as *const i8 (Misc)) = *const {l3598} i8
                    // 4843: b"expected numb ... _char:   l3598 = UNIQUE | NON_NULL, (empty)
                    // 4843: b"expected numb ... s'\0": typeof(_717 = &raw const (*_718)) = *const {l3596} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4843: b"expected numb ... s'\0":   l3596 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4844: *argv.offset(i  ... size): typeof(_719) = *mut {l1210} i8
                    // 4844: *argv.offset(i  ... size):   l1210 = UNIQUE | NON_NULL, (empty)
                    // 4844: argv.offset(i a ... size): typeof(_720) = *mut {l1212} *mut {l1213} i8
                    // 4844: argv.offset(i a ... size):   l1212 = UNIQUE | NON_NULL, (empty)
                    // 4844: argv.offset(i a ... size):   l1213 = UNIQUE | NON_NULL, (empty)
                    // 4844: argv: typeof(_721) = *mut {l1215} *mut {l1216} i8
                    // 4844: argv:   l1215 = UNIQUE | NON_NULL, (empty)
                    // 4844: argv:   l1216 = UNIQUE | NON_NULL, (empty)
                );
            }
            maxactive = atoi(*argv.offset(i as isize));
            // 4847: *argv.offset(i  ... size): typeof(_725) = *const {l1221} i8
            // 4847: *argv.offset(i  ... size):   l1221 = UNIQUE | NON_NULL, (empty)
            // 4847: *argv.offset(i  ... size): typeof(_726) = *mut {l1223} i8
            // 4847: *argv.offset(i  ... size):   l1223 = UNIQUE | NON_NULL, (empty)
            // 4847: argv.offset(i a ... size): typeof(_727) = *mut {l1225} *mut {l1226} i8
            // 4847: argv.offset(i a ... size):   l1225 = UNIQUE | NON_NULL, (empty)
            // 4847: argv.offset(i a ... size):   l1226 = UNIQUE | NON_NULL, (empty)
            // 4847: argv: typeof(_728) = *mut {l1228} *mut {l1229} i8
            // 4847: argv:   l1228 = UNIQUE | NON_NULL, (empty)
            // 4847: argv:   l1229 = UNIQUE | NON_NULL, (empty)
            // 4847: maxactive: typeof(_731) = *mut {l1233} i32
            // 4847: maxactive:   l1233 = UNIQUE | NON_NULL, (empty)
            // 4847: *argv.offset(i  ... size): typeof(_725 = move _726 as *const i8 (Pointer(MutToConstPointer))) = *const {l3599} i8
            // 4847: *argv.offset(i  ... size):   l3599 = UNIQUE | NON_NULL, (empty)
            if maxactive <= 0 as libc::c_int {
            // 4848: maxactive: typeof(_734) = *mut {l1237} i32
            // 4848: maxactive:   l1237 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected positive number in '-a %s'\0" as *const u8 as *const libc::c_char,
                    // 4850: b"expected posi ... _char: typeof(_737) = *const {l1241} i8
                    // 4850: b"expected posi ... _char:   l1241 = UNIQUE | NON_NULL, (empty)
                    // 4850: b"expected posi ... st u8: typeof(_738) = *const {l1243} u8
                    // 4850: b"expected posi ... st u8:   l1243 = UNIQUE | NON_NULL, (empty)
                    // 4850: b"expected posi ... s'\0": typeof(_739) = *const {l1245} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4850: b"expected posi ... s'\0":   l1245 = UNIQUE | NON_NULL, (empty)
                    // 4850: b"expected posi ... s'\0": typeof(_740) = & {l1247} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4850: b"expected posi ... s'\0":   l1247 = UNIQUE | NON_NULL, FIXED
                    // 4850: b"expected posi ... _char: typeof(_737 = move _738 as *const i8 (Misc)) = *const {l3603} i8
                    // 4850: b"expected posi ... _char:   l3603 = UNIQUE | NON_NULL, (empty)
                    // 4850: b"expected posi ... s'\0": typeof(_740 = const b"expected positive number in \'-a %s\'\x00") = & {l3600} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4850: b"expected posi ... s'\0":   l3600 = UNIQUE | NON_NULL, (empty)
                    // 4850: b"expected posi ... s'\0": typeof(_739 = &raw const (*_740)) = *const {l3601} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4850: b"expected posi ... s'\0":   l3601 = UNIQUE | NON_NULL, (empty)
                    // 4850: b"expected posi ... st u8: typeof(_738 = move _739 as *const u8 (Pointer(ArrayToPointer))) = *const {l3602} u8
                    // 4850: b"expected posi ... st u8:   l3602 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4851: *argv.offset(i  ... size): typeof(_741) = *mut {l1249} i8
                    // 4851: *argv.offset(i  ... size):   l1249 = UNIQUE | NON_NULL, (empty)
                    // 4851: argv.offset(i a ... size): typeof(_742) = *mut {l1251} *mut {l1252} i8
                    // 4851: argv.offset(i a ... size):   l1251 = UNIQUE | NON_NULL, (empty)
                    // 4851: argv.offset(i a ... size):   l1252 = UNIQUE | NON_NULL, (empty)
                    // 4851: argv: typeof(_743) = *mut {l1254} *mut {l1255} i8
                    // 4851: argv:   l1254 = UNIQUE | NON_NULL, (empty)
                    // 4851: argv:   l1255 = UNIQUE | NON_NULL, (empty)
                );
            }
        } else if strcmp(
            *argv.offset(i as isize),
            // 4855: *argv.offset(i  ... size): typeof(_748) = *const {l1261} i8
            // 4855: *argv.offset(i  ... size):   l1261 = UNIQUE | NON_NULL, (empty)
            // 4855: *argv.offset(i  ... size): typeof(_749) = *mut {l1263} i8
            // 4855: *argv.offset(i  ... size):   l1263 = UNIQUE | NON_NULL, (empty)
            // 4855: argv.offset(i a ... size): typeof(_750) = *mut {l1265} *mut {l1266} i8
            // 4855: argv.offset(i a ... size):   l1265 = UNIQUE | NON_NULL, (empty)
            // 4855: argv.offset(i a ... size):   l1266 = UNIQUE | NON_NULL, (empty)
            // 4855: argv: typeof(_751) = *mut {l1268} *mut {l1269} i8
            // 4855: argv:   l1268 = UNIQUE | NON_NULL, (empty)
            // 4855: argv:   l1269 = UNIQUE | NON_NULL, (empty)
            // 4855: *argv.offset(i  ... size): typeof(_748 = move _749 as *const i8 (Pointer(MutToConstPointer))) = *const {l3604} i8
            // 4855: *argv.offset(i  ... size):   l3604 = UNIQUE | NON_NULL, (empty)
            b"-b\0" as *const u8 as *const libc::c_char,
            // 4856: b"-b\0" as *con ... _char: typeof(_754) = *const {l1273} i8
            // 4856: b"-b\0" as *con ... _char:   l1273 = UNIQUE | NON_NULL, (empty)
            // 4856: b"-b\0" as *const u8: typeof(_755) = *const {l1275} u8
            // 4856: b"-b\0" as *const u8:   l1275 = UNIQUE | NON_NULL, (empty)
            // 4856: b"-b\0": typeof(_756) = *const {l1277} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4856: b"-b\0":   l1277 = UNIQUE | NON_NULL, (empty)
            // 4856: b"-b\0": typeof(_757) = & {l1279} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4856: b"-b\0":   l1279 = UNIQUE | NON_NULL, FIXED
            // 4856: b"-b\0" as *const u8: typeof(_755 = move _756 as *const u8 (Pointer(ArrayToPointer))) = *const {l3607} u8
            // 4856: b"-b\0" as *const u8:   l3607 = UNIQUE | NON_NULL, (empty)
            // 4856: b"-b\0": typeof(_756 = &raw const (*_757)) = *const {l3606} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4856: b"-b\0":   l3606 = UNIQUE | NON_NULL, (empty)
            // 4856: b"-b\0": typeof(_757 = const b"-b\x00") = & {l3605} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4856: b"-b\0":   l3605 = UNIQUE | NON_NULL, (empty)
            // 4856: b"-b\0" as *con ... _char: typeof(_754 = move _755 as *const i8 (Misc)) = *const {l3608} i8
            // 4856: b"-b\0" as *con ... _char:   l3608 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            if branches >= 0 as libc::c_int {
            // 4859: branches: typeof(_761) = *mut {l1284} i32
            // 4859: branches:   l1284 = UNIQUE | NON_NULL, (empty)
                err(b"multiple '-b <branches>' options\0" as *const u8 as *const libc::c_char);
                // 4860: b"multiple '-b  ... _char: typeof(_764) = *const {l1288} i8
                // 4860: b"multiple '-b  ... _char:   l1288 = UNIQUE | NON_NULL, (empty)
                // 4860: b"multiple '-b  ... st u8: typeof(_765) = *const {l1290} u8
                // 4860: b"multiple '-b  ... st u8:   l1290 = UNIQUE | NON_NULL, (empty)
                // 4860: b"multiple '-b  ... ns\0": typeof(_766) = *const {l1292} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
                // 4860: b"multiple '-b  ... ns\0":   l1292 = UNIQUE | NON_NULL, (empty)
                // 4860: b"multiple '-b  ... ns\0": typeof(_767) = & {l1294} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
                // 4860: b"multiple '-b  ... ns\0":   l1294 = UNIQUE | NON_NULL, FIXED
                // 4860: b"multiple '-b  ... ns\0": typeof(_767 = const b"multiple \'-b <branches>\' options\x00") = & {l3609} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
                // 4860: b"multiple '-b  ... ns\0":   l3609 = UNIQUE | NON_NULL, (empty)
                // 4860: b"multiple '-b  ... st u8: typeof(_765 = move _766 as *const u8 (Pointer(ArrayToPointer))) = *const {l3611} u8
                // 4860: b"multiple '-b  ... st u8:   l3611 = UNIQUE | NON_NULL, (empty)
                // 4860: b"multiple '-b  ... _char: typeof(_764 = move _765 as *const i8 (Misc)) = *const {l3612} i8
                // 4860: b"multiple '-b  ... _char:   l3612 = UNIQUE | NON_NULL, (empty)
                // 4860: b"multiple '-b  ... ns\0": typeof(_766 = &raw const (*_767)) = *const {l3610} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000021)) }]
                // 4860: b"multiple '-b  ... ns\0":   l3610 = UNIQUE | NON_NULL, (empty)
            }
            i += 1;
            if i == argc {
                err(b"argument to '-b' missing\0" as *const u8 as *const libc::c_char);
                // 4864: b"argument to ' ... _char: typeof(_774) = *const {l1302} i8
                // 4864: b"argument to ' ... _char:   l1302 = UNIQUE | NON_NULL, (empty)
                // 4864: b"argument to ' ... st u8: typeof(_775) = *const {l1304} u8
                // 4864: b"argument to ' ... st u8:   l1304 = UNIQUE | NON_NULL, (empty)
                // 4864: b"argument to ' ... ng\0": typeof(_776) = *const {l1306} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4864: b"argument to ' ... ng\0":   l1306 = UNIQUE | NON_NULL, (empty)
                // 4864: b"argument to ' ... ng\0": typeof(_777) = & {l1308} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4864: b"argument to ' ... ng\0":   l1308 = UNIQUE | NON_NULL, FIXED
                // 4864: b"argument to ' ... ng\0": typeof(_777 = const b"argument to \'-b\' missing\x00") = & {l3613} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4864: b"argument to ' ... ng\0":   l3613 = UNIQUE | NON_NULL, (empty)
                // 4864: b"argument to ' ... _char: typeof(_774 = move _775 as *const i8 (Misc)) = *const {l3616} i8
                // 4864: b"argument to ' ... _char:   l3616 = UNIQUE | NON_NULL, (empty)
                // 4864: b"argument to ' ... st u8: typeof(_775 = move _776 as *const u8 (Pointer(ArrayToPointer))) = *const {l3615} u8
                // 4864: b"argument to ' ... st u8:   l3615 = UNIQUE | NON_NULL, (empty)
                // 4864: b"argument to ' ... ng\0": typeof(_776 = &raw const (*_777)) = *const {l3614} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4864: b"argument to ' ... ng\0":   l3614 = UNIQUE | NON_NULL, (empty)
            }
            if isnum(*argv.offset(i as isize)) == 0 {
            // 4866: *argv.offset(i  ... size): typeof(_781) = *const {l1313} i8
            // 4866: *argv.offset(i  ... size):   l1313 = UNIQUE | NON_NULL, (empty)
            // 4866: *argv.offset(i  ... size): typeof(_782) = *mut {l1315} i8
            // 4866: *argv.offset(i  ... size):   l1315 = UNIQUE | NON_NULL, (empty)
            // 4866: argv.offset(i a ... size): typeof(_783) = *mut {l1317} *mut {l1318} i8
            // 4866: argv.offset(i a ... size):   l1317 = UNIQUE | NON_NULL, (empty)
            // 4866: argv.offset(i a ... size):   l1318 = UNIQUE | NON_NULL, (empty)
            // 4866: argv: typeof(_784) = *mut {l1320} *mut {l1321} i8
            // 4866: argv:   l1320 = UNIQUE | NON_NULL, (empty)
            // 4866: argv:   l1321 = UNIQUE | NON_NULL, (empty)
            // 4866: *argv.offset(i  ... size): typeof(_781 = move _782 as *const i8 (Pointer(MutToConstPointer))) = *const {l3617} i8
            // 4866: *argv.offset(i  ... size):   l3617 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected number as argument in '-b %s'\0" as *const u8 as *const libc::c_char,
                    // 4868: b"expected numb ... _char: typeof(_788) = *const {l1326} i8
                    // 4868: b"expected numb ... _char:   l1326 = UNIQUE | NON_NULL, (empty)
                    // 4868: b"expected numb ... st u8: typeof(_789) = *const {l1328} u8
                    // 4868: b"expected numb ... st u8:   l1328 = UNIQUE | NON_NULL, (empty)
                    // 4868: b"expected numb ... s'\0": typeof(_790) = *const {l1330} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4868: b"expected numb ... s'\0":   l1330 = UNIQUE | NON_NULL, (empty)
                    // 4868: b"expected numb ... s'\0": typeof(_791) = & {l1332} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4868: b"expected numb ... s'\0":   l1332 = UNIQUE | NON_NULL, FIXED
                    // 4868: b"expected numb ... s'\0": typeof(_790 = &raw const (*_791)) = *const {l3619} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4868: b"expected numb ... s'\0":   l3619 = UNIQUE | NON_NULL, (empty)
                    // 4868: b"expected numb ... st u8: typeof(_789 = move _790 as *const u8 (Pointer(ArrayToPointer))) = *const {l3620} u8
                    // 4868: b"expected numb ... st u8:   l3620 = UNIQUE | NON_NULL, (empty)
                    // 4868: b"expected numb ... _char: typeof(_788 = move _789 as *const i8 (Misc)) = *const {l3621} i8
                    // 4868: b"expected numb ... _char:   l3621 = UNIQUE | NON_NULL, (empty)
                    // 4868: b"expected numb ... s'\0": typeof(_791 = const b"expected number as argument in \'-b %s\'\x00") = & {l3618} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4868: b"expected numb ... s'\0":   l3618 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4869: *argv.offset(i  ... size): typeof(_792) = *mut {l1334} i8
                    // 4869: *argv.offset(i  ... size):   l1334 = UNIQUE | NON_NULL, (empty)
                    // 4869: argv.offset(i a ... size): typeof(_793) = *mut {l1336} *mut {l1337} i8
                    // 4869: argv.offset(i a ... size):   l1336 = UNIQUE | NON_NULL, (empty)
                    // 4869: argv.offset(i a ... size):   l1337 = UNIQUE | NON_NULL, (empty)
                    // 4869: argv: typeof(_794) = *mut {l1339} *mut {l1340} i8
                    // 4869: argv:   l1339 = UNIQUE | NON_NULL, (empty)
                    // 4869: argv:   l1340 = UNIQUE | NON_NULL, (empty)
                );
            }
            branches = atoi(*argv.offset(i as isize));
            // 4872: *argv.offset(i  ... size): typeof(_798) = *const {l1345} i8
            // 4872: *argv.offset(i  ... size):   l1345 = UNIQUE | NON_NULL, (empty)
            // 4872: *argv.offset(i  ... size): typeof(_799) = *mut {l1347} i8
            // 4872: *argv.offset(i  ... size):   l1347 = UNIQUE | NON_NULL, (empty)
            // 4872: argv.offset(i a ... size): typeof(_800) = *mut {l1349} *mut {l1350} i8
            // 4872: argv.offset(i a ... size):   l1349 = UNIQUE | NON_NULL, (empty)
            // 4872: argv.offset(i a ... size):   l1350 = UNIQUE | NON_NULL, (empty)
            // 4872: argv: typeof(_801) = *mut {l1352} *mut {l1353} i8
            // 4872: argv:   l1352 = UNIQUE | NON_NULL, (empty)
            // 4872: argv:   l1353 = UNIQUE | NON_NULL, (empty)
            // 4872: branches: typeof(_804) = *mut {l1357} i32
            // 4872: branches:   l1357 = UNIQUE | NON_NULL, (empty)
            // 4872: *argv.offset(i  ... size): typeof(_798 = move _799 as *const i8 (Pointer(MutToConstPointer))) = *const {l3622} i8
            // 4872: *argv.offset(i  ... size):   l3622 = UNIQUE | NON_NULL, (empty)
            if branches <= 0 as libc::c_int {
            // 4873: branches: typeof(_808) = *mut {l1362} i32
            // 4873: branches:   l1362 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected positive number in '-b %s'\0" as *const u8 as *const libc::c_char,
                    // 4875: b"expected posi ... _char: typeof(_811) = *const {l1366} i8
                    // 4875: b"expected posi ... _char:   l1366 = UNIQUE | NON_NULL, (empty)
                    // 4875: b"expected posi ... st u8: typeof(_812) = *const {l1368} u8
                    // 4875: b"expected posi ... st u8:   l1368 = UNIQUE | NON_NULL, (empty)
                    // 4875: b"expected posi ... s'\0": typeof(_813) = *const {l1370} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4875: b"expected posi ... s'\0":   l1370 = UNIQUE | NON_NULL, (empty)
                    // 4875: b"expected posi ... s'\0": typeof(_814) = & {l1372} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4875: b"expected posi ... s'\0":   l1372 = UNIQUE | NON_NULL, FIXED
                    // 4875: b"expected posi ... s'\0": typeof(_814 = const b"expected positive number in \'-b %s\'\x00") = & {l3623} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4875: b"expected posi ... s'\0":   l3623 = UNIQUE | NON_NULL, (empty)
                    // 4875: b"expected posi ... s'\0": typeof(_813 = &raw const (*_814)) = *const {l3624} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4875: b"expected posi ... s'\0":   l3624 = UNIQUE | NON_NULL, (empty)
                    // 4875: b"expected posi ... _char: typeof(_811 = move _812 as *const i8 (Misc)) = *const {l3626} i8
                    // 4875: b"expected posi ... _char:   l3626 = UNIQUE | NON_NULL, (empty)
                    // 4875: b"expected posi ... st u8: typeof(_812 = move _813 as *const u8 (Pointer(ArrayToPointer))) = *const {l3625} u8
                    // 4875: b"expected posi ... st u8:   l3625 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4876: *argv.offset(i  ... size): typeof(_815) = *mut {l1374} i8
                    // 4876: *argv.offset(i  ... size):   l1374 = UNIQUE | NON_NULL, (empty)
                    // 4876: argv.offset(i a ... size): typeof(_816) = *mut {l1376} *mut {l1377} i8
                    // 4876: argv.offset(i a ... size):   l1376 = UNIQUE | NON_NULL, (empty)
                    // 4876: argv.offset(i a ... size):   l1377 = UNIQUE | NON_NULL, (empty)
                    // 4876: argv: typeof(_817) = *mut {l1379} *mut {l1380} i8
                    // 4876: argv:   l1379 = UNIQUE | NON_NULL, (empty)
                    // 4876: argv:   l1380 = UNIQUE | NON_NULL, (empty)
                );
            }
            if branches > 100 as libc::c_int {
            // 4879: branches: typeof(_822) = *mut {l1386} i32
            // 4879: branches:   l1386 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected number not larger than 100 in '-b %s'\0" as *const u8
                    // 4881: b"expected numb ... _char: typeof(_825) = *const {l1390} i8
                    // 4881: b"expected numb ... _char:   l1390 = UNIQUE | NON_NULL, (empty)
                    // 4881: b"expected numb ... st u8: typeof(_826) = *const {l1392} u8
                    // 4881: b"expected numb ... st u8:   l1392 = UNIQUE | NON_NULL, (empty)
                    // 4881: b"expected numb ... s'\0": typeof(_827) = *const {l1394} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
                    // 4881: b"expected numb ... s'\0":   l1394 = UNIQUE | NON_NULL, (empty)
                    // 4881: b"expected numb ... s'\0": typeof(_828) = & {l1396} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
                    // 4881: b"expected numb ... s'\0":   l1396 = UNIQUE | NON_NULL, FIXED
                    // 4881: b"expected numb ... st u8: typeof(_826 = move _827 as *const u8 (Pointer(ArrayToPointer))) = *const {l3629} u8
                    // 4881: b"expected numb ... st u8:   l3629 = UNIQUE | NON_NULL, (empty)
                    // 4881: b"expected numb ... s'\0": typeof(_827 = &raw const (*_828)) = *const {l3628} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
                    // 4881: b"expected numb ... s'\0":   l3628 = UNIQUE | NON_NULL, (empty)
                    // 4881: b"expected numb ... s'\0": typeof(_828 = const b"expected number not larger than 100 in \'-b %s\'\x00") = & {l3627} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
                    // 4881: b"expected numb ... s'\0":   l3627 = UNIQUE | NON_NULL, (empty)
                    // 4881: b"expected numb ... _char: typeof(_825 = move _826 as *const i8 (Misc)) = *const {l3630} i8
                    // 4881: b"expected numb ... _char:   l3630 = UNIQUE | NON_NULL, (empty)
                        as *const libc::c_char,
                    *argv.offset(i as isize),
                    // 4883: *argv.offset(i  ... size): typeof(_829) = *mut {l1398} i8
                    // 4883: *argv.offset(i  ... size):   l1398 = UNIQUE | NON_NULL, (empty)
                    // 4883: argv.offset(i a ... size): typeof(_830) = *mut {l1400} *mut {l1401} i8
                    // 4883: argv.offset(i a ... size):   l1400 = UNIQUE | NON_NULL, (empty)
                    // 4883: argv.offset(i a ... size):   l1401 = UNIQUE | NON_NULL, (empty)
                    // 4883: argv: typeof(_831) = *mut {l1403} *mut {l1404} i8
                    // 4883: argv:   l1403 = UNIQUE | NON_NULL, (empty)
                    // 4883: argv:   l1404 = UNIQUE | NON_NULL, (empty)
                );
            }
        } else if strcmp(
            *argv.offset(i as isize),
            // 4887: *argv.offset(i  ... size): typeof(_836) = *const {l1410} i8
            // 4887: *argv.offset(i  ... size):   l1410 = UNIQUE | NON_NULL, (empty)
            // 4887: *argv.offset(i  ... size): typeof(_837) = *mut {l1412} i8
            // 4887: *argv.offset(i  ... size):   l1412 = UNIQUE | NON_NULL, (empty)
            // 4887: argv.offset(i a ... size): typeof(_838) = *mut {l1414} *mut {l1415} i8
            // 4887: argv.offset(i a ... size):   l1414 = UNIQUE | NON_NULL, (empty)
            // 4887: argv.offset(i a ... size):   l1415 = UNIQUE | NON_NULL, (empty)
            // 4887: argv: typeof(_839) = *mut {l1417} *mut {l1418} i8
            // 4887: argv:   l1417 = UNIQUE | NON_NULL, (empty)
            // 4887: argv:   l1418 = UNIQUE | NON_NULL, (empty)
            // 4887: *argv.offset(i  ... size): typeof(_836 = move _837 as *const i8 (Pointer(MutToConstPointer))) = *const {l3631} i8
            // 4887: *argv.offset(i  ... size):   l3631 = UNIQUE | NON_NULL, (empty)
            b"-r\0" as *const u8 as *const libc::c_char,
            // 4888: b"-r\0" as *con ... _char: typeof(_842) = *const {l1422} i8
            // 4888: b"-r\0" as *con ... _char:   l1422 = UNIQUE | NON_NULL, (empty)
            // 4888: b"-r\0" as *const u8: typeof(_843) = *const {l1424} u8
            // 4888: b"-r\0" as *const u8:   l1424 = UNIQUE | NON_NULL, (empty)
            // 4888: b"-r\0": typeof(_844) = *const {l1426} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4888: b"-r\0":   l1426 = UNIQUE | NON_NULL, (empty)
            // 4888: b"-r\0": typeof(_845) = & {l1428} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4888: b"-r\0":   l1428 = UNIQUE | NON_NULL, FIXED
            // 4888: b"-r\0": typeof(_845 = const b"-r\x00") = & {l3632} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4888: b"-r\0":   l3632 = UNIQUE | NON_NULL, (empty)
            // 4888: b"-r\0" as *con ... _char: typeof(_842 = move _843 as *const i8 (Misc)) = *const {l3635} i8
            // 4888: b"-r\0" as *con ... _char:   l3635 = UNIQUE | NON_NULL, (empty)
            // 4888: b"-r\0" as *const u8: typeof(_843 = move _844 as *const u8 (Pointer(ArrayToPointer))) = *const {l3634} u8
            // 4888: b"-r\0" as *const u8:   l3634 = UNIQUE | NON_NULL, (empty)
            // 4888: b"-r\0": typeof(_844 = &raw const (*_845)) = *const {l3633} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4888: b"-r\0":   l3633 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            if randswap > 0 as libc::c_int {
            // 4891: randswap: typeof(_849) = *mut {l1433} i32
            // 4891: randswap:   l1433 = UNIQUE | NON_NULL, (empty)
                err(b"multiple '-r <posnum>' options\0" as *const u8 as *const libc::c_char);
                // 4892: b"multiple '-r  ... _char: typeof(_852) = *const {l1437} i8
                // 4892: b"multiple '-r  ... _char:   l1437 = UNIQUE | NON_NULL, (empty)
                // 4892: b"multiple '-r  ... st u8: typeof(_853) = *const {l1439} u8
                // 4892: b"multiple '-r  ... st u8:   l1439 = UNIQUE | NON_NULL, (empty)
                // 4892: b"multiple '-r  ... ns\0": typeof(_854) = *const {l1441} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001f)) }]
                // 4892: b"multiple '-r  ... ns\0":   l1441 = UNIQUE | NON_NULL, (empty)
                // 4892: b"multiple '-r  ... ns\0": typeof(_855) = & {l1443} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001f)) }]
                // 4892: b"multiple '-r  ... ns\0":   l1443 = UNIQUE | NON_NULL, FIXED
                // 4892: b"multiple '-r  ... _char: typeof(_852 = move _853 as *const i8 (Misc)) = *const {l3639} i8
                // 4892: b"multiple '-r  ... _char:   l3639 = UNIQUE | NON_NULL, (empty)
                // 4892: b"multiple '-r  ... ns\0": typeof(_854 = &raw const (*_855)) = *const {l3637} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001f)) }]
                // 4892: b"multiple '-r  ... ns\0":   l3637 = UNIQUE | NON_NULL, (empty)
                // 4892: b"multiple '-r  ... ns\0": typeof(_855 = const b"multiple \'-r <posnum>\' options\x00") = & {l3636} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001f)) }]
                // 4892: b"multiple '-r  ... ns\0":   l3636 = UNIQUE | NON_NULL, (empty)
                // 4892: b"multiple '-r  ... st u8: typeof(_853 = move _854 as *const u8 (Pointer(ArrayToPointer))) = *const {l3638} u8
                // 4892: b"multiple '-r  ... st u8:   l3638 = UNIQUE | NON_NULL, (empty)
            }
            i += 1;
            if i == argc {
                err(b"argument to '-r' missing\0" as *const u8 as *const libc::c_char);
                // 4896: b"argument to ' ... _char: typeof(_862) = *const {l1451} i8
                // 4896: b"argument to ' ... _char:   l1451 = UNIQUE | NON_NULL, (empty)
                // 4896: b"argument to ' ... st u8: typeof(_863) = *const {l1453} u8
                // 4896: b"argument to ' ... st u8:   l1453 = UNIQUE | NON_NULL, (empty)
                // 4896: b"argument to ' ... ng\0": typeof(_864) = *const {l1455} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4896: b"argument to ' ... ng\0":   l1455 = UNIQUE | NON_NULL, (empty)
                // 4896: b"argument to ' ... ng\0": typeof(_865) = & {l1457} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4896: b"argument to ' ... ng\0":   l1457 = UNIQUE | NON_NULL, FIXED
                // 4896: b"argument to ' ... _char: typeof(_862 = move _863 as *const i8 (Misc)) = *const {l3643} i8
                // 4896: b"argument to ' ... _char:   l3643 = UNIQUE | NON_NULL, (empty)
                // 4896: b"argument to ' ... ng\0": typeof(_865 = const b"argument to \'-r\' missing\x00") = & {l3640} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4896: b"argument to ' ... ng\0":   l3640 = UNIQUE | NON_NULL, (empty)
                // 4896: b"argument to ' ... st u8: typeof(_863 = move _864 as *const u8 (Pointer(ArrayToPointer))) = *const {l3642} u8
                // 4896: b"argument to ' ... st u8:   l3642 = UNIQUE | NON_NULL, (empty)
                // 4896: b"argument to ' ... ng\0": typeof(_864 = &raw const (*_865)) = *const {l3641} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000019)) }]
                // 4896: b"argument to ' ... ng\0":   l3641 = UNIQUE | NON_NULL, (empty)
            }
            if isnum(*argv.offset(i as isize)) == 0 {
            // 4898: *argv.offset(i  ... size): typeof(_869) = *const {l1462} i8
            // 4898: *argv.offset(i  ... size):   l1462 = UNIQUE | NON_NULL, (empty)
            // 4898: *argv.offset(i  ... size): typeof(_870) = *mut {l1464} i8
            // 4898: *argv.offset(i  ... size):   l1464 = UNIQUE | NON_NULL, (empty)
            // 4898: argv.offset(i a ... size): typeof(_871) = *mut {l1466} *mut {l1467} i8
            // 4898: argv.offset(i a ... size):   l1466 = UNIQUE | NON_NULL, (empty)
            // 4898: argv.offset(i a ... size):   l1467 = UNIQUE | NON_NULL, (empty)
            // 4898: argv: typeof(_872) = *mut {l1469} *mut {l1470} i8
            // 4898: argv:   l1469 = UNIQUE | NON_NULL, (empty)
            // 4898: argv:   l1470 = UNIQUE | NON_NULL, (empty)
            // 4898: *argv.offset(i  ... size): typeof(_869 = move _870 as *const i8 (Pointer(MutToConstPointer))) = *const {l3644} i8
            // 4898: *argv.offset(i  ... size):   l3644 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected number as argument in '-r %s'\0" as *const u8 as *const libc::c_char,
                    // 4900: b"expected numb ... _char: typeof(_876) = *const {l1475} i8
                    // 4900: b"expected numb ... _char:   l1475 = UNIQUE | NON_NULL, (empty)
                    // 4900: b"expected numb ... st u8: typeof(_877) = *const {l1477} u8
                    // 4900: b"expected numb ... st u8:   l1477 = UNIQUE | NON_NULL, (empty)
                    // 4900: b"expected numb ... s'\0": typeof(_878) = *const {l1479} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4900: b"expected numb ... s'\0":   l1479 = UNIQUE | NON_NULL, (empty)
                    // 4900: b"expected numb ... s'\0": typeof(_879) = & {l1481} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4900: b"expected numb ... s'\0":   l1481 = UNIQUE | NON_NULL, FIXED
                    // 4900: b"expected numb ... s'\0": typeof(_879 = const b"expected number as argument in \'-r %s\'\x00") = & {l3645} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4900: b"expected numb ... s'\0":   l3645 = UNIQUE | NON_NULL, (empty)
                    // 4900: b"expected numb ... s'\0": typeof(_878 = &raw const (*_879)) = *const {l3646} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
                    // 4900: b"expected numb ... s'\0":   l3646 = UNIQUE | NON_NULL, (empty)
                    // 4900: b"expected numb ... st u8: typeof(_877 = move _878 as *const u8 (Pointer(ArrayToPointer))) = *const {l3647} u8
                    // 4900: b"expected numb ... st u8:   l3647 = UNIQUE | NON_NULL, (empty)
                    // 4900: b"expected numb ... _char: typeof(_876 = move _877 as *const i8 (Misc)) = *const {l3648} i8
                    // 4900: b"expected numb ... _char:   l3648 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4901: *argv.offset(i  ... size): typeof(_880) = *mut {l1483} i8
                    // 4901: *argv.offset(i  ... size):   l1483 = UNIQUE | NON_NULL, (empty)
                    // 4901: argv.offset(i a ... size): typeof(_881) = *mut {l1485} *mut {l1486} i8
                    // 4901: argv.offset(i a ... size):   l1485 = UNIQUE | NON_NULL, (empty)
                    // 4901: argv.offset(i a ... size):   l1486 = UNIQUE | NON_NULL, (empty)
                    // 4901: argv: typeof(_882) = *mut {l1488} *mut {l1489} i8
                    // 4901: argv:   l1488 = UNIQUE | NON_NULL, (empty)
                    // 4901: argv:   l1489 = UNIQUE | NON_NULL, (empty)
                );
            }
            randswap = atoi(*argv.offset(i as isize));
            // 4904: *argv.offset(i  ... size): typeof(_886) = *const {l1494} i8
            // 4904: *argv.offset(i  ... size):   l1494 = UNIQUE | NON_NULL, (empty)
            // 4904: *argv.offset(i  ... size): typeof(_887) = *mut {l1496} i8
            // 4904: *argv.offset(i  ... size):   l1496 = UNIQUE | NON_NULL, (empty)
            // 4904: argv.offset(i a ... size): typeof(_888) = *mut {l1498} *mut {l1499} i8
            // 4904: argv.offset(i a ... size):   l1498 = UNIQUE | NON_NULL, (empty)
            // 4904: argv.offset(i a ... size):   l1499 = UNIQUE | NON_NULL, (empty)
            // 4904: argv: typeof(_889) = *mut {l1501} *mut {l1502} i8
            // 4904: argv:   l1501 = UNIQUE | NON_NULL, (empty)
            // 4904: argv:   l1502 = UNIQUE | NON_NULL, (empty)
            // 4904: randswap: typeof(_892) = *mut {l1506} i32
            // 4904: randswap:   l1506 = UNIQUE | NON_NULL, (empty)
            // 4904: *argv.offset(i  ... size): typeof(_886 = move _887 as *const i8 (Pointer(MutToConstPointer))) = *const {l3649} i8
            // 4904: *argv.offset(i  ... size):   l3649 = UNIQUE | NON_NULL, (empty)
            if randswap <= 0 as libc::c_int {
            // 4905: randswap: typeof(_895) = *mut {l1510} i32
            // 4905: randswap:   l1510 = UNIQUE | NON_NULL, (empty)
                err(
                    b"expected positive number in '-r %s'\0" as *const u8 as *const libc::c_char,
                    // 4907: b"expected posi ... _char: typeof(_898) = *const {l1514} i8
                    // 4907: b"expected posi ... _char:   l1514 = UNIQUE | NON_NULL, (empty)
                    // 4907: b"expected posi ... st u8: typeof(_899) = *const {l1516} u8
                    // 4907: b"expected posi ... st u8:   l1516 = UNIQUE | NON_NULL, (empty)
                    // 4907: b"expected posi ... s'\0": typeof(_900) = *const {l1518} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4907: b"expected posi ... s'\0":   l1518 = UNIQUE | NON_NULL, (empty)
                    // 4907: b"expected posi ... s'\0": typeof(_901) = & {l1520} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4907: b"expected posi ... s'\0":   l1520 = UNIQUE | NON_NULL, FIXED
                    // 4907: b"expected posi ... _char: typeof(_898 = move _899 as *const i8 (Misc)) = *const {l3653} i8
                    // 4907: b"expected posi ... _char:   l3653 = UNIQUE | NON_NULL, (empty)
                    // 4907: b"expected posi ... s'\0": typeof(_900 = &raw const (*_901)) = *const {l3651} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4907: b"expected posi ... s'\0":   l3651 = UNIQUE | NON_NULL, (empty)
                    // 4907: b"expected posi ... s'\0": typeof(_901 = const b"expected positive number in \'-r %s\'\x00") = & {l3650} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                    // 4907: b"expected posi ... s'\0":   l3650 = UNIQUE | NON_NULL, (empty)
                    // 4907: b"expected posi ... st u8: typeof(_899 = move _900 as *const u8 (Pointer(ArrayToPointer))) = *const {l3652} u8
                    // 4907: b"expected posi ... st u8:   l3652 = UNIQUE | NON_NULL, (empty)
                    *argv.offset(i as isize),
                    // 4908: *argv.offset(i  ... size): typeof(_902) = *mut {l1522} i8
                    // 4908: *argv.offset(i  ... size):   l1522 = UNIQUE | NON_NULL, (empty)
                    // 4908: argv.offset(i a ... size): typeof(_903) = *mut {l1524} *mut {l1525} i8
                    // 4908: argv.offset(i a ... size):   l1524 = UNIQUE | NON_NULL, (empty)
                    // 4908: argv.offset(i a ... size):   l1525 = UNIQUE | NON_NULL, (empty)
                    // 4908: argv: typeof(_904) = *mut {l1527} *mut {l1528} i8
                    // 4908: argv:   l1527 = UNIQUE | NON_NULL, (empty)
                    // 4908: argv:   l1528 = UNIQUE | NON_NULL, (empty)
                );
            }
        } else if strcmp(
            *argv.offset(i as isize),
            // 4912: *argv.offset(i  ... size): typeof(_909) = *const {l1534} i8
            // 4912: *argv.offset(i  ... size):   l1534 = UNIQUE | NON_NULL, (empty)
            // 4912: *argv.offset(i  ... size): typeof(_910) = *mut {l1536} i8
            // 4912: *argv.offset(i  ... size):   l1536 = UNIQUE | NON_NULL, (empty)
            // 4912: argv.offset(i a ... size): typeof(_911) = *mut {l1538} *mut {l1539} i8
            // 4912: argv.offset(i a ... size):   l1538 = UNIQUE | NON_NULL, (empty)
            // 4912: argv.offset(i a ... size):   l1539 = UNIQUE | NON_NULL, (empty)
            // 4912: argv: typeof(_912) = *mut {l1541} *mut {l1542} i8
            // 4912: argv:   l1541 = UNIQUE | NON_NULL, (empty)
            // 4912: argv:   l1542 = UNIQUE | NON_NULL, (empty)
            // 4912: *argv.offset(i  ... size): typeof(_909 = move _910 as *const i8 (Pointer(MutToConstPointer))) = *const {l3654} i8
            // 4912: *argv.offset(i  ... size):   l3654 = UNIQUE | NON_NULL, (empty)
            b"-s\0" as *const u8 as *const libc::c_char,
            // 4913: b"-s\0" as *con ... _char: typeof(_915) = *const {l1546} i8
            // 4913: b"-s\0" as *con ... _char:   l1546 = UNIQUE | NON_NULL, (empty)
            // 4913: b"-s\0" as *const u8: typeof(_916) = *const {l1548} u8
            // 4913: b"-s\0" as *const u8:   l1548 = UNIQUE | NON_NULL, (empty)
            // 4913: b"-s\0": typeof(_917) = *const {l1550} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4913: b"-s\0":   l1550 = UNIQUE | NON_NULL, (empty)
            // 4913: b"-s\0": typeof(_918) = & {l1552} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4913: b"-s\0":   l1552 = UNIQUE | NON_NULL, FIXED
            // 4913: b"-s\0" as *const u8: typeof(_916 = move _917 as *const u8 (Pointer(ArrayToPointer))) = *const {l3657} u8
            // 4913: b"-s\0" as *const u8:   l3657 = UNIQUE | NON_NULL, (empty)
            // 4913: b"-s\0": typeof(_918 = const b"-s\x00") = & {l3655} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4913: b"-s\0":   l3655 = UNIQUE | NON_NULL, (empty)
            // 4913: b"-s\0": typeof(_917 = &raw const (*_918)) = *const {l3656} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
            // 4913: b"-s\0":   l3656 = UNIQUE | NON_NULL, (empty)
            // 4913: b"-s\0" as *con ... _char: typeof(_915 = move _916 as *const i8 (Misc)) = *const {l3658} i8
            // 4913: b"-s\0" as *con ... _char:   l3658 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            i += 1;
            if i == argc {
                err(b"argument to '-s' missing (try '-h')\0" as *const u8 as *const libc::c_char);
                // 4918: b"argument to ' ... _char: typeof(_925) = *const {l1560} i8
                // 4918: b"argument to ' ... _char:   l1560 = UNIQUE | NON_NULL, (empty)
                // 4918: b"argument to ' ... st u8: typeof(_926) = *const {l1562} u8
                // 4918: b"argument to ' ... st u8:   l1562 = UNIQUE | NON_NULL, (empty)
                // 4918: b"argument to ' ... ')\0": typeof(_927) = *const {l1564} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4918: b"argument to ' ... ')\0":   l1564 = UNIQUE | NON_NULL, (empty)
                // 4918: b"argument to ' ... ')\0": typeof(_928) = & {l1566} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4918: b"argument to ' ... ')\0":   l1566 = UNIQUE | NON_NULL, FIXED
                // 4918: b"argument to ' ... ')\0": typeof(_927 = &raw const (*_928)) = *const {l3660} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4918: b"argument to ' ... ')\0":   l3660 = UNIQUE | NON_NULL, (empty)
                // 4918: b"argument to ' ... _char: typeof(_925 = move _926 as *const i8 (Misc)) = *const {l3662} i8
                // 4918: b"argument to ' ... _char:   l3662 = UNIQUE | NON_NULL, (empty)
                // 4918: b"argument to ' ... ')\0": typeof(_928 = const b"argument to \'-s\' missing (try \'-h\')\x00") = & {l3659} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
                // 4918: b"argument to ' ... ')\0":   l3659 = UNIQUE | NON_NULL, (empty)
                // 4918: b"argument to ' ... st u8: typeof(_926 = move _927 as *const u8 (Pointer(ArrayToPointer))) = *const {l3661} u8
                // 4918: b"argument to ' ... st u8:   l3661 = UNIQUE | NON_NULL, (empty)
            }
            seed = parseu64(
                *argv.offset(i as isize),
                // 4921: *argv.offset(i  ... size): typeof(_930) = *const {l1569} i8
                // 4921: *argv.offset(i  ... size):   l1569 = UNIQUE | NON_NULL, (empty)
                // 4921: *argv.offset(i  ... size): typeof(_931) = *mut {l1571} i8
                // 4921: *argv.offset(i  ... size):   l1571 = UNIQUE | NON_NULL, (empty)
                // 4921: argv.offset(i a ... size): typeof(_932) = *mut {l1573} *mut {l1574} i8
                // 4921: argv.offset(i a ... size):   l1573 = UNIQUE | NON_NULL, (empty)
                // 4921: argv.offset(i a ... size):   l1574 = UNIQUE | NON_NULL, (empty)
                // 4921: argv: typeof(_933) = *mut {l1576} *mut {l1577} i8
                // 4921: argv:   l1576 = UNIQUE | NON_NULL, (empty)
                // 4921: argv:   l1577 = UNIQUE | NON_NULL, (empty)
                // 4921: *argv.offset(i  ... size): typeof(_930 = move _931 as *const i8 (Pointer(MutToConstPointer))) = *const {l3663} i8
                // 4921: *argv.offset(i  ... size):   l3663 = UNIQUE | NON_NULL, (empty)
                b"-s\0" as *const u8 as *const libc::c_char,
                // 4922: b"-s\0" as *con ... _char: typeof(_936) = *const {l1581} i8
                // 4922: b"-s\0" as *con ... _char:   l1581 = UNIQUE | NON_NULL, (empty)
                // 4922: b"-s\0" as *const u8: typeof(_937) = *const {l1583} u8
                // 4922: b"-s\0" as *const u8:   l1583 = UNIQUE | NON_NULL, (empty)
                // 4922: b"-s\0": typeof(_938) = *const {l1585} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
                // 4922: b"-s\0":   l1585 = UNIQUE | NON_NULL, (empty)
                // 4922: b"-s\0": typeof(_939) = & {l1587} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
                // 4922: b"-s\0":   l1587 = UNIQUE | NON_NULL, FIXED
                // 4922: b"-s\0" as *const u8: typeof(_937 = move _938 as *const u8 (Pointer(ArrayToPointer))) = *const {l3666} u8
                // 4922: b"-s\0" as *const u8:   l3666 = UNIQUE | NON_NULL, (empty)
                // 4922: b"-s\0" as *con ... _char: typeof(_936 = move _937 as *const i8 (Misc)) = *const {l3667} i8
                // 4922: b"-s\0" as *con ... _char:   l3667 = UNIQUE | NON_NULL, (empty)
                // 4922: b"-s\0": typeof(_938 = &raw const (*_939)) = *const {l3665} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
                // 4922: b"-s\0":   l3665 = UNIQUE | NON_NULL, (empty)
                // 4922: b"-s\0": typeof(_939 = const b"-s\x00") = & {l3664} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
                // 4922: b"-s\0":   l3664 = UNIQUE | NON_NULL, (empty)
            ) as libc::c_ulonglong;
        } else if strcmp(
            *argv.offset(i as isize),
            // 4925: *argv.offset(i  ... size): typeof(_942) = *const {l1591} i8
            // 4925: *argv.offset(i  ... size):   l1591 = UNIQUE | NON_NULL, (empty)
            // 4925: *argv.offset(i  ... size): typeof(_943) = *mut {l1593} i8
            // 4925: *argv.offset(i  ... size):   l1593 = UNIQUE | NON_NULL, (empty)
            // 4925: argv.offset(i a ... size): typeof(_944) = *mut {l1595} *mut {l1596} i8
            // 4925: argv.offset(i a ... size):   l1595 = UNIQUE | NON_NULL, (empty)
            // 4925: argv.offset(i a ... size):   l1596 = UNIQUE | NON_NULL, (empty)
            // 4925: argv: typeof(_945) = *mut {l1598} *mut {l1599} i8
            // 4925: argv:   l1598 = UNIQUE | NON_NULL, (empty)
            // 4925: argv:   l1599 = UNIQUE | NON_NULL, (empty)
            // 4925: *argv.offset(i  ... size): typeof(_942 = move _943 as *const i8 (Pointer(MutToConstPointer))) = *const {l3668} i8
            // 4925: *argv.offset(i  ... size):   l3668 = UNIQUE | NON_NULL, (empty)
            b"--treelook=-1\0" as *const u8 as *const libc::c_char,
            // 4926: b"--treelook=-1 ... _char: typeof(_948) = *const {l1603} i8
            // 4926: b"--treelook=-1 ... _char:   l1603 = UNIQUE | NON_NULL, (empty)
            // 4926: b"--treelook=-1 ... st u8: typeof(_949) = *const {l1605} u8
            // 4926: b"--treelook=-1 ... st u8:   l1605 = UNIQUE | NON_NULL, (empty)
            // 4926: b"--treelook=-1\0": typeof(_950) = *const {l1607} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 4926: b"--treelook=-1\0":   l1607 = UNIQUE | NON_NULL, (empty)
            // 4926: b"--treelook=-1\0": typeof(_951) = & {l1609} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 4926: b"--treelook=-1\0":   l1609 = UNIQUE | NON_NULL, FIXED
            // 4926: b"--treelook=-1\0": typeof(_950 = &raw const (*_951)) = *const {l3670} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 4926: b"--treelook=-1\0":   l3670 = UNIQUE | NON_NULL, (empty)
            // 4926: b"--treelook=-1 ... st u8: typeof(_949 = move _950 as *const u8 (Pointer(ArrayToPointer))) = *const {l3671} u8
            // 4926: b"--treelook=-1 ... st u8:   l3671 = UNIQUE | NON_NULL, (empty)
            // 4926: b"--treelook=-1\0": typeof(_951 = const b"--treelook=-1\x00") = & {l3669} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000e)) }]
            // 4926: b"--treelook=-1\0":   l3669 = UNIQUE | NON_NULL, (empty)
            // 4926: b"--treelook=-1 ... _char: typeof(_948 = move _949 as *const i8 (Misc)) = *const {l3672} i8
            // 4926: b"--treelook=-1 ... _char:   l3672 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            treelookdepth = -(1 as libc::c_int);
            // 4929: treelookdepth: typeof(_954) = *mut {l1613} i32
            // 4929: treelookdepth:   l1613 = UNIQUE | NON_NULL, (empty)
            treelookdepthset = 1 as libc::c_int;
            // 4930: treelookdepthset: typeof(_956) = *mut {l1616} i32
            // 4930: treelookdepthset:   l1616 = UNIQUE | NON_NULL, (empty)
        } else if strcmp(
            *argv.offset(i as isize),
            // 4932: *argv.offset(i  ... size): typeof(_959) = *const {l1620} i8
            // 4932: *argv.offset(i  ... size):   l1620 = UNIQUE | NON_NULL, (empty)
            // 4932: *argv.offset(i  ... size): typeof(_960) = *mut {l1622} i8
            // 4932: *argv.offset(i  ... size):   l1622 = UNIQUE | NON_NULL, (empty)
            // 4932: argv.offset(i a ... size): typeof(_961) = *mut {l1624} *mut {l1625} i8
            // 4932: argv.offset(i a ... size):   l1624 = UNIQUE | NON_NULL, (empty)
            // 4932: argv.offset(i a ... size):   l1625 = UNIQUE | NON_NULL, (empty)
            // 4932: argv: typeof(_962) = *mut {l1627} *mut {l1628} i8
            // 4932: argv:   l1627 = UNIQUE | NON_NULL, (empty)
            // 4932: argv:   l1628 = UNIQUE | NON_NULL, (empty)
            // 4932: *argv.offset(i  ... size): typeof(_959 = move _960 as *const i8 (Pointer(MutToConstPointer))) = *const {l3673} i8
            // 4932: *argv.offset(i  ... size):   l3673 = UNIQUE | NON_NULL, (empty)
            b"--treelook=0\0" as *const u8 as *const libc::c_char,
            // 4933: b"--treelook=0\ ... _char: typeof(_965) = *const {l1632} i8
            // 4933: b"--treelook=0\ ... _char:   l1632 = UNIQUE | NON_NULL, (empty)
            // 4933: b"--treelook=0\ ... st u8: typeof(_966) = *const {l1634} u8
            // 4933: b"--treelook=0\ ... st u8:   l1634 = UNIQUE | NON_NULL, (empty)
            // 4933: b"--treelook=0\0": typeof(_967) = *const {l1636} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4933: b"--treelook=0\0":   l1636 = UNIQUE | NON_NULL, (empty)
            // 4933: b"--treelook=0\0": typeof(_968) = & {l1638} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4933: b"--treelook=0\0":   l1638 = UNIQUE | NON_NULL, FIXED
            // 4933: b"--treelook=0\ ... _char: typeof(_965 = move _966 as *const i8 (Misc)) = *const {l3677} i8
            // 4933: b"--treelook=0\ ... _char:   l3677 = UNIQUE | NON_NULL, (empty)
            // 4933: b"--treelook=0\0": typeof(_968 = const b"--treelook=0\x00") = & {l3674} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4933: b"--treelook=0\0":   l3674 = UNIQUE | NON_NULL, (empty)
            // 4933: b"--treelook=0\0": typeof(_967 = &raw const (*_968)) = *const {l3675} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
            // 4933: b"--treelook=0\0":   l3675 = UNIQUE | NON_NULL, (empty)
            // 4933: b"--treelook=0\ ... st u8: typeof(_966 = move _967 as *const u8 (Pointer(ArrayToPointer))) = *const {l3676} u8
            // 4933: b"--treelook=0\ ... st u8:   l3676 = UNIQUE | NON_NULL, (empty)
        ) == 0
        {
            treelookdepth = 0 as libc::c_int;
            // 4936: treelookdepth: typeof(_970) = *mut {l1641} i32
            // 4936: treelookdepth:   l1641 = UNIQUE | NON_NULL, (empty)
            treelookdepthset = 1 as libc::c_int;
            // 4937: treelookdepthset: typeof(_972) = *mut {l1644} i32
            // 4937: treelookdepthset:   l1644 = UNIQUE | NON_NULL, (empty)
        } else if parselopt(
            *argv.offset(i as isize),
            // 4939: *argv.offset(i  ... size): typeof(_975) = *const {l1648} i8
            // 4939: *argv.offset(i  ... size):   l1648 = UNIQUE | NON_NULL, (empty)
            // 4939: *argv.offset(i  ... size): typeof(_976) = *mut {l1650} i8
            // 4939: *argv.offset(i  ... size):   l1650 = UNIQUE | NON_NULL, (empty)
            // 4939: argv.offset(i a ... size): typeof(_977) = *mut {l1652} *mut {l1653} i8
            // 4939: argv.offset(i a ... size):   l1652 = UNIQUE | NON_NULL, (empty)
            // 4939: argv.offset(i a ... size):   l1653 = UNIQUE | NON_NULL, (empty)
            // 4939: argv: typeof(_978) = *mut {l1655} *mut {l1656} i8
            // 4939: argv:   l1655 = UNIQUE | NON_NULL, (empty)
            // 4939: argv:   l1656 = UNIQUE | NON_NULL, (empty)
            // 4939: *argv.offset(i  ... size): typeof(_975 = move _976 as *const i8 (Pointer(MutToConstPointer))) = *const {l3678} i8
            // 4939: *argv.offset(i  ... size):   l3678 = UNIQUE | NON_NULL, (empty)
            &mut treelookdepth,
            // 4940: &mut treelookdepth: typeof(_981) = *mut {l1660} i32
            // 4940: &mut treelookdepth:   l1660 = UNIQUE | NON_NULL, (empty)
            // 4940: &mut treelookdepth: typeof(_982) = &mut {l1662} i32
            // 4940: &mut treelookdepth:   l1662 = UNIQUE | NON_NULL, (empty)
            // 4940: treelookdepth: typeof(_983) = *mut {l1664} i32
            // 4940: treelookdepth:   l1664 = UNIQUE | NON_NULL, (empty)
            // 4940: &mut treelookdepth: typeof(_981 = &raw mut (*_982)) = *mut {l3680} i32
            // 4940: &mut treelookdepth:   l3680 = UNIQUE | NON_NULL, (empty)
            // 4940: &mut treelookdepth: typeof(_982 = &mut (*_983)) = &mut {l3679} i32
            // 4940: &mut treelookdepth:   l3679 = UNIQUE | NON_NULL, (empty)
            b"treelook\0" as *const u8 as *const libc::c_char,
            // 4941: b"treelook\0" a ... _char: typeof(_984) = *const {l1666} i8
            // 4941: b"treelook\0" a ... _char:   l1666 = UNIQUE | NON_NULL, (empty)
            // 4941: b"treelook\0" a ... st u8: typeof(_985) = *const {l1668} u8
            // 4941: b"treelook\0" a ... st u8:   l1668 = UNIQUE | NON_NULL, (empty)
            // 4941: b"treelook\0": typeof(_986) = *const {l1670} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
            // 4941: b"treelook\0":   l1670 = UNIQUE | NON_NULL, (empty)
            // 4941: b"treelook\0": typeof(_987) = & {l1672} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
            // 4941: b"treelook\0":   l1672 = UNIQUE | NON_NULL, FIXED
            // 4941: b"treelook\0": typeof(_986 = &raw const (*_987)) = *const {l3682} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
            // 4941: b"treelook\0":   l3682 = UNIQUE | NON_NULL, (empty)
            // 4941: b"treelook\0" a ... st u8: typeof(_985 = move _986 as *const u8 (Pointer(ArrayToPointer))) = *const {l3683} u8
            // 4941: b"treelook\0" a ... st u8:   l3683 = UNIQUE | NON_NULL, (empty)
            // 4941: b"treelook\0" a ... _char: typeof(_984 = move _985 as *const i8 (Misc)) = *const {l3684} i8
            // 4941: b"treelook\0" a ... _char:   l3684 = UNIQUE | NON_NULL, (empty)
            // 4941: b"treelook\0": typeof(_987 = const b"treelook\x00") = & {l3681} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
            // 4941: b"treelook\0":   l3681 = UNIQUE | NON_NULL, (empty)
        ) != 0
        {
            treelookdepthset = 1 as libc::c_int;
            // 4944: treelookdepthset: typeof(_989) = *mut {l1675} i32
            // 4944: treelookdepthset:   l1675 = UNIQUE | NON_NULL, (empty)
        } else if !(parselopt(
            *argv.offset(i as isize),
            // 4946: *argv.offset(i  ... size): typeof(_993) = *const {l1680} i8
            // 4946: *argv.offset(i  ... size):   l1680 = UNIQUE | NON_NULL, (empty)
            // 4946: *argv.offset(i  ... size): typeof(_994) = *mut {l1682} i8
            // 4946: *argv.offset(i  ... size):   l1682 = UNIQUE | NON_NULL, (empty)
            // 4946: argv.offset(i a ... size): typeof(_995) = *mut {l1684} *mut {l1685} i8
            // 4946: argv.offset(i a ... size):   l1684 = UNIQUE | NON_NULL, (empty)
            // 4946: argv.offset(i a ... size):   l1685 = UNIQUE | NON_NULL, (empty)
            // 4946: argv: typeof(_996) = *mut {l1687} *mut {l1688} i8
            // 4946: argv:   l1687 = UNIQUE | NON_NULL, (empty)
            // 4946: argv:   l1688 = UNIQUE | NON_NULL, (empty)
            // 4946: *argv.offset(i  ... size): typeof(_993 = move _994 as *const i8 (Pointer(MutToConstPointer))) = *const {l3685} i8
            // 4946: *argv.offset(i  ... size):   l3685 = UNIQUE | NON_NULL, (empty)
            &mut minclim,
            // 4947: &mut minclim: typeof(_999) = *mut {l1692} i32
            // 4947: &mut minclim:   l1692 = UNIQUE | NON_NULL, (empty)
            // 4947: &mut minclim: typeof(_1000) = &mut {l1694} i32
            // 4947: &mut minclim:   l1694 = UNIQUE | NON_NULL, (empty)
            // 4947: minclim: typeof(_1001) = *mut {l1696} i32
            // 4947: minclim:   l1696 = UNIQUE | NON_NULL, (empty)
            // 4947: &mut minclim: typeof(_1000 = &mut (*_1001)) = &mut {l3686} i32
            // 4947: &mut minclim:   l3686 = UNIQUE | NON_NULL, (empty)
            // 4947: &mut minclim: typeof(_999 = &raw mut (*_1000)) = *mut {l3687} i32
            // 4947: &mut minclim:   l3687 = UNIQUE | NON_NULL, (empty)
            b"min\0" as *const u8 as *const libc::c_char,
            // 4948: b"min\0" as *co ... _char: typeof(_1002) = *const {l1698} i8
            // 4948: b"min\0" as *co ... _char:   l1698 = UNIQUE | NON_NULL, (empty)
            // 4948: b"min\0" as *co ... st u8: typeof(_1003) = *const {l1700} u8
            // 4948: b"min\0" as *co ... st u8:   l1700 = UNIQUE | NON_NULL, (empty)
            // 4948: b"min\0": typeof(_1004) = *const {l1702} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 4948: b"min\0":   l1702 = UNIQUE | NON_NULL, (empty)
            // 4948: b"min\0": typeof(_1005) = & {l1704} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 4948: b"min\0":   l1704 = UNIQUE | NON_NULL, FIXED
            // 4948: b"min\0" as *co ... st u8: typeof(_1003 = move _1004 as *const u8 (Pointer(ArrayToPointer))) = *const {l3690} u8
            // 4948: b"min\0" as *co ... st u8:   l3690 = UNIQUE | NON_NULL, (empty)
            // 4948: b"min\0" as *co ... _char: typeof(_1002 = move _1003 as *const i8 (Misc)) = *const {l3691} i8
            // 4948: b"min\0" as *co ... _char:   l3691 = UNIQUE | NON_NULL, (empty)
            // 4948: b"min\0": typeof(_1005 = const b"min\x00") = & {l3688} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 4948: b"min\0":   l3688 = UNIQUE | NON_NULL, (empty)
            // 4948: b"min\0": typeof(_1004 = &raw const (*_1005)) = *const {l3689} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
            // 4948: b"min\0":   l3689 = UNIQUE | NON_NULL, (empty)
        ) != 0)
        {
            if !(parselopt(
                *argv.offset(i as isize),
                // 4952: *argv.offset(i  ... size): typeof(_1009) = *const {l1709} i8
                // 4952: *argv.offset(i  ... size):   l1709 = UNIQUE | NON_NULL, (empty)
                // 4952: *argv.offset(i  ... size): typeof(_1010) = *mut {l1711} i8
                // 4952: *argv.offset(i  ... size):   l1711 = UNIQUE | NON_NULL, (empty)
                // 4952: argv.offset(i a ... size): typeof(_1011) = *mut {l1713} *mut {l1714} i8
                // 4952: argv.offset(i a ... size):   l1713 = UNIQUE | NON_NULL, (empty)
                // 4952: argv.offset(i a ... size):   l1714 = UNIQUE | NON_NULL, (empty)
                // 4952: argv: typeof(_1012) = *mut {l1716} *mut {l1717} i8
                // 4952: argv:   l1716 = UNIQUE | NON_NULL, (empty)
                // 4952: argv:   l1717 = UNIQUE | NON_NULL, (empty)
                // 4952: *argv.offset(i  ... size): typeof(_1009 = move _1010 as *const i8 (Pointer(MutToConstPointer))) = *const {l3692} i8
                // 4952: *argv.offset(i  ... size):   l3692 = UNIQUE | NON_NULL, (empty)
                &mut initclim,
                // 4953: &mut initclim: typeof(_1015) = *mut {l1721} i32
                // 4953: &mut initclim:   l1721 = UNIQUE | NON_NULL, (empty)
                // 4953: &mut initclim: typeof(_1016) = &mut {l1723} i32
                // 4953: &mut initclim:   l1723 = UNIQUE | NON_NULL, (empty)
                // 4953: initclim: typeof(_1017) = *mut {l1725} i32
                // 4953: initclim:   l1725 = UNIQUE | NON_NULL, (empty)
                // 4953: &mut initclim: typeof(_1016 = &mut (*_1017)) = &mut {l3693} i32
                // 4953: &mut initclim:   l3693 = UNIQUE | NON_NULL, (empty)
                // 4953: &mut initclim: typeof(_1015 = &raw mut (*_1016)) = *mut {l3694} i32
                // 4953: &mut initclim:   l3694 = UNIQUE | NON_NULL, (empty)
                b"init\0" as *const u8 as *const libc::c_char,
                // 4954: b"init\0" as *c ... _char: typeof(_1018) = *const {l1727} i8
                // 4954: b"init\0" as *c ... _char:   l1727 = UNIQUE | NON_NULL, (empty)
                // 4954: b"init\0" as *c ... st u8: typeof(_1019) = *const {l1729} u8
                // 4954: b"init\0" as *c ... st u8:   l1729 = UNIQUE | NON_NULL, (empty)
                // 4954: b"init\0": typeof(_1020) = *const {l1731} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
                // 4954: b"init\0":   l1731 = UNIQUE | NON_NULL, (empty)
                // 4954: b"init\0": typeof(_1021) = & {l1733} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
                // 4954: b"init\0":   l1733 = UNIQUE | NON_NULL, FIXED
                // 4954: b"init\0": typeof(_1020 = &raw const (*_1021)) = *const {l3696} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
                // 4954: b"init\0":   l3696 = UNIQUE | NON_NULL, (empty)
                // 4954: b"init\0" as *c ... st u8: typeof(_1019 = move _1020 as *const u8 (Pointer(ArrayToPointer))) = *const {l3697} u8
                // 4954: b"init\0" as *c ... st u8:   l3697 = UNIQUE | NON_NULL, (empty)
                // 4954: b"init\0" as *c ... _char: typeof(_1018 = move _1019 as *const i8 (Misc)) = *const {l3698} i8
                // 4954: b"init\0" as *c ... _char:   l3698 = UNIQUE | NON_NULL, (empty)
                // 4954: b"init\0": typeof(_1021 = const b"init\x00") = & {l3695} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
                // 4954: b"init\0":   l3695 = UNIQUE | NON_NULL, (empty)
            ) != 0)
            {
                if !(parselopt(
                    *argv.offset(i as isize),
                    // 4958: *argv.offset(i  ... size): typeof(_1025) = *const {l1738} i8
                    // 4958: *argv.offset(i  ... size):   l1738 = UNIQUE | NON_NULL, (empty)
                    // 4958: *argv.offset(i  ... size): typeof(_1026) = *mut {l1740} i8
                    // 4958: *argv.offset(i  ... size):   l1740 = UNIQUE | NON_NULL, (empty)
                    // 4958: argv.offset(i a ... size): typeof(_1027) = *mut {l1742} *mut {l1743} i8
                    // 4958: argv.offset(i a ... size):   l1742 = UNIQUE | NON_NULL, (empty)
                    // 4958: argv.offset(i a ... size):   l1743 = UNIQUE | NON_NULL, (empty)
                    // 4958: argv: typeof(_1028) = *mut {l1745} *mut {l1746} i8
                    // 4958: argv:   l1745 = UNIQUE | NON_NULL, (empty)
                    // 4958: argv:   l1746 = UNIQUE | NON_NULL, (empty)
                    // 4958: *argv.offset(i  ... size): typeof(_1025 = move _1026 as *const i8 (Pointer(MutToConstPointer))) = *const {l3699} i8
                    // 4958: *argv.offset(i  ... size):   l3699 = UNIQUE | NON_NULL, (empty)
                    &mut maxclim,
                    // 4959: &mut maxclim: typeof(_1031) = *mut {l1750} i32
                    // 4959: &mut maxclim:   l1750 = UNIQUE | NON_NULL, (empty)
                    // 4959: &mut maxclim: typeof(_1032) = &mut {l1752} i32
                    // 4959: &mut maxclim:   l1752 = UNIQUE | NON_NULL, (empty)
                    // 4959: maxclim: typeof(_1033) = *mut {l1754} i32
                    // 4959: maxclim:   l1754 = UNIQUE | NON_NULL, (empty)
                    // 4959: &mut maxclim: typeof(_1031 = &raw mut (*_1032)) = *mut {l3701} i32
                    // 4959: &mut maxclim:   l3701 = UNIQUE | NON_NULL, (empty)
                    // 4959: &mut maxclim: typeof(_1032 = &mut (*_1033)) = &mut {l3700} i32
                    // 4959: &mut maxclim:   l3700 = UNIQUE | NON_NULL, (empty)
                    b"max\0" as *const u8 as *const libc::c_char,
                    // 4960: b"max\0" as *co ... _char: typeof(_1034) = *const {l1756} i8
                    // 4960: b"max\0" as *co ... _char:   l1756 = UNIQUE | NON_NULL, (empty)
                    // 4960: b"max\0" as *co ... st u8: typeof(_1035) = *const {l1758} u8
                    // 4960: b"max\0" as *co ... st u8:   l1758 = UNIQUE | NON_NULL, (empty)
                    // 4960: b"max\0": typeof(_1036) = *const {l1760} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
                    // 4960: b"max\0":   l1760 = UNIQUE | NON_NULL, (empty)
                    // 4960: b"max\0": typeof(_1037) = & {l1762} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
                    // 4960: b"max\0":   l1762 = UNIQUE | NON_NULL, FIXED
                    // 4960: b"max\0": typeof(_1037 = const b"max\x00") = & {l3702} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
                    // 4960: b"max\0":   l3702 = UNIQUE | NON_NULL, (empty)
                    // 4960: b"max\0" as *co ... st u8: typeof(_1035 = move _1036 as *const u8 (Pointer(ArrayToPointer))) = *const {l3704} u8
                    // 4960: b"max\0" as *co ... st u8:   l3704 = UNIQUE | NON_NULL, (empty)
                    // 4960: b"max\0" as *co ... _char: typeof(_1034 = move _1035 as *const i8 (Misc)) = *const {l3705} i8
                    // 4960: b"max\0" as *co ... _char:   l3705 = UNIQUE | NON_NULL, (empty)
                    // 4960: b"max\0": typeof(_1036 = &raw const (*_1037)) = *const {l3703} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
                    // 4960: b"max\0":   l3703 = UNIQUE | NON_NULL, (empty)
                ) != 0)
                {
                    if **argv.offset(i as isize) as libc::c_int == '-' as i32 {
                    // 4963: argv.offset(i a ... size): typeof(_1041) = *mut {l1767} *mut {l1768} i8
                    // 4963: argv.offset(i a ... size):   l1767 = UNIQUE | NON_NULL, (empty)
                    // 4963: argv.offset(i a ... size):   l1768 = UNIQUE | NON_NULL, (empty)
                    // 4963: argv: typeof(_1042) = *mut {l1770} *mut {l1771} i8
                    // 4963: argv:   l1770 = UNIQUE | NON_NULL, (empty)
                    // 4963: argv:   l1771 = UNIQUE | NON_NULL, (empty)
                        err(
                            b"invalid command line option '%s' (try '-h')\0" as *const u8
                            // 4965: b"invalid comma ... _char: typeof(_1047) = *const {l1777} i8
                            // 4965: b"invalid comma ... _char:   l1777 = UNIQUE | NON_NULL, (empty)
                            // 4965: b"invalid comma ... st u8: typeof(_1048) = *const {l1779} u8
                            // 4965: b"invalid comma ... st u8:   l1779 = UNIQUE | NON_NULL, (empty)
                            // 4965: b"invalid comma ... ')\0": typeof(_1049) = *const {l1781} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                            // 4965: b"invalid comma ... ')\0":   l1781 = UNIQUE | NON_NULL, (empty)
                            // 4965: b"invalid comma ... ')\0": typeof(_1050) = & {l1783} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                            // 4965: b"invalid comma ... ')\0":   l1783 = UNIQUE | NON_NULL, FIXED
                            // 4965: b"invalid comma ... st u8: typeof(_1048 = move _1049 as *const u8 (Pointer(ArrayToPointer))) = *const {l3708} u8
                            // 4965: b"invalid comma ... st u8:   l3708 = UNIQUE | NON_NULL, (empty)
                            // 4965: b"invalid comma ... ')\0": typeof(_1050 = const b"invalid command line option \'%s\' (try \'-h\')\x00") = & {l3706} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                            // 4965: b"invalid comma ... ')\0":   l3706 = UNIQUE | NON_NULL, (empty)
                            // 4965: b"invalid comma ... ')\0": typeof(_1049 = &raw const (*_1050)) = *const {l3707} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
                            // 4965: b"invalid comma ... ')\0":   l3707 = UNIQUE | NON_NULL, (empty)
                            // 4965: b"invalid comma ... _char: typeof(_1047 = move _1048 as *const i8 (Misc)) = *const {l3709} i8
                            // 4965: b"invalid comma ... _char:   l3709 = UNIQUE | NON_NULL, (empty)
                                as *const libc::c_char,
                            *argv.offset(i as isize),
                            // 4967: *argv.offset(i  ... size): typeof(_1051) = *mut {l1785} i8
                            // 4967: *argv.offset(i  ... size):   l1785 = UNIQUE | NON_NULL, (empty)
                            // 4967: argv.offset(i a ... size): typeof(_1052) = *mut {l1787} *mut {l1788} i8
                            // 4967: argv.offset(i a ... size):   l1787 = UNIQUE | NON_NULL, (empty)
                            // 4967: argv.offset(i a ... size):   l1788 = UNIQUE | NON_NULL, (empty)
                            // 4967: argv: typeof(_1053) = *mut {l1790} *mut {l1791} i8
                            // 4967: argv:   l1790 = UNIQUE | NON_NULL, (empty)
                            // 4967: argv:   l1791 = UNIQUE | NON_NULL, (empty)
                        );
                    } else if fname.is_null() && isnum(*argv.offset(i as isize)) != 0 {
                    // 4969: fname: typeof(_1058) = *const {l1797} i8
                    // 4969: fname:   l1797 = UNIQUE | NON_NULL, (empty)
                    // 4969: fname: typeof(_1059) = *mut {l1799} *const {l1800} i8
                    // 4969: fname:   l1799 = UNIQUE | NON_NULL, (empty)
                    // 4969: fname:   l1800 = UNIQUE | NON_NULL, (empty)
                    // 4969: *argv.offset(i  ... size): typeof(_1062) = *const {l1804} i8
                    // 4969: *argv.offset(i  ... size):   l1804 = UNIQUE | NON_NULL, (empty)
                    // 4969: *argv.offset(i  ... size): typeof(_1063) = *mut {l1806} i8
                    // 4969: *argv.offset(i  ... size):   l1806 = UNIQUE | NON_NULL, (empty)
                    // 4969: argv.offset(i a ... size): typeof(_1064) = *mut {l1808} *mut {l1809} i8
                    // 4969: argv.offset(i a ... size):   l1808 = UNIQUE | NON_NULL, (empty)
                    // 4969: argv.offset(i a ... size):   l1809 = UNIQUE | NON_NULL, (empty)
                    // 4969: argv: typeof(_1065) = *mut {l1811} *mut {l1812} i8
                    // 4969: argv:   l1811 = UNIQUE | NON_NULL, (empty)
                    // 4969: argv:   l1812 = UNIQUE | NON_NULL, (empty)
                    // 4969: *argv.offset(i  ... size): typeof(_1062 = move _1063 as *const i8 (Pointer(MutToConstPointer))) = *const {l3710} i8
                    // 4969: *argv.offset(i  ... size):   l3710 = UNIQUE | NON_NULL, (empty)
                        err(
                            b"<file> file name can not be a positive number '%s'\0" as *const u8
                            // 4971: b"<file> file n ... _char: typeof(_1069) = *const {l1817} i8
                            // 4971: b"<file> file n ... _char:   l1817 = UNIQUE | NON_NULL, (empty)
                            // 4971: b"<file> file n ... st u8: typeof(_1070) = *const {l1819} u8
                            // 4971: b"<file> file n ... st u8:   l1819 = UNIQUE | NON_NULL, (empty)
                            // 4971: b"<file> file n ... s'\0": typeof(_1071) = *const {l1821} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
                            // 4971: b"<file> file n ... s'\0":   l1821 = UNIQUE | NON_NULL, (empty)
                            // 4971: b"<file> file n ... s'\0": typeof(_1072) = & {l1823} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
                            // 4971: b"<file> file n ... s'\0":   l1823 = UNIQUE | NON_NULL, FIXED
                            // 4971: b"<file> file n ... s'\0": typeof(_1072 = const b"<file> file name can not be a positive number \'%s\'\x00") = & {l3711} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
                            // 4971: b"<file> file n ... s'\0":   l3711 = UNIQUE | NON_NULL, (empty)
                            // 4971: b"<file> file n ... s'\0": typeof(_1071 = &raw const (*_1072)) = *const {l3712} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
                            // 4971: b"<file> file n ... s'\0":   l3712 = UNIQUE | NON_NULL, (empty)
                            // 4971: b"<file> file n ... _char: typeof(_1069 = move _1070 as *const i8 (Misc)) = *const {l3714} i8
                            // 4971: b"<file> file n ... _char:   l3714 = UNIQUE | NON_NULL, (empty)
                            // 4971: b"<file> file n ... st u8: typeof(_1070 = move _1071 as *const u8 (Pointer(ArrayToPointer))) = *const {l3713} u8
                            // 4971: b"<file> file n ... st u8:   l3713 = UNIQUE | NON_NULL, (empty)
                                as *const libc::c_char,
                            *argv.offset(i as isize),
                            // 4973: *argv.offset(i  ... size): typeof(_1073) = *mut {l1825} i8
                            // 4973: *argv.offset(i  ... size):   l1825 = UNIQUE | NON_NULL, (empty)
                            // 4973: argv.offset(i a ... size): typeof(_1074) = *mut {l1827} *mut {l1828} i8
                            // 4973: argv.offset(i a ... size):   l1827 = UNIQUE | NON_NULL, (empty)
                            // 4973: argv.offset(i a ... size):   l1828 = UNIQUE | NON_NULL, (empty)
                            // 4973: argv: typeof(_1075) = *mut {l1830} *mut {l1831} i8
                            // 4973: argv:   l1830 = UNIQUE | NON_NULL, (empty)
                            // 4973: argv:   l1831 = UNIQUE | NON_NULL, (empty)
                        );
                    } else if !fname.is_null() && maxworkers2 != 0 {
                    // 4975: fname: typeof(_1081) = *const {l1838} i8
                    // 4975: fname:   l1838 = UNIQUE | NON_NULL, (empty)
                    // 4975: fname: typeof(_1082) = *mut {l1840} *const {l1841} i8
                    // 4975: fname:   l1840 = UNIQUE | NON_NULL, (empty)
                    // 4975: fname:   l1841 = UNIQUE | NON_NULL, (empty)
                    // 4975: maxworkers2: typeof(_1085) = *mut {l1845} i32
                    // 4975: maxworkers2:   l1845 = UNIQUE | NON_NULL, (empty)
                        err(
                            b"too many arguments (including <file> and <workers>)\0" as *const u8
                            // 4977: b"too many argu ... _char: typeof(_1087) = *const {l1848} i8
                            // 4977: b"too many argu ... _char:   l1848 = UNIQUE | NON_NULL, (empty)
                            // 4977: b"too many argu ... st u8: typeof(_1088) = *const {l1850} u8
                            // 4977: b"too many argu ... st u8:   l1850 = UNIQUE | NON_NULL, (empty)
                            // 4977: b"too many argu ... >)\0": typeof(_1089) = *const {l1852} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                            // 4977: b"too many argu ... >)\0":   l1852 = UNIQUE | NON_NULL, (empty)
                            // 4977: b"too many argu ... >)\0": typeof(_1090) = & {l1854} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                            // 4977: b"too many argu ... >)\0":   l1854 = UNIQUE | NON_NULL, FIXED
                            // 4977: b"too many argu ... _char: typeof(_1087 = move _1088 as *const i8 (Misc)) = *const {l3718} i8
                            // 4977: b"too many argu ... _char:   l3718 = UNIQUE | NON_NULL, (empty)
                            // 4977: b"too many argu ... >)\0": typeof(_1089 = &raw const (*_1090)) = *const {l3716} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                            // 4977: b"too many argu ... >)\0":   l3716 = UNIQUE | NON_NULL, (empty)
                            // 4977: b"too many argu ... >)\0": typeof(_1090 = const b"too many arguments (including <file> and <workers>)\x00") = & {l3715} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                            // 4977: b"too many argu ... >)\0":   l3715 = UNIQUE | NON_NULL, (empty)
                            // 4977: b"too many argu ... st u8: typeof(_1088 = move _1089 as *const u8 (Pointer(ArrayToPointer))) = *const {l3717} u8
                            // 4977: b"too many argu ... st u8:   l3717 = UNIQUE | NON_NULL, (empty)
                                as *const libc::c_char,
                        );
                    } else if !fname.is_null() && isnum(*argv.offset(i as isize)) == 0 {
                    // 4980: fname: typeof(_1094) = *const {l1859} i8
                    // 4980: fname:   l1859 = UNIQUE | NON_NULL, (empty)
                    // 4980: fname: typeof(_1095) = *mut {l1861} *const {l1862} i8
                    // 4980: fname:   l1861 = UNIQUE | NON_NULL, (empty)
                    // 4980: fname:   l1862 = UNIQUE | NON_NULL, (empty)
                    // 4980: *argv.offset(i  ... size): typeof(_1098) = *const {l1866} i8
                    // 4980: *argv.offset(i  ... size):   l1866 = UNIQUE | NON_NULL, (empty)
                    // 4980: *argv.offset(i  ... size): typeof(_1099) = *mut {l1868} i8
                    // 4980: *argv.offset(i  ... size):   l1868 = UNIQUE | NON_NULL, (empty)
                    // 4980: argv.offset(i a ... size): typeof(_1100) = *mut {l1870} *mut {l1871} i8
                    // 4980: argv.offset(i a ... size):   l1870 = UNIQUE | NON_NULL, (empty)
                    // 4980: argv.offset(i a ... size):   l1871 = UNIQUE | NON_NULL, (empty)
                    // 4980: argv: typeof(_1101) = *mut {l1873} *mut {l1874} i8
                    // 4980: argv:   l1873 = UNIQUE | NON_NULL, (empty)
                    // 4980: argv:   l1874 = UNIQUE | NON_NULL, (empty)
                    // 4980: *argv.offset(i  ... size): typeof(_1098 = move _1099 as *const i8 (Pointer(MutToConstPointer))) = *const {l3719} i8
                    // 4980: *argv.offset(i  ... size):   l3719 = UNIQUE | NON_NULL, (empty)
                        err(
                            b"expected positive number for <workers> but got '%s'\0" as *const u8
                            // 4982: b"expected posi ... _char: typeof(_1105) = *const {l1879} i8
                            // 4982: b"expected posi ... _char:   l1879 = UNIQUE | NON_NULL, (empty)
                            // 4982: b"expected posi ... st u8: typeof(_1106) = *const {l1881} u8
                            // 4982: b"expected posi ... st u8:   l1881 = UNIQUE | NON_NULL, (empty)
                            // 4982: b"expected posi ... s'\0": typeof(_1107) = *const {l1883} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                            // 4982: b"expected posi ... s'\0":   l1883 = UNIQUE | NON_NULL, (empty)
                            // 4982: b"expected posi ... s'\0": typeof(_1108) = & {l1885} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                            // 4982: b"expected posi ... s'\0":   l1885 = UNIQUE | NON_NULL, FIXED
                            // 4982: b"expected posi ... s'\0": typeof(_1108 = const b"expected positive number for <workers> but got \'%s\'\x00") = & {l3720} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                            // 4982: b"expected posi ... s'\0":   l3720 = UNIQUE | NON_NULL, (empty)
                            // 4982: b"expected posi ... st u8: typeof(_1106 = move _1107 as *const u8 (Pointer(ArrayToPointer))) = *const {l3722} u8
                            // 4982: b"expected posi ... st u8:   l3722 = UNIQUE | NON_NULL, (empty)
                            // 4982: b"expected posi ... s'\0": typeof(_1107 = &raw const (*_1108)) = *const {l3721} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
                            // 4982: b"expected posi ... s'\0":   l3721 = UNIQUE | NON_NULL, (empty)
                            // 4982: b"expected posi ... _char: typeof(_1105 = move _1106 as *const i8 (Misc)) = *const {l3723} i8
                            // 4982: b"expected posi ... _char:   l3723 = UNIQUE | NON_NULL, (empty)
                                as *const libc::c_char,
                            *argv.offset(i as isize),
                            // 4984: *argv.offset(i  ... size): typeof(_1109) = *mut {l1887} i8
                            // 4984: *argv.offset(i  ... size):   l1887 = UNIQUE | NON_NULL, (empty)
                            // 4984: argv.offset(i a ... size): typeof(_1110) = *mut {l1889} *mut {l1890} i8
                            // 4984: argv.offset(i a ... size):   l1889 = UNIQUE | NON_NULL, (empty)
                            // 4984: argv.offset(i a ... size):   l1890 = UNIQUE | NON_NULL, (empty)
                            // 4984: argv: typeof(_1111) = *mut {l1892} *mut {l1893} i8
                            // 4984: argv:   l1892 = UNIQUE | NON_NULL, (empty)
                            // 4984: argv:   l1893 = UNIQUE | NON_NULL, (empty)
                        );
                    } else if !fname.is_null() {
                    // 4986: fname: typeof(_1116) = *const {l1899} i8
                    // 4986: fname:   l1899 = UNIQUE | NON_NULL, (empty)
                    // 4986: fname: typeof(_1117) = *mut {l1901} *const {l1902} i8
                    // 4986: fname:   l1901 = UNIQUE | NON_NULL, (empty)
                    // 4986: fname:   l1902 = UNIQUE | NON_NULL, (empty)
                        maxworkers2 = atoi(*argv.offset(i as isize));
                        // 4987: *argv.offset(i  ... size): typeof(_1119) = *const {l1905} i8
                        // 4987: *argv.offset(i  ... size):   l1905 = UNIQUE | NON_NULL, (empty)
                        // 4987: *argv.offset(i  ... size): typeof(_1120) = *mut {l1907} i8
                        // 4987: *argv.offset(i  ... size):   l1907 = UNIQUE | NON_NULL, (empty)
                        // 4987: argv.offset(i a ... size): typeof(_1121) = *mut {l1909} *mut {l1910} i8
                        // 4987: argv.offset(i a ... size):   l1909 = UNIQUE | NON_NULL, (empty)
                        // 4987: argv.offset(i a ... size):   l1910 = UNIQUE | NON_NULL, (empty)
                        // 4987: argv: typeof(_1122) = *mut {l1912} *mut {l1913} i8
                        // 4987: argv:   l1912 = UNIQUE | NON_NULL, (empty)
                        // 4987: argv:   l1913 = UNIQUE | NON_NULL, (empty)
                        // 4987: maxworkers2: typeof(_1125) = *mut {l1917} i32
                        // 4987: maxworkers2:   l1917 = UNIQUE | NON_NULL, (empty)
                        // 4987: *argv.offset(i  ... size): typeof(_1119 = move _1120 as *const i8 (Pointer(MutToConstPointer))) = *const {l3724} i8
                        // 4987: *argv.offset(i  ... size):   l3724 = UNIQUE | NON_NULL, (empty)
                        if maxworkers2 <= 0 as libc::c_int {
                        // 4988: maxworkers2: typeof(_1128) = *mut {l1921} i32
                        // 4988: maxworkers2:   l1921 = UNIQUE | NON_NULL, (empty)
                            err(
                                b"invalid number '%s' for <workers>\0" as *const u8
                                // 4990: b"invalid numbe ... _char: typeof(_1131) = *const {l1925} i8
                                // 4990: b"invalid numbe ... _char:   l1925 = UNIQUE | NON_NULL, (empty)
                                // 4990: b"invalid numbe ... st u8: typeof(_1132) = *const {l1927} u8
                                // 4990: b"invalid numbe ... st u8:   l1927 = UNIQUE | NON_NULL, (empty)
                                // 4990: b"invalid numbe ... s>\0": typeof(_1133) = *const {l1929} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
                                // 4990: b"invalid numbe ... s>\0":   l1929 = UNIQUE | NON_NULL, (empty)
                                // 4990: b"invalid numbe ... s>\0": typeof(_1134) = & {l1931} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
                                // 4990: b"invalid numbe ... s>\0":   l1931 = UNIQUE | NON_NULL, FIXED
                                // 4990: b"invalid numbe ... s>\0": typeof(_1134 = const b"invalid number \'%s\' for <workers>\x00") = & {l3725} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
                                // 4990: b"invalid numbe ... s>\0":   l3725 = UNIQUE | NON_NULL, (empty)
                                // 4990: b"invalid numbe ... s>\0": typeof(_1133 = &raw const (*_1134)) = *const {l3726} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000022)) }]
                                // 4990: b"invalid numbe ... s>\0":   l3726 = UNIQUE | NON_NULL, (empty)
                                // 4990: b"invalid numbe ... st u8: typeof(_1132 = move _1133 as *const u8 (Pointer(ArrayToPointer))) = *const {l3727} u8
                                // 4990: b"invalid numbe ... st u8:   l3727 = UNIQUE | NON_NULL, (empty)
                                // 4990: b"invalid numbe ... _char: typeof(_1131 = move _1132 as *const i8 (Misc)) = *const {l3728} i8
                                // 4990: b"invalid numbe ... _char:   l3728 = UNIQUE | NON_NULL, (empty)
                                    as *const libc::c_char,
                                *argv.offset(i as isize),
                                // 4992: *argv.offset(i  ... size): typeof(_1135) = *mut {l1933} i8
                                // 4992: *argv.offset(i  ... size):   l1933 = UNIQUE | NON_NULL, (empty)
                                // 4992: argv.offset(i a ... size): typeof(_1136) = *mut {l1935} *mut {l1936} i8
                                // 4992: argv.offset(i a ... size):   l1935 = UNIQUE | NON_NULL, (empty)
                                // 4992: argv.offset(i a ... size):   l1936 = UNIQUE | NON_NULL, (empty)
                                // 4992: argv: typeof(_1137) = *mut {l1938} *mut {l1939} i8
                                // 4992: argv:   l1938 = UNIQUE | NON_NULL, (empty)
                                // 4992: argv:   l1939 = UNIQUE | NON_NULL, (empty)
                            );
                        }
                    } else if exists(*argv.offset(i as isize)) == 0 {
                    // 4995: *argv.offset(i  ... size): typeof(_1142) = *const {l1945} i8
                    // 4995: *argv.offset(i  ... size):   l1945 = UNIQUE | NON_NULL, (empty)
                    // 4995: *argv.offset(i  ... size): typeof(_1143) = *mut {l1947} i8
                    // 4995: *argv.offset(i  ... size):   l1947 = UNIQUE | NON_NULL, (empty)
                    // 4995: argv.offset(i a ... size): typeof(_1144) = *mut {l1949} *mut {l1950} i8
                    // 4995: argv.offset(i a ... size):   l1949 = UNIQUE | NON_NULL, (empty)
                    // 4995: argv.offset(i a ... size):   l1950 = UNIQUE | NON_NULL, (empty)
                    // 4995: argv: typeof(_1145) = *mut {l1952} *mut {l1953} i8
                    // 4995: argv:   l1952 = UNIQUE | NON_NULL, (empty)
                    // 4995: argv:   l1953 = UNIQUE | NON_NULL, (empty)
                    // 4995: *argv.offset(i  ... size): typeof(_1142 = move _1143 as *const i8 (Pointer(MutToConstPointer))) = *const {l3729} i8
                    // 4995: *argv.offset(i  ... size):   l3729 = UNIQUE | NON_NULL, (empty)
                        err(
                            b"can not stat file '%s'\0" as *const u8 as *const libc::c_char,
                            // 4997: b"can not stat  ... _char: typeof(_1149) = *const {l1958} i8
                            // 4997: b"can not stat  ... _char:   l1958 = UNIQUE | NON_NULL, (empty)
                            // 4997: b"can not stat  ... st u8: typeof(_1150) = *const {l1960} u8
                            // 4997: b"can not stat  ... st u8:   l1960 = UNIQUE | NON_NULL, (empty)
                            // 4997: b"can not stat  ... s'\0": typeof(_1151) = *const {l1962} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000017)) }]
                            // 4997: b"can not stat  ... s'\0":   l1962 = UNIQUE | NON_NULL, (empty)
                            // 4997: b"can not stat  ... s'\0": typeof(_1152) = & {l1964} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000017)) }]
                            // 4997: b"can not stat  ... s'\0":   l1964 = UNIQUE | NON_NULL, FIXED
                            // 4997: b"can not stat  ... st u8: typeof(_1150 = move _1151 as *const u8 (Pointer(ArrayToPointer))) = *const {l3732} u8
                            // 4997: b"can not stat  ... st u8:   l3732 = UNIQUE | NON_NULL, (empty)
                            // 4997: b"can not stat  ... _char: typeof(_1149 = move _1150 as *const i8 (Misc)) = *const {l3733} i8
                            // 4997: b"can not stat  ... _char:   l3733 = UNIQUE | NON_NULL, (empty)
                            // 4997: b"can not stat  ... s'\0": typeof(_1151 = &raw const (*_1152)) = *const {l3731} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000017)) }]
                            // 4997: b"can not stat  ... s'\0":   l3731 = UNIQUE | NON_NULL, (empty)
                            // 4997: b"can not stat  ... s'\0": typeof(_1152 = const b"can not stat file \'%s\'\x00") = & {l3730} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000017)) }]
                            // 4997: b"can not stat  ... s'\0":   l3730 = UNIQUE | NON_NULL, (empty)
                            *argv.offset(i as isize),
                            // 4998: *argv.offset(i  ... size): typeof(_1153) = *mut {l1966} i8
                            // 4998: *argv.offset(i  ... size):   l1966 = UNIQUE | NON_NULL, (empty)
                            // 4998: argv.offset(i a ... size): typeof(_1154) = *mut {l1968} *mut {l1969} i8
                            // 4998: argv.offset(i a ... size):   l1968 = UNIQUE | NON_NULL, (empty)
                            // 4998: argv.offset(i a ... size):   l1969 = UNIQUE | NON_NULL, (empty)
                            // 4998: argv: typeof(_1155) = *mut {l1971} *mut {l1972} i8
                            // 4998: argv:   l1971 = UNIQUE | NON_NULL, (empty)
                            // 4998: argv:   l1972 = UNIQUE | NON_NULL, (empty)
                        );
                    } else {
                        fname = *argv.offset(i as isize);
                        // 5001: *argv.offset(i  ... size): typeof(_1158) = *mut {l1976} i8
                        // 5001: *argv.offset(i  ... size):   l1976 = UNIQUE | NON_NULL, (empty)
                        // 5001: argv.offset(i a ... size): typeof(_1159) = *mut {l1978} *mut {l1979} i8
                        // 5001: argv.offset(i a ... size):   l1978 = UNIQUE | NON_NULL, (empty)
                        // 5001: argv.offset(i a ... size):   l1979 = UNIQUE | NON_NULL, (empty)
                        // 5001: argv: typeof(_1160) = *mut {l1981} *mut {l1982} i8
                        // 5001: argv:   l1981 = UNIQUE | NON_NULL, (empty)
                        // 5001: argv:   l1982 = UNIQUE | NON_NULL, (empty)
                        // 5001: fname: typeof(_1163) = *mut {l1986} *const {l1987} i8
                        // 5001: fname:   l1986 = UNIQUE | NON_NULL, (empty)
                        // 5001: fname:   l1987 = UNIQUE | NON_NULL, (empty)
                        // 5001: fname = *argv.o ... size): typeof((*_1163) = move _1158 as *const i8 (Pointer(MutToConstPointer))) = *const {l3734} i8
                        // 5001: fname = *argv.o ... size):   l3734 = UNIQUE | NON_NULL, (empty)
                    }
                }
            }
        }
        i += 1;
        i;
    }
    if locslkhd != 0 && relevancelkhd != 0 {
    // 5009: locslkhd: typeof(_1173) = *mut {l1998} i32
    // 5009: locslkhd:   l1998 = UNIQUE | NON_NULL, (empty)
    // 5009: relevancelkhd: typeof(_1176) = *mut {l2002} i32
    // 5009: relevancelkhd:   l2002 = UNIQUE | NON_NULL, (empty)
        err(
            b"can not combine '--relevancelkhd' and '--locslkhd'\0" as *const u8
            // 5011: b"can not combi ... _char: typeof(_1178) = *const {l2005} i8
            // 5011: b"can not combi ... _char:   l2005 = UNIQUE | NON_NULL, (empty)
            // 5011: b"can not combi ... st u8: typeof(_1179) = *const {l2007} u8
            // 5011: b"can not combi ... st u8:   l2007 = UNIQUE | NON_NULL, (empty)
            // 5011: b"can not combi ... d'\0": typeof(_1180) = *const {l2009} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 5011: b"can not combi ... d'\0":   l2009 = UNIQUE | NON_NULL, (empty)
            // 5011: b"can not combi ... d'\0": typeof(_1181) = & {l2011} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 5011: b"can not combi ... d'\0":   l2011 = UNIQUE | NON_NULL, FIXED
            // 5011: b"can not combi ... d'\0": typeof(_1181 = const b"can not combine \'--relevancelkhd\' and \'--locslkhd\'\x00") = & {l3735} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 5011: b"can not combi ... d'\0":   l3735 = UNIQUE | NON_NULL, (empty)
            // 5011: b"can not combi ... st u8: typeof(_1179 = move _1180 as *const u8 (Pointer(ArrayToPointer))) = *const {l3737} u8
            // 5011: b"can not combi ... st u8:   l3737 = UNIQUE | NON_NULL, (empty)
            // 5011: b"can not combi ... _char: typeof(_1178 = move _1179 as *const i8 (Misc)) = *const {l3738} i8
            // 5011: b"can not combi ... _char:   l3738 = UNIQUE | NON_NULL, (empty)
            // 5011: b"can not combi ... d'\0": typeof(_1180 = &raw const (*_1181)) = *const {l3736} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000033)) }]
            // 5011: b"can not combi ... d'\0":   l3736 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        );
    }
    if treelookdepthset == 0 {
    // 5015: treelookdepthset: typeof(_1185) = *mut {l2016} i32
    // 5015: treelookdepthset:   l2016 = UNIQUE | NON_NULL, (empty)
        treelookdepth = 10 as libc::c_int;
        // 5016: treelookdepth: typeof(_1187) = *mut {l2019} i32
        // 5016: treelookdepth:   l2019 = UNIQUE | NON_NULL, (empty)
    }
    if treelookdepth < 0 as libc::c_int {
    // 5018: treelookdepth: typeof(_1191) = *mut {l2024} i32
    // 5018: treelookdepth:   l2024 = UNIQUE | NON_NULL, (empty)
        treelookdepth = -(1 as libc::c_int);
        // 5019: treelookdepth: typeof(_1195) = *mut {l2029} i32
        // 5019: treelookdepth:   l2029 = UNIQUE | NON_NULL, (empty)
    }
    if maxworkers2 != 0 {
    // 5021: maxworkers2: typeof(_1199) = *mut {l2034} i32
    // 5021: maxworkers2:   l2034 = UNIQUE | NON_NULL, (empty)
        maxworkers = maxworkers2;
        // 5022: maxworkers2: typeof(_1201) = *mut {l2037} i32
        // 5022: maxworkers2:   l2037 = UNIQUE | NON_NULL, (empty)
        // 5022: maxworkers: typeof(_1202) = *mut {l2039} i32
        // 5022: maxworkers:   l2039 = UNIQUE | NON_NULL, (empty)
    }
    if fname.is_null() {
    // 5024: fname: typeof(_1205) = *const {l2043} i8
    // 5024: fname:   l2043 = UNIQUE | NON_NULL, (empty)
    // 5024: fname: typeof(_1206) = *mut {l2045} *const {l2046} i8
    // 5024: fname:   l2045 = UNIQUE | NON_NULL, (empty)
    // 5024: fname:   l2046 = UNIQUE | NON_NULL, (empty)
        file = stdin;
        // 5025: stdin: typeof(_1207) = *mut {l2048} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5025: stdin:   l2048 = UNIQUE | NON_NULL, (empty)
        // 5025: stdin: typeof(_1208) = *mut {l2050} *mut {l2051} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5025: stdin:   l2050 = UNIQUE | NON_NULL, (empty)
        // 5025: stdin:   l2051 = UNIQUE | NON_NULL, (empty)
        // 5025: file: typeof(_1209) = *mut {l2053} *mut {l2054} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5025: file:   l2053 = UNIQUE | NON_NULL, (empty)
        // 5025: file:   l2054 = UNIQUE | NON_NULL, (empty)
        fname = b"<stdin>\0" as *const u8 as *const libc::c_char;
        // 5026: b"<stdin>\0" as ... st u8: typeof(_1210) = *const {l2056} u8
        // 5026: b"<stdin>\0" as ... st u8:   l2056 = UNIQUE | NON_NULL, (empty)
        // 5026: b"<stdin>\0": typeof(_1211) = *const {l2058} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 5026: b"<stdin>\0":   l2058 = UNIQUE | NON_NULL, (empty)
        // 5026: b"<stdin>\0": typeof(_1212) = & {l2060} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 5026: b"<stdin>\0":   l2060 = UNIQUE | NON_NULL, FIXED
        // 5026: fname: typeof(_1213) = *mut {l2062} *const {l2063} i8
        // 5026: fname:   l2062 = UNIQUE | NON_NULL, (empty)
        // 5026: fname:   l2063 = UNIQUE | NON_NULL, (empty)
        // 5026: b"<stdin>\0": typeof(_1211 = &raw const (*_1212)) = *const {l3740} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 5026: b"<stdin>\0":   l3740 = UNIQUE | NON_NULL, (empty)
        // 5026: b"<stdin>\0": typeof(_1212 = const b"<stdin>\x00") = & {l3739} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000008)) }]
        // 5026: b"<stdin>\0":   l3739 = UNIQUE | NON_NULL, (empty)
        // 5026: b"<stdin>\0" as ... st u8: typeof(_1210 = move _1211 as *const u8 (Pointer(ArrayToPointer))) = *const {l3741} u8
        // 5026: b"<stdin>\0" as ... st u8:   l3741 = UNIQUE | NON_NULL, (empty)
        // 5026: fname = b"<stdi ... _char: typeof((*_1213) = move _1210 as *const i8 (Misc)) = *const {l3742} i8
        // 5026: fname = b"<stdi ... _char:   l3742 = UNIQUE | NON_NULL, (empty)
        clf = 0 as libc::c_int;
    } else if has(fname, b".gz\0" as *const u8 as *const libc::c_char) != 0 {
    // 5028: fname: typeof(_1217) = *const {l2068} i8
    // 5028: fname:   l2068 = UNIQUE | NON_NULL, (empty)
    // 5028: fname: typeof(_1218) = *mut {l2070} *const {l2071} i8
    // 5028: fname:   l2070 = UNIQUE | NON_NULL, (empty)
    // 5028: fname:   l2071 = UNIQUE | NON_NULL, (empty)
    // 5028: b".gz\0" as *co ... _char: typeof(_1219) = *const {l2073} i8
    // 5028: b".gz\0" as *co ... _char:   l2073 = UNIQUE | NON_NULL, (empty)
    // 5028: b".gz\0" as *co ... st u8: typeof(_1220) = *const {l2075} u8
    // 5028: b".gz\0" as *co ... st u8:   l2075 = UNIQUE | NON_NULL, (empty)
    // 5028: b".gz\0": typeof(_1221) = *const {l2077} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5028: b".gz\0":   l2077 = UNIQUE | NON_NULL, (empty)
    // 5028: b".gz\0": typeof(_1222) = & {l2079} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5028: b".gz\0":   l2079 = UNIQUE | NON_NULL, FIXED
    // 5028: b".gz\0" as *co ... _char: typeof(_1219 = move _1220 as *const i8 (Misc)) = *const {l3746} i8
    // 5028: b".gz\0" as *co ... _char:   l3746 = UNIQUE | NON_NULL, (empty)
    // 5028: b".gz\0": typeof(_1222 = const b".gz\x00") = & {l3743} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5028: b".gz\0":   l3743 = UNIQUE | NON_NULL, (empty)
    // 5028: b".gz\0" as *co ... st u8: typeof(_1220 = move _1221 as *const u8 (Pointer(ArrayToPointer))) = *const {l3745} u8
    // 5028: b".gz\0" as *co ... st u8:   l3745 = UNIQUE | NON_NULL, (empty)
    // 5028: b".gz\0": typeof(_1221 = &raw const (*_1222)) = *const {l3744} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5028: b".gz\0":   l3744 = UNIQUE | NON_NULL, (empty)
        file = cmd(b"gunzip -c %s\0" as *const u8 as *const libc::c_char, fname);
        // 5029: cmd(b"gunzip -c ... name): typeof(_1223) = *mut {l2081} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5029: cmd(b"gunzip -c ... name):   l2081 = UNIQUE | NON_NULL, (empty)
        // 5029: b"gunzip -c %s\ ... _char: typeof(_1224) = *const {l2083} i8
        // 5029: b"gunzip -c %s\ ... _char:   l2083 = UNIQUE | NON_NULL, (empty)
        // 5029: b"gunzip -c %s\ ... st u8: typeof(_1225) = *const {l2085} u8
        // 5029: b"gunzip -c %s\ ... st u8:   l2085 = UNIQUE | NON_NULL, (empty)
        // 5029: b"gunzip -c %s\0": typeof(_1226) = *const {l2087} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 5029: b"gunzip -c %s\0":   l2087 = UNIQUE | NON_NULL, (empty)
        // 5029: b"gunzip -c %s\0": typeof(_1227) = & {l2089} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 5029: b"gunzip -c %s\0":   l2089 = UNIQUE | NON_NULL, FIXED
        // 5029: fname: typeof(_1228) = *const {l2091} i8
        // 5029: fname:   l2091 = UNIQUE | NON_NULL, (empty)
        // 5029: fname: typeof(_1229) = *mut {l2093} *const {l2094} i8
        // 5029: fname:   l2093 = UNIQUE | NON_NULL, (empty)
        // 5029: fname:   l2094 = UNIQUE | NON_NULL, (empty)
        // 5029: file: typeof(_1230) = *mut {l2096} *mut {l2097} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5029: file:   l2096 = UNIQUE | NON_NULL, (empty)
        // 5029: file:   l2097 = UNIQUE | NON_NULL, (empty)
        // 5029: b"gunzip -c %s\ ... _char: typeof(_1224 = move _1225 as *const i8 (Misc)) = *const {l3750} i8
        // 5029: b"gunzip -c %s\ ... _char:   l3750 = UNIQUE | NON_NULL, (empty)
        // 5029: b"gunzip -c %s\0": typeof(_1226 = &raw const (*_1227)) = *const {l3748} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 5029: b"gunzip -c %s\0":   l3748 = UNIQUE | NON_NULL, (empty)
        // 5029: b"gunzip -c %s\ ... st u8: typeof(_1225 = move _1226 as *const u8 (Pointer(ArrayToPointer))) = *const {l3749} u8
        // 5029: b"gunzip -c %s\ ... st u8:   l3749 = UNIQUE | NON_NULL, (empty)
        // 5029: b"gunzip -c %s\0": typeof(_1227 = const b"gunzip -c %s\x00") = & {l3747} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000d)) }]
        // 5029: b"gunzip -c %s\0":   l3747 = UNIQUE | NON_NULL, (empty)
        clf = 2 as libc::c_int;
    } else if has(fname, b".xz\0" as *const u8 as *const libc::c_char) != 0 {
    // 5031: fname: typeof(_1234) = *const {l2102} i8
    // 5031: fname:   l2102 = UNIQUE | NON_NULL, (empty)
    // 5031: fname: typeof(_1235) = *mut {l2104} *const {l2105} i8
    // 5031: fname:   l2104 = UNIQUE | NON_NULL, (empty)
    // 5031: fname:   l2105 = UNIQUE | NON_NULL, (empty)
    // 5031: b".xz\0" as *co ... _char: typeof(_1236) = *const {l2107} i8
    // 5031: b".xz\0" as *co ... _char:   l2107 = UNIQUE | NON_NULL, (empty)
    // 5031: b".xz\0" as *co ... st u8: typeof(_1237) = *const {l2109} u8
    // 5031: b".xz\0" as *co ... st u8:   l2109 = UNIQUE | NON_NULL, (empty)
    // 5031: b".xz\0": typeof(_1238) = *const {l2111} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5031: b".xz\0":   l2111 = UNIQUE | NON_NULL, (empty)
    // 5031: b".xz\0": typeof(_1239) = & {l2113} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5031: b".xz\0":   l2113 = UNIQUE | NON_NULL, FIXED
    // 5031: b".xz\0" as *co ... _char: typeof(_1236 = move _1237 as *const i8 (Misc)) = *const {l3754} i8
    // 5031: b".xz\0" as *co ... _char:   l3754 = UNIQUE | NON_NULL, (empty)
    // 5031: b".xz\0": typeof(_1238 = &raw const (*_1239)) = *const {l3752} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5031: b".xz\0":   l3752 = UNIQUE | NON_NULL, (empty)
    // 5031: b".xz\0": typeof(_1239 = const b".xz\x00") = & {l3751} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5031: b".xz\0":   l3751 = UNIQUE | NON_NULL, (empty)
    // 5031: b".xz\0" as *co ... st u8: typeof(_1237 = move _1238 as *const u8 (Pointer(ArrayToPointer))) = *const {l3753} u8
    // 5031: b".xz\0" as *co ... st u8:   l3753 = UNIQUE | NON_NULL, (empty)
        file = cmd(b"xz -d -c %s\0" as *const u8 as *const libc::c_char, fname);
        // 5032: cmd(b"xz -d -c  ... name): typeof(_1240) = *mut {l2115} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5032: cmd(b"xz -d -c  ... name):   l2115 = UNIQUE | NON_NULL, (empty)
        // 5032: b"xz -d -c %s\0 ... _char: typeof(_1241) = *const {l2117} i8
        // 5032: b"xz -d -c %s\0 ... _char:   l2117 = UNIQUE | NON_NULL, (empty)
        // 5032: b"xz -d -c %s\0 ... st u8: typeof(_1242) = *const {l2119} u8
        // 5032: b"xz -d -c %s\0 ... st u8:   l2119 = UNIQUE | NON_NULL, (empty)
        // 5032: b"xz -d -c %s\0": typeof(_1243) = *const {l2121} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 5032: b"xz -d -c %s\0":   l2121 = UNIQUE | NON_NULL, (empty)
        // 5032: b"xz -d -c %s\0": typeof(_1244) = & {l2123} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 5032: b"xz -d -c %s\0":   l2123 = UNIQUE | NON_NULL, FIXED
        // 5032: fname: typeof(_1245) = *const {l2125} i8
        // 5032: fname:   l2125 = UNIQUE | NON_NULL, (empty)
        // 5032: fname: typeof(_1246) = *mut {l2127} *const {l2128} i8
        // 5032: fname:   l2127 = UNIQUE | NON_NULL, (empty)
        // 5032: fname:   l2128 = UNIQUE | NON_NULL, (empty)
        // 5032: file: typeof(_1247) = *mut {l2130} *mut {l2131} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5032: file:   l2130 = UNIQUE | NON_NULL, (empty)
        // 5032: file:   l2131 = UNIQUE | NON_NULL, (empty)
        // 5032: b"xz -d -c %s\0": typeof(_1243 = &raw const (*_1244)) = *const {l3756} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 5032: b"xz -d -c %s\0":   l3756 = UNIQUE | NON_NULL, (empty)
        // 5032: b"xz -d -c %s\0 ... st u8: typeof(_1242 = move _1243 as *const u8 (Pointer(ArrayToPointer))) = *const {l3757} u8
        // 5032: b"xz -d -c %s\0 ... st u8:   l3757 = UNIQUE | NON_NULL, (empty)
        // 5032: b"xz -d -c %s\0 ... _char: typeof(_1241 = move _1242 as *const i8 (Misc)) = *const {l3758} i8
        // 5032: b"xz -d -c %s\0 ... _char:   l3758 = UNIQUE | NON_NULL, (empty)
        // 5032: b"xz -d -c %s\0": typeof(_1244 = const b"xz -d -c %s\x00") = & {l3755} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000c)) }]
        // 5032: b"xz -d -c %s\0":   l3755 = UNIQUE | NON_NULL, (empty)
        clf = 2 as libc::c_int;
    } else if has(fname, b".bz2\0" as *const u8 as *const libc::c_char) != 0 {
    // 5034: fname: typeof(_1251) = *const {l2136} i8
    // 5034: fname:   l2136 = UNIQUE | NON_NULL, (empty)
    // 5034: fname: typeof(_1252) = *mut {l2138} *const {l2139} i8
    // 5034: fname:   l2138 = UNIQUE | NON_NULL, (empty)
    // 5034: fname:   l2139 = UNIQUE | NON_NULL, (empty)
    // 5034: b".bz2\0" as *c ... _char: typeof(_1253) = *const {l2141} i8
    // 5034: b".bz2\0" as *c ... _char:   l2141 = UNIQUE | NON_NULL, (empty)
    // 5034: b".bz2\0" as *c ... st u8: typeof(_1254) = *const {l2143} u8
    // 5034: b".bz2\0" as *c ... st u8:   l2143 = UNIQUE | NON_NULL, (empty)
    // 5034: b".bz2\0": typeof(_1255) = *const {l2145} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 5034: b".bz2\0":   l2145 = UNIQUE | NON_NULL, (empty)
    // 5034: b".bz2\0": typeof(_1256) = & {l2147} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 5034: b".bz2\0":   l2147 = UNIQUE | NON_NULL, FIXED
    // 5034: b".bz2\0": typeof(_1256 = const b".bz2\x00") = & {l3759} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 5034: b".bz2\0":   l3759 = UNIQUE | NON_NULL, (empty)
    // 5034: b".bz2\0" as *c ... st u8: typeof(_1254 = move _1255 as *const u8 (Pointer(ArrayToPointer))) = *const {l3761} u8
    // 5034: b".bz2\0" as *c ... st u8:   l3761 = UNIQUE | NON_NULL, (empty)
    // 5034: b".bz2\0" as *c ... _char: typeof(_1253 = move _1254 as *const i8 (Misc)) = *const {l3762} i8
    // 5034: b".bz2\0" as *c ... _char:   l3762 = UNIQUE | NON_NULL, (empty)
    // 5034: b".bz2\0": typeof(_1255 = &raw const (*_1256)) = *const {l3760} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
    // 5034: b".bz2\0":   l3760 = UNIQUE | NON_NULL, (empty)
        file = cmd(b"bzcat %s\0" as *const u8 as *const libc::c_char, fname);
        // 5035: cmd(b"bzcat %s\ ... name): typeof(_1257) = *mut {l2149} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5035: cmd(b"bzcat %s\ ... name):   l2149 = UNIQUE | NON_NULL, (empty)
        // 5035: b"bzcat %s\0" a ... _char: typeof(_1258) = *const {l2151} i8
        // 5035: b"bzcat %s\0" a ... _char:   l2151 = UNIQUE | NON_NULL, (empty)
        // 5035: b"bzcat %s\0" a ... st u8: typeof(_1259) = *const {l2153} u8
        // 5035: b"bzcat %s\0" a ... st u8:   l2153 = UNIQUE | NON_NULL, (empty)
        // 5035: b"bzcat %s\0": typeof(_1260) = *const {l2155} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 5035: b"bzcat %s\0":   l2155 = UNIQUE | NON_NULL, (empty)
        // 5035: b"bzcat %s\0": typeof(_1261) = & {l2157} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 5035: b"bzcat %s\0":   l2157 = UNIQUE | NON_NULL, FIXED
        // 5035: fname: typeof(_1262) = *const {l2159} i8
        // 5035: fname:   l2159 = UNIQUE | NON_NULL, (empty)
        // 5035: fname: typeof(_1263) = *mut {l2161} *const {l2162} i8
        // 5035: fname:   l2161 = UNIQUE | NON_NULL, (empty)
        // 5035: fname:   l2162 = UNIQUE | NON_NULL, (empty)
        // 5035: file: typeof(_1264) = *mut {l2164} *mut {l2165} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5035: file:   l2164 = UNIQUE | NON_NULL, (empty)
        // 5035: file:   l2165 = UNIQUE | NON_NULL, (empty)
        // 5035: b"bzcat %s\0" a ... _char: typeof(_1258 = move _1259 as *const i8 (Misc)) = *const {l3766} i8
        // 5035: b"bzcat %s\0" a ... _char:   l3766 = UNIQUE | NON_NULL, (empty)
        // 5035: b"bzcat %s\0" a ... st u8: typeof(_1259 = move _1260 as *const u8 (Pointer(ArrayToPointer))) = *const {l3765} u8
        // 5035: b"bzcat %s\0" a ... st u8:   l3765 = UNIQUE | NON_NULL, (empty)
        // 5035: b"bzcat %s\0": typeof(_1261 = const b"bzcat %s\x00") = & {l3763} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 5035: b"bzcat %s\0":   l3763 = UNIQUE | NON_NULL, (empty)
        // 5035: b"bzcat %s\0": typeof(_1260 = &raw const (*_1261)) = *const {l3764} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000009)) }]
        // 5035: b"bzcat %s\0":   l3764 = UNIQUE | NON_NULL, (empty)
        clf = 2 as libc::c_int;
    } else if has(fname, b".7z\0" as *const u8 as *const libc::c_char) != 0 {
    // 5037: fname: typeof(_1268) = *const {l2170} i8
    // 5037: fname:   l2170 = UNIQUE | NON_NULL, (empty)
    // 5037: fname: typeof(_1269) = *mut {l2172} *const {l2173} i8
    // 5037: fname:   l2172 = UNIQUE | NON_NULL, (empty)
    // 5037: fname:   l2173 = UNIQUE | NON_NULL, (empty)
    // 5037: b".7z\0" as *co ... _char: typeof(_1270) = *const {l2175} i8
    // 5037: b".7z\0" as *co ... _char:   l2175 = UNIQUE | NON_NULL, (empty)
    // 5037: b".7z\0" as *co ... st u8: typeof(_1271) = *const {l2177} u8
    // 5037: b".7z\0" as *co ... st u8:   l2177 = UNIQUE | NON_NULL, (empty)
    // 5037: b".7z\0": typeof(_1272) = *const {l2179} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5037: b".7z\0":   l2179 = UNIQUE | NON_NULL, (empty)
    // 5037: b".7z\0": typeof(_1273) = & {l2181} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5037: b".7z\0":   l2181 = UNIQUE | NON_NULL, FIXED
    // 5037: b".7z\0" as *co ... _char: typeof(_1270 = move _1271 as *const i8 (Misc)) = *const {l3770} i8
    // 5037: b".7z\0" as *co ... _char:   l3770 = UNIQUE | NON_NULL, (empty)
    // 5037: b".7z\0" as *co ... st u8: typeof(_1271 = move _1272 as *const u8 (Pointer(ArrayToPointer))) = *const {l3769} u8
    // 5037: b".7z\0" as *co ... st u8:   l3769 = UNIQUE | NON_NULL, (empty)
    // 5037: b".7z\0": typeof(_1272 = &raw const (*_1273)) = *const {l3768} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5037: b".7z\0":   l3768 = UNIQUE | NON_NULL, (empty)
    // 5037: b".7z\0": typeof(_1273 = const b".7z\x00") = & {l3767} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000004)) }]
    // 5037: b".7z\0":   l3767 = UNIQUE | NON_NULL, (empty)
        file = cmd(
        // 5038: cmd( b"7z x -so ... me, ): typeof(_1274) = *mut {l2183} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5038: cmd( b"7z x -so ... me, ):   l2183 = UNIQUE | NON_NULL, (empty)
        // 5038: file: typeof(_1281) = *mut {l2198} *mut {l2199} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5038: file:   l2198 = UNIQUE | NON_NULL, (empty)
        // 5038: file:   l2199 = UNIQUE | NON_NULL, (empty)
            b"7z x -so %s 2>/dev/null\0" as *const u8 as *const libc::c_char,
            // 5039: b"7z x -so %s 2 ... _char: typeof(_1275) = *const {l2185} i8
            // 5039: b"7z x -so %s 2 ... _char:   l2185 = UNIQUE | NON_NULL, (empty)
            // 5039: b"7z x -so %s 2 ... st u8: typeof(_1276) = *const {l2187} u8
            // 5039: b"7z x -so %s 2 ... st u8:   l2187 = UNIQUE | NON_NULL, (empty)
            // 5039: b"7z x -so %s 2 ... ll\0": typeof(_1277) = *const {l2189} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 5039: b"7z x -so %s 2 ... ll\0":   l2189 = UNIQUE | NON_NULL, (empty)
            // 5039: b"7z x -so %s 2 ... ll\0": typeof(_1278) = & {l2191} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 5039: b"7z x -so %s 2 ... ll\0":   l2191 = UNIQUE | NON_NULL, FIXED
            // 5039: b"7z x -so %s 2 ... ll\0": typeof(_1278 = const b"7z x -so %s 2>/dev/null\x00") = & {l3771} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 5039: b"7z x -so %s 2 ... ll\0":   l3771 = UNIQUE | NON_NULL, (empty)
            // 5039: b"7z x -so %s 2 ... ll\0": typeof(_1277 = &raw const (*_1278)) = *const {l3772} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000018)) }]
            // 5039: b"7z x -so %s 2 ... ll\0":   l3772 = UNIQUE | NON_NULL, (empty)
            // 5039: b"7z x -so %s 2 ... st u8: typeof(_1276 = move _1277 as *const u8 (Pointer(ArrayToPointer))) = *const {l3773} u8
            // 5039: b"7z x -so %s 2 ... st u8:   l3773 = UNIQUE | NON_NULL, (empty)
            // 5039: b"7z x -so %s 2 ... _char: typeof(_1275 = move _1276 as *const i8 (Misc)) = *const {l3774} i8
            // 5039: b"7z x -so %s 2 ... _char:   l3774 = UNIQUE | NON_NULL, (empty)
            fname,
            // 5040: fname: typeof(_1279) = *const {l2193} i8
            // 5040: fname:   l2193 = UNIQUE | NON_NULL, (empty)
            // 5040: fname: typeof(_1280) = *mut {l2195} *const {l2196} i8
            // 5040: fname:   l2195 = UNIQUE | NON_NULL, (empty)
            // 5040: fname:   l2196 = UNIQUE | NON_NULL, (empty)
        );
        clf = 2 as libc::c_int;
    } else {
        file = fopen(fname, b"r\0" as *const u8 as *const libc::c_char);
        // 5044: fopen(fname, b" ... char): typeof(_1283) = *mut {l2202} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5044: fopen(fname, b" ... char):   l2202 = UNIQUE | NON_NULL, (empty)
        // 5044: fname: typeof(_1284) = *const {l2204} i8
        // 5044: fname:   l2204 = UNIQUE | NON_NULL, (empty)
        // 5044: fname: typeof(_1285) = *mut {l2206} *const {l2207} i8
        // 5044: fname:   l2206 = UNIQUE | NON_NULL, (empty)
        // 5044: fname:   l2207 = UNIQUE | NON_NULL, (empty)
        // 5044: b"r\0" as *cons ... _char: typeof(_1286) = *const {l2209} i8
        // 5044: b"r\0" as *cons ... _char:   l2209 = UNIQUE | NON_NULL, (empty)
        // 5044: b"r\0" as *const u8: typeof(_1287) = *const {l2211} u8
        // 5044: b"r\0" as *const u8:   l2211 = UNIQUE | NON_NULL, (empty)
        // 5044: b"r\0": typeof(_1288) = *const {l2213} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 5044: b"r\0":   l2213 = UNIQUE | NON_NULL, (empty)
        // 5044: b"r\0": typeof(_1289) = & {l2215} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 5044: b"r\0":   l2215 = UNIQUE | NON_NULL, FIXED
        // 5044: file: typeof(_1290) = *mut {l2217} *mut {l2218} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5044: file:   l2217 = UNIQUE | NON_NULL, (empty)
        // 5044: file:   l2218 = UNIQUE | NON_NULL, (empty)
        // 5044: b"r\0": typeof(_1289 = const b"r\x00") = & {l3775} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 5044: b"r\0":   l3775 = UNIQUE | NON_NULL, (empty)
        // 5044: b"r\0" as *const u8: typeof(_1287 = move _1288 as *const u8 (Pointer(ArrayToPointer))) = *const {l3777} u8
        // 5044: b"r\0" as *const u8:   l3777 = UNIQUE | NON_NULL, (empty)
        // 5044: b"r\0" as *cons ... _char: typeof(_1286 = move _1287 as *const i8 (Misc)) = *const {l3778} i8
        // 5044: b"r\0" as *cons ... _char:   l3778 = UNIQUE | NON_NULL, (empty)
        // 5044: b"r\0": typeof(_1288 = &raw const (*_1289)) = *const {l3776} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000002)) }]
        // 5044: b"r\0":   l3776 = UNIQUE | NON_NULL, (empty)
        clf = 1 as libc::c_int;
    }
    if file.is_null() {
    // 5047: file: typeof(_1294) = *mut {l2223} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 5047: file:   l2223 = UNIQUE | NON_NULL, (empty)
    // 5047: file: typeof(_1295) = *mut {l2225} *mut {l2226} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
    // 5047: file:   l2225 = UNIQUE | NON_NULL, (empty)
    // 5047: file:   l2226 = UNIQUE | NON_NULL, (empty)
        err(
            b"can not read '%s'\0" as *const u8 as *const libc::c_char,
            // 5049: b"can not read  ... _char: typeof(_1297) = *const {l2229} i8
            // 5049: b"can not read  ... _char:   l2229 = UNIQUE | NON_NULL, (empty)
            // 5049: b"can not read  ... st u8: typeof(_1298) = *const {l2231} u8
            // 5049: b"can not read  ... st u8:   l2231 = UNIQUE | NON_NULL, (empty)
            // 5049: b"can not read  ... s'\0": typeof(_1299) = *const {l2233} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000012)) }]
            // 5049: b"can not read  ... s'\0":   l2233 = UNIQUE | NON_NULL, (empty)
            // 5049: b"can not read  ... s'\0": typeof(_1300) = & {l2235} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000012)) }]
            // 5049: b"can not read  ... s'\0":   l2235 = UNIQUE | NON_NULL, FIXED
            // 5049: b"can not read  ... st u8: typeof(_1298 = move _1299 as *const u8 (Pointer(ArrayToPointer))) = *const {l3781} u8
            // 5049: b"can not read  ... st u8:   l3781 = UNIQUE | NON_NULL, (empty)
            // 5049: b"can not read  ... _char: typeof(_1297 = move _1298 as *const i8 (Misc)) = *const {l3782} i8
            // 5049: b"can not read  ... _char:   l3782 = UNIQUE | NON_NULL, (empty)
            // 5049: b"can not read  ... s'\0": typeof(_1299 = &raw const (*_1300)) = *const {l3780} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000012)) }]
            // 5049: b"can not read  ... s'\0":   l3780 = UNIQUE | NON_NULL, (empty)
            // 5049: b"can not read  ... s'\0": typeof(_1300 = const b"can not read \'%s\'\x00") = & {l3779} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000012)) }]
            // 5049: b"can not read  ... s'\0":   l3779 = UNIQUE | NON_NULL, (empty)
            fname,
            // 5050: fname: typeof(_1301) = *const {l2237} i8
            // 5050: fname:   l2237 = UNIQUE | NON_NULL, (empty)
            // 5050: fname: typeof(_1302) = *mut {l2239} *const {l2240} i8
            // 5050: fname:   l2239 = UNIQUE | NON_NULL, (empty)
            // 5050: fname:   l2240 = UNIQUE | NON_NULL, (empty)
        );
    }
    lglbnr(
        b"Treengeling Cube and Conquer SAT Solver\0" as *const u8 as *const libc::c_char,
        // 5054: b"Treengeling C ... _char: typeof(_1304) = *const {l2243} i8
        // 5054: b"Treengeling C ... _char:   l2243 = UNIQUE | NON_NULL, (empty)
        // 5054: b"Treengeling C ... st u8: typeof(_1305) = *const {l2245} u8
        // 5054: b"Treengeling C ... st u8:   l2245 = UNIQUE | NON_NULL, (empty)
        // 5054: b"Treengeling C ... er\0": typeof(_1306) = *const {l2247} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 5054: b"Treengeling C ... er\0":   l2247 = UNIQUE | NON_NULL, (empty)
        // 5054: b"Treengeling C ... er\0": typeof(_1307) = & {l2249} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 5054: b"Treengeling C ... er\0":   l2249 = UNIQUE | NON_NULL, FIXED
        // 5054: b"Treengeling C ... _char: typeof(_1304 = move _1305 as *const i8 (Misc)) = *const {l3786} i8
        // 5054: b"Treengeling C ... _char:   l3786 = UNIQUE | NON_NULL, (empty)
        // 5054: b"Treengeling C ... st u8: typeof(_1305 = move _1306 as *const u8 (Pointer(ArrayToPointer))) = *const {l3785} u8
        // 5054: b"Treengeling C ... st u8:   l3785 = UNIQUE | NON_NULL, (empty)
        // 5054: b"Treengeling C ... er\0": typeof(_1307 = const b"Treengeling Cube and Conquer SAT Solver\x00") = & {l3783} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 5054: b"Treengeling C ... er\0":   l3783 = UNIQUE | NON_NULL, (empty)
        // 5054: b"Treengeling C ... er\0": typeof(_1306 = &raw const (*_1307)) = *const {l3784} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
        // 5054: b"Treengeling C ... er\0":   l3784 = UNIQUE | NON_NULL, (empty)
        b"c \0" as *const u8 as *const libc::c_char,
        // 5055: b"c \0" as *con ... _char: typeof(_1308) = *const {l2251} i8
        // 5055: b"c \0" as *con ... _char:   l2251 = UNIQUE | NON_NULL, (empty)
        // 5055: b"c \0" as *const u8: typeof(_1309) = *const {l2253} u8
        // 5055: b"c \0" as *const u8:   l2253 = UNIQUE | NON_NULL, (empty)
        // 5055: b"c \0": typeof(_1310) = *const {l2255} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 5055: b"c \0":   l2255 = UNIQUE | NON_NULL, (empty)
        // 5055: b"c \0": typeof(_1311) = & {l2257} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 5055: b"c \0":   l2257 = UNIQUE | NON_NULL, FIXED
        // 5055: b"c \0" as *con ... _char: typeof(_1308 = move _1309 as *const i8 (Misc)) = *const {l3790} i8
        // 5055: b"c \0" as *con ... _char:   l3790 = UNIQUE | NON_NULL, (empty)
        // 5055: b"c \0": typeof(_1311 = const b"c \x00") = & {l3787} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 5055: b"c \0":   l3787 = UNIQUE | NON_NULL, (empty)
        // 5055: b"c \0": typeof(_1310 = &raw const (*_1311)) = *const {l3788} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000003)) }]
        // 5055: b"c \0":   l3788 = UNIQUE | NON_NULL, (empty)
        // 5055: b"c \0" as *const u8: typeof(_1309 = move _1310 as *const u8 (Pointer(ArrayToPointer))) = *const {l3789} u8
        // 5055: b"c \0" as *const u8:   l3789 = UNIQUE | NON_NULL, (empty)
        stdout,
        // 5056: stdout: typeof(_1312) = *mut {l2259} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5056: stdout:   l2259 = UNIQUE | NON_NULL, (empty)
        // 5056: stdout: typeof(_1313) = *mut {l2261} *mut {l2262} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5056: stdout:   l2261 = UNIQUE | NON_NULL, (empty)
        // 5056: stdout:   l2262 = UNIQUE | NON_NULL, (empty)
    );
    msg(
        b"verbose level %d\0" as *const u8 as *const libc::c_char,
        // 5059: b"verbose level ... _char: typeof(_1315) = *const {l2265} i8
        // 5059: b"verbose level ... _char:   l2265 = UNIQUE | NON_NULL, (empty)
        // 5059: b"verbose level ... st u8: typeof(_1316) = *const {l2267} u8
        // 5059: b"verbose level ... st u8:   l2267 = UNIQUE | NON_NULL, (empty)
        // 5059: b"verbose level ... %d\0": typeof(_1317) = *const {l2269} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 5059: b"verbose level ... %d\0":   l2269 = UNIQUE | NON_NULL, (empty)
        // 5059: b"verbose level ... %d\0": typeof(_1318) = & {l2271} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 5059: b"verbose level ... %d\0":   l2271 = UNIQUE | NON_NULL, FIXED
        // 5059: b"verbose level ... st u8: typeof(_1316 = move _1317 as *const u8 (Pointer(ArrayToPointer))) = *const {l3793} u8
        // 5059: b"verbose level ... st u8:   l3793 = UNIQUE | NON_NULL, (empty)
        // 5059: b"verbose level ... %d\0": typeof(_1318 = const b"verbose level %d\x00") = & {l3791} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 5059: b"verbose level ... %d\0":   l3791 = UNIQUE | NON_NULL, (empty)
        // 5059: b"verbose level ... %d\0": typeof(_1317 = &raw const (*_1318)) = *const {l3792} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 5059: b"verbose level ... %d\0":   l3792 = UNIQUE | NON_NULL, (empty)
        // 5059: b"verbose level ... _char: typeof(_1315 = move _1316 as *const i8 (Misc)) = *const {l3794} i8
        // 5059: b"verbose level ... _char:   l3794 = UNIQUE | NON_NULL, (empty)
        verbose,
        // 5060: verbose: typeof(_1320) = *mut {l2274} i32
        // 5060: verbose:   l2274 = UNIQUE | NON_NULL, (empty)
    );
    msg(
        b"will %sprint statistics for each solver instance\0" as *const u8 as *const libc::c_char,
        // 5063: b"will %sprint  ... _char: typeof(_1322) = *const {l2277} i8
        // 5063: b"will %sprint  ... _char:   l2277 = UNIQUE | NON_NULL, (empty)
        // 5063: b"will %sprint  ... st u8: typeof(_1323) = *const {l2279} u8
        // 5063: b"will %sprint  ... st u8:   l2279 = UNIQUE | NON_NULL, (empty)
        // 5063: b"will %sprint  ... ce\0": typeof(_1324) = *const {l2281} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
        // 5063: b"will %sprint  ... ce\0":   l2281 = UNIQUE | NON_NULL, (empty)
        // 5063: b"will %sprint  ... ce\0": typeof(_1325) = & {l2283} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
        // 5063: b"will %sprint  ... ce\0":   l2283 = UNIQUE | NON_NULL, FIXED
        // 5063: b"will %sprint  ... ce\0": typeof(_1324 = &raw const (*_1325)) = *const {l3796} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
        // 5063: b"will %sprint  ... ce\0":   l3796 = UNIQUE | NON_NULL, (empty)
        // 5063: b"will %sprint  ... st u8: typeof(_1323 = move _1324 as *const u8 (Pointer(ArrayToPointer))) = *const {l3797} u8
        // 5063: b"will %sprint  ... st u8:   l3797 = UNIQUE | NON_NULL, (empty)
        // 5063: b"will %sprint  ... ce\0": typeof(_1325 = const b"will %sprint statistics for each solver instance\x00") = & {l3795} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
        // 5063: b"will %sprint  ... ce\0":   l3795 = UNIQUE | NON_NULL, (empty)
        // 5063: b"will %sprint  ... _char: typeof(_1322 = move _1323 as *const i8 (Misc)) = *const {l3798} i8
        // 5063: b"will %sprint  ... _char:   l3798 = UNIQUE | NON_NULL, (empty)
        if showstats != 0 {
        // 5064: if showstats != ... har }: typeof(_1326) = *const {l2285} i8
        // 5064: if showstats != ... har }:   l2285 = UNIQUE | NON_NULL, (empty)
        // 5064: showstats: typeof(_1329) = *mut {l2289} i32
        // 5064: showstats:   l2289 = UNIQUE | NON_NULL, (empty)
            b"\0" as *const u8 as *const libc::c_char
            // 5065: b"\0" as *const u8: typeof(_1330) = *const {l2291} u8
            // 5065: b"\0" as *const u8:   l2291 = UNIQUE | NON_NULL, (empty)
            // 5065: b"\0": typeof(_1331) = *const {l2293} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 5065: b"\0":   l2293 = UNIQUE | NON_NULL, (empty)
            // 5065: b"\0": typeof(_1332) = & {l2295} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 5065: b"\0":   l2295 = UNIQUE | NON_NULL, FIXED
            // 5065: b"\0": typeof(_1332 = const b"\x00") = & {l3799} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 5065: b"\0":   l3799 = UNIQUE | NON_NULL, (empty)
            // 5065: b"\0" as *const ... _char: typeof(_1326 = move _1330 as *const i8 (Misc)) = *const {l3802} i8
            // 5065: b"\0" as *const ... _char:   l3802 = UNIQUE | NON_NULL, (empty)
            // 5065: b"\0": typeof(_1331 = &raw const (*_1332)) = *const {l3800} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 5065: b"\0":   l3800 = UNIQUE | NON_NULL, (empty)
            // 5065: b"\0" as *const u8: typeof(_1330 = move _1331 as *const u8 (Pointer(ArrayToPointer))) = *const {l3801} u8
            // 5065: b"\0" as *const u8:   l3801 = UNIQUE | NON_NULL, (empty)
        } else {
            b"NOT \0" as *const u8 as *const libc::c_char
            // 5067: b"NOT \0" as *c ... st u8: typeof(_1333) = *const {l2297} u8
            // 5067: b"NOT \0" as *c ... st u8:   l2297 = UNIQUE | NON_NULL, (empty)
            // 5067: b"NOT \0": typeof(_1334) = *const {l2299} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 5067: b"NOT \0":   l2299 = UNIQUE | NON_NULL, (empty)
            // 5067: b"NOT \0": typeof(_1335) = & {l2301} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 5067: b"NOT \0":   l2301 = UNIQUE | NON_NULL, FIXED
            // 5067: b"NOT \0": typeof(_1334 = &raw const (*_1335)) = *const {l3804} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 5067: b"NOT \0":   l3804 = UNIQUE | NON_NULL, (empty)
            // 5067: b"NOT \0" as *c ... st u8: typeof(_1333 = move _1334 as *const u8 (Pointer(ArrayToPointer))) = *const {l3805} u8
            // 5067: b"NOT \0" as *c ... st u8:   l3805 = UNIQUE | NON_NULL, (empty)
            // 5067: b"NOT \0": typeof(_1335 = const b"NOT \x00") = & {l3803} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 5067: b"NOT \0":   l3803 = UNIQUE | NON_NULL, (empty)
            // 5067: b"NOT \0" as *c ... _char: typeof(_1326 = move _1333 as *const i8 (Misc)) = *const {l3806} i8
            // 5067: b"NOT \0" as *c ... _char:   l3806 = UNIQUE | NON_NULL, (empty)
        },
    );
    msg(
        b"will %sprint satisfying assignment\0" as *const u8 as *const libc::c_char,
        // 5071: b"will %sprint  ... _char: typeof(_1337) = *const {l2304} i8
        // 5071: b"will %sprint  ... _char:   l2304 = UNIQUE | NON_NULL, (empty)
        // 5071: b"will %sprint  ... st u8: typeof(_1338) = *const {l2306} u8
        // 5071: b"will %sprint  ... st u8:   l2306 = UNIQUE | NON_NULL, (empty)
        // 5071: b"will %sprint  ... nt\0": typeof(_1339) = *const {l2308} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
        // 5071: b"will %sprint  ... nt\0":   l2308 = UNIQUE | NON_NULL, (empty)
        // 5071: b"will %sprint  ... nt\0": typeof(_1340) = & {l2310} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
        // 5071: b"will %sprint  ... nt\0":   l2310 = UNIQUE | NON_NULL, FIXED
        // 5071: b"will %sprint  ... nt\0": typeof(_1339 = &raw const (*_1340)) = *const {l3808} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
        // 5071: b"will %sprint  ... nt\0":   l3808 = UNIQUE | NON_NULL, (empty)
        // 5071: b"will %sprint  ... nt\0": typeof(_1340 = const b"will %sprint satisfying assignment\x00") = & {l3807} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000023)) }]
        // 5071: b"will %sprint  ... nt\0":   l3807 = UNIQUE | NON_NULL, (empty)
        // 5071: b"will %sprint  ... _char: typeof(_1337 = move _1338 as *const i8 (Misc)) = *const {l3810} i8
        // 5071: b"will %sprint  ... _char:   l3810 = UNIQUE | NON_NULL, (empty)
        // 5071: b"will %sprint  ... st u8: typeof(_1338 = move _1339 as *const u8 (Pointer(ArrayToPointer))) = *const {l3809} u8
        // 5071: b"will %sprint  ... st u8:   l3809 = UNIQUE | NON_NULL, (empty)
        if nowitness != 0 {
        // 5072: if nowitness != ... har }: typeof(_1341) = *const {l2312} i8
        // 5072: if nowitness != ... har }:   l2312 = UNIQUE | NON_NULL, (empty)
        // 5072: nowitness: typeof(_1344) = *mut {l2316} i32
        // 5072: nowitness:   l2316 = UNIQUE | NON_NULL, (empty)
            b"NOT \0" as *const u8 as *const libc::c_char
            // 5073: b"NOT \0" as *c ... st u8: typeof(_1345) = *const {l2318} u8
            // 5073: b"NOT \0" as *c ... st u8:   l2318 = UNIQUE | NON_NULL, (empty)
            // 5073: b"NOT \0": typeof(_1346) = *const {l2320} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 5073: b"NOT \0":   l2320 = UNIQUE | NON_NULL, (empty)
            // 5073: b"NOT \0": typeof(_1347) = & {l2322} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 5073: b"NOT \0":   l2322 = UNIQUE | NON_NULL, FIXED
            // 5073: b"NOT \0": typeof(_1347 = const b"NOT \x00") = & {l3811} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 5073: b"NOT \0":   l3811 = UNIQUE | NON_NULL, (empty)
            // 5073: b"NOT \0": typeof(_1346 = &raw const (*_1347)) = *const {l3812} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000005)) }]
            // 5073: b"NOT \0":   l3812 = UNIQUE | NON_NULL, (empty)
            // 5073: b"NOT \0" as *c ... _char: typeof(_1341 = move _1345 as *const i8 (Misc)) = *const {l3814} i8
            // 5073: b"NOT \0" as *c ... _char:   l3814 = UNIQUE | NON_NULL, (empty)
            // 5073: b"NOT \0" as *c ... st u8: typeof(_1345 = move _1346 as *const u8 (Pointer(ArrayToPointer))) = *const {l3813} u8
            // 5073: b"NOT \0" as *c ... st u8:   l3813 = UNIQUE | NON_NULL, (empty)
        } else {
            b"\0" as *const u8 as *const libc::c_char
            // 5075: b"\0" as *const u8: typeof(_1348) = *const {l2324} u8
            // 5075: b"\0" as *const u8:   l2324 = UNIQUE | NON_NULL, (empty)
            // 5075: b"\0": typeof(_1349) = *const {l2326} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 5075: b"\0":   l2326 = UNIQUE | NON_NULL, (empty)
            // 5075: b"\0": typeof(_1350) = & {l2328} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 5075: b"\0":   l2328 = UNIQUE | NON_NULL, FIXED
            // 5075: b"\0": typeof(_1349 = &raw const (*_1350)) = *const {l3816} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 5075: b"\0":   l3816 = UNIQUE | NON_NULL, (empty)
            // 5075: b"\0" as *const ... _char: typeof(_1341 = move _1348 as *const i8 (Misc)) = *const {l3818} i8
            // 5075: b"\0" as *const ... _char:   l3818 = UNIQUE | NON_NULL, (empty)
            // 5075: b"\0" as *const u8: typeof(_1348 = move _1349 as *const u8 (Pointer(ArrayToPointer))) = *const {l3817} u8
            // 5075: b"\0" as *const u8:   l3817 = UNIQUE | NON_NULL, (empty)
            // 5075: b"\0": typeof(_1350 = const b"\x00") = & {l3815} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
            // 5075: b"\0":   l3815 = UNIQUE | NON_NULL, (empty)
        },
    );
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 5078: b"\0" as *const ... _char: typeof(_1352) = *const {l2331} i8
    // 5078: b"\0" as *const ... _char:   l2331 = UNIQUE | NON_NULL, (empty)
    // 5078: b"\0" as *const u8: typeof(_1353) = *const {l2333} u8
    // 5078: b"\0" as *const u8:   l2333 = UNIQUE | NON_NULL, (empty)
    // 5078: b"\0": typeof(_1354) = *const {l2335} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5078: b"\0":   l2335 = UNIQUE | NON_NULL, (empty)
    // 5078: b"\0": typeof(_1355) = & {l2337} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5078: b"\0":   l2337 = UNIQUE | NON_NULL, FIXED
    // 5078: b"\0": typeof(_1354 = &raw const (*_1355)) = *const {l3820} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5078: b"\0":   l3820 = UNIQUE | NON_NULL, (empty)
    // 5078: b"\0": typeof(_1355 = const b"\x00") = & {l3819} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5078: b"\0":   l3819 = UNIQUE | NON_NULL, (empty)
    // 5078: b"\0" as *const u8: typeof(_1353 = move _1354 as *const u8 (Pointer(ArrayToPointer))) = *const {l3821} u8
    // 5078: b"\0" as *const u8:   l3821 = UNIQUE | NON_NULL, (empty)
    // 5078: b"\0" as *const ... _char: typeof(_1352 = move _1353 as *const i8 (Misc)) = *const {l3822} i8
    // 5078: b"\0" as *const ... _char:   l3822 = UNIQUE | NON_NULL, (empty)
    if balance != 0 {
    // 5079: balance: typeof(_1359) = *mut {l2342} i32
    // 5079: balance:   l2342 = UNIQUE | NON_NULL, (empty)
        msg(b"splitting large nodes first ('-b' option)\0" as *const u8 as *const libc::c_char);
        // 5080: b"splitting lar ... _char: typeof(_1361) = *const {l2345} i8
        // 5080: b"splitting lar ... _char:   l2345 = UNIQUE | NON_NULL, (empty)
        // 5080: b"splitting lar ... st u8: typeof(_1362) = *const {l2347} u8
        // 5080: b"splitting lar ... st u8:   l2347 = UNIQUE | NON_NULL, (empty)
        // 5080: b"splitting lar ... n)\0": typeof(_1363) = *const {l2349} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 5080: b"splitting lar ... n)\0":   l2349 = UNIQUE | NON_NULL, (empty)
        // 5080: b"splitting lar ... n)\0": typeof(_1364) = & {l2351} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 5080: b"splitting lar ... n)\0":   l2351 = UNIQUE | NON_NULL, FIXED
        // 5080: b"splitting lar ... _char: typeof(_1361 = move _1362 as *const i8 (Misc)) = *const {l3826} i8
        // 5080: b"splitting lar ... _char:   l3826 = UNIQUE | NON_NULL, (empty)
        // 5080: b"splitting lar ... n)\0": typeof(_1364 = const b"splitting large nodes first (\'-b\' option)\x00") = & {l3823} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 5080: b"splitting lar ... n)\0":   l3823 = UNIQUE | NON_NULL, (empty)
        // 5080: b"splitting lar ... n)\0": typeof(_1363 = &raw const (*_1364)) = *const {l3824} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
        // 5080: b"splitting lar ... n)\0":   l3824 = UNIQUE | NON_NULL, (empty)
        // 5080: b"splitting lar ... st u8: typeof(_1362 = move _1363 as *const u8 (Pointer(ArrayToPointer))) = *const {l3825} u8
        // 5080: b"splitting lar ... st u8:   l3825 = UNIQUE | NON_NULL, (empty)
    } else {
        msg(b"splitting small nodes first (no '-b' option)\0" as *const u8 as *const libc::c_char);
        // 5082: b"splitting sma ... _char: typeof(_1366) = *const {l2354} i8
        // 5082: b"splitting sma ... _char:   l2354 = UNIQUE | NON_NULL, (empty)
        // 5082: b"splitting sma ... st u8: typeof(_1367) = *const {l2356} u8
        // 5082: b"splitting sma ... st u8:   l2356 = UNIQUE | NON_NULL, (empty)
        // 5082: b"splitting sma ... n)\0": typeof(_1368) = *const {l2358} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 5082: b"splitting sma ... n)\0":   l2358 = UNIQUE | NON_NULL, (empty)
        // 5082: b"splitting sma ... n)\0": typeof(_1369) = & {l2360} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 5082: b"splitting sma ... n)\0":   l2360 = UNIQUE | NON_NULL, FIXED
        // 5082: b"splitting sma ... n)\0": typeof(_1368 = &raw const (*_1369)) = *const {l3828} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 5082: b"splitting sma ... n)\0":   l3828 = UNIQUE | NON_NULL, (empty)
        // 5082: b"splitting sma ... _char: typeof(_1366 = move _1367 as *const i8 (Misc)) = *const {l3830} i8
        // 5082: b"splitting sma ... _char:   l3830 = UNIQUE | NON_NULL, (empty)
        // 5082: b"splitting sma ... n)\0": typeof(_1369 = const b"splitting small nodes first (no \'-b\' option)\x00") = & {l3827} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
        // 5082: b"splitting sma ... n)\0":   l3827 = UNIQUE | NON_NULL, (empty)
        // 5082: b"splitting sma ... st u8: typeof(_1367 = move _1368 as *const u8 (Pointer(ArrayToPointer))) = *const {l3829} u8
        // 5082: b"splitting sma ... st u8:   l3829 = UNIQUE | NON_NULL, (empty)
    }
    if asymmetric != 0 {
    // 5084: asymmetric: typeof(_1373) = *mut {l2365} i32
    // 5084: asymmetric:   l2365 = UNIQUE | NON_NULL, (empty)
        msg(b"asymmetric splitting ('--asymmetric')\0" as *const u8 as *const libc::c_char);
        // 5085: b"asymmetric sp ... _char: typeof(_1375) = *const {l2368} i8
        // 5085: b"asymmetric sp ... _char:   l2368 = UNIQUE | NON_NULL, (empty)
        // 5085: b"asymmetric sp ... st u8: typeof(_1376) = *const {l2370} u8
        // 5085: b"asymmetric sp ... st u8:   l2370 = UNIQUE | NON_NULL, (empty)
        // 5085: b"asymmetric sp ... ')\0": typeof(_1377) = *const {l2372} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
        // 5085: b"asymmetric sp ... ')\0":   l2372 = UNIQUE | NON_NULL, (empty)
        // 5085: b"asymmetric sp ... ')\0": typeof(_1378) = & {l2374} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
        // 5085: b"asymmetric sp ... ')\0":   l2374 = UNIQUE | NON_NULL, FIXED
        // 5085: b"asymmetric sp ... ')\0": typeof(_1377 = &raw const (*_1378)) = *const {l3832} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
        // 5085: b"asymmetric sp ... ')\0":   l3832 = UNIQUE | NON_NULL, (empty)
        // 5085: b"asymmetric sp ... st u8: typeof(_1376 = move _1377 as *const u8 (Pointer(ArrayToPointer))) = *const {l3833} u8
        // 5085: b"asymmetric sp ... st u8:   l3833 = UNIQUE | NON_NULL, (empty)
        // 5085: b"asymmetric sp ... ')\0": typeof(_1378 = const b"asymmetric splitting (\'--asymmetric\')\x00") = & {l3831} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000026)) }]
        // 5085: b"asymmetric sp ... ')\0":   l3831 = UNIQUE | NON_NULL, (empty)
        // 5085: b"asymmetric sp ... _char: typeof(_1375 = move _1376 as *const i8 (Misc)) = *const {l3834} i8
        // 5085: b"asymmetric sp ... _char:   l3834 = UNIQUE | NON_NULL, (empty)
    } else {
        msg(b"symmetric splitting ('--symmetric')\0" as *const u8 as *const libc::c_char);
        // 5087: b"symmetric spl ... _char: typeof(_1380) = *const {l2377} i8
        // 5087: b"symmetric spl ... _char:   l2377 = UNIQUE | NON_NULL, (empty)
        // 5087: b"symmetric spl ... st u8: typeof(_1381) = *const {l2379} u8
        // 5087: b"symmetric spl ... st u8:   l2379 = UNIQUE | NON_NULL, (empty)
        // 5087: b"symmetric spl ... ')\0": typeof(_1382) = *const {l2381} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
        // 5087: b"symmetric spl ... ')\0":   l2381 = UNIQUE | NON_NULL, (empty)
        // 5087: b"symmetric spl ... ')\0": typeof(_1383) = & {l2383} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
        // 5087: b"symmetric spl ... ')\0":   l2383 = UNIQUE | NON_NULL, FIXED
        // 5087: b"symmetric spl ... _char: typeof(_1380 = move _1381 as *const i8 (Misc)) = *const {l3838} i8
        // 5087: b"symmetric spl ... _char:   l3838 = UNIQUE | NON_NULL, (empty)
        // 5087: b"symmetric spl ... st u8: typeof(_1381 = move _1382 as *const u8 (Pointer(ArrayToPointer))) = *const {l3837} u8
        // 5087: b"symmetric spl ... st u8:   l3837 = UNIQUE | NON_NULL, (empty)
        // 5087: b"symmetric spl ... ')\0": typeof(_1383 = const b"symmetric splitting (\'--symmetric\')\x00") = & {l3835} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
        // 5087: b"symmetric spl ... ')\0":   l3835 = UNIQUE | NON_NULL, (empty)
        // 5087: b"symmetric spl ... ')\0": typeof(_1382 = &raw const (*_1383)) = *const {l3836} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000024)) }]
        // 5087: b"symmetric spl ... ')\0":   l3836 = UNIQUE | NON_NULL, (empty)
    }
    if portfolio != 0 {
    // 5089: portfolio: typeof(_1387) = *mut {l2388} i32
    // 5089: portfolio:   l2388 = UNIQUE | NON_NULL, (empty)
        msg(
            b"portfolio option fuzzing enabled ('--portfolio'\0" as *const u8
            // 5091: b"portfolio opt ... _char: typeof(_1389) = *const {l2391} i8
            // 5091: b"portfolio opt ... _char:   l2391 = UNIQUE | NON_NULL, (empty)
            // 5091: b"portfolio opt ... st u8: typeof(_1390) = *const {l2393} u8
            // 5091: b"portfolio opt ... st u8:   l2393 = UNIQUE | NON_NULL, (empty)
            // 5091: b"portfolio opt ... o'\0": typeof(_1391) = *const {l2395} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
            // 5091: b"portfolio opt ... o'\0":   l2395 = UNIQUE | NON_NULL, (empty)
            // 5091: b"portfolio opt ... o'\0": typeof(_1392) = & {l2397} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
            // 5091: b"portfolio opt ... o'\0":   l2397 = UNIQUE | NON_NULL, FIXED
            // 5091: b"portfolio opt ... o'\0": typeof(_1391 = &raw const (*_1392)) = *const {l3840} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
            // 5091: b"portfolio opt ... o'\0":   l3840 = UNIQUE | NON_NULL, (empty)
            // 5091: b"portfolio opt ... o'\0": typeof(_1392 = const b"portfolio option fuzzing enabled (\'--portfolio\'\x00") = & {l3839} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000030)) }]
            // 5091: b"portfolio opt ... o'\0":   l3839 = UNIQUE | NON_NULL, (empty)
            // 5091: b"portfolio opt ... st u8: typeof(_1390 = move _1391 as *const u8 (Pointer(ArrayToPointer))) = *const {l3841} u8
            // 5091: b"portfolio opt ... st u8:   l3841 = UNIQUE | NON_NULL, (empty)
            // 5091: b"portfolio opt ... _char: typeof(_1389 = move _1390 as *const i8 (Misc)) = *const {l3842} i8
            // 5091: b"portfolio opt ... _char:   l3842 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        );
    } else {
        msg(
            b"portfolio option fuzzing disabled (no '--portfolio' option)\0" as *const u8
            // 5096: b"portfolio opt ... _char: typeof(_1394) = *const {l2400} i8
            // 5096: b"portfolio opt ... _char:   l2400 = UNIQUE | NON_NULL, (empty)
            // 5096: b"portfolio opt ... st u8: typeof(_1395) = *const {l2402} u8
            // 5096: b"portfolio opt ... st u8:   l2402 = UNIQUE | NON_NULL, (empty)
            // 5096: b"portfolio opt ... n)\0": typeof(_1396) = *const {l2404} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
            // 5096: b"portfolio opt ... n)\0":   l2404 = UNIQUE | NON_NULL, (empty)
            // 5096: b"portfolio opt ... n)\0": typeof(_1397) = & {l2406} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
            // 5096: b"portfolio opt ... n)\0":   l2406 = UNIQUE | NON_NULL, FIXED
            // 5096: b"portfolio opt ... st u8: typeof(_1395 = move _1396 as *const u8 (Pointer(ArrayToPointer))) = *const {l3845} u8
            // 5096: b"portfolio opt ... st u8:   l3845 = UNIQUE | NON_NULL, (empty)
            // 5096: b"portfolio opt ... n)\0": typeof(_1397 = const b"portfolio option fuzzing disabled (no \'--portfolio\' option)\x00") = & {l3843} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
            // 5096: b"portfolio opt ... n)\0":   l3843 = UNIQUE | NON_NULL, (empty)
            // 5096: b"portfolio opt ... n)\0": typeof(_1396 = &raw const (*_1397)) = *const {l3844} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
            // 5096: b"portfolio opt ... n)\0":   l3844 = UNIQUE | NON_NULL, (empty)
            // 5096: b"portfolio opt ... _char: typeof(_1394 = move _1395 as *const i8 (Misc)) = *const {l3846} i8
            // 5096: b"portfolio opt ... _char:   l3846 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        );
    }
    if fullint != 0 {
    // 5100: fullint: typeof(_1401) = *mut {l2411} i32
    // 5100: fullint:   l2411 = UNIQUE | NON_NULL, (empty)
        msg(
            b"full search/simplification round interval %d\0" as *const u8 as *const libc::c_char,
            // 5102: b"full search/s ... _char: typeof(_1403) = *const {l2414} i8
            // 5102: b"full search/s ... _char:   l2414 = UNIQUE | NON_NULL, (empty)
            // 5102: b"full search/s ... st u8: typeof(_1404) = *const {l2416} u8
            // 5102: b"full search/s ... st u8:   l2416 = UNIQUE | NON_NULL, (empty)
            // 5102: b"full search/s ... %d\0": typeof(_1405) = *const {l2418} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5102: b"full search/s ... %d\0":   l2418 = UNIQUE | NON_NULL, (empty)
            // 5102: b"full search/s ... %d\0": typeof(_1406) = & {l2420} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5102: b"full search/s ... %d\0":   l2420 = UNIQUE | NON_NULL, FIXED
            // 5102: b"full search/s ... st u8: typeof(_1404 = move _1405 as *const u8 (Pointer(ArrayToPointer))) = *const {l3849} u8
            // 5102: b"full search/s ... st u8:   l3849 = UNIQUE | NON_NULL, (empty)
            // 5102: b"full search/s ... %d\0": typeof(_1406 = const b"full search/simplification round interval %d\x00") = & {l3847} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5102: b"full search/s ... %d\0":   l3847 = UNIQUE | NON_NULL, (empty)
            // 5102: b"full search/s ... %d\0": typeof(_1405 = &raw const (*_1406)) = *const {l3848} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5102: b"full search/s ... %d\0":   l3848 = UNIQUE | NON_NULL, (empty)
            // 5102: b"full search/s ... _char: typeof(_1403 = move _1404 as *const i8 (Misc)) = *const {l3850} i8
            // 5102: b"full search/s ... _char:   l3850 = UNIQUE | NON_NULL, (empty)
            fullint,
            // 5103: fullint: typeof(_1408) = *mut {l2423} i32
            // 5103: fullint:   l2423 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        msg(b"no full search/simplification\0" as *const u8 as *const libc::c_char);
        // 5106: b"no full searc ... _char: typeof(_1410) = *const {l2426} i8
        // 5106: b"no full searc ... _char:   l2426 = UNIQUE | NON_NULL, (empty)
        // 5106: b"no full searc ... st u8: typeof(_1411) = *const {l2428} u8
        // 5106: b"no full searc ... st u8:   l2428 = UNIQUE | NON_NULL, (empty)
        // 5106: b"no full searc ... on\0": typeof(_1412) = *const {l2430} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
        // 5106: b"no full searc ... on\0":   l2430 = UNIQUE | NON_NULL, (empty)
        // 5106: b"no full searc ... on\0": typeof(_1413) = & {l2432} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
        // 5106: b"no full searc ... on\0":   l2432 = UNIQUE | NON_NULL, FIXED
        // 5106: b"no full searc ... _char: typeof(_1410 = move _1411 as *const i8 (Misc)) = *const {l3854} i8
        // 5106: b"no full searc ... _char:   l3854 = UNIQUE | NON_NULL, (empty)
        // 5106: b"no full searc ... on\0": typeof(_1412 = &raw const (*_1413)) = *const {l3852} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
        // 5106: b"no full searc ... on\0":   l3852 = UNIQUE | NON_NULL, (empty)
        // 5106: b"no full searc ... st u8: typeof(_1411 = move _1412 as *const u8 (Pointer(ArrayToPointer))) = *const {l3853} u8
        // 5106: b"no full searc ... st u8:   l3853 = UNIQUE | NON_NULL, (empty)
        // 5106: b"no full searc ... on\0": typeof(_1413 = const b"no full search/simplification\x00") = & {l3851} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
        // 5106: b"no full searc ... on\0":   l3851 = UNIQUE | NON_NULL, (empty)
    }
    if treelookdepthset < 0 as libc::c_int {
    // 5108: treelookdepthset: typeof(_1417) = *mut {l2437} i32
    // 5108: treelookdepthset:   l2437 = UNIQUE | NON_NULL, (empty)
        msg(b"no tree-based look-ahead at all\0" as *const u8 as *const libc::c_char);
        // 5109: b"no tree-based ... _char: typeof(_1420) = *const {l2441} i8
        // 5109: b"no tree-based ... _char:   l2441 = UNIQUE | NON_NULL, (empty)
        // 5109: b"no tree-based ... st u8: typeof(_1421) = *const {l2443} u8
        // 5109: b"no tree-based ... st u8:   l2443 = UNIQUE | NON_NULL, (empty)
        // 5109: b"no tree-based ... ll\0": typeof(_1422) = *const {l2445} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
        // 5109: b"no tree-based ... ll\0":   l2445 = UNIQUE | NON_NULL, (empty)
        // 5109: b"no tree-based ... ll\0": typeof(_1423) = & {l2447} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
        // 5109: b"no tree-based ... ll\0":   l2447 = UNIQUE | NON_NULL, FIXED
        // 5109: b"no tree-based ... _char: typeof(_1420 = move _1421 as *const i8 (Misc)) = *const {l3858} i8
        // 5109: b"no tree-based ... _char:   l3858 = UNIQUE | NON_NULL, (empty)
        // 5109: b"no tree-based ... st u8: typeof(_1421 = move _1422 as *const u8 (Pointer(ArrayToPointer))) = *const {l3857} u8
        // 5109: b"no tree-based ... st u8:   l3857 = UNIQUE | NON_NULL, (empty)
        // 5109: b"no tree-based ... ll\0": typeof(_1422 = &raw const (*_1423)) = *const {l3856} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
        // 5109: b"no tree-based ... ll\0":   l3856 = UNIQUE | NON_NULL, (empty)
        // 5109: b"no tree-based ... ll\0": typeof(_1423 = const b"no tree-based look-ahead at all\x00") = & {l3855} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000020)) }]
        // 5109: b"no tree-based ... ll\0":   l3855 = UNIQUE | NON_NULL, (empty)
    } else {
        msg(
            b"tree-based look-ahead up to depth %d\0" as *const u8 as *const libc::c_char,
            // 5112: b"tree-based lo ... _char: typeof(_1425) = *const {l2450} i8
            // 5112: b"tree-based lo ... _char:   l2450 = UNIQUE | NON_NULL, (empty)
            // 5112: b"tree-based lo ... st u8: typeof(_1426) = *const {l2452} u8
            // 5112: b"tree-based lo ... st u8:   l2452 = UNIQUE | NON_NULL, (empty)
            // 5112: b"tree-based lo ... %d\0": typeof(_1427) = *const {l2454} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5112: b"tree-based lo ... %d\0":   l2454 = UNIQUE | NON_NULL, (empty)
            // 5112: b"tree-based lo ... %d\0": typeof(_1428) = & {l2456} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5112: b"tree-based lo ... %d\0":   l2456 = UNIQUE | NON_NULL, FIXED
            // 5112: b"tree-based lo ... _char: typeof(_1425 = move _1426 as *const i8 (Misc)) = *const {l3862} i8
            // 5112: b"tree-based lo ... _char:   l3862 = UNIQUE | NON_NULL, (empty)
            // 5112: b"tree-based lo ... %d\0": typeof(_1427 = &raw const (*_1428)) = *const {l3860} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5112: b"tree-based lo ... %d\0":   l3860 = UNIQUE | NON_NULL, (empty)
            // 5112: b"tree-based lo ... %d\0": typeof(_1428 = const b"tree-based look-ahead up to depth %d\x00") = & {l3859} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5112: b"tree-based lo ... %d\0":   l3859 = UNIQUE | NON_NULL, (empty)
            // 5112: b"tree-based lo ... st u8: typeof(_1426 = move _1427 as *const u8 (Pointer(ArrayToPointer))) = *const {l3861} u8
            // 5112: b"tree-based lo ... st u8:   l3861 = UNIQUE | NON_NULL, (empty)
            treelookdepth,
            // 5113: treelookdepth: typeof(_1430) = *mut {l2459} i32
            // 5113: treelookdepth:   l2459 = UNIQUE | NON_NULL, (empty)
        );
    }
    if relevancelkhd != 0 {
    // 5116: relevancelkhd: typeof(_1434) = *mut {l2464} i32
    // 5116: relevancelkhd:   l2464 = UNIQUE | NON_NULL, (empty)
        msg(
            b"relevance based look-ahead starts at depth %d\0" as *const u8 as *const libc::c_char,
            // 5118: b"relevance bas ... _char: typeof(_1436) = *const {l2467} i8
            // 5118: b"relevance bas ... _char:   l2467 = UNIQUE | NON_NULL, (empty)
            // 5118: b"relevance bas ... st u8: typeof(_1437) = *const {l2469} u8
            // 5118: b"relevance bas ... st u8:   l2469 = UNIQUE | NON_NULL, (empty)
            // 5118: b"relevance bas ... %d\0": typeof(_1438) = *const {l2471} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5118: b"relevance bas ... %d\0":   l2471 = UNIQUE | NON_NULL, (empty)
            // 5118: b"relevance bas ... %d\0": typeof(_1439) = & {l2473} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5118: b"relevance bas ... %d\0":   l2473 = UNIQUE | NON_NULL, FIXED
            // 5118: b"relevance bas ... st u8: typeof(_1437 = move _1438 as *const u8 (Pointer(ArrayToPointer))) = *const {l3865} u8
            // 5118: b"relevance bas ... st u8:   l3865 = UNIQUE | NON_NULL, (empty)
            // 5118: b"relevance bas ... %d\0": typeof(_1438 = &raw const (*_1439)) = *const {l3864} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5118: b"relevance bas ... %d\0":   l3864 = UNIQUE | NON_NULL, (empty)
            // 5118: b"relevance bas ... %d\0": typeof(_1439 = const b"relevance based look-ahead starts at depth %d\x00") = & {l3863} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5118: b"relevance bas ... %d\0":   l3863 = UNIQUE | NON_NULL, (empty)
            // 5118: b"relevance bas ... _char: typeof(_1436 = move _1437 as *const i8 (Misc)) = *const {l3866} i8
            // 5118: b"relevance bas ... _char:   l3866 = UNIQUE | NON_NULL, (empty)
            treelookdepth + 1 as libc::c_int,
            // 5119: treelookdepth: typeof(_1442) = *mut {l2477} i32
            // 5119: treelookdepth:   l2477 = UNIQUE | NON_NULL, (empty)
        );
    } else if locslkhd != 0 {
    // 5121: locslkhd: typeof(_1447) = *mut {l2483} i32
    // 5121: locslkhd:   l2483 = UNIQUE | NON_NULL, (empty)
        msg(
            b"local-search based look-ahead starts at depth %d\0" as *const u8
            // 5123: b"local-search  ... _char: typeof(_1449) = *const {l2486} i8
            // 5123: b"local-search  ... _char:   l2486 = UNIQUE | NON_NULL, (empty)
            // 5123: b"local-search  ... st u8: typeof(_1450) = *const {l2488} u8
            // 5123: b"local-search  ... st u8:   l2488 = UNIQUE | NON_NULL, (empty)
            // 5123: b"local-search  ... %d\0": typeof(_1451) = *const {l2490} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
            // 5123: b"local-search  ... %d\0":   l2490 = UNIQUE | NON_NULL, (empty)
            // 5123: b"local-search  ... %d\0": typeof(_1452) = & {l2492} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
            // 5123: b"local-search  ... %d\0":   l2492 = UNIQUE | NON_NULL, FIXED
            // 5123: b"local-search  ... %d\0": typeof(_1451 = &raw const (*_1452)) = *const {l3868} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
            // 5123: b"local-search  ... %d\0":   l3868 = UNIQUE | NON_NULL, (empty)
            // 5123: b"local-search  ... st u8: typeof(_1450 = move _1451 as *const u8 (Pointer(ArrayToPointer))) = *const {l3869} u8
            // 5123: b"local-search  ... st u8:   l3869 = UNIQUE | NON_NULL, (empty)
            // 5123: b"local-search  ... %d\0": typeof(_1452 = const b"local-search based look-ahead starts at depth %d\x00") = & {l3867} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000031)) }]
            // 5123: b"local-search  ... %d\0":   l3867 = UNIQUE | NON_NULL, (empty)
            // 5123: b"local-search  ... _char: typeof(_1449 = move _1450 as *const i8 (Misc)) = *const {l3870} i8
            // 5123: b"local-search  ... _char:   l3870 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
            treelookdepth + 1 as libc::c_int,
            // 5125: treelookdepth: typeof(_1455) = *mut {l2496} i32
            // 5125: treelookdepth:   l2496 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        msg(
            b"JWH based look-ahead starts at depth %d\0" as *const u8 as *const libc::c_char,
            // 5129: b"JWH based loo ... _char: typeof(_1459) = *const {l2501} i8
            // 5129: b"JWH based loo ... _char:   l2501 = UNIQUE | NON_NULL, (empty)
            // 5129: b"JWH based loo ... st u8: typeof(_1460) = *const {l2503} u8
            // 5129: b"JWH based loo ... st u8:   l2503 = UNIQUE | NON_NULL, (empty)
            // 5129: b"JWH based loo ... %d\0": typeof(_1461) = *const {l2505} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
            // 5129: b"JWH based loo ... %d\0":   l2505 = UNIQUE | NON_NULL, (empty)
            // 5129: b"JWH based loo ... %d\0": typeof(_1462) = & {l2507} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
            // 5129: b"JWH based loo ... %d\0":   l2507 = UNIQUE | NON_NULL, FIXED
            // 5129: b"JWH based loo ... %d\0": typeof(_1461 = &raw const (*_1462)) = *const {l3872} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
            // 5129: b"JWH based loo ... %d\0":   l3872 = UNIQUE | NON_NULL, (empty)
            // 5129: b"JWH based loo ... st u8: typeof(_1460 = move _1461 as *const u8 (Pointer(ArrayToPointer))) = *const {l3873} u8
            // 5129: b"JWH based loo ... st u8:   l3873 = UNIQUE | NON_NULL, (empty)
            // 5129: b"JWH based loo ... _char: typeof(_1459 = move _1460 as *const i8 (Misc)) = *const {l3874} i8
            // 5129: b"JWH based loo ... _char:   l3874 = UNIQUE | NON_NULL, (empty)
            // 5129: b"JWH based loo ... %d\0": typeof(_1462 = const b"JWH based look-ahead starts at depth %d\x00") = & {l3871} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000028)) }]
            // 5129: b"JWH based loo ... %d\0":   l3871 = UNIQUE | NON_NULL, (empty)
            treelookdepth + 1 as libc::c_int,
            // 5130: treelookdepth: typeof(_1465) = *mut {l2511} i32
            // 5130: treelookdepth:   l2511 = UNIQUE | NON_NULL, (empty)
        );
    }
    if randswap != 0 {
    // 5133: randswap: typeof(_1471) = *mut {l2518} i32
    // 5133: randswap:   l2518 = UNIQUE | NON_NULL, (empty)
        msg(
            b"will swap %d nodes randomly during lookahead\0" as *const u8 as *const libc::c_char,
            // 5135: b"will swap %d  ... _char: typeof(_1473) = *const {l2521} i8
            // 5135: b"will swap %d  ... _char:   l2521 = UNIQUE | NON_NULL, (empty)
            // 5135: b"will swap %d  ... st u8: typeof(_1474) = *const {l2523} u8
            // 5135: b"will swap %d  ... st u8:   l2523 = UNIQUE | NON_NULL, (empty)
            // 5135: b"will swap %d  ... ad\0": typeof(_1475) = *const {l2525} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5135: b"will swap %d  ... ad\0":   l2525 = UNIQUE | NON_NULL, (empty)
            // 5135: b"will swap %d  ... ad\0": typeof(_1476) = & {l2527} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5135: b"will swap %d  ... ad\0":   l2527 = UNIQUE | NON_NULL, FIXED
            // 5135: b"will swap %d  ... ad\0": typeof(_1475 = &raw const (*_1476)) = *const {l3876} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5135: b"will swap %d  ... ad\0":   l3876 = UNIQUE | NON_NULL, (empty)
            // 5135: b"will swap %d  ... _char: typeof(_1473 = move _1474 as *const i8 (Misc)) = *const {l3878} i8
            // 5135: b"will swap %d  ... _char:   l3878 = UNIQUE | NON_NULL, (empty)
            // 5135: b"will swap %d  ... st u8: typeof(_1474 = move _1475 as *const u8 (Pointer(ArrayToPointer))) = *const {l3877} u8
            // 5135: b"will swap %d  ... st u8:   l3877 = UNIQUE | NON_NULL, (empty)
            // 5135: b"will swap %d  ... ad\0": typeof(_1476 = const b"will swap %d nodes randomly during lookahead\x00") = & {l3875} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5135: b"will swap %d  ... ad\0":   l3875 = UNIQUE | NON_NULL, (empty)
            randswap,
            // 5136: randswap: typeof(_1478) = *mut {l2530} i32
            // 5136: randswap:   l2530 = UNIQUE | NON_NULL, (empty)
        );
        msg(
            b"random seed %llu\0" as *const u8 as *const libc::c_char,
            // 5139: b"random seed % ... _char: typeof(_1480) = *const {l2533} i8
            // 5139: b"random seed % ... _char:   l2533 = UNIQUE | NON_NULL, (empty)
            // 5139: b"random seed % ... st u8: typeof(_1481) = *const {l2535} u8
            // 5139: b"random seed % ... st u8:   l2535 = UNIQUE | NON_NULL, (empty)
            // 5139: b"random seed % ... lu\0": typeof(_1482) = *const {l2537} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 5139: b"random seed % ... lu\0":   l2537 = UNIQUE | NON_NULL, (empty)
            // 5139: b"random seed % ... lu\0": typeof(_1483) = & {l2539} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 5139: b"random seed % ... lu\0":   l2539 = UNIQUE | NON_NULL, FIXED
            // 5139: b"random seed % ... lu\0": typeof(_1483 = const b"random seed %llu\x00") = & {l3879} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 5139: b"random seed % ... lu\0":   l3879 = UNIQUE | NON_NULL, (empty)
            // 5139: b"random seed % ... lu\0": typeof(_1482 = &raw const (*_1483)) = *const {l3880} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
            // 5139: b"random seed % ... lu\0":   l3880 = UNIQUE | NON_NULL, (empty)
            // 5139: b"random seed % ... st u8: typeof(_1481 = move _1482 as *const u8 (Pointer(ArrayToPointer))) = *const {l3881} u8
            // 5139: b"random seed % ... st u8:   l3881 = UNIQUE | NON_NULL, (empty)
            // 5139: b"random seed % ... _char: typeof(_1480 = move _1481 as *const i8 (Misc)) = *const {l3882} i8
            // 5139: b"random seed % ... _char:   l3882 = UNIQUE | NON_NULL, (empty)
            seed,
        );
        mysrand(seed);
    } else {
        msg(b"no randomization in lookahead\0" as *const u8 as *const libc::c_char);
        // 5144: b"no randomizat ... _char: typeof(_1488) = *const {l2545} i8
        // 5144: b"no randomizat ... _char:   l2545 = UNIQUE | NON_NULL, (empty)
        // 5144: b"no randomizat ... st u8: typeof(_1489) = *const {l2547} u8
        // 5144: b"no randomizat ... st u8:   l2547 = UNIQUE | NON_NULL, (empty)
        // 5144: b"no randomizat ... ad\0": typeof(_1490) = *const {l2549} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
        // 5144: b"no randomizat ... ad\0":   l2549 = UNIQUE | NON_NULL, (empty)
        // 5144: b"no randomizat ... ad\0": typeof(_1491) = & {l2551} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
        // 5144: b"no randomizat ... ad\0":   l2551 = UNIQUE | NON_NULL, FIXED
        // 5144: b"no randomizat ... ad\0": typeof(_1490 = &raw const (*_1491)) = *const {l3884} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
        // 5144: b"no randomizat ... ad\0":   l3884 = UNIQUE | NON_NULL, (empty)
        // 5144: b"no randomizat ... ad\0": typeof(_1491 = const b"no randomization in lookahead\x00") = & {l3883} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
        // 5144: b"no randomizat ... ad\0":   l3883 = UNIQUE | NON_NULL, (empty)
        // 5144: b"no randomizat ... _char: typeof(_1488 = move _1489 as *const i8 (Misc)) = *const {l3886} i8
        // 5144: b"no randomizat ... _char:   l3886 = UNIQUE | NON_NULL, (empty)
        // 5144: b"no randomizat ... st u8: typeof(_1489 = move _1490 as *const u8 (Pointer(ArrayToPointer))) = *const {l3885} u8
        // 5144: b"no randomizat ... st u8:   l3885 = UNIQUE | NON_NULL, (empty)
    }
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 5146: b"\0" as *const ... _char: typeof(_1493) = *const {l2554} i8
    // 5146: b"\0" as *const ... _char:   l2554 = UNIQUE | NON_NULL, (empty)
    // 5146: b"\0" as *const u8: typeof(_1494) = *const {l2556} u8
    // 5146: b"\0" as *const u8:   l2556 = UNIQUE | NON_NULL, (empty)
    // 5146: b"\0": typeof(_1495) = *const {l2558} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5146: b"\0":   l2558 = UNIQUE | NON_NULL, (empty)
    // 5146: b"\0": typeof(_1496) = & {l2560} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5146: b"\0":   l2560 = UNIQUE | NON_NULL, FIXED
    // 5146: b"\0": typeof(_1496 = const b"\x00") = & {l3887} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5146: b"\0":   l3887 = UNIQUE | NON_NULL, (empty)
    // 5146: b"\0" as *const u8: typeof(_1494 = move _1495 as *const u8 (Pointer(ArrayToPointer))) = *const {l3889} u8
    // 5146: b"\0" as *const u8:   l3889 = UNIQUE | NON_NULL, (empty)
    // 5146: b"\0" as *const ... _char: typeof(_1493 = move _1494 as *const i8 (Misc)) = *const {l3890} i8
    // 5146: b"\0" as *const ... _char:   l3890 = UNIQUE | NON_NULL, (empty)
    // 5146: b"\0": typeof(_1495 = &raw const (*_1496)) = *const {l3888} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5146: b"\0":   l3888 = UNIQUE | NON_NULL, (empty)
    ncores = getcores(1 as libc::c_int);
    // 5147: ncores: typeof(_1499) = *mut {l2564} i32
    // 5147: ncores:   l2564 = UNIQUE | NON_NULL, (empty)
    if maxworkers == 0 {
    // 5148: maxworkers: typeof(_1503) = *mut {l2569} i32
    // 5148: maxworkers:   l2569 = UNIQUE | NON_NULL, (empty)
        maxworkers = ncores;
        // 5149: ncores: typeof(_1505) = *mut {l2572} i32
        // 5149: ncores:   l2572 = UNIQUE | NON_NULL, (empty)
        // 5149: maxworkers: typeof(_1506) = *mut {l2574} i32
        // 5149: maxworkers:   l2574 = UNIQUE | NON_NULL, (empty)
        msg(
            b"maximum %d workers (no '-t <worker>' option)\0" as *const u8 as *const libc::c_char,
            // 5151: b"maximum %d wo ... _char: typeof(_1508) = *const {l2577} i8
            // 5151: b"maximum %d wo ... _char:   l2577 = UNIQUE | NON_NULL, (empty)
            // 5151: b"maximum %d wo ... st u8: typeof(_1509) = *const {l2579} u8
            // 5151: b"maximum %d wo ... st u8:   l2579 = UNIQUE | NON_NULL, (empty)
            // 5151: b"maximum %d wo ... n)\0": typeof(_1510) = *const {l2581} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5151: b"maximum %d wo ... n)\0":   l2581 = UNIQUE | NON_NULL, (empty)
            // 5151: b"maximum %d wo ... n)\0": typeof(_1511) = & {l2583} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5151: b"maximum %d wo ... n)\0":   l2583 = UNIQUE | NON_NULL, FIXED
            // 5151: b"maximum %d wo ... _char: typeof(_1508 = move _1509 as *const i8 (Misc)) = *const {l3894} i8
            // 5151: b"maximum %d wo ... _char:   l3894 = UNIQUE | NON_NULL, (empty)
            // 5151: b"maximum %d wo ... n)\0": typeof(_1510 = &raw const (*_1511)) = *const {l3892} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5151: b"maximum %d wo ... n)\0":   l3892 = UNIQUE | NON_NULL, (empty)
            // 5151: b"maximum %d wo ... st u8: typeof(_1509 = move _1510 as *const u8 (Pointer(ArrayToPointer))) = *const {l3893} u8
            // 5151: b"maximum %d wo ... st u8:   l3893 = UNIQUE | NON_NULL, (empty)
            // 5151: b"maximum %d wo ... n)\0": typeof(_1511 = const b"maximum %d workers (no \'-t <worker>\' option)\x00") = & {l3891} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002d)) }]
            // 5151: b"maximum %d wo ... n)\0":   l3891 = UNIQUE | NON_NULL, (empty)
            maxworkers,
            // 5152: maxworkers: typeof(_1513) = *mut {l2586} i32
            // 5152: maxworkers:   l2586 = UNIQUE | NON_NULL, (empty)
        );
    } else if maxworkers2 != 0 {
    // 5154: maxworkers2: typeof(_1516) = *mut {l2590} i32
    // 5154: maxworkers2:   l2590 = UNIQUE | NON_NULL, (empty)
        msg(
            b"maximum %d workers as specified ('%d')\0" as *const u8 as *const libc::c_char,
            // 5156: b"maximum %d wo ... _char: typeof(_1518) = *const {l2593} i8
            // 5156: b"maximum %d wo ... _char:   l2593 = UNIQUE | NON_NULL, (empty)
            // 5156: b"maximum %d wo ... st u8: typeof(_1519) = *const {l2595} u8
            // 5156: b"maximum %d wo ... st u8:   l2595 = UNIQUE | NON_NULL, (empty)
            // 5156: b"maximum %d wo ... ')\0": typeof(_1520) = *const {l2597} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 5156: b"maximum %d wo ... ')\0":   l2597 = UNIQUE | NON_NULL, (empty)
            // 5156: b"maximum %d wo ... ')\0": typeof(_1521) = & {l2599} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 5156: b"maximum %d wo ... ')\0":   l2599 = UNIQUE | NON_NULL, FIXED
            // 5156: b"maximum %d wo ... ')\0": typeof(_1521 = const b"maximum %d workers as specified (\'%d\')\x00") = & {l3895} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 5156: b"maximum %d wo ... ')\0":   l3895 = UNIQUE | NON_NULL, (empty)
            // 5156: b"maximum %d wo ... _char: typeof(_1518 = move _1519 as *const i8 (Misc)) = *const {l3898} i8
            // 5156: b"maximum %d wo ... _char:   l3898 = UNIQUE | NON_NULL, (empty)
            // 5156: b"maximum %d wo ... ')\0": typeof(_1520 = &raw const (*_1521)) = *const {l3896} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000027)) }]
            // 5156: b"maximum %d wo ... ')\0":   l3896 = UNIQUE | NON_NULL, (empty)
            // 5156: b"maximum %d wo ... st u8: typeof(_1519 = move _1520 as *const u8 (Pointer(ArrayToPointer))) = *const {l3897} u8
            // 5156: b"maximum %d wo ... st u8:   l3897 = UNIQUE | NON_NULL, (empty)
            maxworkers,
            // 5157: maxworkers: typeof(_1523) = *mut {l2602} i32
            // 5157: maxworkers:   l2602 = UNIQUE | NON_NULL, (empty)
            maxworkers2,
            // 5158: maxworkers2: typeof(_1525) = *mut {l2605} i32
            // 5158: maxworkers2:   l2605 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        msg(
            b"maximum %d workers as specified ('-t %d')\0" as *const u8 as *const libc::c_char,
            // 5162: b"maximum %d wo ... _char: typeof(_1527) = *const {l2608} i8
            // 5162: b"maximum %d wo ... _char:   l2608 = UNIQUE | NON_NULL, (empty)
            // 5162: b"maximum %d wo ... st u8: typeof(_1528) = *const {l2610} u8
            // 5162: b"maximum %d wo ... st u8:   l2610 = UNIQUE | NON_NULL, (empty)
            // 5162: b"maximum %d wo ... ')\0": typeof(_1529) = *const {l2612} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 5162: b"maximum %d wo ... ')\0":   l2612 = UNIQUE | NON_NULL, (empty)
            // 5162: b"maximum %d wo ... ')\0": typeof(_1530) = & {l2614} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 5162: b"maximum %d wo ... ')\0":   l2614 = UNIQUE | NON_NULL, FIXED
            // 5162: b"maximum %d wo ... st u8: typeof(_1528 = move _1529 as *const u8 (Pointer(ArrayToPointer))) = *const {l3901} u8
            // 5162: b"maximum %d wo ... st u8:   l3901 = UNIQUE | NON_NULL, (empty)
            // 5162: b"maximum %d wo ... ')\0": typeof(_1530 = const b"maximum %d workers as specified (\'-t %d\')\x00") = & {l3899} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 5162: b"maximum %d wo ... ')\0":   l3899 = UNIQUE | NON_NULL, (empty)
            // 5162: b"maximum %d wo ... _char: typeof(_1527 = move _1528 as *const i8 (Misc)) = *const {l3902} i8
            // 5162: b"maximum %d wo ... _char:   l3902 = UNIQUE | NON_NULL, (empty)
            // 5162: b"maximum %d wo ... ')\0": typeof(_1529 = &raw const (*_1530)) = *const {l3900} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002a)) }]
            // 5162: b"maximum %d wo ... ')\0":   l3900 = UNIQUE | NON_NULL, (empty)
            maxworkers,
            // 5163: maxworkers: typeof(_1532) = *mut {l2617} i32
            // 5163: maxworkers:   l2617 = UNIQUE | NON_NULL, (empty)
            maxworkers,
            // 5164: maxworkers: typeof(_1534) = *mut {l2620} i32
            // 5164: maxworkers:   l2620 = UNIQUE | NON_NULL, (empty)
        );
    }
    if noparallel != 0 {
    // 5167: noparallel: typeof(_1538) = *mut {l2625} i32
    // 5167: noparallel:   l2625 = UNIQUE | NON_NULL, (empty)
        msg(
            b"not using additional parallel solver instances ('--no-parallel')\0" as *const u8
            // 5169: b"not using add ... _char: typeof(_1540) = *const {l2628} i8
            // 5169: b"not using add ... _char:   l2628 = UNIQUE | NON_NULL, (empty)
            // 5169: b"not using add ... st u8: typeof(_1541) = *const {l2630} u8
            // 5169: b"not using add ... st u8:   l2630 = UNIQUE | NON_NULL, (empty)
            // 5169: b"not using add ... ')\0": typeof(_1542) = *const {l2632} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000041)) }]
            // 5169: b"not using add ... ')\0":   l2632 = UNIQUE | NON_NULL, (empty)
            // 5169: b"not using add ... ')\0": typeof(_1543) = & {l2634} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000041)) }]
            // 5169: b"not using add ... ')\0":   l2634 = UNIQUE | NON_NULL, FIXED
            // 5169: b"not using add ... st u8: typeof(_1541 = move _1542 as *const u8 (Pointer(ArrayToPointer))) = *const {l3905} u8
            // 5169: b"not using add ... st u8:   l3905 = UNIQUE | NON_NULL, (empty)
            // 5169: b"not using add ... ')\0": typeof(_1543 = const b"not using additional parallel solver instances (\'--no-parallel\')\x00") = & {l3903} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000041)) }]
            // 5169: b"not using add ... ')\0":   l3903 = UNIQUE | NON_NULL, (empty)
            // 5169: b"not using add ... ')\0": typeof(_1542 = &raw const (*_1543)) = *const {l3904} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000041)) }]
            // 5169: b"not using add ... ')\0":   l3904 = UNIQUE | NON_NULL, (empty)
            // 5169: b"not using add ... _char: typeof(_1540 = move _1541 as *const i8 (Misc)) = *const {l3906} i8
            // 5169: b"not using add ... _char:   l3906 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        );
    } else if maxworkers == 1 as libc::c_int {
    // 5172: maxworkers: typeof(_1546) = *mut {l2638} i32
    // 5172: maxworkers:   l2638 = UNIQUE | NON_NULL, (empty)
        msg(
            b"not using additional parallel solver instances ('-t 1')\0" as *const u8
            // 5174: b"not using add ... _char: typeof(_1549) = *const {l2642} i8
            // 5174: b"not using add ... _char:   l2642 = UNIQUE | NON_NULL, (empty)
            // 5174: b"not using add ... st u8: typeof(_1550) = *const {l2644} u8
            // 5174: b"not using add ... st u8:   l2644 = UNIQUE | NON_NULL, (empty)
            // 5174: b"not using add ... ')\0": typeof(_1551) = *const {l2646} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
            // 5174: b"not using add ... ')\0":   l2646 = UNIQUE | NON_NULL, (empty)
            // 5174: b"not using add ... ')\0": typeof(_1552) = & {l2648} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
            // 5174: b"not using add ... ')\0":   l2648 = UNIQUE | NON_NULL, FIXED
            // 5174: b"not using add ... _char: typeof(_1549 = move _1550 as *const i8 (Misc)) = *const {l3910} i8
            // 5174: b"not using add ... _char:   l3910 = UNIQUE | NON_NULL, (empty)
            // 5174: b"not using add ... st u8: typeof(_1550 = move _1551 as *const u8 (Pointer(ArrayToPointer))) = *const {l3909} u8
            // 5174: b"not using add ... st u8:   l3909 = UNIQUE | NON_NULL, (empty)
            // 5174: b"not using add ... ')\0": typeof(_1552 = const b"not using additional parallel solver instances (\'-t 1\')\x00") = & {l3907} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
            // 5174: b"not using add ... ')\0":   l3907 = UNIQUE | NON_NULL, (empty)
            // 5174: b"not using add ... ')\0": typeof(_1551 = &raw const (*_1552)) = *const {l3908} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000038)) }]
            // 5174: b"not using add ... ')\0":   l3908 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        );
        noparallel = 1 as libc::c_int;
        // 5177: noparallel: typeof(_1554) = *mut {l2651} i32
        // 5177: noparallel:   l2651 = UNIQUE | NON_NULL, (empty)
    } else {
        msg(
            b"using one worker for additional parallel solver instance\0" as *const u8
            // 5180: b"using one wor ... _char: typeof(_1556) = *const {l2654} i8
            // 5180: b"using one wor ... _char:   l2654 = UNIQUE | NON_NULL, (empty)
            // 5180: b"using one wor ... st u8: typeof(_1557) = *const {l2656} u8
            // 5180: b"using one wor ... st u8:   l2656 = UNIQUE | NON_NULL, (empty)
            // 5180: b"using one wor ... ce\0": typeof(_1558) = *const {l2658} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000039)) }]
            // 5180: b"using one wor ... ce\0":   l2658 = UNIQUE | NON_NULL, (empty)
            // 5180: b"using one wor ... ce\0": typeof(_1559) = & {l2660} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000039)) }]
            // 5180: b"using one wor ... ce\0":   l2660 = UNIQUE | NON_NULL, FIXED
            // 5180: b"using one wor ... ce\0": typeof(_1558 = &raw const (*_1559)) = *const {l3912} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000039)) }]
            // 5180: b"using one wor ... ce\0":   l3912 = UNIQUE | NON_NULL, (empty)
            // 5180: b"using one wor ... st u8: typeof(_1557 = move _1558 as *const u8 (Pointer(ArrayToPointer))) = *const {l3913} u8
            // 5180: b"using one wor ... st u8:   l3913 = UNIQUE | NON_NULL, (empty)
            // 5180: b"using one wor ... _char: typeof(_1556 = move _1557 as *const i8 (Misc)) = *const {l3914} i8
            // 5180: b"using one wor ... _char:   l3914 = UNIQUE | NON_NULL, (empty)
            // 5180: b"using one wor ... ce\0": typeof(_1559 = const b"using one worker for additional parallel solver instance\x00") = & {l3911} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000039)) }]
            // 5180: b"using one wor ... ce\0":   l3911 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
        );
        maxworkers -= 1;
        // 5183: maxworkers: typeof(_1560) = *mut {l2662} i32
        // 5183: maxworkers:   l2662 = UNIQUE | NON_NULL, (empty)
        maxworkers;
        // 5184: maxworkers: typeof(_1563) = *mut {l2666} i32
        // 5184: maxworkers:   l2666 = UNIQUE | NON_NULL, (empty)
    }
    if maxactive == 0 {
    // 5186: maxactive: typeof(_1567) = *mut {l2671} i32
    // 5186: maxactive:   l2671 = UNIQUE | NON_NULL, (empty)
        maxactive = 8 as libc::c_int * maxworkers;
        // 5187: maxworkers: typeof(_1570) = *mut {l2675} i32
        // 5187: maxworkers:   l2675 = UNIQUE | NON_NULL, (empty)
        // 5187: maxactive: typeof(_1572) = *mut {l2678} i32
        // 5187: maxactive:   l2678 = UNIQUE | NON_NULL, (empty)
        msg(
            b"maximum of %d active nodes (no '-a <nodes>' option)\0" as *const u8
            // 5189: b"maximum of %d ... _char: typeof(_1574) = *const {l2681} i8
            // 5189: b"maximum of %d ... _char:   l2681 = UNIQUE | NON_NULL, (empty)
            // 5189: b"maximum of %d ... st u8: typeof(_1575) = *const {l2683} u8
            // 5189: b"maximum of %d ... st u8:   l2683 = UNIQUE | NON_NULL, (empty)
            // 5189: b"maximum of %d ... n)\0": typeof(_1576) = *const {l2685} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 5189: b"maximum of %d ... n)\0":   l2685 = UNIQUE | NON_NULL, (empty)
            // 5189: b"maximum of %d ... n)\0": typeof(_1577) = & {l2687} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 5189: b"maximum of %d ... n)\0":   l2687 = UNIQUE | NON_NULL, FIXED
            // 5189: b"maximum of %d ... n)\0": typeof(_1576 = &raw const (*_1577)) = *const {l3916} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 5189: b"maximum of %d ... n)\0":   l3916 = UNIQUE | NON_NULL, (empty)
            // 5189: b"maximum of %d ... n)\0": typeof(_1577 = const b"maximum of %d active nodes (no \'-a <nodes>\' option)\x00") = & {l3915} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 5189: b"maximum of %d ... n)\0":   l3915 = UNIQUE | NON_NULL, (empty)
            // 5189: b"maximum of %d ... st u8: typeof(_1575 = move _1576 as *const u8 (Pointer(ArrayToPointer))) = *const {l3917} u8
            // 5189: b"maximum of %d ... st u8:   l3917 = UNIQUE | NON_NULL, (empty)
            // 5189: b"maximum of %d ... _char: typeof(_1574 = move _1575 as *const i8 (Misc)) = *const {l3918} i8
            // 5189: b"maximum of %d ... _char:   l3918 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
            maxactive,
            // 5191: maxactive: typeof(_1579) = *mut {l2690} i32
            // 5191: maxactive:   l2690 = UNIQUE | NON_NULL, (empty)
            maxactive,
            // 5192: maxactive: typeof(_1581) = *mut {l2693} i32
            // 5192: maxactive:   l2693 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        msg(
            b"maximum of %d active nodes as specified ('-a %d')\0" as *const u8
            // 5196: b"maximum of %d ... _char: typeof(_1583) = *const {l2696} i8
            // 5196: b"maximum of %d ... _char:   l2696 = UNIQUE | NON_NULL, (empty)
            // 5196: b"maximum of %d ... st u8: typeof(_1584) = *const {l2698} u8
            // 5196: b"maximum of %d ... st u8:   l2698 = UNIQUE | NON_NULL, (empty)
            // 5196: b"maximum of %d ... ')\0": typeof(_1585) = *const {l2700} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
            // 5196: b"maximum of %d ... ')\0":   l2700 = UNIQUE | NON_NULL, (empty)
            // 5196: b"maximum of %d ... ')\0": typeof(_1586) = & {l2702} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
            // 5196: b"maximum of %d ... ')\0":   l2702 = UNIQUE | NON_NULL, FIXED
            // 5196: b"maximum of %d ... ')\0": typeof(_1585 = &raw const (*_1586)) = *const {l3920} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
            // 5196: b"maximum of %d ... ')\0":   l3920 = UNIQUE | NON_NULL, (empty)
            // 5196: b"maximum of %d ... st u8: typeof(_1584 = move _1585 as *const u8 (Pointer(ArrayToPointer))) = *const {l3921} u8
            // 5196: b"maximum of %d ... st u8:   l3921 = UNIQUE | NON_NULL, (empty)
            // 5196: b"maximum of %d ... _char: typeof(_1583 = move _1584 as *const i8 (Misc)) = *const {l3922} i8
            // 5196: b"maximum of %d ... _char:   l3922 = UNIQUE | NON_NULL, (empty)
            // 5196: b"maximum of %d ... ')\0": typeof(_1586 = const b"maximum of %d active nodes as specified (\'-a %d\')\x00") = & {l3919} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000032)) }]
            // 5196: b"maximum of %d ... ')\0":   l3919 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
            maxactive,
            // 5198: maxactive: typeof(_1588) = *mut {l2705} i32
            // 5198: maxactive:   l2705 = UNIQUE | NON_NULL, (empty)
            maxactive,
            // 5199: maxactive: typeof(_1590) = *mut {l2708} i32
            // 5199: maxactive:   l2708 = UNIQUE | NON_NULL, (empty)
        );
    }
    if branches >= 0 as libc::c_int {
    // 5202: branches: typeof(_1594) = *mut {l2713} i32
    // 5202: branches:   l2713 = UNIQUE | NON_NULL, (empty)
        msg(
            b"ratio of split nodes is %d%% as specified ('-b %d')\0" as *const u8
            // 5204: b"ratio of spli ... _char: typeof(_1597) = *const {l2717} i8
            // 5204: b"ratio of spli ... _char:   l2717 = UNIQUE | NON_NULL, (empty)
            // 5204: b"ratio of spli ... st u8: typeof(_1598) = *const {l2719} u8
            // 5204: b"ratio of spli ... st u8:   l2719 = UNIQUE | NON_NULL, (empty)
            // 5204: b"ratio of spli ... ')\0": typeof(_1599) = *const {l2721} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 5204: b"ratio of spli ... ')\0":   l2721 = UNIQUE | NON_NULL, (empty)
            // 5204: b"ratio of spli ... ')\0": typeof(_1600) = & {l2723} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 5204: b"ratio of spli ... ')\0":   l2723 = UNIQUE | NON_NULL, FIXED
            // 5204: b"ratio of spli ... _char: typeof(_1597 = move _1598 as *const i8 (Misc)) = *const {l3926} i8
            // 5204: b"ratio of spli ... _char:   l3926 = UNIQUE | NON_NULL, (empty)
            // 5204: b"ratio of spli ... st u8: typeof(_1598 = move _1599 as *const u8 (Pointer(ArrayToPointer))) = *const {l3925} u8
            // 5204: b"ratio of spli ... st u8:   l3925 = UNIQUE | NON_NULL, (empty)
            // 5204: b"ratio of spli ... ')\0": typeof(_1599 = &raw const (*_1600)) = *const {l3924} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 5204: b"ratio of spli ... ')\0":   l3924 = UNIQUE | NON_NULL, (empty)
            // 5204: b"ratio of spli ... ')\0": typeof(_1600 = const b"ratio of split nodes is %d%% as specified (\'-b %d\')\x00") = & {l3923} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000034)) }]
            // 5204: b"ratio of spli ... ')\0":   l3923 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
            branches,
            // 5206: branches: typeof(_1602) = *mut {l2726} i32
            // 5206: branches:   l2726 = UNIQUE | NON_NULL, (empty)
            branches,
            // 5207: branches: typeof(_1604) = *mut {l2729} i32
            // 5207: branches:   l2729 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        branches = 50 as libc::c_int;
        // 5210: branches: typeof(_1606) = *mut {l2732} i32
        // 5210: branches:   l2732 = UNIQUE | NON_NULL, (empty)
        msg(
            b"default ratio of split nodes is %d%%\0" as *const u8 as *const libc::c_char,
            // 5212: b"default ratio ... _char: typeof(_1608) = *const {l2735} i8
            // 5212: b"default ratio ... _char:   l2735 = UNIQUE | NON_NULL, (empty)
            // 5212: b"default ratio ... st u8: typeof(_1609) = *const {l2737} u8
            // 5212: b"default ratio ... st u8:   l2737 = UNIQUE | NON_NULL, (empty)
            // 5212: b"default ratio ... %%\0": typeof(_1610) = *const {l2739} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5212: b"default ratio ... %%\0":   l2739 = UNIQUE | NON_NULL, (empty)
            // 5212: b"default ratio ... %%\0": typeof(_1611) = & {l2741} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5212: b"default ratio ... %%\0":   l2741 = UNIQUE | NON_NULL, FIXED
            // 5212: b"default ratio ... %%\0": typeof(_1610 = &raw const (*_1611)) = *const {l3928} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5212: b"default ratio ... %%\0":   l3928 = UNIQUE | NON_NULL, (empty)
            // 5212: b"default ratio ... %%\0": typeof(_1611 = const b"default ratio of split nodes is %d%%\x00") = & {l3927} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5212: b"default ratio ... %%\0":   l3927 = UNIQUE | NON_NULL, (empty)
            // 5212: b"default ratio ... st u8: typeof(_1609 = move _1610 as *const u8 (Pointer(ArrayToPointer))) = *const {l3929} u8
            // 5212: b"default ratio ... st u8:   l3929 = UNIQUE | NON_NULL, (empty)
            // 5212: b"default ratio ... _char: typeof(_1608 = move _1609 as *const i8 (Misc)) = *const {l3930} i8
            // 5212: b"default ratio ... _char:   l3930 = UNIQUE | NON_NULL, (empty)
            branches,
            // 5213: branches: typeof(_1613) = *mut {l2744} i32
            // 5213: branches:   l2744 = UNIQUE | NON_NULL, (empty)
        );
    }
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 5216: b"\0" as *const ... _char: typeof(_1615) = *const {l2747} i8
    // 5216: b"\0" as *const ... _char:   l2747 = UNIQUE | NON_NULL, (empty)
    // 5216: b"\0" as *const u8: typeof(_1616) = *const {l2749} u8
    // 5216: b"\0" as *const u8:   l2749 = UNIQUE | NON_NULL, (empty)
    // 5216: b"\0": typeof(_1617) = *const {l2751} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5216: b"\0":   l2751 = UNIQUE | NON_NULL, (empty)
    // 5216: b"\0": typeof(_1618) = & {l2753} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5216: b"\0":   l2753 = UNIQUE | NON_NULL, FIXED
    // 5216: b"\0": typeof(_1618 = const b"\x00") = & {l3931} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5216: b"\0":   l3931 = UNIQUE | NON_NULL, (empty)
    // 5216: b"\0": typeof(_1617 = &raw const (*_1618)) = *const {l3932} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5216: b"\0":   l3932 = UNIQUE | NON_NULL, (empty)
    // 5216: b"\0" as *const ... _char: typeof(_1615 = move _1616 as *const i8 (Misc)) = *const {l3934} i8
    // 5216: b"\0" as *const ... _char:   l3934 = UNIQUE | NON_NULL, (empty)
    // 5216: b"\0" as *const u8: typeof(_1616 = move _1617 as *const u8 (Pointer(ArrayToPointer))) = *const {l3933} u8
    // 5216: b"\0" as *const u8:   l3933 = UNIQUE | NON_NULL, (empty)
    if hardlimbytes == 0 {
    // 5217: hardlimbytes: typeof(_1622) = *mut {l2758} u64
    // 5217: hardlimbytes:   l2758 = UNIQUE | NON_NULL, (empty)
        hardlimbytes = getotalmem(1 as libc::c_int) as size_t;
        // 5218: hardlimbytes: typeof(_1625) = *mut {l2762} u64
        // 5218: hardlimbytes:   l2762 = UNIQUE | NON_NULL, (empty)
        msg(
            b"hard memory limit of %d MB (no '-g' nor '-m' option)\0" as *const u8
            // 5220: b"hard memory l ... _char: typeof(_1627) = *const {l2765} i8
            // 5220: b"hard memory l ... _char:   l2765 = UNIQUE | NON_NULL, (empty)
            // 5220: b"hard memory l ... st u8: typeof(_1628) = *const {l2767} u8
            // 5220: b"hard memory l ... st u8:   l2767 = UNIQUE | NON_NULL, (empty)
            // 5220: b"hard memory l ... n)\0": typeof(_1629) = *const {l2769} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
            // 5220: b"hard memory l ... n)\0":   l2769 = UNIQUE | NON_NULL, (empty)
            // 5220: b"hard memory l ... n)\0": typeof(_1630) = & {l2771} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
            // 5220: b"hard memory l ... n)\0":   l2771 = UNIQUE | NON_NULL, FIXED
            // 5220: b"hard memory l ... st u8: typeof(_1628 = move _1629 as *const u8 (Pointer(ArrayToPointer))) = *const {l3937} u8
            // 5220: b"hard memory l ... st u8:   l3937 = UNIQUE | NON_NULL, (empty)
            // 5220: b"hard memory l ... n)\0": typeof(_1630 = const b"hard memory limit of %d MB (no \'-g\' nor \'-m\' option)\x00") = & {l3935} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
            // 5220: b"hard memory l ... n)\0":   l3935 = UNIQUE | NON_NULL, (empty)
            // 5220: b"hard memory l ... _char: typeof(_1627 = move _1628 as *const i8 (Misc)) = *const {l3938} i8
            // 5220: b"hard memory l ... _char:   l3938 = UNIQUE | NON_NULL, (empty)
            // 5220: b"hard memory l ... n)\0": typeof(_1629 = &raw const (*_1630)) = *const {l3936} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000035)) }]
            // 5220: b"hard memory l ... n)\0":   l3936 = UNIQUE | NON_NULL, (empty)
                as *const libc::c_char,
            bytes2mb(hardlimbytes),
            // 5222: hardlimbytes: typeof(_1633) = *mut {l2775} u64
            // 5222: hardlimbytes:   l2775 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        msg(
            b"hard memory limit %d MB as specified\0" as *const u8 as *const libc::c_char,
            // 5226: b"hard memory l ... _char: typeof(_1635) = *const {l2778} i8
            // 5226: b"hard memory l ... _char:   l2778 = UNIQUE | NON_NULL, (empty)
            // 5226: b"hard memory l ... st u8: typeof(_1636) = *const {l2780} u8
            // 5226: b"hard memory l ... st u8:   l2780 = UNIQUE | NON_NULL, (empty)
            // 5226: b"hard memory l ... ed\0": typeof(_1637) = *const {l2782} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5226: b"hard memory l ... ed\0":   l2782 = UNIQUE | NON_NULL, (empty)
            // 5226: b"hard memory l ... ed\0": typeof(_1638) = & {l2784} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5226: b"hard memory l ... ed\0":   l2784 = UNIQUE | NON_NULL, FIXED
            // 5226: b"hard memory l ... ed\0": typeof(_1637 = &raw const (*_1638)) = *const {l3940} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5226: b"hard memory l ... ed\0":   l3940 = UNIQUE | NON_NULL, (empty)
            // 5226: b"hard memory l ... _char: typeof(_1635 = move _1636 as *const i8 (Misc)) = *const {l3942} i8
            // 5226: b"hard memory l ... _char:   l3942 = UNIQUE | NON_NULL, (empty)
            // 5226: b"hard memory l ... st u8: typeof(_1636 = move _1637 as *const u8 (Pointer(ArrayToPointer))) = *const {l3941} u8
            // 5226: b"hard memory l ... st u8:   l3941 = UNIQUE | NON_NULL, (empty)
            // 5226: b"hard memory l ... ed\0": typeof(_1638 = const b"hard memory limit %d MB as specified\x00") = & {l3939} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000025)) }]
            // 5226: b"hard memory l ... ed\0":   l3939 = UNIQUE | NON_NULL, (empty)
            bytes2mb(hardlimbytes),
            // 5227: hardlimbytes: typeof(_1641) = *mut {l2788} u64
            // 5227: hardlimbytes:   l2788 = UNIQUE | NON_NULL, (empty)
        );
    }
    softlimbytes =
    // 5230: softlimbytes: typeof(_1650) = *mut {l2799} u64
    // 5230: softlimbytes:   l2799 = UNIQUE | NON_NULL, (empty)
        hardlimbytes.wrapping_add(2 as libc::c_int as size_t) / 3 as libc::c_int as size_t;
        // 5231: hardlimbytes: typeof(_1644) = *mut {l2792} u64
        // 5231: hardlimbytes:   l2792 = UNIQUE | NON_NULL, (empty)
    msg(
        b"soft memory limit of %d MB\0" as *const u8 as *const libc::c_char,
        // 5233: b"soft memory l ... _char: typeof(_1652) = *const {l2802} i8
        // 5233: b"soft memory l ... _char:   l2802 = UNIQUE | NON_NULL, (empty)
        // 5233: b"soft memory l ... st u8: typeof(_1653) = *const {l2804} u8
        // 5233: b"soft memory l ... st u8:   l2804 = UNIQUE | NON_NULL, (empty)
        // 5233: b"soft memory l ... MB\0": typeof(_1654) = *const {l2806} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 5233: b"soft memory l ... MB\0":   l2806 = UNIQUE | NON_NULL, (empty)
        // 5233: b"soft memory l ... MB\0": typeof(_1655) = & {l2808} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 5233: b"soft memory l ... MB\0":   l2808 = UNIQUE | NON_NULL, FIXED
        // 5233: b"soft memory l ... st u8: typeof(_1653 = move _1654 as *const u8 (Pointer(ArrayToPointer))) = *const {l3945} u8
        // 5233: b"soft memory l ... st u8:   l3945 = UNIQUE | NON_NULL, (empty)
        // 5233: b"soft memory l ... MB\0": typeof(_1654 = &raw const (*_1655)) = *const {l3944} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 5233: b"soft memory l ... MB\0":   l3944 = UNIQUE | NON_NULL, (empty)
        // 5233: b"soft memory l ... _char: typeof(_1652 = move _1653 as *const i8 (Misc)) = *const {l3946} i8
        // 5233: b"soft memory l ... _char:   l3946 = UNIQUE | NON_NULL, (empty)
        // 5233: b"soft memory l ... MB\0": typeof(_1655 = const b"soft memory limit of %d MB\x00") = & {l3943} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001b)) }]
        // 5233: b"soft memory l ... MB\0":   l3943 = UNIQUE | NON_NULL, (empty)
        bytes2mb(softlimbytes),
        // 5234: softlimbytes: typeof(_1658) = *mut {l2812} u64
        // 5234: softlimbytes:   l2812 = UNIQUE | NON_NULL, (empty)
    );
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 5236: b"\0" as *const ... _char: typeof(_1660) = *const {l2815} i8
    // 5236: b"\0" as *const ... _char:   l2815 = UNIQUE | NON_NULL, (empty)
    // 5236: b"\0" as *const u8: typeof(_1661) = *const {l2817} u8
    // 5236: b"\0" as *const u8:   l2817 = UNIQUE | NON_NULL, (empty)
    // 5236: b"\0": typeof(_1662) = *const {l2819} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5236: b"\0":   l2819 = UNIQUE | NON_NULL, (empty)
    // 5236: b"\0": typeof(_1663) = & {l2821} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5236: b"\0":   l2821 = UNIQUE | NON_NULL, FIXED
    // 5236: b"\0": typeof(_1663 = const b"\x00") = & {l3947} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5236: b"\0":   l3947 = UNIQUE | NON_NULL, (empty)
    // 5236: b"\0" as *const ... _char: typeof(_1660 = move _1661 as *const i8 (Misc)) = *const {l3950} i8
    // 5236: b"\0" as *const ... _char:   l3950 = UNIQUE | NON_NULL, (empty)
    // 5236: b"\0": typeof(_1662 = &raw const (*_1663)) = *const {l3948} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5236: b"\0":   l3948 = UNIQUE | NON_NULL, (empty)
    // 5236: b"\0" as *const u8: typeof(_1661 = move _1662 as *const u8 (Pointer(ArrayToPointer))) = *const {l3949} u8
    // 5236: b"\0" as *const u8:   l3949 = UNIQUE | NON_NULL, (empty)
    if minclim == 0 {
    // 5237: minclim: typeof(_1667) = *mut {l2826} i32
    // 5237: minclim:   l2826 = UNIQUE | NON_NULL, (empty)
        minclim = 1000 as libc::c_int;
        // 5238: minclim: typeof(_1669) = *mut {l2829} i32
        // 5238: minclim:   l2829 = UNIQUE | NON_NULL, (empty)
        msg(
            b"default minimum conflict limit of %d conflicts\0" as *const u8 as *const libc::c_char,
            // 5240: b"default minim ... _char: typeof(_1671) = *const {l2832} i8
            // 5240: b"default minim ... _char:   l2832 = UNIQUE | NON_NULL, (empty)
            // 5240: b"default minim ... st u8: typeof(_1672) = *const {l2834} u8
            // 5240: b"default minim ... st u8:   l2834 = UNIQUE | NON_NULL, (empty)
            // 5240: b"default minim ... ts\0": typeof(_1673) = *const {l2836} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5240: b"default minim ... ts\0":   l2836 = UNIQUE | NON_NULL, (empty)
            // 5240: b"default minim ... ts\0": typeof(_1674) = & {l2838} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5240: b"default minim ... ts\0":   l2838 = UNIQUE | NON_NULL, FIXED
            // 5240: b"default minim ... ts\0": typeof(_1674 = const b"default minimum conflict limit of %d conflicts\x00") = & {l3951} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5240: b"default minim ... ts\0":   l3951 = UNIQUE | NON_NULL, (empty)
            // 5240: b"default minim ... _char: typeof(_1671 = move _1672 as *const i8 (Misc)) = *const {l3954} i8
            // 5240: b"default minim ... _char:   l3954 = UNIQUE | NON_NULL, (empty)
            // 5240: b"default minim ... ts\0": typeof(_1673 = &raw const (*_1674)) = *const {l3952} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5240: b"default minim ... ts\0":   l3952 = UNIQUE | NON_NULL, (empty)
            // 5240: b"default minim ... st u8: typeof(_1672 = move _1673 as *const u8 (Pointer(ArrayToPointer))) = *const {l3953} u8
            // 5240: b"default minim ... st u8:   l3953 = UNIQUE | NON_NULL, (empty)
            minclim,
            // 5241: minclim: typeof(_1676) = *mut {l2841} i32
            // 5241: minclim:   l2841 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        msg(
            b"minimum conflict limit set to %d ('--min=%d')\0" as *const u8 as *const libc::c_char,
            // 5245: b"minimum confl ... _char: typeof(_1678) = *const {l2844} i8
            // 5245: b"minimum confl ... _char:   l2844 = UNIQUE | NON_NULL, (empty)
            // 5245: b"minimum confl ... st u8: typeof(_1679) = *const {l2846} u8
            // 5245: b"minimum confl ... st u8:   l2846 = UNIQUE | NON_NULL, (empty)
            // 5245: b"minimum confl ... ')\0": typeof(_1680) = *const {l2848} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5245: b"minimum confl ... ')\0":   l2848 = UNIQUE | NON_NULL, (empty)
            // 5245: b"minimum confl ... ')\0": typeof(_1681) = & {l2850} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5245: b"minimum confl ... ')\0":   l2850 = UNIQUE | NON_NULL, FIXED
            // 5245: b"minimum confl ... ')\0": typeof(_1680 = &raw const (*_1681)) = *const {l3956} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5245: b"minimum confl ... ')\0":   l3956 = UNIQUE | NON_NULL, (empty)
            // 5245: b"minimum confl ... _char: typeof(_1678 = move _1679 as *const i8 (Misc)) = *const {l3958} i8
            // 5245: b"minimum confl ... _char:   l3958 = UNIQUE | NON_NULL, (empty)
            // 5245: b"minimum confl ... ')\0": typeof(_1681 = const b"minimum conflict limit set to %d (\'--min=%d\')\x00") = & {l3955} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5245: b"minimum confl ... ')\0":   l3955 = UNIQUE | NON_NULL, (empty)
            // 5245: b"minimum confl ... st u8: typeof(_1679 = move _1680 as *const u8 (Pointer(ArrayToPointer))) = *const {l3957} u8
            // 5245: b"minimum confl ... st u8:   l3957 = UNIQUE | NON_NULL, (empty)
            minclim,
            // 5246: minclim: typeof(_1683) = *mut {l2853} i32
            // 5246: minclim:   l2853 = UNIQUE | NON_NULL, (empty)
            minclim,
            // 5247: minclim: typeof(_1685) = *mut {l2856} i32
            // 5247: minclim:   l2856 = UNIQUE | NON_NULL, (empty)
        );
    }
    if initclim == 0 {
    // 5250: initclim: typeof(_1689) = *mut {l2861} i32
    // 5250: initclim:   l2861 = UNIQUE | NON_NULL, (empty)
        initclim = 10000 as libc::c_int;
        // 5251: initclim: typeof(_1691) = *mut {l2864} i32
        // 5251: initclim:   l2864 = UNIQUE | NON_NULL, (empty)
        msg(
            b"default initial conflict limit of %d conflicts\0" as *const u8 as *const libc::c_char,
            // 5253: b"default initi ... _char: typeof(_1693) = *const {l2867} i8
            // 5253: b"default initi ... _char:   l2867 = UNIQUE | NON_NULL, (empty)
            // 5253: b"default initi ... st u8: typeof(_1694) = *const {l2869} u8
            // 5253: b"default initi ... st u8:   l2869 = UNIQUE | NON_NULL, (empty)
            // 5253: b"default initi ... ts\0": typeof(_1695) = *const {l2871} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5253: b"default initi ... ts\0":   l2871 = UNIQUE | NON_NULL, (empty)
            // 5253: b"default initi ... ts\0": typeof(_1696) = & {l2873} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5253: b"default initi ... ts\0":   l2873 = UNIQUE | NON_NULL, FIXED
            // 5253: b"default initi ... st u8: typeof(_1694 = move _1695 as *const u8 (Pointer(ArrayToPointer))) = *const {l3961} u8
            // 5253: b"default initi ... st u8:   l3961 = UNIQUE | NON_NULL, (empty)
            // 5253: b"default initi ... ts\0": typeof(_1695 = &raw const (*_1696)) = *const {l3960} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5253: b"default initi ... ts\0":   l3960 = UNIQUE | NON_NULL, (empty)
            // 5253: b"default initi ... _char: typeof(_1693 = move _1694 as *const i8 (Misc)) = *const {l3962} i8
            // 5253: b"default initi ... _char:   l3962 = UNIQUE | NON_NULL, (empty)
            // 5253: b"default initi ... ts\0": typeof(_1696 = const b"default initial conflict limit of %d conflicts\x00") = & {l3959} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5253: b"default initi ... ts\0":   l3959 = UNIQUE | NON_NULL, (empty)
            initclim,
            // 5254: initclim: typeof(_1698) = *mut {l2876} i32
            // 5254: initclim:   l2876 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        msg(
            b"initial conflict limit set to %d ('--init=%d')\0" as *const u8 as *const libc::c_char,
            // 5258: b"initial confl ... _char: typeof(_1700) = *const {l2879} i8
            // 5258: b"initial confl ... _char:   l2879 = UNIQUE | NON_NULL, (empty)
            // 5258: b"initial confl ... st u8: typeof(_1701) = *const {l2881} u8
            // 5258: b"initial confl ... st u8:   l2881 = UNIQUE | NON_NULL, (empty)
            // 5258: b"initial confl ... ')\0": typeof(_1702) = *const {l2883} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5258: b"initial confl ... ')\0":   l2883 = UNIQUE | NON_NULL, (empty)
            // 5258: b"initial confl ... ')\0": typeof(_1703) = & {l2885} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5258: b"initial confl ... ')\0":   l2885 = UNIQUE | NON_NULL, FIXED
            // 5258: b"initial confl ... st u8: typeof(_1701 = move _1702 as *const u8 (Pointer(ArrayToPointer))) = *const {l3965} u8
            // 5258: b"initial confl ... st u8:   l3965 = UNIQUE | NON_NULL, (empty)
            // 5258: b"initial confl ... ')\0": typeof(_1702 = &raw const (*_1703)) = *const {l3964} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5258: b"initial confl ... ')\0":   l3964 = UNIQUE | NON_NULL, (empty)
            // 5258: b"initial confl ... ')\0": typeof(_1703 = const b"initial conflict limit set to %d (\'--init=%d\')\x00") = & {l3963} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5258: b"initial confl ... ')\0":   l3963 = UNIQUE | NON_NULL, (empty)
            // 5258: b"initial confl ... _char: typeof(_1700 = move _1701 as *const i8 (Misc)) = *const {l3966} i8
            // 5258: b"initial confl ... _char:   l3966 = UNIQUE | NON_NULL, (empty)
            initclim,
            // 5259: initclim: typeof(_1705) = *mut {l2888} i32
            // 5259: initclim:   l2888 = UNIQUE | NON_NULL, (empty)
            initclim,
            // 5260: initclim: typeof(_1707) = *mut {l2891} i32
            // 5260: initclim:   l2891 = UNIQUE | NON_NULL, (empty)
        );
    }
    if maxclim == 0 {
    // 5263: maxclim: typeof(_1711) = *mut {l2896} i32
    // 5263: maxclim:   l2896 = UNIQUE | NON_NULL, (empty)
        maxclim = 100000 as libc::c_int;
        // 5264: maxclim: typeof(_1713) = *mut {l2899} i32
        // 5264: maxclim:   l2899 = UNIQUE | NON_NULL, (empty)
        msg(
            b"default maximum conflict limit of %d conflicts\0" as *const u8 as *const libc::c_char,
            // 5266: b"default maxim ... _char: typeof(_1715) = *const {l2902} i8
            // 5266: b"default maxim ... _char:   l2902 = UNIQUE | NON_NULL, (empty)
            // 5266: b"default maxim ... st u8: typeof(_1716) = *const {l2904} u8
            // 5266: b"default maxim ... st u8:   l2904 = UNIQUE | NON_NULL, (empty)
            // 5266: b"default maxim ... ts\0": typeof(_1717) = *const {l2906} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5266: b"default maxim ... ts\0":   l2906 = UNIQUE | NON_NULL, (empty)
            // 5266: b"default maxim ... ts\0": typeof(_1718) = & {l2908} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5266: b"default maxim ... ts\0":   l2908 = UNIQUE | NON_NULL, FIXED
            // 5266: b"default maxim ... ts\0": typeof(_1718 = const b"default maximum conflict limit of %d conflicts\x00") = & {l3967} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5266: b"default maxim ... ts\0":   l3967 = UNIQUE | NON_NULL, (empty)
            // 5266: b"default maxim ... ts\0": typeof(_1717 = &raw const (*_1718)) = *const {l3968} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002f)) }]
            // 5266: b"default maxim ... ts\0":   l3968 = UNIQUE | NON_NULL, (empty)
            // 5266: b"default maxim ... st u8: typeof(_1716 = move _1717 as *const u8 (Pointer(ArrayToPointer))) = *const {l3969} u8
            // 5266: b"default maxim ... st u8:   l3969 = UNIQUE | NON_NULL, (empty)
            // 5266: b"default maxim ... _char: typeof(_1715 = move _1716 as *const i8 (Misc)) = *const {l3970} i8
            // 5266: b"default maxim ... _char:   l3970 = UNIQUE | NON_NULL, (empty)
            maxclim,
            // 5267: maxclim: typeof(_1720) = *mut {l2911} i32
            // 5267: maxclim:   l2911 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        msg(
            b"maximum conflict limit set to %d ('--max=%d')\0" as *const u8 as *const libc::c_char,
            // 5271: b"maximum confl ... _char: typeof(_1722) = *const {l2914} i8
            // 5271: b"maximum confl ... _char:   l2914 = UNIQUE | NON_NULL, (empty)
            // 5271: b"maximum confl ... st u8: typeof(_1723) = *const {l2916} u8
            // 5271: b"maximum confl ... st u8:   l2916 = UNIQUE | NON_NULL, (empty)
            // 5271: b"maximum confl ... ')\0": typeof(_1724) = *const {l2918} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5271: b"maximum confl ... ')\0":   l2918 = UNIQUE | NON_NULL, (empty)
            // 5271: b"maximum confl ... ')\0": typeof(_1725) = & {l2920} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5271: b"maximum confl ... ')\0":   l2920 = UNIQUE | NON_NULL, FIXED
            // 5271: b"maximum confl ... st u8: typeof(_1723 = move _1724 as *const u8 (Pointer(ArrayToPointer))) = *const {l3973} u8
            // 5271: b"maximum confl ... st u8:   l3973 = UNIQUE | NON_NULL, (empty)
            // 5271: b"maximum confl ... ')\0": typeof(_1725 = const b"maximum conflict limit set to %d (\'--max=%d\')\x00") = & {l3971} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5271: b"maximum confl ... ')\0":   l3971 = UNIQUE | NON_NULL, (empty)
            // 5271: b"maximum confl ... _char: typeof(_1722 = move _1723 as *const i8 (Misc)) = *const {l3974} i8
            // 5271: b"maximum confl ... _char:   l3974 = UNIQUE | NON_NULL, (empty)
            // 5271: b"maximum confl ... ')\0": typeof(_1724 = &raw const (*_1725)) = *const {l3972} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002e)) }]
            // 5271: b"maximum confl ... ')\0":   l3972 = UNIQUE | NON_NULL, (empty)
            maxclim,
            // 5272: maxclim: typeof(_1727) = *mut {l2923} i32
            // 5272: maxclim:   l2923 = UNIQUE | NON_NULL, (empty)
            maxclim,
            // 5273: maxclim: typeof(_1729) = *mut {l2926} i32
            // 5273: maxclim:   l2926 = UNIQUE | NON_NULL, (empty)
        );
    }
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 5276: b"\0" as *const ... _char: typeof(_1731) = *const {l2929} i8
    // 5276: b"\0" as *const ... _char:   l2929 = UNIQUE | NON_NULL, (empty)
    // 5276: b"\0" as *const u8: typeof(_1732) = *const {l2931} u8
    // 5276: b"\0" as *const u8:   l2931 = UNIQUE | NON_NULL, (empty)
    // 5276: b"\0": typeof(_1733) = *const {l2933} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5276: b"\0":   l2933 = UNIQUE | NON_NULL, (empty)
    // 5276: b"\0": typeof(_1734) = & {l2935} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5276: b"\0":   l2935 = UNIQUE | NON_NULL, FIXED
    // 5276: b"\0": typeof(_1733 = &raw const (*_1734)) = *const {l3976} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5276: b"\0":   l3976 = UNIQUE | NON_NULL, (empty)
    // 5276: b"\0" as *const ... _char: typeof(_1731 = move _1732 as *const i8 (Misc)) = *const {l3978} i8
    // 5276: b"\0" as *const ... _char:   l3978 = UNIQUE | NON_NULL, (empty)
    // 5276: b"\0": typeof(_1734 = const b"\x00") = & {l3975} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5276: b"\0":   l3975 = UNIQUE | NON_NULL, (empty)
    // 5276: b"\0" as *const u8: typeof(_1732 = move _1733 as *const u8 (Pointer(ArrayToPointer))) = *const {l3977} u8
    // 5276: b"\0" as *const u8:   l3977 = UNIQUE | NON_NULL, (empty)
    if optimize < 0 as libc::c_int {
    // 5277: optimize: typeof(_1738) = *mut {l2940} i32
    // 5277: optimize:   l2940 = UNIQUE | NON_NULL, (empty)
        optimize = 10 as libc::c_int;
        // 5278: optimize: typeof(_1741) = *mut {l2944} i32
        // 5278: optimize:   l2944 = UNIQUE | NON_NULL, (empty)
        msg(
            b"default optimization level %d\0" as *const u8 as *const libc::c_char,
            // 5280: b"default optim ... _char: typeof(_1743) = *const {l2947} i8
            // 5280: b"default optim ... _char:   l2947 = UNIQUE | NON_NULL, (empty)
            // 5280: b"default optim ... st u8: typeof(_1744) = *const {l2949} u8
            // 5280: b"default optim ... st u8:   l2949 = UNIQUE | NON_NULL, (empty)
            // 5280: b"default optim ... %d\0": typeof(_1745) = *const {l2951} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 5280: b"default optim ... %d\0":   l2951 = UNIQUE | NON_NULL, (empty)
            // 5280: b"default optim ... %d\0": typeof(_1746) = & {l2953} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 5280: b"default optim ... %d\0":   l2953 = UNIQUE | NON_NULL, FIXED
            // 5280: b"default optim ... _char: typeof(_1743 = move _1744 as *const i8 (Misc)) = *const {l3982} i8
            // 5280: b"default optim ... _char:   l3982 = UNIQUE | NON_NULL, (empty)
            // 5280: b"default optim ... st u8: typeof(_1744 = move _1745 as *const u8 (Pointer(ArrayToPointer))) = *const {l3981} u8
            // 5280: b"default optim ... st u8:   l3981 = UNIQUE | NON_NULL, (empty)
            // 5280: b"default optim ... %d\0": typeof(_1745 = &raw const (*_1746)) = *const {l3980} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 5280: b"default optim ... %d\0":   l3980 = UNIQUE | NON_NULL, (empty)
            // 5280: b"default optim ... %d\0": typeof(_1746 = const b"default optimization level %d\x00") = & {l3979} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001e)) }]
            // 5280: b"default optim ... %d\0":   l3979 = UNIQUE | NON_NULL, (empty)
            optimize,
            // 5281: optimize: typeof(_1748) = *mut {l2956} i32
            // 5281: optimize:   l2956 = UNIQUE | NON_NULL, (empty)
        );
    } else {
        msg(
            b"optimization level %d as specified ('-O%d')\0" as *const u8 as *const libc::c_char,
            // 5285: b"optimization  ... _char: typeof(_1750) = *const {l2959} i8
            // 5285: b"optimization  ... _char:   l2959 = UNIQUE | NON_NULL, (empty)
            // 5285: b"optimization  ... st u8: typeof(_1751) = *const {l2961} u8
            // 5285: b"optimization  ... st u8:   l2961 = UNIQUE | NON_NULL, (empty)
            // 5285: b"optimization  ... ')\0": typeof(_1752) = *const {l2963} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 5285: b"optimization  ... ')\0":   l2963 = UNIQUE | NON_NULL, (empty)
            // 5285: b"optimization  ... ')\0": typeof(_1753) = & {l2965} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 5285: b"optimization  ... ')\0":   l2965 = UNIQUE | NON_NULL, FIXED
            // 5285: b"optimization  ... _char: typeof(_1750 = move _1751 as *const i8 (Misc)) = *const {l3986} i8
            // 5285: b"optimization  ... _char:   l3986 = UNIQUE | NON_NULL, (empty)
            // 5285: b"optimization  ... ')\0": typeof(_1753 = const b"optimization level %d as specified (\'-O%d\')\x00") = & {l3983} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 5285: b"optimization  ... ')\0":   l3983 = UNIQUE | NON_NULL, (empty)
            // 5285: b"optimization  ... st u8: typeof(_1751 = move _1752 as *const u8 (Pointer(ArrayToPointer))) = *const {l3985} u8
            // 5285: b"optimization  ... st u8:   l3985 = UNIQUE | NON_NULL, (empty)
            // 5285: b"optimization  ... ')\0": typeof(_1752 = &raw const (*_1753)) = *const {l3984} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000002c)) }]
            // 5285: b"optimization  ... ')\0":   l3984 = UNIQUE | NON_NULL, (empty)
            optimize,
            // 5286: optimize: typeof(_1755) = *mut {l2968} i32
            // 5286: optimize:   l2968 = UNIQUE | NON_NULL, (empty)
            optimize,
            // 5287: optimize: typeof(_1757) = *mut {l2971} i32
            // 5287: optimize:   l2971 = UNIQUE | NON_NULL, (empty)
        );
    }
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 5290: b"\0" as *const ... _char: typeof(_1759) = *const {l2974} i8
    // 5290: b"\0" as *const ... _char:   l2974 = UNIQUE | NON_NULL, (empty)
    // 5290: b"\0" as *const u8: typeof(_1760) = *const {l2976} u8
    // 5290: b"\0" as *const u8:   l2976 = UNIQUE | NON_NULL, (empty)
    // 5290: b"\0": typeof(_1761) = *const {l2978} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5290: b"\0":   l2978 = UNIQUE | NON_NULL, (empty)
    // 5290: b"\0": typeof(_1762) = & {l2980} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5290: b"\0":   l2980 = UNIQUE | NON_NULL, FIXED
    // 5290: b"\0" as *const ... _char: typeof(_1759 = move _1760 as *const i8 (Misc)) = *const {l3990} i8
    // 5290: b"\0" as *const ... _char:   l3990 = UNIQUE | NON_NULL, (empty)
    // 5290: b"\0": typeof(_1761 = &raw const (*_1762)) = *const {l3988} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5290: b"\0":   l3988 = UNIQUE | NON_NULL, (empty)
    // 5290: b"\0" as *const u8: typeof(_1760 = move _1761 as *const u8 (Pointer(ArrayToPointer))) = *const {l3989} u8
    // 5290: b"\0" as *const u8:   l3989 = UNIQUE | NON_NULL, (empty)
    // 5290: b"\0": typeof(_1762 = const b"\x00") = & {l3987} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5290: b"\0":   l3987 = UNIQUE | NON_NULL, (empty)
    setsighandlers();
    initroot();
    msg(b"reading %s\0" as *const u8 as *const libc::c_char, fname);
    // 5293: b"reading %s\0" ... _char: typeof(_1766) = *const {l2985} i8
    // 5293: b"reading %s\0" ... _char:   l2985 = UNIQUE | NON_NULL, (empty)
    // 5293: b"reading %s\0" ... st u8: typeof(_1767) = *const {l2987} u8
    // 5293: b"reading %s\0" ... st u8:   l2987 = UNIQUE | NON_NULL, (empty)
    // 5293: b"reading %s\0": typeof(_1768) = *const {l2989} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
    // 5293: b"reading %s\0":   l2989 = UNIQUE | NON_NULL, (empty)
    // 5293: b"reading %s\0": typeof(_1769) = & {l2991} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
    // 5293: b"reading %s\0":   l2991 = UNIQUE | NON_NULL, FIXED
    // 5293: fname: typeof(_1770) = *const {l2993} i8
    // 5293: fname:   l2993 = UNIQUE | NON_NULL, (empty)
    // 5293: fname: typeof(_1771) = *mut {l2995} *const {l2996} i8
    // 5293: fname:   l2995 = UNIQUE | NON_NULL, (empty)
    // 5293: fname:   l2996 = UNIQUE | NON_NULL, (empty)
    // 5293: b"reading %s\0" ... _char: typeof(_1766 = move _1767 as *const i8 (Misc)) = *const {l3994} i8
    // 5293: b"reading %s\0" ... _char:   l3994 = UNIQUE | NON_NULL, (empty)
    // 5293: b"reading %s\0": typeof(_1768 = &raw const (*_1769)) = *const {l3992} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
    // 5293: b"reading %s\0":   l3992 = UNIQUE | NON_NULL, (empty)
    // 5293: b"reading %s\0": typeof(_1769 = const b"reading %s\x00") = & {l3991} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000b)) }]
    // 5293: b"reading %s\0":   l3991 = UNIQUE | NON_NULL, (empty)
    // 5293: b"reading %s\0" ... st u8: typeof(_1767 = move _1768 as *const u8 (Pointer(ArrayToPointer))) = *const {l3993} u8
    // 5293: b"reading %s\0" ... st u8:   l3993 = UNIQUE | NON_NULL, (empty)
    parse(root);
    // 5294: root: typeof(_1773) = *mut {l2999} LGL
    // 5294: root:   l2999 = UNIQUE | NON_NULL, (empty)
    // 5294: root: typeof(_1774) = *mut {l3001} *mut {l3002} LGL
    // 5294: root:   l3001 = UNIQUE | NON_NULL, (empty)
    // 5294: root:   l3002 = UNIQUE | NON_NULL, (empty)
    if clf == 1 as libc::c_int {
        fclose(file);
        // 5296: file: typeof(_1780) = *mut {l3009} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5296: file:   l3009 = UNIQUE | NON_NULL, (empty)
        // 5296: file: typeof(_1781) = *mut {l3011} *mut {l3012} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5296: file:   l3011 = UNIQUE | NON_NULL, (empty)
        // 5296: file:   l3012 = UNIQUE | NON_NULL, (empty)
    }
    if clf == 2 as libc::c_int {
        pclose(file);
        // 5299: file: typeof(_1787) = *mut {l3019} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5299: file:   l3019 = UNIQUE | NON_NULL, (empty)
        // 5299: file: typeof(_1788) = *mut {l3021} *mut {l3022} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5299: file:   l3021 = UNIQUE | NON_NULL, (empty)
        // 5299: file:   l3022 = UNIQUE | NON_NULL, (empty)
    }
    if noparallel == 0 {
    // 5301: noparallel: typeof(_1792) = *mut {l3027} i32
    // 5301: noparallel:   l3027 = UNIQUE | NON_NULL, (empty)
        startparallel(root);
        // 5302: root: typeof(_1794) = *mut {l3030} LGL
        // 5302: root:   l3030 = UNIQUE | NON_NULL, (empty)
        // 5302: root: typeof(_1795) = *mut {l3032} *mut {l3033} LGL
        // 5302: root:   l3032 = UNIQUE | NON_NULL, (empty)
        // 5302: root:   l3033 = UNIQUE | NON_NULL, (empty)
    }
    msg(
        b"simplifying root solver instance with optimization level %d\0" as *const u8
        // 5305: b"simplifying r ... _char: typeof(_1797) = *const {l3036} i8
        // 5305: b"simplifying r ... _char:   l3036 = UNIQUE | NON_NULL, (empty)
        // 5305: b"simplifying r ... st u8: typeof(_1798) = *const {l3038} u8
        // 5305: b"simplifying r ... st u8:   l3038 = UNIQUE | NON_NULL, (empty)
        // 5305: b"simplifying r ... %d\0": typeof(_1799) = *const {l3040} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 5305: b"simplifying r ... %d\0":   l3040 = UNIQUE | NON_NULL, (empty)
        // 5305: b"simplifying r ... %d\0": typeof(_1800) = & {l3042} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 5305: b"simplifying r ... %d\0":   l3042 = UNIQUE | NON_NULL, FIXED
        // 5305: b"simplifying r ... st u8: typeof(_1798 = move _1799 as *const u8 (Pointer(ArrayToPointer))) = *const {l3997} u8
        // 5305: b"simplifying r ... st u8:   l3997 = UNIQUE | NON_NULL, (empty)
        // 5305: b"simplifying r ... %d\0": typeof(_1799 = &raw const (*_1800)) = *const {l3996} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 5305: b"simplifying r ... %d\0":   l3996 = UNIQUE | NON_NULL, (empty)
        // 5305: b"simplifying r ... _char: typeof(_1797 = move _1798 as *const i8 (Misc)) = *const {l3998} i8
        // 5305: b"simplifying r ... _char:   l3998 = UNIQUE | NON_NULL, (empty)
        // 5305: b"simplifying r ... %d\0": typeof(_1800 = const b"simplifying root solver instance with optimization level %d\x00") = & {l3995} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000003c)) }]
        // 5305: b"simplifying r ... %d\0":   l3995 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        optimize,
        // 5307: optimize: typeof(_1802) = *mut {l3045} i32
        // 5307: optimize:   l3045 = UNIQUE | NON_NULL, (empty)
    );
    startimer_shim(&mut wct.simp);
    // 5309: &mut wct.simp: typeof(_1804) = *mut {l3048} f64
    // 5309: &mut wct.simp:   l3048 = UNIQUE | NON_NULL, (empty)
    // 5309: &mut wct.simp: typeof(_1805) = &mut {l3050} f64
    // 5309: &mut wct.simp:   l3050 = UNIQUE | NON_NULL, (empty)
    // 5309: wct: typeof(_1806) = *mut {l3052} DefId(0:848 ~ treengeling[2d04]::C2RustUnnamed_4)
    // 5309: wct:   l3052 = UNIQUE | NON_NULL, (empty)
    // 5309: &mut wct.simp: typeof(_1805 = &mut ((*_1806).1: f64)) = &mut {l3999} f64
    // 5309: &mut wct.simp:   l3999 = UNIQUE | NON_NULL, (empty)
    // 5309: &mut wct.simp: typeof(_1804 = &raw mut (*_1805)) = *mut {l4000} f64
    // 5309: &mut wct.simp:   l4000 = UNIQUE | NON_NULL, (empty)
    res = lglsimp(root, optimize);
    // 5310: root: typeof(_1808) = *mut {l3055} LGL
    // 5310: root:   l3055 = UNIQUE | NON_NULL, (empty)
    // 5310: root: typeof(_1809) = *mut {l3057} *mut {l3058} LGL
    // 5310: root:   l3057 = UNIQUE | NON_NULL, (empty)
    // 5310: root:   l3058 = UNIQUE | NON_NULL, (empty)
    // 5310: optimize: typeof(_1811) = *mut {l3061} i32
    // 5310: optimize:   l3061 = UNIQUE | NON_NULL, (empty)
    sec = stoptimer();
    js.cnt += 1;
    // 5312: js: typeof(_1813) = *mut {l3064} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
    // 5312: js:   l3064 = UNIQUE | NON_NULL, (empty)
    js.cnt;
    // 5313: js: typeof(_1816) = *mut {l3068} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
    // 5313: js:   l3068 = UNIQUE | NON_NULL, (empty)
    js.simp += 1;
    // 5314: js: typeof(_1817) = *mut {l3070} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
    // 5314: js:   l3070 = UNIQUE | NON_NULL, (empty)
    js.simp;
    // 5315: js: typeof(_1820) = *mut {l3074} DefId(0:839 ~ treengeling[2d04]::C2RustUnnamed_3)
    // 5315: js:   l3074 = UNIQUE | NON_NULL, (empty)
    propagations += lglgetprops(root);
    // 5316: root: typeof(_1822) = *mut {l3077} LGL
    // 5316: root:   l3077 = UNIQUE | NON_NULL, (empty)
    // 5316: root: typeof(_1823) = *mut {l3079} *mut {l3080} LGL
    // 5316: root:   l3079 = UNIQUE | NON_NULL, (empty)
    // 5316: root:   l3080 = UNIQUE | NON_NULL, (empty)
    // 5316: propagations: typeof(_1824) = *mut {l3082} i64
    // 5316: propagations:   l3082 = UNIQUE | NON_NULL, (empty)
    msg(
        b"root solver instance optimization with result %d took %.2f seconds\0" as *const u8
        // 5318: b"root solver i ... _char: typeof(_1827) = *const {l3086} i8
        // 5318: b"root solver i ... _char:   l3086 = UNIQUE | NON_NULL, (empty)
        // 5318: b"root solver i ... st u8: typeof(_1828) = *const {l3088} u8
        // 5318: b"root solver i ... st u8:   l3088 = UNIQUE | NON_NULL, (empty)
        // 5318: b"root solver i ... ds\0": typeof(_1829) = *const {l3090} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000043)) }]
        // 5318: b"root solver i ... ds\0":   l3090 = UNIQUE | NON_NULL, (empty)
        // 5318: b"root solver i ... ds\0": typeof(_1830) = & {l3092} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000043)) }]
        // 5318: b"root solver i ... ds\0":   l3092 = UNIQUE | NON_NULL, FIXED
        // 5318: b"root solver i ... st u8: typeof(_1828 = move _1829 as *const u8 (Pointer(ArrayToPointer))) = *const {l4003} u8
        // 5318: b"root solver i ... st u8:   l4003 = UNIQUE | NON_NULL, (empty)
        // 5318: b"root solver i ... _char: typeof(_1827 = move _1828 as *const i8 (Misc)) = *const {l4004} i8
        // 5318: b"root solver i ... _char:   l4004 = UNIQUE | NON_NULL, (empty)
        // 5318: b"root solver i ... ds\0": typeof(_1829 = &raw const (*_1830)) = *const {l4002} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000043)) }]
        // 5318: b"root solver i ... ds\0":   l4002 = UNIQUE | NON_NULL, (empty)
        // 5318: b"root solver i ... ds\0": typeof(_1830 = const b"root solver instance optimization with result %d took %.2f seconds\x00") = & {l4001} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000043)) }]
        // 5318: b"root solver i ... ds\0":   l4001 = UNIQUE | NON_NULL, (empty)
            as *const libc::c_char,
        res,
        sec,
    );
    tmp = 0 as libc::c_int;
    if noparallel == 0 {
    // 5324: noparallel: typeof(_1837) = *mut {l3100} i32
    // 5324: noparallel:   l3100 = UNIQUE | NON_NULL, (empty)
        tmp = joinparallel();
        if res == 0 && tmp != 0 {
            parallelwins(tmp);
        }
        releaseparallel();
    }
    if res == 0 && tmp != 0 {
        res = tmp;
    } else if res == 10 as libc::c_int {
        printf(b"s SATISFIABLE\n\0" as *const u8 as *const libc::c_char);
        // 5334: b"s SATISFIABLE ... _char: typeof(_1859) = *const {l3123} i8
        // 5334: b"s SATISFIABLE ... _char:   l3123 = UNIQUE | NON_NULL, (empty)
        // 5334: b"s SATISFIABLE ... st u8: typeof(_1860) = *const {l3125} u8
        // 5334: b"s SATISFIABLE ... st u8:   l3125 = UNIQUE | NON_NULL, (empty)
        // 5334: b"s SATISFIABLE\n\0": typeof(_1861) = *const {l3127} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 5334: b"s SATISFIABLE\n\0":   l3127 = UNIQUE | NON_NULL, (empty)
        // 5334: b"s SATISFIABLE\n\0": typeof(_1862) = & {l3129} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 5334: b"s SATISFIABLE\n\0":   l3129 = UNIQUE | NON_NULL, FIXED
        // 5334: b"s SATISFIABLE\n\0": typeof(_1861 = &raw const (*_1862)) = *const {l4006} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 5334: b"s SATISFIABLE\n\0":   l4006 = UNIQUE | NON_NULL, (empty)
        // 5334: b"s SATISFIABLE ... _char: typeof(_1859 = move _1860 as *const i8 (Misc)) = *const {l4008} i8
        // 5334: b"s SATISFIABLE ... _char:   l4008 = UNIQUE | NON_NULL, (empty)
        // 5334: b"s SATISFIABLE\n\0": typeof(_1862 = const b"s SATISFIABLE\n\x00") = & {l4005} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000f)) }]
        // 5334: b"s SATISFIABLE\n\0":   l4005 = UNIQUE | NON_NULL, (empty)
        // 5334: b"s SATISFIABLE ... st u8: typeof(_1860 = move _1861 as *const u8 (Pointer(ArrayToPointer))) = *const {l4007} u8
        // 5334: b"s SATISFIABLE ... st u8:   l4007 = UNIQUE | NON_NULL, (empty)
        if nowitness == 0 {
        // 5335: nowitness: typeof(_1866) = *mut {l3134} i32
        // 5335: nowitness:   l3134 = UNIQUE | NON_NULL, (empty)
            fflush(stdout);
            // 5336: stdout: typeof(_1868) = *mut {l3137} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 5336: stdout:   l3137 = UNIQUE | NON_NULL, (empty)
            // 5336: stdout: typeof(_1869) = *mut {l3139} *mut {l3140} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
            // 5336: stdout:   l3139 = UNIQUE | NON_NULL, (empty)
            // 5336: stdout:   l3140 = UNIQUE | NON_NULL, (empty)
            witness(root);
            // 5337: root: typeof(_1871) = *mut {l3143} LGL
            // 5337: root:   l3143 = UNIQUE | NON_NULL, (empty)
            // 5337: root: typeof(_1872) = *mut {l3145} *mut {l3146} LGL
            // 5337: root:   l3145 = UNIQUE | NON_NULL, (empty)
            // 5337: root:   l3146 = UNIQUE | NON_NULL, (empty)
        }
        fflush(stdout);
        // 5339: stdout: typeof(_1874) = *mut {l3149} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5339: stdout:   l3149 = UNIQUE | NON_NULL, (empty)
        // 5339: stdout: typeof(_1875) = *mut {l3151} *mut {l3152} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5339: stdout:   l3151 = UNIQUE | NON_NULL, (empty)
        // 5339: stdout:   l3152 = UNIQUE | NON_NULL, (empty)
    } else if res == 20 as libc::c_int {
        printf(b"s UNSATISFIABLE\n\0" as *const u8 as *const libc::c_char);
        // 5341: b"s UNSATISFIAB ... _char: typeof(_1880) = *const {l3158} i8
        // 5341: b"s UNSATISFIAB ... _char:   l3158 = UNIQUE | NON_NULL, (empty)
        // 5341: b"s UNSATISFIAB ... st u8: typeof(_1881) = *const {l3160} u8
        // 5341: b"s UNSATISFIAB ... st u8:   l3160 = UNIQUE | NON_NULL, (empty)
        // 5341: b"s UNSATISFIAB ... \n\0": typeof(_1882) = *const {l3162} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 5341: b"s UNSATISFIAB ... \n\0":   l3162 = UNIQUE | NON_NULL, (empty)
        // 5341: b"s UNSATISFIAB ... \n\0": typeof(_1883) = & {l3164} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 5341: b"s UNSATISFIAB ... \n\0":   l3164 = UNIQUE | NON_NULL, FIXED
        // 5341: b"s UNSATISFIAB ... \n\0": typeof(_1883 = const b"s UNSATISFIABLE\n\x00") = & {l4009} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 5341: b"s UNSATISFIAB ... \n\0":   l4009 = UNIQUE | NON_NULL, (empty)
        // 5341: b"s UNSATISFIAB ... st u8: typeof(_1881 = move _1882 as *const u8 (Pointer(ArrayToPointer))) = *const {l4011} u8
        // 5341: b"s UNSATISFIAB ... st u8:   l4011 = UNIQUE | NON_NULL, (empty)
        // 5341: b"s UNSATISFIAB ... _char: typeof(_1880 = move _1881 as *const i8 (Misc)) = *const {l4012} i8
        // 5341: b"s UNSATISFIAB ... _char:   l4012 = UNIQUE | NON_NULL, (empty)
        // 5341: b"s UNSATISFIAB ... \n\0": typeof(_1882 = &raw const (*_1883)) = *const {l4010} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000011)) }]
        // 5341: b"s UNSATISFIAB ... \n\0":   l4010 = UNIQUE | NON_NULL, (empty)
        fflush(stdout);
        // 5342: stdout: typeof(_1885) = *mut {l3167} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5342: stdout:   l3167 = UNIQUE | NON_NULL, (empty)
        // 5342: stdout: typeof(_1886) = *mut {l3169} *mut {l3170} DefId(0:623 ~ treengeling[2d04]::_IO_FILE)
        // 5342: stdout:   l3169 = UNIQUE | NON_NULL, (empty)
        // 5342: stdout:   l3170 = UNIQUE | NON_NULL, (empty)
    } else {
        node = newnode(0 as *mut Node, 0 as libc::c_int);
        // 5344: newnode(0 as *m ... _int): typeof(_1887) = *mut {l3172} DefId(0:777 ~ treengeling[2d04]::Node)
        // 5344: newnode(0 as *m ... _int):   l3172 = UNIQUE | NON_NULL, (empty)
        // 5344: 0 as *mut Node: typeof(_1888) = *mut {l3174} DefId(0:777 ~ treengeling[2d04]::Node)
        // 5344: 0 as *mut Node:   l3174 = UNIQUE | NON_NULL, (empty)
        // 5344: 0 as *mut Node: typeof(_1888 = const 0_usize as *mut Node (PointerFromExposedAddress)) = *mut {l4013} DefId(0:777 ~ treengeling[2d04]::Node)
        // 5344: 0 as *mut Node:   l4013 = UNIQUE | NON_NULL, (empty)
        if noparallel == 0 {
        // 5345: noparallel: typeof(_1893) = *mut {l3180} i32
        // 5345: noparallel:   l3180 = UNIQUE | NON_NULL, (empty)
            startparallel((*node).lgl);
            // 5346: (*node).lgl: typeof(_1895) = *mut {l3183} LGL
            // 5346: (*node).lgl:   l3183 = UNIQUE | NON_NULL, (empty)
        }
        lglsetopt(
            (*node).lgl,
            // 5349: (*node).lgl: typeof(_1897) = *mut {l3186} LGL
            // 5349: (*node).lgl:   l3186 = UNIQUE | NON_NULL, (empty)
            b"block\0" as *const u8 as *const libc::c_char,
            // 5350: b"block\0" as * ... _char: typeof(_1898) = *const {l3188} i8
            // 5350: b"block\0" as * ... _char:   l3188 = UNIQUE | NON_NULL, (empty)
            // 5350: b"block\0" as * ... st u8: typeof(_1899) = *const {l3190} u8
            // 5350: b"block\0" as * ... st u8:   l3190 = UNIQUE | NON_NULL, (empty)
            // 5350: b"block\0": typeof(_1900) = *const {l3192} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 5350: b"block\0":   l3192 = UNIQUE | NON_NULL, (empty)
            // 5350: b"block\0": typeof(_1901) = & {l3194} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 5350: b"block\0":   l3194 = UNIQUE | NON_NULL, FIXED
            // 5350: b"block\0" as * ... _char: typeof(_1898 = move _1899 as *const i8 (Misc)) = *const {l4017} i8
            // 5350: b"block\0" as * ... _char:   l4017 = UNIQUE | NON_NULL, (empty)
            // 5350: b"block\0" as * ... st u8: typeof(_1899 = move _1900 as *const u8 (Pointer(ArrayToPointer))) = *const {l4016} u8
            // 5350: b"block\0" as * ... st u8:   l4016 = UNIQUE | NON_NULL, (empty)
            // 5350: b"block\0": typeof(_1901 = const b"block\x00") = & {l4014} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 5350: b"block\0":   l4014 = UNIQUE | NON_NULL, (empty)
            // 5350: b"block\0": typeof(_1900 = &raw const (*_1901)) = *const {l4015} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000006)) }]
            // 5350: b"block\0":   l4015 = UNIQUE | NON_NULL, (empty)
            0 as libc::c_int,
        );
        clim = initclim;
        // 5353: initclim: typeof(_1904) = *mut {l3198} i32
        // 5353: initclim:   l3198 = UNIQUE | NON_NULL, (empty)
        // 5353: clim: typeof(_1905) = *mut {l3200} i32
        // 5353: clim:   l3200 = UNIQUE | NON_NULL, (empty)
        sumclims += clim as int64_t;
        // 5354: clim: typeof(_1908) = *mut {l3204} i32
        // 5354: clim:   l3204 = UNIQUE | NON_NULL, (empty)
        // 5354: sumclims: typeof(_1909) = *mut {l3206} i64
        // 5354: sumclims:   l3206 = UNIQUE | NON_NULL, (empty)
        report();
        res = flush();
        if res == 0 {
            search();
            loop {
                res = finish();
                if !(res == 0) {
                    break;
                }
                incround();
                simp();
                res = flush();
                if res != 0 {
                    break;
                }
                lookahead();
                split();
                res = flush();
                if res != 0 {
                    break;
                }
                report();
                updateclim();
                search();
            }
        }
        if noparallel == 0 {
        // 5381: noparallel: typeof(_1943) = *mut {l3241} i32
        // 5381: noparallel:   l3241 = UNIQUE | NON_NULL, (empty)
            joinparallel();
            releaseparallel();
        }
        msg(b"\0" as *const u8 as *const libc::c_char);
        // 5385: b"\0" as *const ... _char: typeof(_1947) = *const {l3246} i8
        // 5385: b"\0" as *const ... _char:   l3246 = UNIQUE | NON_NULL, (empty)
        // 5385: b"\0" as *const u8: typeof(_1948) = *const {l3248} u8
        // 5385: b"\0" as *const u8:   l3248 = UNIQUE | NON_NULL, (empty)
        // 5385: b"\0": typeof(_1949) = *const {l3250} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 5385: b"\0":   l3250 = UNIQUE | NON_NULL, (empty)
        // 5385: b"\0": typeof(_1950) = & {l3252} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 5385: b"\0":   l3252 = UNIQUE | NON_NULL, FIXED
        // 5385: b"\0" as *const ... _char: typeof(_1947 = move _1948 as *const i8 (Misc)) = *const {l4021} i8
        // 5385: b"\0" as *const ... _char:   l4021 = UNIQUE | NON_NULL, (empty)
        // 5385: b"\0": typeof(_1949 = &raw const (*_1950)) = *const {l4019} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 5385: b"\0":   l4019 = UNIQUE | NON_NULL, (empty)
        // 5385: b"\0" as *const u8: typeof(_1948 = move _1949 as *const u8 (Pointer(ArrayToPointer))) = *const {l4020} u8
        // 5385: b"\0" as *const u8:   l4020 = UNIQUE | NON_NULL, (empty)
        // 5385: b"\0": typeof(_1950 = const b"\x00") = & {l4018} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
        // 5385: b"\0":   l4018 = UNIQUE | NON_NULL, (empty)
        msg(
            b"cleaning up after %d rounds\0" as *const u8 as *const libc::c_char,
            // 5387: b"cleaning up a ... _char: typeof(_1952) = *const {l3255} i8
            // 5387: b"cleaning up a ... _char:   l3255 = UNIQUE | NON_NULL, (empty)
            // 5387: b"cleaning up a ... st u8: typeof(_1953) = *const {l3257} u8
            // 5387: b"cleaning up a ... st u8:   l3257 = UNIQUE | NON_NULL, (empty)
            // 5387: b"cleaning up a ... ds\0": typeof(_1954) = *const {l3259} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 5387: b"cleaning up a ... ds\0":   l3259 = UNIQUE | NON_NULL, (empty)
            // 5387: b"cleaning up a ... ds\0": typeof(_1955) = & {l3261} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 5387: b"cleaning up a ... ds\0":   l3261 = UNIQUE | NON_NULL, FIXED
            // 5387: b"cleaning up a ... ds\0": typeof(_1954 = &raw const (*_1955)) = *const {l4023} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 5387: b"cleaning up a ... ds\0":   l4023 = UNIQUE | NON_NULL, (empty)
            // 5387: b"cleaning up a ... ds\0": typeof(_1955 = const b"cleaning up after %d rounds\x00") = & {l4022} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000001c)) }]
            // 5387: b"cleaning up a ... ds\0":   l4022 = UNIQUE | NON_NULL, (empty)
            // 5387: b"cleaning up a ... st u8: typeof(_1953 = move _1954 as *const u8 (Pointer(ArrayToPointer))) = *const {l4024} u8
            // 5387: b"cleaning up a ... st u8:   l4024 = UNIQUE | NON_NULL, (empty)
            // 5387: b"cleaning up a ... _char: typeof(_1952 = move _1953 as *const i8 (Misc)) = *const {l4025} i8
            // 5387: b"cleaning up a ... _char:   l4025 = UNIQUE | NON_NULL, (empty)
            round,
            // 5388: round: typeof(_1957) = *mut {l3264} i32
            // 5388: round:   l3264 = UNIQUE | NON_NULL, (empty)
        );
        while numnodes != 0 {
        // 5390: numnodes: typeof(_1961) = *mut {l3269} i32
        // 5390: numnodes:   l3269 = UNIQUE | NON_NULL, (empty)
            delnode(*nodes.offset(0 as libc::c_int as isize));
            // 5391: *nodes.offset(0 ... size): typeof(_1963) = *mut {l3272} DefId(0:777 ~ treengeling[2d04]::Node)
            // 5391: *nodes.offset(0 ... size):   l3272 = UNIQUE | NON_NULL, (empty)
            // 5391: nodes.offset(0  ... size): typeof(_1964) = *mut {l3274} *mut {l3275} DefId(0:777 ~ treengeling[2d04]::Node)
            // 5391: nodes.offset(0  ... size):   l3274 = UNIQUE | NON_NULL, (empty)
            // 5391: nodes.offset(0  ... size):   l3275 = UNIQUE | NON_NULL, (empty)
            // 5391: nodes: typeof(_1965) = *mut {l3277} *mut {l3278} DefId(0:777 ~ treengeling[2d04]::Node)
            // 5391: nodes:   l3277 = UNIQUE | NON_NULL, (empty)
            // 5391: nodes:   l3278 = UNIQUE | NON_NULL, (empty)
            // 5391: nodes: typeof(_1966) = *mut {l3280} *mut {l3281} *mut {l3282} DefId(0:777 ~ treengeling[2d04]::Node)
            // 5391: nodes:   l3280 = UNIQUE | NON_NULL, (empty)
            // 5391: nodes:   l3281 = UNIQUE | NON_NULL, (empty)
            // 5391: nodes:   l3282 = UNIQUE | NON_NULL, (empty)
        }
        loop {
            leaf = deqleaf();
            // 5394: deqleaf(): typeof(_1972) = *mut {l3289} DefId(0:794 ~ treengeling[2d04]::Leaf)
            // 5394: deqleaf():   l3289 = UNIQUE | NON_NULL, (empty)
            if leaf.is_null() {
            // 5395: leaf: typeof(_1975) = *mut {l3293} DefId(0:794 ~ treengeling[2d04]::Leaf)
            // 5395: leaf:   l3293 = UNIQUE | NON_NULL, (empty)
                break;
            }
            deleaf(leaf);
            // 5398: leaf: typeof(_1978) = *mut {l3297} DefId(0:794 ~ treengeling[2d04]::Leaf)
            // 5398: leaf:   l3297 = UNIQUE | NON_NULL, (empty)
        }
    }
    lglrelease(root);
    // 5401: root: typeof(_1980) = *mut {l3300} LGL
    // 5401: root:   l3300 = UNIQUE | NON_NULL, (empty)
    // 5401: root: typeof(_1981) = *mut {l3302} *mut {l3303} LGL
    // 5401: root:   l3302 = UNIQUE | NON_NULL, (empty)
    // 5401: root:   l3303 = UNIQUE | NON_NULL, (empty)
    resetsighandlers();
    stats();
    let mut BYTES: size_t = (sizejobs as libc::c_ulong)
    // 5404: sizejobs: typeof(_1987) = *mut {l3310} i32
    // 5404: sizejobs:   l3310 = UNIQUE | NON_NULL, (empty)
        .wrapping_mul(::core::mem::size_of::<*mut Job>() as libc::c_ulong);
    decmem(BYTES);
    free(jobs as *mut libc::c_void);
    // 5407: jobs as *mut li ... _void: typeof(_1993) = *mut {l3317} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 5407: jobs as *mut li ... _void:   l3317 = UNIQUE | NON_NULL, (empty)
    // 5407: jobs: typeof(_1994) = *mut {l3319} *mut {l3320} DefId(0:822 ~ treengeling[2d04]::Job)
    // 5407: jobs:   l3319 = UNIQUE | NON_NULL, (empty)
    // 5407: jobs:   l3320 = UNIQUE | NON_NULL, (empty)
    // 5407: jobs: typeof(_1995) = *mut {l3322} *mut {l3323} *mut {l3324} DefId(0:822 ~ treengeling[2d04]::Job)
    // 5407: jobs:   l3322 = UNIQUE | NON_NULL, (empty)
    // 5407: jobs:   l3323 = UNIQUE | NON_NULL, (empty)
    // 5407: jobs:   l3324 = UNIQUE | NON_NULL, (empty)
    // 5407: jobs as *mut li ... _void: typeof(_1993 = move _1994 as *mut libc::c_void (Misc)) = *mut {l4026} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 5407: jobs as *mut li ... _void:   l4026 = UNIQUE | NON_NULL, (empty)
    let mut BYTES_0: size_t = (sizenodes as libc::c_ulong)
    // 5408: sizenodes: typeof(_1999) = *mut {l3329} i32
    // 5408: sizenodes:   l3329 = UNIQUE | NON_NULL, (empty)
        .wrapping_mul(::core::mem::size_of::<*mut Node>() as libc::c_ulong);
    decmem(BYTES_0);
    free(nodes as *mut libc::c_void);
    // 5411: nodes as *mut l ... _void: typeof(_2005) = *mut {l3336} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 5411: nodes as *mut l ... _void:   l3336 = UNIQUE | NON_NULL, (empty)
    // 5411: nodes: typeof(_2006) = *mut {l3338} *mut {l3339} DefId(0:777 ~ treengeling[2d04]::Node)
    // 5411: nodes:   l3338 = UNIQUE | NON_NULL, (empty)
    // 5411: nodes:   l3339 = UNIQUE | NON_NULL, (empty)
    // 5411: nodes: typeof(_2007) = *mut {l3341} *mut {l3342} *mut {l3343} DefId(0:777 ~ treengeling[2d04]::Node)
    // 5411: nodes:   l3341 = UNIQUE | NON_NULL, (empty)
    // 5411: nodes:   l3342 = UNIQUE | NON_NULL, (empty)
    // 5411: nodes:   l3343 = UNIQUE | NON_NULL, (empty)
    // 5411: nodes as *mut l ... _void: typeof(_2005 = move _2006 as *mut libc::c_void (Misc)) = *mut {l4027} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 5411: nodes as *mut l ... _void:   l4027 = UNIQUE | NON_NULL, (empty)
    let mut BYTES_1: size_t = (sizeconfstack as libc::c_ulong)
    // 5412: sizeconfstack: typeof(_2011) = *mut {l3348} i32
    // 5412: sizeconfstack:   l3348 = UNIQUE | NON_NULL, (empty)
        .wrapping_mul(::core::mem::size_of::<int64_t>() as libc::c_ulong);
    decmem(BYTES_1);
    free(confstack as *mut libc::c_void);
    // 5415: confstack as *m ... _void: typeof(_2017) = *mut {l3355} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 5415: confstack as *m ... _void:   l3355 = UNIQUE | NON_NULL, (empty)
    // 5415: confstack: typeof(_2018) = *mut {l3357} i64
    // 5415: confstack:   l3357 = UNIQUE | NON_NULL, (empty)
    // 5415: confstack: typeof(_2019) = *mut {l3359} *mut {l3360} i64
    // 5415: confstack:   l3359 = UNIQUE | NON_NULL, (empty)
    // 5415: confstack:   l3360 = UNIQUE | NON_NULL, (empty)
    // 5415: confstack as *m ... _void: typeof(_2017 = move _2018 as *mut libc::c_void (Misc)) = *mut {l4028} DefId(2:5583 ~ core[480a]::ffi::c_void)
    // 5415: confstack as *m ... _void:   l4028 = UNIQUE | NON_NULL, (empty)
    msg(b"\0" as *const u8 as *const libc::c_char);
    // 5416: b"\0" as *const ... _char: typeof(_2021) = *const {l3363} i8
    // 5416: b"\0" as *const ... _char:   l3363 = UNIQUE | NON_NULL, (empty)
    // 5416: b"\0" as *const u8: typeof(_2022) = *const {l3365} u8
    // 5416: b"\0" as *const u8:   l3365 = UNIQUE | NON_NULL, (empty)
    // 5416: b"\0": typeof(_2023) = *const {l3367} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5416: b"\0":   l3367 = UNIQUE | NON_NULL, (empty)
    // 5416: b"\0": typeof(_2024) = & {l3369} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5416: b"\0":   l3369 = UNIQUE | NON_NULL, FIXED
    // 5416: b"\0": typeof(_2024 = const b"\x00") = & {l4029} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5416: b"\0":   l4029 = UNIQUE | NON_NULL, (empty)
    // 5416: b"\0": typeof(_2023 = &raw const (*_2024)) = *const {l4030} [u8; Const { ty: usize, kind: Value(Leaf(0x0000000000000001)) }]
    // 5416: b"\0":   l4030 = UNIQUE | NON_NULL, (empty)
    // 5416: b"\0" as *const ... _char: typeof(_2021 = move _2022 as *const i8 (Misc)) = *const {l4032} i8
    // 5416: b"\0" as *const ... _char:   l4032 = UNIQUE | NON_NULL, (empty)
    // 5416: b"\0" as *const u8: typeof(_2022 = move _2023 as *const u8 (Pointer(ArrayToPointer))) = *const {l4031} u8
    // 5416: b"\0" as *const u8:   l4031 = UNIQUE | NON_NULL, (empty)
    msg(b"result %d\0" as *const u8 as *const libc::c_char, res);
    // 5417: b"result %d\0"  ... _char: typeof(_2026) = *const {l3372} i8
    // 5417: b"result %d\0"  ... _char:   l3372 = UNIQUE | NON_NULL, (empty)
    // 5417: b"result %d\0"  ... st u8: typeof(_2027) = *const {l3374} u8
    // 5417: b"result %d\0"  ... st u8:   l3374 = UNIQUE | NON_NULL, (empty)
    // 5417: b"result %d\0": typeof(_2028) = *const {l3376} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 5417: b"result %d\0":   l3376 = UNIQUE | NON_NULL, (empty)
    // 5417: b"result %d\0": typeof(_2029) = & {l3378} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 5417: b"result %d\0":   l3378 = UNIQUE | NON_NULL, FIXED
    // 5417: b"result %d\0"  ... st u8: typeof(_2027 = move _2028 as *const u8 (Pointer(ArrayToPointer))) = *const {l4035} u8
    // 5417: b"result %d\0"  ... st u8:   l4035 = UNIQUE | NON_NULL, (empty)
    // 5417: b"result %d\0": typeof(_2028 = &raw const (*_2029)) = *const {l4034} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 5417: b"result %d\0":   l4034 = UNIQUE | NON_NULL, (empty)
    // 5417: b"result %d\0"  ... _char: typeof(_2026 = move _2027 as *const i8 (Misc)) = *const {l4036} i8
    // 5417: b"result %d\0"  ... _char:   l4036 = UNIQUE | NON_NULL, (empty)
    // 5417: b"result %d\0": typeof(_2029 = const b"result %d\x00") = & {l4033} [u8; Const { ty: usize, kind: Value(Leaf(0x000000000000000a)) }]
    // 5417: b"result %d\0":   l4033 = UNIQUE | NON_NULL, (empty)
    return res;
}
pub fn main() {
    let mut args: Vec<*mut libc::c_char> = Vec::new();
    // 5421: mut args: typeof(_1) = DefId(5:7780 ~ alloc[3757]::vec::Vec)<*mut {l1} i8, DefId(5:8106 ~ alloc[3757]::alloc::Global)>
    // 5421: mut args:   l1 = UNIQUE | NON_NULL, (empty)
    for arg in ::std::env::args() {
    // 5422: ::std::env::args(): typeof(_9) = &mut {l10} DefId(1:2460 ~ std[c5ae]::env::Args)
    // 5422: ::std::env::args():   l10 = UNIQUE | NON_NULL, (empty)
    // 5422: ::std::env::args(): typeof(_10) = &mut {l12} DefId(1:2460 ~ std[c5ae]::env::Args)
    // 5422: ::std::env::args():   l12 = UNIQUE | NON_NULL, (empty)
    // 5422: ::std::env::args(): typeof(_10 = &mut _5) = &mut {l51} DefId(1:2460 ~ std[c5ae]::env::Args)
    // 5422: ::std::env::args():   l51 = UNIQUE | NON_NULL, (empty)
    // 5422: ::std::env::args(): typeof(_9 = &mut (*_10)) = &mut {l52} DefId(1:2460 ~ std[c5ae]::env::Args)
    // 5422: ::std::env::args():   l52 = UNIQUE | NON_NULL, (empty)
        args.push(
        // 5423: args.push( (::s ... (), ): typeof(_15) = &mut {l18} DefId(5:7780 ~ alloc[3757]::vec::Vec)<*mut {l19} i8, DefId(5:8106 ~ alloc[3757]::alloc::Global)>
        // 5423: args.push( (::s ... (), ):   l18 = UNIQUE | NON_NULL, (empty)
        // 5423: args.push( (::s ... (), ):   l19 = UNIQUE | NON_NULL, (empty)
        // 5423: args.push( (::s ... (), ): typeof(_15 = &mut _1) = &mut {l53} DefId(5:7780 ~ alloc[3757]::vec::Vec)<*mut {l54} i8, DefId(5:8106 ~ alloc[3757]::alloc::Global)>
        // 5423: args.push( (::s ... (), ):   l53 = UNIQUE | NON_NULL, (empty)
        // 5423: args.push( (::s ... (), ):   l54 = UNIQUE | NON_NULL, (empty)
            (::std::ffi::CString::new(arg))
            // 5424: (::std::ffi::CS ... raw(): typeof(_16) = *mut {l21} i8
            // 5424: (::std::ffi::CS ... raw():   l21 = UNIQUE | NON_NULL, (empty)
                .expect("Failed to convert argument into CString.")
                // 5425: "Failed to conv ... ing.": typeof(_20) = & {l26} str
                // 5425: "Failed to conv ... ing.":   l26 = UNIQUE | NON_NULL, (empty)
                // 5425: "Failed to conv ... ing.": typeof(_21) = & {l28} str
                // 5425: "Failed to conv ... ing.":   l28 = UNIQUE | NON_NULL, FIXED
                // 5425: "Failed to conv ... ing.": typeof(_21 = const "Failed to convert argument into CString.") = & {l55} str
                // 5425: "Failed to conv ... ing.":   l55 = UNIQUE | NON_NULL, (empty)
                // 5425: "Failed to conv ... ing.": typeof(_20 = &(*_21)) = & {l56} str
                // 5425: "Failed to conv ... ing.":   l56 = UNIQUE | NON_NULL, (empty)
                .into_raw(),
        );
    }
    args.push(::core::ptr::null_mut());
    // 5429: args.push(::cor ... ut()): typeof(_23) = &mut {l31} DefId(5:7780 ~ alloc[3757]::vec::Vec)<*mut {l32} i8, DefId(5:8106 ~ alloc[3757]::alloc::Global)>
    // 5429: args.push(::cor ... ut()):   l31 = UNIQUE | NON_NULL, (empty)
    // 5429: args.push(::cor ... ut()):   l32 = UNIQUE | NON_NULL, (empty)
    // 5429: ::core::ptr::nu ... mut(): typeof(_24) = *mut {l34} i8
    // 5429: ::core::ptr::nu ... mut():   l34 = UNIQUE | NON_NULL, (empty)
    // 5429: args.push(::cor ... ut()): typeof(_23 = &mut _1) = &mut {l57} DefId(5:7780 ~ alloc[3757]::vec::Vec)<*mut {l58} i8, DefId(5:8106 ~ alloc[3757]::alloc::Global)>
    // 5429: args.push(::cor ... ut()):   l57 = UNIQUE | NON_NULL, (empty)
    // 5429: args.push(::cor ... ut()):   l58 = UNIQUE | NON_NULL, (empty)
    unsafe {
        ::std::process::exit(main_0(
            (args.len() - 1) as libc::c_int,
            // 5432: args.len(): typeof(_30) = & {l41} DefId(5:7780 ~ alloc[3757]::vec::Vec)<*mut {l42} i8, DefId(5:8106 ~ alloc[3757]::alloc::Global)>
            // 5432: args.len():   l41 = UNIQUE | NON_NULL, (empty)
            // 5432: args.len():   l42 = UNIQUE | NON_NULL, (empty)
            // 5432: args.len(): typeof(_30 = &_1) = & {l59} DefId(5:7780 ~ alloc[3757]::vec::Vec)<*mut {l60} i8, DefId(5:8106 ~ alloc[3757]::alloc::Global)>
            // 5432: args.len():   l59 = UNIQUE | NON_NULL, (empty)
            // 5432: args.len():   l60 = UNIQUE | NON_NULL, (empty)
            args.as_mut_ptr() as *mut *mut libc::c_char,
            // 5433: args.as_mut_ptr ... _char: typeof(_32) = *mut {l45} *mut {l46} i8
            // 5433: args.as_mut_ptr ... _char:   l45 = UNIQUE | NON_NULL, (empty)
            // 5433: args.as_mut_ptr ... _char:   l46 = UNIQUE | NON_NULL, (empty)
            // 5433: args.as_mut_ptr(): typeof(_33) = &mut {l48} DefId(5:7780 ~ alloc[3757]::vec::Vec)<*mut {l49} i8, DefId(5:8106 ~ alloc[3757]::alloc::Global)>
            // 5433: args.as_mut_ptr():   l48 = UNIQUE | NON_NULL, (empty)
            // 5433: args.as_mut_ptr():   l49 = UNIQUE | NON_NULL, (empty)
            // 5433: args.as_mut_ptr(): typeof(_33 = &mut _1) = &mut {l61} DefId(5:7780 ~ alloc[3757]::vec::Vec)<*mut {l62} i8, DefId(5:8106 ~ alloc[3757]::alloc::Global)>
            // 5433: args.as_mut_ptr():   l61 = UNIQUE | NON_NULL, (empty)
            // 5433: args.as_mut_ptr():   l62 = UNIQUE | NON_NULL, (empty)
        ) as i32)
    }
}
unsafe extern "C" fn run_static_initializers() {
    nopts = (::core::mem::size_of::<[Opt; 3]>() as libc::c_ulong)
    // 5438: nopts: typeof(_6) = *mut {l6} i32
    // 5438: nopts:   l6 = READ | WRITE | UNIQUE | NON_NULL, (empty)
        .wrapping_div(::core::mem::size_of::<Opt>() as libc::c_ulong) as libc::c_int;
}
#[used]
#[cfg_attr(target_os = "linux", link_section = ".init_array")]
#[cfg_attr(target_os = "windows", link_section = ".CRT$XIB")]
#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];
